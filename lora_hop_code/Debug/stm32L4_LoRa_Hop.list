
stm32L4_LoRa_Hop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08008474  08008474  00009474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085d4  080085d4  0000a084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080085d4  080085d4  000095d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085dc  080085dc  0000a084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085dc  080085dc  000095dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085e0  080085e0  000095e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080085e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002010  20000084  08008668  0000a084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002094  08008668  0000a094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159b8  00000000  00000000  0000a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003117  00000000  00000000  0001fa6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00022b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea3  00000000  00000000  00023e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029699  00000000  00000000  00024d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c91  00000000  00000000  0004e3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f68d8  00000000  00000000  00064035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a90d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000540c  00000000  00000000  0015a950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0015fd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800845c 	.word	0x0800845c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	0800845c 	.word	0x0800845c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <init_LL>:
 *
 * @param LL_handler* h_LL  linked list handler.
 *
 * @return: none
 */
void init_LL(LL_handler* h_LL){
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  h_LL->head = 0;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2200      	movs	r2, #0
 8000500:	801a      	strh	r2, [r3, #0]
  h_LL->tail = 0;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2200      	movs	r2, #0
 8000506:	805a      	strh	r2, [r3, #2]
  h_LL->ins_idx = 0;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	809a      	strh	r2, [r3, #4]

  h_LL->ll_status = LL_EMPTY;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2201      	movs	r2, #1
 8000512:	731a      	strb	r2, [r3, #12]

  // init free node sequence:
  for(uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000514:	2300      	movs	r3, #0
 8000516:	81fb      	strh	r3, [r7, #14]
 8000518:	e00b      	b.n	8000532 <init_LL+0x3e>

    h_LL->ll_buff[i].next_free_idx = i + 1;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	689a      	ldr	r2, [r3, #8]
 800051e:	89fb      	ldrh	r3, [r7, #14]
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	4413      	add	r3, r2
 8000524:	89fa      	ldrh	r2, [r7, #14]
 8000526:	3201      	adds	r2, #1
 8000528:	b292      	uxth	r2, r2
 800052a:	80da      	strh	r2, [r3, #6]
  for(uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 800052c:	89fb      	ldrh	r3, [r7, #14]
 800052e:	3301      	adds	r3, #1
 8000530:	81fb      	strh	r3, [r7, #14]
 8000532:	89fb      	ldrh	r3, [r7, #14]
 8000534:	2b63      	cmp	r3, #99	@ 0x63
 8000536:	d9f0      	bls.n	800051a <init_LL+0x26>
  }

  // link last element to the flag "LL IS FULL"
  h_LL->ll_buff[BUFF_FIFO_SIZE - 1].next_free_idx = LL_IDX_IS_FULL;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	f503 7346 	add.w	r3, r3, #792	@ 0x318
 8000540:	2264      	movs	r2, #100	@ 0x64
 8000542:	80da      	strh	r2, [r3, #6]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <add_pkt_LL>:
 * @param uint16_t    idx_main_buff  index in the main RX buffer associated to this element in the LL.
 *
 * @return: - LL_IDX_IS_FULL if the LL is full;
 *          - Insertion index on success;
 */
uint16_t add_pkt_LL(LL_handler* h_LL, uint16_t idx_main_buff){
 8000550:	b480      	push	{r7}
 8000552:	b087      	sub	sp, #28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	807b      	strh	r3, [r7, #2]
  if (h_LL->ll_status == LL_FULL) return LL_IDX_IS_FULL;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	7b1b      	ldrb	r3, [r3, #12]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d101      	bne.n	8000568 <add_pkt_LL+0x18>
 8000564:	2364      	movs	r3, #100	@ 0x64
 8000566:	e03c      	b.n	80005e2 <add_pkt_LL+0x92>

  // LL not full...

  // default node added when LL is empty
  LL_node new_node = {
 8000568:	887b      	ldrh	r3, [r7, #2]
 800056a:	81bb      	strh	r3, [r7, #12]
 800056c:	2367      	movs	r3, #103	@ 0x67
 800056e:	81fb      	strh	r3, [r7, #14]
 8000570:	2366      	movs	r3, #102	@ 0x66
 8000572:	823b      	strh	r3, [r7, #16]
 8000574:	2300      	movs	r3, #0
 8000576:	827b      	strh	r3, [r7, #18]
    .next_element_idx = LL_IDX_IS_TAIL,
    .prev_element_idx = LL_IDX_IS_HEAD,
    .next_free_idx = 0  // used only when freeing up slots
  };

  uint16_t old_tail_idx = h_LL->tail;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	885b      	ldrh	r3, [r3, #2]
 800057c:	82fb      	strh	r3, [r7, #22]
  uint16_t new_tail_idx = h_LL->ins_idx;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	889b      	ldrh	r3, [r3, #4]
 8000582:	82bb      	strh	r3, [r7, #20]

  // if some nodes are already in the LL -> link the new one
  if (h_LL->ll_status != LL_EMPTY){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	7b1b      	ldrb	r3, [r3, #12]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d00b      	beq.n	80005a4 <add_pkt_LL+0x54>
    // old tail becomes the previous node of the new tail
    new_node.prev_element_idx = old_tail_idx;
 800058c:	8afb      	ldrh	r3, [r7, #22]
 800058e:	823b      	strh	r3, [r7, #16]

    h_LL->ll_buff[old_tail_idx].next_element_idx = new_tail_idx;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	689a      	ldr	r2, [r3, #8]
 8000594:	8afb      	ldrh	r3, [r7, #22]
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	4413      	add	r3, r2
 800059a:	8aba      	ldrh	r2, [r7, #20]
 800059c:	805a      	strh	r2, [r3, #2]
    h_LL->tail = new_tail_idx;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	8aba      	ldrh	r2, [r7, #20]
 80005a2:	805a      	strh	r2, [r3, #2]
  }

  // update next insertion index
  h_LL->ins_idx = h_LL->ll_buff[new_tail_idx].next_free_idx;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	8abb      	ldrh	r3, [r7, #20]
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	4413      	add	r3, r2
 80005ae:	88da      	ldrh	r2, [r3, #6]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	809a      	strh	r2, [r3, #4]

  // update LL status after inserion
  if (h_LL->ins_idx == LL_IDX_IS_FULL) h_LL->ll_status = LL_FULL;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	889b      	ldrh	r3, [r3, #4]
 80005b8:	2b64      	cmp	r3, #100	@ 0x64
 80005ba:	d103      	bne.n	80005c4 <add_pkt_LL+0x74>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	731a      	strb	r2, [r3, #12]
 80005c2:	e002      	b.n	80005ca <add_pkt_LL+0x7a>
  else h_LL->ll_status = LL_AVAILABLE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2202      	movs	r2, #2
 80005c8:	731a      	strb	r2, [r3, #12]

  h_LL->ll_buff[new_tail_idx] = new_node;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	689a      	ldr	r2, [r3, #8]
 80005ce:	8abb      	ldrh	r3, [r7, #20]
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	4413      	add	r3, r2
 80005d4:	461a      	mov	r2, r3
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	cb03      	ldmia	r3!, {r0, r1}
 80005dc:	6010      	str	r0, [r2, #0]
 80005de:	6051      	str	r1, [r2, #4]

  return new_tail_idx;
 80005e0:	8abb      	ldrh	r3, [r7, #20]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	371c      	adds	r7, #28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <remove_pkt_LL>:
 * @param uint16_t    t_idx  index in the target buffer (LL internal buffer) to be removed.
 *
 * @return: - LL_IDX_IS_EMPTY if the LL is empty;
 *          - 0 on success;
 */
uint16_t remove_pkt_LL(LL_handler* h_LL, uint16_t t_idx){
 80005ee:	b480      	push	{r7}
 80005f0:	b085      	sub	sp, #20
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	460b      	mov	r3, r1
 80005f8:	807b      	strh	r3, [r7, #2]
  // if LL is empty no pkt can be removed
  if (h_LL->ll_status == LL_EMPTY) return LL_IDX_IS_EMPTY;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7b1b      	ldrb	r3, [r3, #12]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d101      	bne.n	8000606 <remove_pkt_LL+0x18>
 8000602:	2365      	movs	r3, #101	@ 0x65
 8000604:	e055      	b.n	80006b2 <remove_pkt_LL+0xc4>

  // at least one node exists...

  LL_node c_node = h_LL->ll_buff[t_idx];
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	689a      	ldr	r2, [r3, #8]
 800060a:	887b      	ldrh	r3, [r7, #2]
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	441a      	add	r2, r3
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	6810      	ldr	r0, [r2, #0]
 8000616:	6851      	ldr	r1, [r2, #4]
 8000618:	c303      	stmia	r3!, {r0, r1}

  if ((c_node.prev_element_idx == LL_IDX_IS_HEAD) & (c_node.next_element_idx == LL_IDX_IS_TAIL)){
 800061a:	89bb      	ldrh	r3, [r7, #12]
 800061c:	2b66      	cmp	r3, #102	@ 0x66
 800061e:	bf0c      	ite	eq
 8000620:	2301      	moveq	r3, #1
 8000622:	2300      	movne	r3, #0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	897b      	ldrh	r3, [r7, #10]
 8000628:	2b67      	cmp	r3, #103	@ 0x67
 800062a:	bf0c      	ite	eq
 800062c:	2301      	moveq	r3, #1
 800062e:	2300      	movne	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	4013      	ands	r3, r2
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <remove_pkt_LL+0x54>
    // last node in the LL
    h_LL->ll_status = LL_EMPTY;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	731a      	strb	r2, [r3, #12]
 8000640:	e02b      	b.n	800069a <remove_pkt_LL+0xac>

  } else {

    if (c_node.prev_element_idx == LL_IDX_IS_HEAD){         /* removing head element */
 8000642:	89bb      	ldrh	r3, [r7, #12]
 8000644:	2b66      	cmp	r3, #102	@ 0x66
 8000646:	d10b      	bne.n	8000660 <remove_pkt_LL+0x72>

      h_LL->head = c_node.next_element_idx;
 8000648:	897a      	ldrh	r2, [r7, #10]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	801a      	strh	r2, [r3, #0]
      h_LL->ll_buff[h_LL->head].prev_element_idx = LL_IDX_IS_HEAD;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689a      	ldr	r2, [r3, #8]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	4413      	add	r3, r2
 800065a:	2266      	movs	r2, #102	@ 0x66
 800065c:	809a      	strh	r2, [r3, #4]
 800065e:	e01c      	b.n	800069a <remove_pkt_LL+0xac>

    } else if (c_node.next_element_idx == LL_IDX_IS_TAIL){  /* removing tail element */
 8000660:	897b      	ldrh	r3, [r7, #10]
 8000662:	2b67      	cmp	r3, #103	@ 0x67
 8000664:	d10b      	bne.n	800067e <remove_pkt_LL+0x90>

      h_LL->tail = c_node.prev_element_idx;
 8000666:	89ba      	ldrh	r2, [r7, #12]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	805a      	strh	r2, [r3, #2]
      h_LL->ll_buff[h_LL->tail].next_element_idx = LL_IDX_IS_TAIL;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	689a      	ldr	r2, [r3, #8]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	885b      	ldrh	r3, [r3, #2]
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	4413      	add	r3, r2
 8000678:	2267      	movs	r2, #103	@ 0x67
 800067a:	805a      	strh	r2, [r3, #2]
 800067c:	e00d      	b.n	800069a <remove_pkt_LL+0xac>

    } else {                                                /* removing intermediate node */

      h_LL->ll_buff[c_node.prev_element_idx].next_element_idx = c_node.next_element_idx;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	689a      	ldr	r2, [r3, #8]
 8000682:	89bb      	ldrh	r3, [r7, #12]
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	4413      	add	r3, r2
 8000688:	897a      	ldrh	r2, [r7, #10]
 800068a:	805a      	strh	r2, [r3, #2]
      h_LL->ll_buff[c_node.next_element_idx].prev_element_idx = c_node.prev_element_idx;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	897b      	ldrh	r3, [r7, #10]
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	4413      	add	r3, r2
 8000696:	89ba      	ldrh	r2, [r7, #12]
 8000698:	809a      	strh	r2, [r3, #4]
    }
  }

  // Update free slot sequence for O(1) isnertions
  h_LL->ll_buff[t_idx].next_free_idx = h_LL->ins_idx;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	887b      	ldrh	r3, [r7, #2]
 80006a0:	00db      	lsls	r3, r3, #3
 80006a2:	4413      	add	r3, r2
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	8892      	ldrh	r2, [r2, #4]
 80006a8:	80da      	strh	r2, [r3, #6]
  h_LL->ins_idx = t_idx;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	887a      	ldrh	r2, [r7, #2]
 80006ae:	809a      	strh	r2, [r3, #4]

  return 0;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <get_head_LL>:
 * @param LL_handler* h_LL   linked list handler.
 *
 * @return: - LL_IDX_IS_EMPTY if the LL is empty;
 *          - index in main buffer on success;
 */
uint16_t get_head_LL(LL_handler* h_LL){
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  // return index in main buffer (RX FIFO) marked as head of the sequence
  if (h_LL->ll_status != LL_EMPTY) return h_LL->head;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	7b1b      	ldrb	r3, [r3, #12]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d002      	beq.n	80006d4 <get_head_LL+0x16>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	e000      	b.n	80006d6 <get_head_LL+0x18>

  // if LL is empty, return false index
  return LL_IDX_IS_EMPTY;
 80006d4:	2365      	movs	r3, #101	@ 0x65
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <get_tail_LL>:
 * @param LL_handler* h_LL   linked list handler.
 *
 * @return: - LL_IDX_IS_EMPTY if the LL is empty;
 *          - index in main buffer on success;
 */
uint16_t get_tail_LL(LL_handler* h_LL){
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
  // return index in main buffer (RX FIFO) marked as tail of the sequence
  if (h_LL->ll_status != LL_EMPTY) return h_LL->tail;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7b1b      	ldrb	r3, [r3, #12]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d002      	beq.n	80006f8 <get_tail_LL+0x16>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	885b      	ldrh	r3, [r3, #2]
 80006f6:	e000      	b.n	80006fa <get_tail_LL+0x18>

  // if LL is empty, return false index
  return LL_IDX_IS_EMPTY;
 80006f8:	2365      	movs	r3, #101	@ 0x65
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <LL_get_RXbuff_idx>:
 * @param LL_handler* h_LL   linked list handler.
 *
 * @return: - LL_IDX_IS_EMPTY if the LL is empty;
 *          - index in main buffer on success;
 */
uint16_t LL_get_RXbuff_idx(LL_handler* h_LL, uint16_t idx){
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
 800070e:	460b      	mov	r3, r1
 8000710:	807b      	strh	r3, [r7, #2]
  // return index in main buffer (RX FIFO) corresponding to this LL element
  return h_LL->ll_buff[idx].idx_rx_buff;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	689a      	ldr	r2, [r3, #8]
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	4413      	add	r3, r2
 800071c:	881b      	ldrh	r3, [r3, #0]
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <get_prev_LL>:
 *
 * @return: - LL_IDX_IS_EMPTY if the LL is empty;
 *          - index of next element otherwise.
 *            (OBS!!! if CURR element is head, prev element is LL_IDX_IS_HEAD.
 */
uint16_t get_prev_LL(LL_handler* h_LL, uint16_t curr_idx){
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	460b      	mov	r3, r1
 8000734:	807b      	strh	r3, [r7, #2]
  // return index of the next element in the LL
  if (h_LL->ll_status != LL_EMPTY) return h_LL->ll_buff[curr_idx].prev_element_idx;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	7b1b      	ldrb	r3, [r3, #12]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d006      	beq.n	800074c <get_prev_LL+0x22>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	689a      	ldr	r2, [r3, #8]
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	4413      	add	r3, r2
 8000748:	889b      	ldrh	r3, [r3, #4]
 800074a:	e000      	b.n	800074e <get_prev_LL+0x24>

  // if LL is empty, return false index
  return LL_IDX_IS_EMPTY;
 800074c:	2365      	movs	r3, #101	@ 0x65
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <on_rx_event>:
 *          STATUS FLAGS (in .status_flags field):
 *          - EVT_SCHEDULE_TX set if a new pkt has been added to the RX FIFO. The controller should TX
 *            that pkt (correpsoning to the tail in the LL TX buffer) in the next TX event.
 *
 */
events_flags on_rx_event(rfm95_handle_t* h_rfm, h_rx_tx* h_fifo){
 800075a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075c:	b0a3      	sub	sp, #140	@ 0x8c
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	6039      	str	r1, [r7, #0]

  /* track error flags */
  events_flags app_flags = {0};
 8000764:	2300      	movs	r3, #0
 8000766:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80

  /* strcuture to hold all the informations */
  bc_pkt rx_pkt = {0};
 800076a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800076e:	223e      	movs	r2, #62	@ 0x3e
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f007 fad8 	bl	8007d28 <memset>

  /* 1st track SNR and RSSI of the last received packet */
  int8_t  snr;
  int16_t rssi;
  if(!rfm95_getSNR(h_rfm, &snr))   app_flags.err_flags |= EVT_RFM_SPI_ERR;
 8000778:	f107 033f 	add.w	r3, r7, #63	@ 0x3f
 800077c:	4619      	mov	r1, r3
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f001 f96a 	bl	8001a58 <rfm95_getSNR>
 8000784:	4603      	mov	r3, r0
 8000786:	f083 0301 	eor.w	r3, r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d006      	beq.n	800079e <on_rx_event+0x44>
 8000790:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  if(!rfm95_getRSSI(h_rfm, &rssi)) app_flags.err_flags |= EVT_RFM_SPI_ERR;
 800079e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80007a2:	4619      	mov	r1, r3
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f001 f938 	bl	8001a1a <rfm95_getRSSI>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f083 0301 	eor.w	r3, r3, #1
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d006      	beq.n	80007c4 <on_rx_event+0x6a>
 80007b6:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

  /* set standby mode to read data from rfm95 */
  if(!rfm95_stdby(h_rfm)) app_flags.err_flags |= EVT_RFM_SPI_ERR;
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f001 f988 	bl	8001ada <rfm95_stdby>
 80007ca:	4603      	mov	r3, r0
 80007cc:	f083 0301 	eor.w	r3, r3, #1
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d006      	beq.n	80007e4 <on_rx_event+0x8a>
 80007d6:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

  /* read received data */
  if(!rfm95_receive(h_rfm, &rx_pkt.pl[0], &rx_pkt.pl_len))app_flags.err_flags |= EVT_RFM_RX_ERR;
 80007e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007e8:	f103 0208 	add.w	r2, r3, #8
 80007ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007f0:	3309      	adds	r3, #9
 80007f2:	4619      	mov	r1, r3
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f001 fb03 	bl	8001e00 <rfm95_receive>
 80007fa:	4603      	mov	r3, r0
 80007fc:	f083 0301 	eor.w	r3, r3, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d006      	beq.n	8000814 <on_rx_event+0xba>
 8000806:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800080a:	f043 0302 	orr.w	r3, r3, #2
 800080e:	b2db      	uxtb	r3, r3
 8000810:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

  /* set RFM95 back to continuous RX mode */
  if(!rfm95_enter_rx_mode(h_rfm)) app_flags.err_flags |= EVT_RFM_SPI_ERR;
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f001 fa82 	bl	8001d1e <rfm95_enter_rx_mode>
 800081a:	4603      	mov	r3, r0
 800081c:	f083 0301 	eor.w	r3, r3, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d006      	beq.n	8000834 <on_rx_event+0xda>
 8000826:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

  /* If any error occurred, stop code here */
  //if(app_flags.err_flags != 0) return app_flags;

  uint8_t sample_buffer[ENV_NODE_PYL_SIZE + 5];
  for (uint16_t i = 0; i < ENV_NODE_PYL_SIZE + 5; i++) {
 8000834:	2300      	movs	r3, #0
 8000836:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800083a:	e00d      	b.n	8000858 <on_rx_event+0xfe>
    sample_buffer[i] = (uint8_t)(i & 0xFF);  // fill with some pattern
 800083c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000840:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	3388      	adds	r3, #136	@ 0x88
 8000848:	443b      	add	r3, r7
 800084a:	f803 2c7c 	strb.w	r2, [r3, #-124]
  for (uint16_t i = 0; i < ENV_NODE_PYL_SIZE + 5; i++) {
 800084e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000852:	3301      	adds	r3, #1
 8000854:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8000858:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800085c:	2b2c      	cmp	r3, #44	@ 0x2c
 800085e:	d9ed      	bls.n	800083c <on_rx_event+0xe2>
  }

  memcpy(rx_pkt.pl, sample_buffer, ENV_NODE_PYL_SIZE + 5);
 8000860:	f107 040c 	add.w	r4, r7, #12
 8000864:	f107 0c49 	add.w	ip, r7, #73	@ 0x49
 8000868:	f104 0e20 	add.w	lr, r4, #32
 800086c:	4665      	mov	r5, ip
 800086e:	4626      	mov	r6, r4
 8000870:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000872:	6028      	str	r0, [r5, #0]
 8000874:	6069      	str	r1, [r5, #4]
 8000876:	60aa      	str	r2, [r5, #8]
 8000878:	60eb      	str	r3, [r5, #12]
 800087a:	3410      	adds	r4, #16
 800087c:	f10c 0c10 	add.w	ip, ip, #16
 8000880:	4574      	cmp	r4, lr
 8000882:	d1f3      	bne.n	800086c <on_rx_event+0x112>
 8000884:	4665      	mov	r5, ip
 8000886:	4623      	mov	r3, r4
 8000888:	cb07      	ldmia	r3!, {r0, r1, r2}
 800088a:	6028      	str	r0, [r5, #0]
 800088c:	6069      	str	r1, [r5, #4]
 800088e:	60aa      	str	r2, [r5, #8]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	732b      	strb	r3, [r5, #12]
  rx_pkt.pl_len = ENV_NODE_PYL_SIZE + 5;
 8000894:	232d      	movs	r3, #45	@ 0x2d
 8000896:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48


  /* clear flags */
  app_flags.err_flags &= 0x00;
 800089a:	2300      	movs	r3, #0
 800089c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

  /* Extract informations */

  rx_pkt.ack = false;                                   // init as NACK
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
  rx_pkt.tx_attempts = 0;                               // full attempts available
 80008a6:	2300      	movs	r3, #0
 80008a8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
  rx_pkt.nodeID = rx_pkt.pl[NODE_ID_POS];               // byte0 = nodeID
 80008ac:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80008b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

  // byte1 and byte2 = pktID
  rx_pkt.pktID = (rx_pkt.pl[PKT_ID_MSB_POS] << 8) | rx_pkt.pl[PKT_ID_LSB_POS];
 80008b4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	b21a      	sxth	r2, r3
 80008be:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

  // rx_bcID and tx_bcID depend on subsequent conditions

  if (rx_pkt.pl_len == ENV_NODE_PYL_SIZE) {       /* receiving from an ENV NODE */
 80008ce:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80008d2:	2b28      	cmp	r3, #40	@ 0x28
 80008d4:	d10b      	bne.n	80008ee <on_rx_event+0x194>

    app_flags = process_envNode_up(h_fifo, &rx_pkt, rssi);
 80008d6:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	@ 0x3c
 80008da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008de:	4619      	mov	r1, r3
 80008e0:	6838      	ldr	r0, [r7, #0]
 80008e2:	f000 fa2b 	bl	8000d3c <process_envNode_up>
 80008e6:	4603      	mov	r3, r0
 80008e8:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
 80008ec:	e02f      	b.n	800094e <on_rx_event+0x1f4>

  } else if (rx_pkt.pl_len > ENV_NODE_PYL_SIZE) { /* receiving fron BC NODE -> some hops happened */
 80008ee:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80008f2:	2b28      	cmp	r3, #40	@ 0x28
 80008f4:	d924      	bls.n	8000940 <on_rx_event+0x1e6>

    /*
     * if receiving from bcNode, at leat one Hop happened
     * -> extarct 1st bc ID and last bc ID in the hopping sequence
     */
    rx_pkt.tx_bcID = rx_pkt.pl[rx_pkt.pl_len - 1];  // last RX byte corresponds to the BC_ID of the last BC in the hop-sequence
 80008f6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80008fa:	3b01      	subs	r3, #1
 80008fc:	3388      	adds	r3, #136	@ 0x88
 80008fe:	443b      	add	r3, r7
 8000900:	f813 3c3f 	ldrb.w	r3, [r3, #-63]
 8000904:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // get the BC_ID of the 1st BC in the hop-sequence
    rx_pkt.rx_bcID = rx_pkt.pl[BC_ID1_POS];
 8000908:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800090c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

    if (rx_pkt.tx_bcID > MY_BC_ID) {    /* RX from node further in the BCs sequence --> UPLINK */
 8000910:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000914:	2b01      	cmp	r3, #1
 8000916:	d909      	bls.n	800092c <on_rx_event+0x1d2>

      app_flags = process_bcNode_up(h_fifo, &rx_pkt);
 8000918:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800091c:	4619      	mov	r1, r3
 800091e:	6838      	ldr	r0, [r7, #0]
 8000920:	f000 f925 	bl	8000b6e <process_bcNode_up>
 8000924:	4603      	mov	r3, r0
 8000926:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
 800092a:	e010      	b.n	800094e <on_rx_event+0x1f4>

    } else {                            /* RX from node ahead in the BCs sequence --> ACK */

      app_flags = process_bcNode_ack(h_fifo, &rx_pkt);
 800092c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000930:	4619      	mov	r1, r3
 8000932:	6838      	ldr	r0, [r7, #0]
 8000934:	f000 facb 	bl	8000ece <process_bcNode_ack>
 8000938:	4603      	mov	r3, r0
 800093a:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
 800093e:	e006      	b.n	800094e <on_rx_event+0x1f4>

    }

  } else {                              /* BAD PKT format */

    app_flags.err_flags |= EVT_BAD_PKT_FORMAT;
 8000940:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8000944:	f043 0308 	orr.w	r3, r3, #8
 8000948:	b2db      	uxtb	r3, r3
 800094a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

  }

  return app_flags;
 800094e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8000952:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8000956:	2300      	movs	r3, #0
 8000958:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 800095c:	f362 0307 	bfi	r3, r2, #0, #8
 8000960:	f897 2085 	ldrb.w	r2, [r7, #133]	@ 0x85
 8000964:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000968:	4618      	mov	r0, r3
 800096a:	378c      	adds	r7, #140	@ 0x8c
 800096c:	46bd      	mov	sp, r7
 800096e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000970 <on_tx_event>:
 *                             --> The next TX event should be rescheduled with short wait time
 *          - EVT_SCHEDULE_TX set if the TX queue contains only "old PKTs" (i.e. waiting for reTX)
 *                             --> The next TX event should be rescheduled with long wait time
 *
 */
events_flags on_tx_event(rfm95_handle_t* h_rfm, h_rx_tx* h_fifo){
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	@ 0x50
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  /* track error flags */
  events_flags app_flags = {0};
 800097a:	2300      	movs	r3, #0
 800097c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  uint16_t fifo_status;
  uint16_t tx_idx = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  uint8_t rfm_reg;

  // check RFM95 MODEM status:
  if(!rfm95_getModemStatus(h_rfm, &rfm_reg)) app_flags.err_flags |= EVT_RFM_SPI_ERR;
 8000986:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 800098a:	4619      	mov	r1, r3
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f001 f885 	bl	8001a9c <rfm95_getModemStatus>
 8000992:	4603      	mov	r3, r0
 8000994:	f083 0301 	eor.w	r3, r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d006      	beq.n	80009ac <on_tx_event+0x3c>
 800099e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  /* If any error occurred, stop code here */
  if(app_flags.err_flags != 0) return app_flags;
 80009ac:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d004      	beq.n	80009be <on_tx_event+0x4e>
 80009b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80009b8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80009bc:	e0ca      	b.n	8000b54 <on_tx_event+0x1e4>

  if((rfm_reg & 0x03) != 0) {
 80009be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d00b      	beq.n	80009e2 <on_tx_event+0x72>
    /*
     * RFM modem in "signal deteted" or "signal synchronized
     * -> Skip this TX and wait for the end of the event
     */
    app_flags.status_flags |= EVT_RFM_MODEM_RX;
 80009ca:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80009ce:	f043 0304 	orr.w	r3, r3, #4
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    return app_flags;
 80009d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80009dc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80009e0:	e0b8      	b.n	8000b54 <on_tx_event+0x1e4>
  }

  /* clear flags */
  app_flags.err_flags &= 0x00;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  uint8_t pyl_buff[LORA_PAYLOAD_MAX_SIZE];
  uint8_t pyl_len;

  /* 1st try looking for "new PKTs" with no TX yet -> Higher priority */
  tx_idx = get_nextTX_pkt(h_fifo, TX_SEQ_ENTRY_TAIL, pyl_buff, &pyl_len);
 80009e8:	f107 030b 	add.w	r3, r7, #11
 80009ec:	f107 020c 	add.w	r2, r7, #12
 80009f0:	2100      	movs	r1, #0
 80009f2:	6838      	ldr	r0, [r7, #0]
 80009f4:	f000 fb97 	bl	8001126 <get_nextTX_pkt>
 80009f8:	4603      	mov	r3, r0
 80009fa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

  if(tx_idx == LL_BUFF_EMPTY) {                   /* No events to TX */
 80009fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a02:	2b72      	cmp	r3, #114	@ 0x72
 8000a04:	d10b      	bne.n	8000a1e <on_tx_event+0xae>

    app_flags.status_flags |= EVT_TX_FIFO_EMPTY;
 8000a06:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    return app_flags;
 8000a14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000a18:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8000a1c:	e09a      	b.n	8000b54 <on_tx_event+0x1e4>

  } else if(tx_idx == RX_BUFF_IDX_NOT_DEFINED) {  /* No "New PKTs present */
 8000a1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a22:	2b71      	cmp	r3, #113	@ 0x71
 8000a24:	d10a      	bne.n	8000a3c <on_tx_event+0xcc>

    /* TX oldest one */
    tx_idx = get_nextTX_pkt(h_fifo, TX_SEQ_ENTRY_HEAD, pyl_buff, &pyl_len);
 8000a26:	f107 030b 	add.w	r3, r7, #11
 8000a2a:	f107 020c 	add.w	r2, r7, #12
 8000a2e:	2101      	movs	r1, #1
 8000a30:	6838      	ldr	r0, [r7, #0]
 8000a32:	f000 fb78 	bl	8001126 <get_nextTX_pkt>
 8000a36:	4603      	mov	r3, r0
 8000a38:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  } else {
    // RFU...
  }

  /* TX payload here */
  if (!rfm95_send(h_rfm, pyl_buff, pyl_len)) app_flags.err_flags |= EVT_RFM_SPI_ERR;
 8000a3c:	7afb      	ldrb	r3, [r7, #11]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4619      	mov	r1, r3
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f001 f86e 	bl	8001b28 <rfm95_send>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f083 0301 	eor.w	r3, r3, #1
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d006      	beq.n	8000a66 <on_tx_event+0xf6>
 8000a58:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  if(app_flags.err_flags != 0) return app_flags;
 8000a66:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d004      	beq.n	8000a78 <on_tx_event+0x108>
 8000a6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000a72:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8000a76:	e06d      	b.n	8000b54 <on_tx_event+0x1e4>

  /* Set RFM back to RX mode */
  if (!rfm95_enter_rx_mode(h_rfm)) app_flags.err_flags |= EVT_RFM_SPI_ERR;
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f001 f950 	bl	8001d1e <rfm95_enter_rx_mode>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	f083 0301 	eor.w	r3, r3, #1
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d006      	beq.n	8000a98 <on_tx_event+0x128>
 8000a8a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  if(app_flags.err_flags != 0) return app_flags;
 8000a98:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d004      	beq.n	8000aaa <on_tx_event+0x13a>
 8000aa0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000aa4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8000aa8:	e054      	b.n	8000b54 <on_tx_event+0x1e4>

  /* Update TX attempts for this PKT */
  h_fifo->h_rx[tx_idx].pkt.tx_attempts += 1;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	6859      	ldr	r1, [r3, #4]
 8000aae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	015b      	lsls	r3, r3, #5
 8000ab6:	4413      	add	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	440b      	add	r3, r1
 8000abc:	7919      	ldrb	r1, [r3, #4]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	6858      	ldr	r0, [r3, #4]
 8000ac2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	015b      	lsls	r3, r3, #5
 8000aca:	4413      	add	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4403      	add	r3, r0
 8000ad0:	1c4a      	adds	r2, r1, #1
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	711a      	strb	r2, [r3, #4]
  if (h_fifo->h_rx[tx_idx].pkt.tx_attempts >= BC_TX_ATTEMPTS) { /* remove this PKT from TX queue */
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	6859      	ldr	r1, [r3, #4]
 8000ada:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000ade:	4613      	mov	r3, r2
 8000ae0:	015b      	lsls	r3, r3, #5
 8000ae2:	4413      	add	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	440b      	add	r3, r1
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d905      	bls.n	8000afa <on_tx_event+0x18a>

    tx_queue_remove(h_fifo, tx_idx);
 8000aee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000af2:	4619      	mov	r1, r3
 8000af4:	6838      	ldr	r0, [r7, #0]
 8000af6:	f000 fbbe 	bl	8001276 <tx_queue_remove>

  }

  /* get updated TX queue status */
  fifo_status = get_nextTX_pri(h_fifo);
 8000afa:	6838      	ldr	r0, [r7, #0]
 8000afc:	f000 fb90 	bl	8001220 <get_nextTX_pri>
 8000b00:	4603      	mov	r3, r0
 8000b02:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

  if (fifo_status == LL_BUFF_EMPTY){                /* TX BUFF EMPTY -> Sop TX timer */
 8000b06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000b0a:	2b72      	cmp	r3, #114	@ 0x72
 8000b0c:	d107      	bne.n	8000b1e <on_tx_event+0x1ae>

    app_flags.status_flags |= EVT_TX_FIFO_EMPTY;
 8000b0e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000b1c:	e016      	b.n	8000b4c <on_tx_event+0x1dc>

  } else if (fifo_status == TX_BUFF_PRI) {          /* TX Buff has "new PKTs" -> short wait */
 8000b1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000b22:	2b74      	cmp	r3, #116	@ 0x74
 8000b24:	d107      	bne.n	8000b36 <on_tx_event+0x1c6>

    app_flags.status_flags |= EVT_SCHEDULE_PRI_TX;
 8000b26:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000b34:	e00a      	b.n	8000b4c <on_tx_event+0x1dc>

  } else if (fifo_status == TX_BUFF_NO_PRI) {       /* TX Buff has "old PKTs" -> longer wait for reTX*/
 8000b36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000b3a:	2b73      	cmp	r3, #115	@ 0x73
 8000b3c:	d106      	bne.n	8000b4c <on_tx_event+0x1dc>

    app_flags.status_flags |= EVT_SCHEDULE_TX;
 8000b3e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

  } else {                                          /* RFU... */
    //RFU...
  }

  return app_flags;
 8000b4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000b50:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
}
 8000b54:	2300      	movs	r3, #0
 8000b56:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8000b5a:	f362 0307 	bfi	r3, r2, #0, #8
 8000b5e:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8000b62:	f362 230f 	bfi	r3, r2, #8, #8
 8000b66:	4618      	mov	r0, r3
 8000b68:	3750      	adds	r7, #80	@ 0x50
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <process_bcNode_up>:
 *
 *          - the bit EVT_SCHEDULE_TX in the .status_flags field is set if a new pkt was added. The controller
 *            should TX that pkt (tail in the LL sequence) in the next TX event.
 *
 */
events_flags process_bcNode_up(h_rx_tx* h_fifo, bc_pkt* rx_pkt){
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b098      	sub	sp, #96	@ 0x60
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
  /* track error flags */
  events_flags app_flags = {0};
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
  uint16_t fifo_err_status;

  bool add_new_pkt = true;           // track wether this pkt has to be added
 8000b7e:	2301      	movs	r3, #1
 8000b80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  bool tx_new_pkt = true;            // new pkts TX immediatey after RX
 8000b84:	2301      	movs	r3, #1
 8000b86:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  uint16_t add_idx = BUFF_FIFO_SIZE; // track insert idx (no additional computational cost)
 8000b8a:	2364      	movs	r3, #100	@ 0x64
 8000b8c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  /* Scan through the RX buffer */
  for (uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000b90:	2300      	movs	r3, #0
 8000b92:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8000b96:	e080      	b.n	8000c9a <process_bcNode_up+0x12c>

    rnode c_node = h_fifo->h_rx[i];
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6859      	ldr	r1, [r3, #4]
 8000b9c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	015b      	lsls	r3, r3, #5
 8000ba4:	4413      	add	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	18ca      	adds	r2, r1, r3
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	4611      	mov	r1, r2
 8000bb0:	2242      	movs	r2, #66	@ 0x42
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f007 f8ed 	bl	8007d92 <memcpy>

    if (c_node.slot_free == true){
 8000bb8:	7b3b      	ldrb	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00a      	beq.n	8000bd4 <process_bcNode_up+0x66>

      // Empty slot -> eligible for insertion
      if (i <= add_idx) add_idx = i;
 8000bbe:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8000bc2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d85d      	bhi.n	8000c86 <process_bcNode_up+0x118>
 8000bca:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000bce:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
      continue;
 8000bd2:	e058      	b.n	8000c86 <process_bcNode_up+0x118>

    } else { /* This slot in the FIFO contains a valid PKT */

      if (rx_pkt->nodeID != c_node.pkt.nodeID) { /* The RX pkt has a different Node ID */
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	789a      	ldrb	r2, [r3, #2]
 8000bd8:	7cbb      	ldrb	r3, [r7, #18]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d155      	bne.n	8000c8a <process_bcNode_up+0x11c>
        // Skip... Move to the next valid pkt in the RX buff
        continue;

      } else { /* Coincident Node IDs */

        if ((rx_pkt->pktID > c_node.pkt.pktID)) {       /* Newer packet received --> replace older pkts (older pkt IDs) */
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	889a      	ldrh	r2, [r3, #4]
 8000be2:	8abb      	ldrh	r3, [r7, #20]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d913      	bls.n	8000c10 <process_bcNode_up+0xa2>

          /*
           * remove old pkt from queue
           * -> in the end replaced by received one
           */
          fifo_err_status = remove_pkt(h_fifo, i);
 8000be8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f9f7 	bl	8000fe2 <remove_pkt>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

          // Empty slot -> eligible for insertion
          if (i <= add_idx) add_idx = i;
 8000bfa:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8000bfe:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d844      	bhi.n	8000c90 <process_bcNode_up+0x122>
 8000c06:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000c0a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8000c0e:	e03f      	b.n	8000c90 <process_bcNode_up+0x122>

        } else if((rx_pkt->pktID == c_node.pkt.pktID)) {/* Same identical pktID (i.e. same information) */
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	889a      	ldrh	r2, [r3, #4]
 8000c14:	8abb      	ldrh	r3, [r7, #20]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d131      	bne.n	8000c7e <process_bcNode_up+0x110>

          if (rx_pkt->rx_bcID == c_node.pkt.rx_bcID) {  /* Same "receive point" */
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	799a      	ldrb	r2, [r3, #6]
 8000c1e:	7dbb      	ldrb	r3, [r7, #22]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d134      	bne.n	8000c8e <process_bcNode_up+0x120>
            // same 1st bcID in the sequence of hops

            if (c_node.pkt.ack || c_node.pkt.tx_attempts >= BC_TX_ATTEMPTS) { /* ACK or TX too many times */
 8000c24:	7c7b      	ldrb	r3, [r7, #17]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <process_bcNode_up+0xc2>
 8000c2a:	7c3b      	ldrb	r3, [r7, #16]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d903      	bls.n	8000c38 <process_bcNode_up+0xca>
              /*
               * In the FIFO there's already a pkt identical to the received one.
               * But it has been ACK or TX many times -> ignore received packet
               * and do not add to the buffer.
               */
              add_new_pkt = false;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
            /*
             * pkt with identical node IDs, pkt IDs, 1st rx point.
             * Only one copy can be present in the RX fifo, so i can block
             * the RX scan procedure.
             */
            break;
 8000c36:	e036      	b.n	8000ca6 <process_bcNode_up+0x138>
              if (c_node.pkt.pl_len <= rx_pkt->pl_len) {
 8000c38:	7e3a      	ldrb	r2, [r7, #24]
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	7a1b      	ldrb	r3, [r3, #8]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d803      	bhi.n	8000c4a <process_bcNode_up+0xdc>
                add_new_pkt = false;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
            break;
 8000c48:	e02d      	b.n	8000ca6 <process_bcNode_up+0x138>
                tx_new_pkt = false;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
                rx_pkt->tx_attempts = c_node.pkt.tx_attempts;
 8000c50:	7c3a      	ldrb	r2, [r7, #16]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	701a      	strb	r2, [r3, #0]
                fifo_err_status = remove_pkt(h_fifo, i);
 8000c56:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f9c0 	bl	8000fe2 <remove_pkt>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
                if (i <= add_idx) add_idx = i;
 8000c68:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8000c6c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d818      	bhi.n	8000ca6 <process_bcNode_up+0x138>
 8000c74:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000c78:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            break;
 8000c7c:	e013      	b.n	8000ca6 <process_bcNode_up+0x138>

          /*
           * - rx_pktID older than mine (in my RX FIFO i have a newwer pkt
           *   from the same environmental node) -> do not propagate
           */
          add_new_pkt = false;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
           * i already have "newer" informations from the same ENV node (i.e.
           * pktIDs older than RX pktID).
           * All the other pkts from the same node ID will have older
           * pkt IDs than the received one!
           */
          break;
 8000c84:	e010      	b.n	8000ca8 <process_bcNode_up+0x13a>
      continue;
 8000c86:	bf00      	nop
 8000c88:	e002      	b.n	8000c90 <process_bcNode_up+0x122>
        continue;
 8000c8a:	bf00      	nop
 8000c8c:	e000      	b.n	8000c90 <process_bcNode_up+0x122>
            continue;
 8000c8e:	bf00      	nop
  for (uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000c90:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000c94:	3301      	adds	r3, #1
 8000c96:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8000c9a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000c9e:	2b63      	cmp	r3, #99	@ 0x63
 8000ca0:	f67f af7a 	bls.w	8000b98 <process_bcNode_up+0x2a>
 8000ca4:	e000      	b.n	8000ca8 <process_bcNode_up+0x13a>
            break;
 8000ca6:	bf00      	nop

    }

  } /* RX FIFO scan completed */

  if (add_new_pkt == true) { /* If the flag is still set -> Add pkt */
 8000ca8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d034      	beq.n	8000d1a <process_bcNode_up+0x1ac>

    // add my bc ID informations:
    rx_pkt->pl[rx_pkt->pl_len] = MY_BC_ID;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	7a1b      	ldrb	r3, [r3, #8]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	2201      	movs	r2, #1
 8000cbc:	725a      	strb	r2, [r3, #9]
    rx_pkt->pl_len = rx_pkt->pl_len + 1;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	7a1b      	ldrb	r3, [r3, #8]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	721a      	strb	r2, [r3, #8]

    fifo_err_status = add_pkt(h_fifo, add_idx, rx_pkt);
 8000cca:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f9bd 	bl	8001052 <add_pkt>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
    app_flags.err_flags |= (fifo_err_status == RX_BUFF_FULL) ? EVT_RX_FIFO_FULL : 0;
 8000cde:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8000ce8:	2a6e      	cmp	r2, #110	@ 0x6e
 8000cea:	d101      	bne.n	8000cf0 <process_bcNode_up+0x182>
 8000cec:	2204      	movs	r2, #4
 8000cee:	e000      	b.n	8000cf2 <process_bcNode_up+0x184>
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

    if ((app_flags.err_flags == 0) && tx_new_pkt) {
 8000cfc:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d10a      	bne.n	8000d1a <process_bcNode_up+0x1ac>
 8000d04:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <process_bcNode_up+0x1ac>
      // If adding a new pkt flag a TX event -> Try to travel through the BCs as quick as possible
      app_flags.status_flags |= EVT_SCHEDULE_TX;
 8000d0c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51

    }

  }

  return app_flags;
 8000d1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000d1e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8000d22:	2300      	movs	r3, #0
 8000d24:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8000d28:	f362 0307 	bfi	r3, r2, #0, #8
 8000d2c:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000d30:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3760      	adds	r7, #96	@ 0x60
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <process_envNode_up>:
 *
 *          - the bit EVT_SCHEDULE_TX in the .status_flags field is set if a new pkt was added. The controller
 *            should TX that pkt (tail in the LL sequence) in the next TX event.
 *
 */
events_flags process_envNode_up(h_rx_tx* h_fifo, bc_pkt* rx_pkt, int16_t rssi){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b09a      	sub	sp, #104	@ 0x68
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	4613      	mov	r3, r2
 8000d48:	80fb      	strh	r3, [r7, #6]
  /* track error flags */
  events_flags app_flags = {0};
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  uint16_t fifo_err_status;

  bool add_new_pkt = true;           // track wether this pkt has to be added
 8000d50:	2301      	movs	r3, #1
 8000d52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  uint16_t add_idx = BUFF_FIFO_SIZE; // track insert idx (no additional computational cost)
 8000d56:	2364      	movs	r3, #100	@ 0x64
 8000d58:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

  for(uint16_t i = 0; i < BUFF_FIFO_SIZE; i++) {
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8000d62:	e050      	b.n	8000e06 <process_envNode_up+0xca>

    rnode c_node = h_fifo->h_rx[i];
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6859      	ldr	r1, [r3, #4]
 8000d68:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	015b      	lsls	r3, r3, #5
 8000d70:	4413      	add	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	18ca      	adds	r2, r1, r3
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	2242      	movs	r2, #66	@ 0x42
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f007 f807 	bl	8007d92 <memcpy>

    if (c_node.slot_free == true){
 8000d84:	7d3b      	ldrb	r3, [r7, #20]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00a      	beq.n	8000da0 <process_envNode_up+0x64>

      // Empty slot -> eligible for insertion
      if (i <= add_idx) add_idx = i;
 8000d8a:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8000d8e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d82f      	bhi.n	8000df6 <process_envNode_up+0xba>
 8000d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000d9a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      continue;
 8000d9e:	e02a      	b.n	8000df6 <process_envNode_up+0xba>

    } else { /* This slot in the FIFO contains a valid PKT */

      if (rx_pkt->nodeID != c_node.pkt.nodeID) { /* The RX pkt has a different Node ID */
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	789a      	ldrb	r2, [r3, #2]
 8000da4:	7ebb      	ldrb	r3, [r7, #26]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d127      	bne.n	8000dfa <process_envNode_up+0xbe>
        // Skip... Move to the next valid pkt in the RX buff
        continue;

      } else { /* Coincident Node IDs */

        if ((rx_pkt->pktID > c_node.pkt.pktID)) {       /* Newer packet received --> replace older pkts (older pkt IDs) */
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	889a      	ldrh	r2, [r3, #4]
 8000dae:	8bbb      	ldrh	r3, [r7, #28]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d913      	bls.n	8000ddc <process_envNode_up+0xa0>

          /*
           * remove old pkt from queue
           * -> in the end replaced by received one
           */
          fifo_err_status = remove_pkt(h_fifo, i);
 8000db4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000db8:	4619      	mov	r1, r3
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f000 f911 	bl	8000fe2 <remove_pkt>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

          // Empty slot -> eligible for insertion
          if (i <= add_idx) add_idx = i;
 8000dc6:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8000dca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d814      	bhi.n	8000dfc <process_envNode_up+0xc0>
 8000dd2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000dd6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8000dda:	e00f      	b.n	8000dfc <process_envNode_up+0xc0>

        } else if((rx_pkt->pktID == c_node.pkt.pktID)) {/* Same identical pktID (i.e. same information) */
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	889a      	ldrh	r2, [r3, #4]
 8000de0:	8bbb      	ldrh	r3, [r7, #28]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d103      	bne.n	8000dee <process_envNode_up+0xb2>

          /*
           * The env node is adding redundancy, but i have already seen
           * this PKT -> ignore
           */
          add_new_pkt = false;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000dec:	e006      	b.n	8000dfc <process_envNode_up+0xc0>

          /*
           * - rx_pktID older than mine (in my RX FIFO i have a newer pkt
           *   from the same environmental node) -> do not propagate
           */
          add_new_pkt = false;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000df4:	e00b      	b.n	8000e0e <process_envNode_up+0xd2>
      continue;
 8000df6:	bf00      	nop
 8000df8:	e000      	b.n	8000dfc <process_envNode_up+0xc0>
        continue;
 8000dfa:	bf00      	nop
  for(uint16_t i = 0; i < BUFF_FIFO_SIZE; i++) {
 8000dfc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000e00:	3301      	adds	r3, #1
 8000e02:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8000e06:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000e0a:	2b63      	cmp	r3, #99	@ 0x63
 8000e0c:	d9aa      	bls.n	8000d64 <process_envNode_up+0x28>

    }

  } /* RX FIFO scan completed */

  if (add_new_pkt == true) { /* If the flag is still set -> Add pkt */
 8000e0e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d04a      	beq.n	8000eac <process_envNode_up+0x170>

    // Receiving from ENV node -> add RSSI
    rx_pkt->pl[rx_pkt->pl_len]   = (uint8_t)((rssi >> 8) & 0xFF);
 8000e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1a:	121b      	asrs	r3, r3, #8
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	7a1b      	ldrb	r3, [r3, #8]
 8000e22:	4619      	mov	r1, r3
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	440b      	add	r3, r1
 8000e2a:	725a      	strb	r2, [r3, #9]
    rx_pkt->pl[rx_pkt->pl_len+1] = (uint8_t)(rssi & 0xFF);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	7a1b      	ldrb	r3, [r3, #8]
 8000e30:	3301      	adds	r3, #1
 8000e32:	88fa      	ldrh	r2, [r7, #6]
 8000e34:	b2d1      	uxtb	r1, r2
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	4413      	add	r3, r2
 8000e3a:	460a      	mov	r2, r1
 8000e3c:	725a      	strb	r2, [r3, #9]
    rx_pkt->pl_len += 2;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	7a1b      	ldrb	r3, [r3, #8]
 8000e42:	3302      	adds	r3, #2
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	721a      	strb	r2, [r3, #8]

    // add my bc ID informations:
    rx_pkt->pl[rx_pkt->pl_len] = MY_BC_ID;
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	7a1b      	ldrb	r3, [r3, #8]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4413      	add	r3, r2
 8000e54:	2201      	movs	r2, #1
 8000e56:	725a      	strb	r2, [r3, #9]
    rx_pkt->pl_len = rx_pkt->pl_len + 1;
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	7a1b      	ldrb	r3, [r3, #8]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	721a      	strb	r2, [r3, #8]

    fifo_err_status = add_pkt(h_fifo, add_idx, rx_pkt);
 8000e64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f000 f8f0 	bl	8001052 <add_pkt>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
    app_flags.err_flags |= (fifo_err_status == RX_BUFF_FULL) ? EVT_RX_FIFO_FULL : 0;
 8000e78:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	f8b7 2060 	ldrh.w	r2, [r7, #96]	@ 0x60
 8000e82:	2a6e      	cmp	r2, #110	@ 0x6e
 8000e84:	d101      	bne.n	8000e8a <process_envNode_up+0x14e>
 8000e86:	2204      	movs	r2, #4
 8000e88:	e000      	b.n	8000e8c <process_envNode_up+0x150>
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58

    if (app_flags.err_flags == 0) { // If no errors occured -> Schedule TX event
 8000e96:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d106      	bne.n	8000eac <process_envNode_up+0x170>

      app_flags.status_flags |= EVT_SCHEDULE_TX;
 8000e9e:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

    }

  }

  return app_flags;
 8000eac:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8000eb0:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8000eba:	f362 0307 	bfi	r3, r2, #0, #8
 8000ebe:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8000ec2:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3768      	adds	r7, #104	@ 0x68
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <process_bcNode_ack>:
 *
 * @return: events_err_flags, bit-field structure with all possible errors.
 *                   --> no real errors happen here (only flags used for debug).
 *
 */
events_flags process_bcNode_ack(h_rx_tx* h_fifo, bc_pkt* rx_pkt){
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b096      	sub	sp, #88	@ 0x58
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	6039      	str	r1, [r7, #0]
  /* track error flags */
  events_flags app_flags = {0};
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  uint16_t fifo_err_status;

  /* Scan through the RX buffer */
  for (uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8000ee4:	e03e      	b.n	8000f64 <process_bcNode_ack+0x96>

    rnode c_node = h_fifo->h_rx[i];
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6859      	ldr	r1, [r3, #4]
 8000eea:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8000eee:	4613      	mov	r3, r2
 8000ef0:	015b      	lsls	r3, r3, #5
 8000ef2:	4413      	add	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	18ca      	adds	r2, r1, r3
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	4611      	mov	r1, r2
 8000efe:	2242      	movs	r2, #66	@ 0x42
 8000f00:	4618      	mov	r0, r3
 8000f02:	f006 ff46 	bl	8007d92 <memcpy>

    if (c_node.slot_free == true){
 8000f06:	7a3b      	ldrb	r3, [r7, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d121      	bne.n	8000f50 <process_bcNode_ack+0x82>
      // Empty slot -> skip... (this happens to perform removal in O(1))
      continue;

    } else { /* This slot in the FIFO contains a valid PKT */

      if (rx_pkt->nodeID != c_node.pkt.nodeID) { /* The ACK pkt has a different Node ID */
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	789a      	ldrb	r2, [r3, #2]
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d11e      	bne.n	8000f54 <process_bcNode_ack+0x86>
        // Skip... Move to the next valid pkt in the RX buff
        continue;

      } else { /* Coincident Node IDs */

        if ((rx_pkt->pktID > c_node.pkt.pktID) ||        /* Newer or same identical packet detected --> Set ACK */
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	889a      	ldrh	r2, [r3, #4]
 8000f1a:	8a3b      	ldrh	r3, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d809      	bhi.n	8000f34 <process_bcNode_ack+0x66>
            ((rx_pkt->pktID == c_node.pkt.pktID) && (rx_pkt->rx_bcID == c_node.pkt.rx_bcID))) {
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	889a      	ldrh	r2, [r3, #4]
 8000f24:	8a3b      	ldrh	r3, [r7, #16]
        if ((rx_pkt->pktID > c_node.pkt.pktID) ||        /* Newer or same identical packet detected --> Set ACK */
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d116      	bne.n	8000f58 <process_bcNode_ack+0x8a>
            ((rx_pkt->pktID == c_node.pkt.pktID) && (rx_pkt->rx_bcID == c_node.pkt.rx_bcID))) {
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	799a      	ldrb	r2, [r3, #6]
 8000f2e:	7cbb      	ldrb	r3, [r7, #18]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d111      	bne.n	8000f58 <process_bcNode_ack+0x8a>

          /* Node ahead has newer pktID, or same identical pkt (ACK received) */
          h_fifo->h_rx->pkt.ack = true;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	715a      	strb	r2, [r3, #5]

          /* remove from tx queue */
          fifo_err_status = tx_queue_remove(h_fifo, i);
 8000f3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000f40:	4619      	mov	r1, r3
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f997 	bl	8001276 <tx_queue_remove>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8000f4e:	e004      	b.n	8000f5a <process_bcNode_ack+0x8c>
      continue;
 8000f50:	bf00      	nop
 8000f52:	e002      	b.n	8000f5a <process_bcNode_ack+0x8c>
        continue;
 8000f54:	bf00      	nop
 8000f56:	e000      	b.n	8000f5a <process_bcNode_ack+0x8c>
           * - rx_pktID older than mine -> do not ACK
           * - same pkt ID but differest 1st bcID in the hop sequence (i.e. different rx point)
           */

          // skip...
          continue;
 8000f58:	bf00      	nop
  for (uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000f5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000f5e:	3301      	adds	r3, #1
 8000f60:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8000f64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000f68:	2b63      	cmp	r3, #99	@ 0x63
 8000f6a:	d9bc      	bls.n	8000ee6 <process_bcNode_ack+0x18>

    }

  }

  return app_flags;
 8000f6c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000f70:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8000f74:	2300      	movs	r3, #0
 8000f76:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8000f7a:	f362 0307 	bfi	r3, r2, #0, #8
 8000f7e:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8000f82:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3758      	adds	r7, #88	@ 0x58
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <init_buffers>:
 *
 * @param h_rx_tx*  h_rx_tx  pointer to the buffer handler (which includes handlers for both RX and TX lists).
 *
 * @return: none
 */
void init_buffers(h_rx_tx* h_rx_tx){
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b084      	sub	sp, #16
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  // init RX FIFO
  for (uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000f96:	2300      	movs	r3, #0
 8000f98:	81fb      	strh	r3, [r7, #14]
 8000f9a:	e016      	b.n	8000fca <init_buffers+0x3c>
    h_rx_tx->h_rx[i].slot_free = true;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6859      	ldr	r1, [r3, #4]
 8000fa0:	89fa      	ldrh	r2, [r7, #14]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	015b      	lsls	r3, r3, #5
 8000fa6:	4413      	add	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	440b      	add	r3, r1
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
    h_rx_tx->h_rx[i].ll_idx = TX_IDX_EMPTY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6859      	ldr	r1, [r3, #4]
 8000fb4:	89fa      	ldrh	r2, [r7, #14]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	015b      	lsls	r3, r3, #5
 8000fba:	4413      	add	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	440b      	add	r3, r1
 8000fc0:	2270      	movs	r2, #112	@ 0x70
 8000fc2:	805a      	strh	r2, [r3, #2]
  for (uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000fc4:	89fb      	ldrh	r3, [r7, #14]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	81fb      	strh	r3, [r7, #14]
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	2b63      	cmp	r3, #99	@ 0x63
 8000fce:	d9e5      	bls.n	8000f9c <init_buffers+0xe>
  }

  // init Linked List for TX sequence
  init_LL(h_rx_tx->h_tx);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fa8d 	bl	80004f4 <init_LL>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <remove_pkt>:
 * @return: - RX_BUFF_SLOT_EMPTY if the slot at buff[rm_idx] is already EMPTY;
 *          - LL_IDX_IS_EMPTY if the LL is empty (pkt already removed from the TX sequence);
 *          - TX_IDX_EMPTY if this packet has no pointer to the TX sequence LL (pkt already removed from the TX sequence);
 *          - 0 otherwise;
 */
uint16_t remove_pkt(h_rx_tx* h_rx_tx, uint16_t rm_idx){
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	460b      	mov	r3, r1
 8000fec:	807b      	strh	r3, [r7, #2]
  // if the slot is already empty
  if(h_rx_tx->h_rx[rm_idx].slot_free == true) return RX_BUFF_SLOT_EMPTY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6859      	ldr	r1, [r3, #4]
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	015b      	lsls	r3, r3, #5
 8000ff8:	4413      	add	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	440b      	add	r3, r1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <remove_pkt+0x26>
 8001004:	236f      	movs	r3, #111	@ 0x6f
 8001006:	e020      	b.n	800104a <remove_pkt+0x68>

  // This slot is occupied...

  // mark this slot as free
  h_rx_tx->h_rx[rm_idx].slot_free = true;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6859      	ldr	r1, [r3, #4]
 800100c:	887a      	ldrh	r2, [r7, #2]
 800100e:	4613      	mov	r3, r2
 8001010:	015b      	lsls	r3, r3, #5
 8001012:	4413      	add	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	440b      	add	r3, r1
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]

  uint16_t ll_idx = h_rx_tx->h_rx[rm_idx].ll_idx;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6859      	ldr	r1, [r3, #4]
 8001020:	887a      	ldrh	r2, [r7, #2]
 8001022:	4613      	mov	r3, r2
 8001024:	015b      	lsls	r3, r3, #5
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	440b      	add	r3, r1
 800102c:	885b      	ldrh	r3, [r3, #2]
 800102e:	81fb      	strh	r3, [r7, #14]
  if (ll_idx == TX_IDX_EMPTY) return TX_IDX_EMPTY;
 8001030:	89fb      	ldrh	r3, [r7, #14]
 8001032:	2b70      	cmp	r3, #112	@ 0x70
 8001034:	d101      	bne.n	800103a <remove_pkt+0x58>
 8001036:	2370      	movs	r3, #112	@ 0x70
 8001038:	e007      	b.n	800104a <remove_pkt+0x68>

  return remove_pkt_LL(h_rx_tx->h_tx, ll_idx);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	89fa      	ldrh	r2, [r7, #14]
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fad3 	bl	80005ee <remove_pkt_LL>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <add_pkt>:
 *                           insert operation).
 *
 * @return: - RX_BUFF_FULL if the buff is FULL (notice that a FULL TX sequence implies full RX sequence);
 *          - 0 on success;
 */
uint16_t add_pkt(h_rx_tx* h_rx_tx, uint16_t add_idx, bc_pkt* bc){
 8001052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001054:	b097      	sub	sp, #92	@ 0x5c
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	460b      	mov	r3, r1
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	817b      	strh	r3, [r7, #10]
  if (add_idx == RX_BUFF_IDX_NOT_DEFINED) { // if not specified determine the 1st free index in the system buffer
 8001060:	897b      	ldrh	r3, [r7, #10]
 8001062:	2b71      	cmp	r3, #113	@ 0x71
 8001064:	d119      	bne.n	800109a <add_pkt+0x48>
    add_idx = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	817b      	strh	r3, [r7, #10]
    while(h_rx_tx->h_rx[add_idx].slot_free == false) {
 800106a:	e007      	b.n	800107c <add_pkt+0x2a>
      add_idx+=1;
 800106c:	897b      	ldrh	r3, [r7, #10]
 800106e:	3301      	adds	r3, #1
 8001070:	817b      	strh	r3, [r7, #10]
      if (add_idx == BUFF_FIFO_SIZE) return RX_BUFF_FULL;
 8001072:	897b      	ldrh	r3, [r7, #10]
 8001074:	2b64      	cmp	r3, #100	@ 0x64
 8001076:	d101      	bne.n	800107c <add_pkt+0x2a>
 8001078:	236e      	movs	r3, #110	@ 0x6e
 800107a:	e050      	b.n	800111e <add_pkt+0xcc>
    while(h_rx_tx->h_rx[add_idx].slot_free == false) {
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6859      	ldr	r1, [r3, #4]
 8001080:	897a      	ldrh	r2, [r7, #10]
 8001082:	4613      	mov	r3, r2
 8001084:	015b      	lsls	r3, r3, #5
 8001086:	4413      	add	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	440b      	add	r3, r1
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f083 0301 	eor.w	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1e9      	bne.n	800106c <add_pkt+0x1a>
 8001098:	e004      	b.n	80010a4 <add_pkt+0x52>
    }
  } else {  // Ensure index within buffer boundaries
    if (add_idx >= BUFF_FIFO_SIZE) return RX_BUFF_FULL;
 800109a:	897b      	ldrh	r3, [r7, #10]
 800109c:	2b63      	cmp	r3, #99	@ 0x63
 800109e:	d901      	bls.n	80010a4 <add_pkt+0x52>
 80010a0:	236e      	movs	r3, #110	@ 0x6e
 80010a2:	e03c      	b.n	800111e <add_pkt+0xcc>
  }

  // now add_idx points to a free slot in the main buffer

  // add event to the TX LL
  uint16_t ll_idx = add_pkt_LL(h_rx_tx->h_tx, add_idx);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	897a      	ldrh	r2, [r7, #10]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa4f 	bl	8000550 <add_pkt_LL>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

  // if FULL conclude here (LL FULL --> RX buff FULL)
  if(ll_idx == LL_IDX_IS_FULL) return RX_BUFF_FULL;
 80010b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80010bc:	2b64      	cmp	r3, #100	@ 0x64
 80010be:	d101      	bne.n	80010c4 <add_pkt+0x72>
 80010c0:	236e      	movs	r3, #110	@ 0x6e
 80010c2:	e02c      	b.n	800111e <add_pkt+0xcc>

  rnode new_node = {
 80010c4:	2300      	movs	r3, #0
 80010c6:	753b      	strb	r3, [r7, #20]
 80010c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80010cc:	82fb      	strh	r3, [r7, #22]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	461c      	mov	r4, r3
 80010d2:	f107 0618 	add.w	r6, r7, #24
 80010d6:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80010da:	4635      	mov	r5, r6
 80010dc:	4623      	mov	r3, r4
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	6859      	ldr	r1, [r3, #4]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e8:	3410      	adds	r4, #16
 80010ea:	3610      	adds	r6, #16
 80010ec:	4564      	cmp	r4, ip
 80010ee:	d1f4      	bne.n	80010da <add_pkt+0x88>
 80010f0:	4633      	mov	r3, r6
 80010f2:	6820      	ldr	r0, [r4, #0]
 80010f4:	6861      	ldr	r1, [r4, #4]
 80010f6:	68a2      	ldr	r2, [r4, #8]
 80010f8:	c307      	stmia	r3!, {r0, r1, r2}
 80010fa:	89a2      	ldrh	r2, [r4, #12]
 80010fc:	801a      	strh	r2, [r3, #0]
  };

//  // copy payload data into the BC structure
//  memcpy(new_node.pkt.pl, bc->pl, bc->pl_len);

  h_rx_tx->h_rx[add_idx] = new_node;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6859      	ldr	r1, [r3, #4]
 8001102:	897a      	ldrh	r2, [r7, #10]
 8001104:	4613      	mov	r3, r2
 8001106:	015b      	lsls	r3, r3, #5
 8001108:	4413      	add	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	440b      	add	r3, r1
 800110e:	4618      	mov	r0, r3
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2242      	movs	r2, #66	@ 0x42
 8001116:	4619      	mov	r1, r3
 8001118:	f006 fe3b 	bl	8007d92 <memcpy>

  return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	375c      	adds	r7, #92	@ 0x5c
 8001122:	46bd      	mov	sp, r7
 8001124:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001126 <get_nextTX_pkt>:
 *            were found
 *          - LL_BUFF_EMPTY if the LL is empty (notice that an empty LL doesn't mean an empty RX FIFO,
 *            maybe all the packets in the RX FIFO were already ACK);
 *          - index in the main buffer on success;
 */
uint16_t get_nextTX_pkt(h_rx_tx* h_rx_tx, fifo_entry_point entry_point, uint8_t* pyl_buff, uint8_t* pyl_len){
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	460b      	mov	r3, r1
 8001134:	72fb      	strb	r3, [r7, #11]
  uint16_t idx = RX_BUFF_IDX_NOT_DEFINED;
 8001136:	2371      	movs	r3, #113	@ 0x71
 8001138:	82fb      	strh	r3, [r7, #22]

  if (entry_point == TX_SEQ_ENTRY_HEAD){
 800113a:	7afb      	ldrb	r3, [r7, #11]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d115      	bne.n	800116c <get_nextTX_pkt+0x46>
    // get index in the main buffer by quering the LL sequence
    idx = get_head_LL(h_rx_tx->h_tx);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff faba 	bl	80006be <get_head_LL>
 800114a:	4603      	mov	r3, r0
 800114c:	82fb      	strh	r3, [r7, #22]

    if (idx == LL_IDX_IS_EMPTY) return LL_BUFF_EMPTY;
 800114e:	8afb      	ldrh	r3, [r7, #22]
 8001150:	2b65      	cmp	r3, #101	@ 0x65
 8001152:	d101      	bne.n	8001158 <get_nextTX_pkt+0x32>
 8001154:	2372      	movs	r3, #114	@ 0x72
 8001156:	e05f      	b.n	8001218 <get_nextTX_pkt+0xf2>
    idx = LL_get_RXbuff_idx(h_rx_tx->h_tx, idx);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	8afa      	ldrh	r2, [r7, #22]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fad0 	bl	8000706 <LL_get_RXbuff_idx>
 8001166:	4603      	mov	r3, r0
 8001168:	82fb      	strh	r3, [r7, #22]
 800116a:	e039      	b.n	80011e0 <get_nextTX_pkt+0xba>

  } else if (entry_point == TX_SEQ_ENTRY_TAIL){
 800116c:	7afb      	ldrb	r3, [r7, #11]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d136      	bne.n	80011e0 <get_nextTX_pkt+0xba>

    // get last inserted pkt in the LL (i.e. newest pkt)
    uint16_t c_idx = get_tail_LL(h_rx_tx->h_tx);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fab3 	bl	80006e2 <get_tail_LL>
 800117c:	4603      	mov	r3, r0
 800117e:	82bb      	strh	r3, [r7, #20]

    if (c_idx == LL_IDX_IS_EMPTY) return LL_BUFF_EMPTY;
 8001180:	8abb      	ldrh	r3, [r7, #20]
 8001182:	2b65      	cmp	r3, #101	@ 0x65
 8001184:	d101      	bne.n	800118a <get_nextTX_pkt+0x64>
 8001186:	2372      	movs	r3, #114	@ 0x72
 8001188:	e046      	b.n	8001218 <get_nextTX_pkt+0xf2>
     *  scan LL (the TX buffer) looking for the 1st inserted
     *  pkt that has not been TX yet
     */
    while (1) {
      // check if this PKT has already been TX
      uint16_t rx_idx = LL_get_RXbuff_idx(h_rx_tx->h_tx, c_idx);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	8aba      	ldrh	r2, [r7, #20]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fab7 	bl	8000706 <LL_get_RXbuff_idx>
 8001198:	4603      	mov	r3, r0
 800119a:	827b      	strh	r3, [r7, #18]
      if(h_rx_tx->h_rx[rx_idx].pkt.tx_attempts > 0) break;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6859      	ldr	r1, [r3, #4]
 80011a0:	8a7a      	ldrh	r2, [r7, #18]
 80011a2:	4613      	mov	r3, r2
 80011a4:	015b      	lsls	r3, r3, #5
 80011a6:	4413      	add	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	440b      	add	r3, r1
 80011ac:	791b      	ldrb	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10e      	bne.n	80011d0 <get_nextTX_pkt+0xaa>
      idx = rx_idx;
 80011b2:	8a7b      	ldrh	r3, [r7, #18]
 80011b4:	82fb      	strh	r3, [r7, #22]

      // no remaining elements -> break here
      if (c_idx == LL_IDX_IS_HEAD) break;
 80011b6:	8abb      	ldrh	r3, [r7, #20]
 80011b8:	2b66      	cmp	r3, #102	@ 0x66
 80011ba:	d00b      	beq.n	80011d4 <get_nextTX_pkt+0xae>

      // up pto know all the pkts are "new" ones -> find the 1st one in the sequence
      c_idx = get_prev_LL(h_rx_tx->h_tx, c_idx);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	8aba      	ldrh	r2, [r7, #20]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fab0 	bl	800072a <get_prev_LL>
 80011ca:	4603      	mov	r3, r0
 80011cc:	82bb      	strh	r3, [r7, #20]
    while (1) {
 80011ce:	e7dc      	b.n	800118a <get_nextTX_pkt+0x64>
      if(h_rx_tx->h_rx[rx_idx].pkt.tx_attempts > 0) break;
 80011d0:	bf00      	nop
 80011d2:	e000      	b.n	80011d6 <get_nextTX_pkt+0xb0>
      if (c_idx == LL_IDX_IS_HEAD) break;
 80011d4:	bf00      	nop
    }

    // in the end -> if no "new" PKTs were present terminate here
    if (idx == RX_BUFF_IDX_NOT_DEFINED) return RX_BUFF_IDX_NOT_DEFINED;
 80011d6:	8afb      	ldrh	r3, [r7, #22]
 80011d8:	2b71      	cmp	r3, #113	@ 0x71
 80011da:	d101      	bne.n	80011e0 <get_nextTX_pkt+0xba>
 80011dc:	2371      	movs	r3, #113	@ 0x71
 80011de:	e01b      	b.n	8001218 <get_nextTX_pkt+0xf2>

  }

  *pyl_len = h_rx_tx->h_rx[idx].pkt.pl_len;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6859      	ldr	r1, [r3, #4]
 80011e4:	8afa      	ldrh	r2, [r7, #22]
 80011e6:	4613      	mov	r3, r2
 80011e8:	015b      	lsls	r3, r3, #5
 80011ea:	4413      	add	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	440b      	add	r3, r1
 80011f0:	7b1a      	ldrb	r2, [r3, #12]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	701a      	strb	r2, [r3, #0]

  // Copy into caller's buffer
  memcpy(pyl_buff, h_rx_tx->h_rx[idx].pkt.pl, *pyl_len);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6859      	ldr	r1, [r3, #4]
 80011fa:	8afa      	ldrh	r2, [r7, #22]
 80011fc:	4613      	mov	r3, r2
 80011fe:	015b      	lsls	r3, r3, #5
 8001200:	4413      	add	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	440b      	add	r3, r1
 8001206:	f103 010d 	add.w	r1, r3, #13
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f006 fdbe 	bl	8007d92 <memcpy>

  return idx;
 8001216:	8afb      	ldrh	r3, [r7, #22]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <get_nextTX_pri>:
 * @return: - LL_BUFF_EMPTY  if the LL is empty (notice that an empty LL doesn't mean an empty RX FIFO)
 *                           --> TX IRQ timer shouldn't be reactivated
 *          - TX_BUFF_PRI    If at least one "new PKT" (waiting for 1st TX) is present
 *          - TX_BUFF_NO_PRI If PKTs are waiting for retransmissions (i.e. at least on TX was already done)
 */
uint16_t get_nextTX_pri(h_rx_tx* h_rx_tx){
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  // get index in the main buffer by quering the LL sequence
  uint16_t idx = get_tail_LL(h_rx_tx->h_tx);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fa58 	bl	80006e2 <get_tail_LL>
 8001232:	4603      	mov	r3, r0
 8001234:	81fb      	strh	r3, [r7, #14]

  if (idx == LL_IDX_IS_EMPTY) return LL_BUFF_EMPTY;
 8001236:	89fb      	ldrh	r3, [r7, #14]
 8001238:	2b65      	cmp	r3, #101	@ 0x65
 800123a:	d101      	bne.n	8001240 <get_nextTX_pri+0x20>
 800123c:	2372      	movs	r3, #114	@ 0x72
 800123e:	e016      	b.n	800126e <get_nextTX_pri+0x4e>

  // at this point at least one element exist -> get payload in RX FIFO
  uint16_t rx_idx = LL_get_RXbuff_idx(h_rx_tx->h_tx, idx);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	89fa      	ldrh	r2, [r7, #14]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fa5c 	bl	8000706 <LL_get_RXbuff_idx>
 800124e:	4603      	mov	r3, r0
 8001250:	81bb      	strh	r3, [r7, #12]

  return (h_rx_tx->h_rx[rx_idx].pkt.tx_attempts == 0) ? TX_BUFF_PRI : TX_BUFF_NO_PRI;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6859      	ldr	r1, [r3, #4]
 8001256:	89ba      	ldrh	r2, [r7, #12]
 8001258:	4613      	mov	r3, r2
 800125a:	015b      	lsls	r3, r3, #5
 800125c:	4413      	add	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	440b      	add	r3, r1
 8001262:	791b      	ldrb	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <get_nextTX_pri+0x4c>
 8001268:	2374      	movs	r3, #116	@ 0x74
 800126a:	e000      	b.n	800126e <get_nextTX_pri+0x4e>
 800126c:	2373      	movs	r3, #115	@ 0x73
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <tx_queue_remove>:
 *
 * @return: - TX_IDX_EMPTY   if the PKT is not present in the linked list (Already removed?);
 *          - LL_BUFF_EMPTY  if the LL is empty (notice that an empty LL doesn't mean an empty RX FIFO);
 *          - 0 on success;
 */
uint16_t tx_queue_remove(h_rx_tx* h_rx_tx, uint16_t rm_idx){
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	460b      	mov	r3, r1
 8001280:	807b      	strh	r3, [r7, #2]

  // get idx of the associated slot in the LL sequence
  uint16_t ll_idx = h_rx_tx->h_rx[rm_idx].ll_idx;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6859      	ldr	r1, [r3, #4]
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	4613      	mov	r3, r2
 800128a:	015b      	lsls	r3, r3, #5
 800128c:	4413      	add	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	440b      	add	r3, r1
 8001292:	885b      	ldrh	r3, [r3, #2]
 8001294:	81fb      	strh	r3, [r7, #14]

  // pkt not present in the LL
  if (ll_idx == TX_IDX_EMPTY) return TX_IDX_EMPTY;
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	2b70      	cmp	r3, #112	@ 0x70
 800129a:	d101      	bne.n	80012a0 <tx_queue_remove+0x2a>
 800129c:	2370      	movs	r3, #112	@ 0x70
 800129e:	e016      	b.n	80012ce <tx_queue_remove+0x58>

  // try removal on the LL
  if(remove_pkt_LL(h_rx_tx->h_tx, ll_idx) == LL_IDX_IS_EMPTY) return LL_BUFF_EMPTY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	89fa      	ldrh	r2, [r7, #14]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f9a0 	bl	80005ee <remove_pkt_LL>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b65      	cmp	r3, #101	@ 0x65
 80012b2:	d101      	bne.n	80012b8 <tx_queue_remove+0x42>
 80012b4:	2372      	movs	r3, #114	@ 0x72
 80012b6:	e00a      	b.n	80012ce <tx_queue_remove+0x58>

  // At this point the reference in the TX sequence has been removed, clear the idx in the main buffer
  h_rx_tx->h_rx[rm_idx].ll_idx = TX_IDX_EMPTY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6859      	ldr	r1, [r3, #4]
 80012bc:	887a      	ldrh	r2, [r7, #2]
 80012be:	4613      	mov	r3, r2
 80012c0:	015b      	lsls	r3, r3, #5
 80012c2:	4413      	add	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	440b      	add	r3, r1
 80012c8:	2270      	movs	r2, #112	@ 0x70
 80012ca:	805a      	strh	r2, [r3, #2]

  return 0;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <read_register>:
 * @param *buffer pointer to data buffer to be written into the register
 * @param length  size_t specifying amount of bytes to be written
 *
 * @return: false if an SPI error occurred, true otherwise
 */
static bool read_register(rfm95_handle_t *handle, uint8_t reg, uint8_t *buffer, size_t length) {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	460b      	mov	r3, r1
 80012e4:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6898      	ldr	r0, [r3, #8]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	899b      	ldrh	r3, [r3, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	f002 fb87 	bl	8003a04 <HAL_GPIO_WritePin>

  uint8_t transmit_buffer = reg & 0x7fu;
 80012f6:	7afb      	ldrb	r3, [r7, #11]
 80012f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	75fb      	strb	r3, [r7, #23]

  if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6858      	ldr	r0, [r3, #4]
 8001304:	f107 0117 	add.w	r1, r7, #23
 8001308:	230a      	movs	r3, #10
 800130a:	2201      	movs	r2, #1
 800130c:	f004 ffb7 	bl	800627e <HAL_SPI_Transmit>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <read_register+0x44>
    return false;
 8001316:	2300      	movs	r3, #0
 8001318:	e015      	b.n	8001346 <read_register+0x70>
  }

  if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6858      	ldr	r0, [r3, #4]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	b29a      	uxth	r2, r3
 8001322:	230a      	movs	r3, #10
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	f005 f920 	bl	800656a <HAL_SPI_Receive>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <read_register+0x5e>
    return false;
 8001330:	2300      	movs	r3, #0
 8001332:	e008      	b.n	8001346 <read_register+0x70>
  }

  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6898      	ldr	r0, [r3, #8]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	899b      	ldrh	r3, [r3, #12]
 800133c:	2201      	movs	r2, #1
 800133e:	4619      	mov	r1, r3
 8001340:	f002 fb60 	bl	8003a04 <HAL_GPIO_WritePin>

  return true;
 8001344:	2301      	movs	r3, #1
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <write_register>:
 * @param value   uint8_t specifying byte to be written into the register
 *
 *
 * @return: false if an SPI error occurred, true otherwise
 */
static bool write_register(rfm95_handle_t *handle, uint8_t reg, uint8_t value) {
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	70fb      	strb	r3, [r7, #3]
 800135a:	4613      	mov	r3, r2
 800135c:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6898      	ldr	r0, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	899b      	ldrh	r3, [r3, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	4619      	mov	r1, r3
 800136a:	f002 fb4b 	bl	8003a04 <HAL_GPIO_WritePin>

  uint8_t transmit_buffer[2] = {(reg | 0x80u), value};
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001374:	b2db      	uxtb	r3, r3
 8001376:	733b      	strb	r3, [r7, #12]
 8001378:	78bb      	ldrb	r3, [r7, #2]
 800137a:	737b      	strb	r3, [r7, #13]

  if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6858      	ldr	r0, [r3, #4]
 8001380:	f107 010c 	add.w	r1, r7, #12
 8001384:	230a      	movs	r3, #10
 8001386:	2202      	movs	r2, #2
 8001388:	f004 ff79 	bl	800627e <HAL_SPI_Transmit>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <write_register+0x48>
    return false;
 8001392:	2300      	movs	r3, #0
 8001394:	e008      	b.n	80013a8 <write_register+0x5a>
  }

  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6898      	ldr	r0, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	899b      	ldrh	r3, [r3, #12]
 800139e:	2201      	movs	r2, #1
 80013a0:	4619      	mov	r1, r3
 80013a2:	f002 fb2f 	bl	8003a04 <HAL_GPIO_WritePin>

  return true;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <rfm95_modify_power>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_power(rfm95_handle_t *handle){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	memset(&pa_config, 0, sizeof(pa_config));
 80013b8:	2201      	movs	r2, #1
 80013ba:	2100      	movs	r1, #0
 80013bc:	482e      	ldr	r0, [pc, #184]	@ (8001478 <rfm95_modify_power+0xc8>)
 80013be:	f006 fcb3 	bl	8007d28 <memset>
	uint8_t pa_dac_config = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]

	uint8_t power = handle->config.tx_power;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80013cc:	73bb      	strb	r3, [r7, #14]

	if (power >= 2 && power <= 17) {
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d91a      	bls.n	800140a <rfm95_modify_power+0x5a>
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	2b11      	cmp	r3, #17
 80013d8:	d817      	bhi.n	800140a <rfm95_modify_power+0x5a>
		pa_config.max_power = 7;
 80013da:	4a27      	ldr	r2, [pc, #156]	@ (8001478 <rfm95_modify_power+0xc8>)
 80013dc:	7813      	ldrb	r3, [r2, #0]
 80013de:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80013e2:	7013      	strb	r3, [r2, #0]
		pa_config.pa_select = 1;
 80013e4:	4a24      	ldr	r2, [pc, #144]	@ (8001478 <rfm95_modify_power+0xc8>)
 80013e6:	7813      	ldrb	r3, [r2, #0]
 80013e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ec:	7013      	strb	r3, [r2, #0]
		pa_config.output_power = (power - 2);
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	3b02      	subs	r3, #2
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f003 030f 	and.w	r3, r3, #15
 80013f8:	b2d9      	uxtb	r1, r3
 80013fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001478 <rfm95_modify_power+0xc8>)
 80013fc:	7813      	ldrb	r3, [r2, #0]
 80013fe:	f361 0303 	bfi	r3, r1, #0, #4
 8001402:	7013      	strb	r3, [r2, #0]
		pa_dac_config = RFM95_PA_DAC_LOW_POWER;
 8001404:	2384      	movs	r3, #132	@ 0x84
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e013      	b.n	8001432 <rfm95_modify_power+0x82>

	} else if (power == 20) {
 800140a:	7bbb      	ldrb	r3, [r7, #14]
 800140c:	2b14      	cmp	r3, #20
 800140e:	d110      	bne.n	8001432 <rfm95_modify_power+0x82>
		pa_config.max_power = 7;
 8001410:	4a19      	ldr	r2, [pc, #100]	@ (8001478 <rfm95_modify_power+0xc8>)
 8001412:	7813      	ldrb	r3, [r2, #0]
 8001414:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001418:	7013      	strb	r3, [r2, #0]
		pa_config.pa_select = 1;
 800141a:	4a17      	ldr	r2, [pc, #92]	@ (8001478 <rfm95_modify_power+0xc8>)
 800141c:	7813      	ldrb	r3, [r2, #0]
 800141e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001422:	7013      	strb	r3, [r2, #0]
		pa_config.output_power = 15;
 8001424:	4a14      	ldr	r2, [pc, #80]	@ (8001478 <rfm95_modify_power+0xc8>)
 8001426:	7813      	ldrb	r3, [r2, #0]
 8001428:	f043 030f 	orr.w	r3, r3, #15
 800142c:	7013      	strb	r3, [r2, #0]
		pa_dac_config = RFM95_PA_DAC_HIGH_POWER;
 800142e:	2387      	movs	r3, #135	@ 0x87
 8001430:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8001432:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <rfm95_modify_power+0xc8>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	2109      	movs	r1, #9
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff87 	bl	800134e <write_register>
 8001440:	4603      	mov	r3, r0
 8001442:	f083 0301 	eor.w	r3, r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <rfm95_modify_power+0xa0>
 800144c:	2300      	movs	r3, #0
 800144e:	e00e      	b.n	800146e <rfm95_modify_power+0xbe>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	461a      	mov	r2, r3
 8001454:	214d      	movs	r1, #77	@ 0x4d
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ff79 	bl	800134e <write_register>
 800145c:	4603      	mov	r3, r0
 800145e:	f083 0301 	eor.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <rfm95_modify_power+0xbc>
 8001468:	2300      	movs	r3, #0
 800146a:	e000      	b.n	800146e <rfm95_modify_power+0xbe>

	return true;
 800146c:	2301      	movs	r3, #1
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200000a0 	.word	0x200000a0

0800147c <rfm95_modify_SF>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_SF(rfm95_handle_t *handle){
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	uint8_t  sf = RFM95_SF[handle->config.sf];
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800148a:	461a      	mov	r2, r3
 800148c:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <rfm95_modify_SF+0xbc>)
 800148e:	5c9b      	ldrb	r3, [r3, r2]
 8001490:	75fb      	strb	r3, [r7, #23]

	// Configure modem SF (depends on user configuration + DR offset):
	uint8_t sf_bits = (sf << 4) | 0x04; // set SF + CRC enable
 8001492:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	b25b      	sxtb	r3, r3
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	75bb      	strb	r3, [r7, #22]
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, sf_bits)) return false;
 80014a2:	7dbb      	ldrb	r3, [r7, #22]
 80014a4:	461a      	mov	r2, r3
 80014a6:	211e      	movs	r1, #30
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff50 	bl	800134e <write_register>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f083 0301 	eor.w	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <rfm95_modify_SF+0x42>
 80014ba:	2300      	movs	r3, #0
 80014bc:	e038      	b.n	8001530 <rfm95_modify_SF+0xb4>

	// AGC on (suggested in application note), LDR optimization only for Ts > 16 ms
	uint32_t bw = RFM95_BW_HZ[handle->config.bandwidth];
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <rfm95_modify_SF+0xc0>)
 80014c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014cc:	613b      	str	r3, [r7, #16]

	// compute symbol time (in ms) based on current settings:
	float curr_ts = 1e3*(((float) (1<<sf)) / bw);
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	2201      	movs	r2, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ec:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001540 <rfm95_modify_SF+0xc4>
 80014f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f4:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t LDRoptimize = curr_ts >= 16 ? 0x0C : 0x04;
 80014f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014fc:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001508:	db01      	blt.n	800150e <rfm95_modify_SF+0x92>
 800150a:	230c      	movs	r3, #12
 800150c:	e000      	b.n	8001510 <rfm95_modify_SF+0x94>
 800150e:	2304      	movs	r3, #4
 8001510:	72fb      	strb	r3, [r7, #11]
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, LDRoptimize)) return false;
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	461a      	mov	r2, r3
 8001516:	2126      	movs	r1, #38	@ 0x26
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff18 	bl	800134e <write_register>
 800151e:	4603      	mov	r3, r0
 8001520:	f083 0301 	eor.w	r3, r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <rfm95_modify_SF+0xb2>
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <rfm95_modify_SF+0xb4>

	return true;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	08008580 	.word	0x08008580
 800153c:	08008560 	.word	0x08008560
 8001540:	447a0000 	.word	0x447a0000

08001544 <rfm95_modify_CR_BW>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_CR_BW(rfm95_handle_t *handle){
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	uint8_t  cr = RFM95_CR[handle->config.cr];
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001552:	461a      	mov	r2, r3
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <rfm95_modify_CR_BW+0x60>)
 8001556:	5c9b      	ldrb	r3, [r3, r2]
 8001558:	75fb      	strb	r3, [r7, #23]
	uint32_t bw = RFM95_BW_BIN[handle->config.bandwidth];
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001560:	461a      	mov	r2, r3
 8001562:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <rfm95_modify_CR_BW+0x64>)
 8001564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001568:	613b      	str	r3, [r7, #16]

	uint8_t data = (bw << 4) | (cr << 1);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	b2da      	uxtb	r2, r3
 8001572:	7dfb      	ldrb	r3, [r7, #23]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	73fb      	strb	r3, [r7, #15]
	if(!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, data)) return false;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	461a      	mov	r2, r3
 8001580:	211d      	movs	r1, #29
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fee3 	bl	800134e <write_register>
 8001588:	4603      	mov	r3, r0
 800158a:	f083 0301 	eor.w	r3, r3, #1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <rfm95_modify_CR_BW+0x54>
 8001594:	2300      	movs	r3, #0
 8001596:	e000      	b.n	800159a <rfm95_modify_CR_BW+0x56>

	return true;
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	08008588 	.word	0x08008588
 80015a8:	08008570 	.word	0x08008570

080015ac <rfm95_modify_frequency>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_frequency(rfm95_handle_t *handle){
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = handle->config.channel_freq;
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 80015b8:	6179      	str	r1, [r7, #20]

  // FQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = ((uint64_t)frequency << 19) / RFM95_TCXO_FREQ;
 80015ba:	6979      	ldr	r1, [r7, #20]
 80015bc:	2000      	movs	r0, #0
 80015be:	460a      	mov	r2, r1
 80015c0:	4603      	mov	r3, r0
 80015c2:	0b55      	lsrs	r5, r2, #13
 80015c4:	04d4      	lsls	r4, r2, #19
 80015c6:	4a27      	ldr	r2, [pc, #156]	@ (8001664 <rfm95_modify_frequency+0xb8>)
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7fe fdfa 	bl	80001c8 <__aeabi_uldivmod>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	e9c7 2302 	strd	r2, r3, [r7, #8]

  if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 80015dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	0c02      	lsrs	r2, r0, #16
 80015ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80015ee:	0c0b      	lsrs	r3, r1, #16
 80015f0:	b2d3      	uxtb	r3, r2
 80015f2:	461a      	mov	r2, r3
 80015f4:	2106      	movs	r1, #6
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fea9 	bl	800134e <write_register>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f083 0301 	eor.w	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <rfm95_modify_frequency+0x60>
 8001608:	2300      	movs	r3, #0
 800160a:	e026      	b.n	800165a <rfm95_modify_frequency+0xae>
  if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 800160c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	0a02      	lsrs	r2, r0, #8
 800161a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800161e:	0a0b      	lsrs	r3, r1, #8
 8001620:	b2d3      	uxtb	r3, r2
 8001622:	461a      	mov	r2, r3
 8001624:	2107      	movs	r1, #7
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fe91 	bl	800134e <write_register>
 800162c:	4603      	mov	r3, r0
 800162e:	f083 0301 	eor.w	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <rfm95_modify_frequency+0x90>
 8001638:	2300      	movs	r3, #0
 800163a:	e00e      	b.n	800165a <rfm95_modify_frequency+0xae>
  if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 800163c:	7a3b      	ldrb	r3, [r7, #8]
 800163e:	461a      	mov	r2, r3
 8001640:	2108      	movs	r1, #8
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fe83 	bl	800134e <write_register>
 8001648:	4603      	mov	r3, r0
 800164a:	f083 0301 	eor.w	r3, r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <rfm95_modify_frequency+0xac>
 8001654:	2300      	movs	r3, #0
 8001656:	e000      	b.n	800165a <rfm95_modify_frequency+0xae>

	return true;
 8001658:	2301      	movs	r3, #1
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bdb0      	pop	{r4, r5, r7, pc}
 8001662:	bf00      	nop
 8001664:	01e84800 	.word	0x01e84800

08001668 <rfm95_modify_syncWord>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_syncWord(rfm95_handle_t *handle){
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, handle->config.sync_word)) return false;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001676:	461a      	mov	r2, r3
 8001678:	2139      	movs	r1, #57	@ 0x39
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fe67 	bl	800134e <write_register>
 8001680:	4603      	mov	r3, r0
 8001682:	f083 0301 	eor.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <rfm95_modify_syncWord+0x28>
 800168c:	2300      	movs	r3, #0
 800168e:	e000      	b.n	8001692 <rfm95_modify_syncWord+0x2a>

	return true;
 8001690:	2301      	movs	r3, #1
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <config_load_default>:
 *
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers.
 *
 * @return void.
 */
static void config_load_default(rfm95_handle_t *handle){
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if (handle->config.sf == 0) 					rfm95_set_SF(handle, RFM95_SF7);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d103      	bne.n	80016b6 <config_load_default+0x1a>
 80016ae:	2100      	movs	r1, #0
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f94b 	bl	800194c <rfm95_set_SF>
  if (handle->config.cr == 0) 					rfm95_set_CR(handle, RFM95_CR4_5);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d103      	bne.n	80016c8 <config_load_default+0x2c>
 80016c0:	2100      	movs	r1, #0
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f952 	bl	800196c <rfm95_set_CR>
  if (handle->config.tx_power == 0)  		rfm95_set_power(handle, 14);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d103      	bne.n	80016da <config_load_default+0x3e>
 80016d2:	210e      	movs	r1, #14
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f91d 	bl	8001914 <rfm95_set_power>
  if (handle->config.bandwidth == 0) 		rfm95_set_BW(handle, RFM95_BW125);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d103      	bne.n	80016ec <config_load_default+0x50>
 80016e4:	2101      	movs	r1, #1
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f950 	bl	800198c <rfm95_set_BW>
  if (handle->config.sync_word == 0) 		rfm95_set_syncWord(handle, LORA_DEF_SYNC_WORD);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d103      	bne.n	80016fe <config_load_default+0x62>
 80016f6:	2112      	movs	r1, #18
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f977 	bl	80019ec <rfm95_set_syncWord>
  if (handle->config.channel_freq == 0) rfm95_set_frequency(handle, 868000000);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001702:	2b00      	cmp	r3, #0
 8001704:	d104      	bne.n	8001710 <config_load_default+0x74>
 8001706:	4904      	ldr	r1, [pc, #16]	@ (8001718 <config_load_default+0x7c>)
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f94f 	bl	80019ac <rfm95_set_frequency>

  return;
 800170e:	bf00      	nop
 8001710:	bf00      	nop
}
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	33bca100 	.word	0x33bca100

0800171c <wait_for_irq>:
 * @param interrupt  rfm95_interrupt_t defining the interrupt event to wait for (DIO0, DIO1, DIO5 supported in this version)
 * @param timeout_ms uint32_t defining the maximum timeout in ms.
 *
 * @return true if an interrupt is received within the specified timeout, false otherwise
 */
static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	460b      	mov	r3, r1
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4798      	blx	r3
 8001730:	4601      	mov	r1, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	fb02 f303 	mul.w	r3, r2, r3
 800173c:	4a0d      	ldr	r2, [pc, #52]	@ (8001774 <wait_for_irq+0x58>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	099b      	lsrs	r3, r3, #6
 8001744:	440b      	add	r3, r1
 8001746:	617b      	str	r3, [r7, #20]

  while (handle->interrupt_times[interrupt] == 0) {
 8001748:	e008      	b.n	800175c <wait_for_irq+0x40>
    if (handle->get_precision_tick() >= timeout_tick) {
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4798      	blx	r3
 8001750:	4602      	mov	r2, r0
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	4293      	cmp	r3, r2
 8001756:	d801      	bhi.n	800175c <wait_for_irq+0x40>
      return false;
 8001758:	2300      	movs	r3, #0
 800175a:	e007      	b.n	800176c <wait_for_irq+0x50>
  while (handle->interrupt_times[interrupt] == 0) {
 800175c:	7afa      	ldrb	r2, [r7, #11]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	320c      	adds	r2, #12
 8001762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0ef      	beq.n	800174a <wait_for_irq+0x2e>
    }
  }

  return true;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	10624dd3 	.word	0x10624dd3

08001778 <rfm95_init>:



// -------------------------------- USER PUBLIC FUNCTIONS -------------------------------

uint16_t rfm95_init(rfm95_handle_t *handle){
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]


  reset_rfm(handle);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f8a9 	bl	80018d8 <reset_rfm>

  // setup default configurations:
  config_load_default(handle);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff88 	bl	800169c <config_load_default>

  // Check for correct version.
  uint8_t version;
  if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 800178c:	f107 020f 	add.w	r2, r7, #15
 8001790:	2301      	movs	r3, #1
 8001792:	2142      	movs	r1, #66	@ 0x42
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fd9e 	bl	80012d6 <read_register>
 800179a:	4603      	mov	r3, r0
 800179c:	f083 0301 	eor.w	r3, r3, #1
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <rfm95_init+0x32>
 80017a6:	2300      	movs	r3, #0
 80017a8:	e092      	b.n	80018d0 <rfm95_init+0x158>
  if (version != RFM9x_VER) return false;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	2b12      	cmp	r3, #18
 80017ae:	d001      	beq.n	80017b4 <rfm95_init+0x3c>
 80017b0:	2300      	movs	r3, #0
 80017b2:	e08d      	b.n	80018d0 <rfm95_init+0x158>

  // Module must be placed in sleep mode before switching to LoRa.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_SLEEP)) return false;
 80017b4:	2200      	movs	r2, #0
 80017b6:	2101      	movs	r1, #1
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fdc8 	bl	800134e <write_register>
 80017be:	4603      	mov	r3, r0
 80017c0:	f083 0301 	eor.w	r3, r3, #1
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <rfm95_init+0x56>
 80017ca:	2300      	movs	r3, #0
 80017cc:	e080      	b.n	80018d0 <rfm95_init+0x158>
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 80017ce:	2280      	movs	r2, #128	@ 0x80
 80017d0:	2101      	movs	r1, #1
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fdbb 	bl	800134e <write_register>
 80017d8:	4603      	mov	r3, r0
 80017da:	f083 0301 	eor.w	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <rfm95_init+0x70>
 80017e4:	2300      	movs	r3, #0
 80017e6:	e073      	b.n	80018d0 <rfm95_init+0x158>

  // Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
  if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 80017e8:	2200      	movs	r2, #0
 80017ea:	2140      	movs	r1, #64	@ 0x40
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fdae 	bl	800134e <write_register>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f083 0301 	eor.w	r3, r3, #1
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <rfm95_init+0x8a>
 80017fe:	2300      	movs	r3, #0
 8001800:	e066      	b.n	80018d0 <rfm95_init+0x158>

  if (handle->on_after_interrupts_configured != NULL) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <rfm95_init+0x98>
    handle->on_after_interrupts_configured();
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180e:	4798      	blx	r3
  }

  // Set LNA to the highest gain with 150% boost (suggested in AN)
  if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 8001810:	2223      	movs	r2, #35	@ 0x23
 8001812:	210c      	movs	r1, #12
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fd9a 	bl	800134e <write_register>
 800181a:	4603      	mov	r3, r0
 800181c:	f083 0301 	eor.w	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <rfm95_init+0xb2>
 8001826:	2300      	movs	r3, #0
 8001828:	e052      	b.n	80018d0 <rfm95_init+0x158>

  // Preamble set to 10 + 4.25 = 14.25 symbols
  if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 800182a:	2200      	movs	r2, #0
 800182c:	2120      	movs	r1, #32
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fd8d 	bl	800134e <write_register>
 8001834:	4603      	mov	r3, r0
 8001836:	f083 0301 	eor.w	r3, r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <rfm95_init+0xcc>
 8001840:	2300      	movs	r3, #0
 8001842:	e045      	b.n	80018d0 <rfm95_init+0x158>
  if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x0A)) return false;
 8001844:	220a      	movs	r2, #10
 8001846:	2121      	movs	r1, #33	@ 0x21
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fd80 	bl	800134e <write_register>
 800184e:	4603      	mov	r3, r0
 8001850:	f083 0301 	eor.w	r3, r3, #1
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <rfm95_init+0xe6>
 800185a:	2300      	movs	r3, #0
 800185c:	e038      	b.n	80018d0 <rfm95_init+0x158>

  // Set up TX and RX FIFO base addresses.
  if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, RFM95_FIFO_TX_BASE_ADDRESS)) return false;
 800185e:	2200      	movs	r2, #0
 8001860:	210e      	movs	r1, #14
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fd73 	bl	800134e <write_register>
 8001868:	4603      	mov	r3, r0
 800186a:	f083 0301 	eor.w	r3, r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <rfm95_init+0x100>
 8001874:	2300      	movs	r3, #0
 8001876:	e02b      	b.n	80018d0 <rfm95_init+0x158>
  if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, RFM95_FIFO_RX_BASE_ADDRESS)) return false;
 8001878:	2200      	movs	r2, #0
 800187a:	210f      	movs	r1, #15
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fd66 	bl	800134e <write_register>
 8001882:	4603      	mov	r3, r0
 8001884:	f083 0301 	eor.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <rfm95_init+0x11a>
 800188e:	2300      	movs	r3, #0
 8001890:	e01e      	b.n	80018d0 <rfm95_init+0x158>

  // Maximum payload length of the RFM95 is 0xFF.
  if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 0xFF)) return false;
 8001892:	22ff      	movs	r2, #255	@ 0xff
 8001894:	2123      	movs	r1, #35	@ 0x23
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fd59 	bl	800134e <write_register>
 800189c:	4603      	mov	r3, r0
 800189e:	f083 0301 	eor.w	r3, r3, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <rfm95_init+0x134>
 80018a8:	2300      	movs	r3, #0
 80018aa:	e011      	b.n	80018d0 <rfm95_init+0x158>

  // Let module sleep after initialization.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 80018ac:	2280      	movs	r2, #128	@ 0x80
 80018ae:	2101      	movs	r1, #1
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fd4c 	bl	800134e <write_register>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f083 0301 	eor.w	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <rfm95_init+0x14e>
 80018c2:	2300      	movs	r3, #0
 80018c4:	e004      	b.n	80018d0 <rfm95_init+0x158>
  handle->rfm_status = SLEEP_MODE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return true;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <reset_rfm>:
 *
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers.
 *
 * @return void.
 */
void reset_rfm(rfm95_handle_t *handle){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6918      	ldr	r0, [r3, #16]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	8a9b      	ldrh	r3, [r3, #20]
 80018e8:	2200      	movs	r2, #0
 80018ea:	4619      	mov	r1, r3
 80018ec:	f002 f88a 	bl	8003a04 <HAL_GPIO_WritePin>
  HAL_Delay(1); // 0.1ms would theoretically be enough
 80018f0:	2001      	movs	r0, #1
 80018f2:	f001 fd87 	bl	8003404 <HAL_Delay>
  HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6918      	ldr	r0, [r3, #16]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	8a9b      	ldrh	r3, [r3, #20]
 80018fe:	2201      	movs	r2, #1
 8001900:	4619      	mov	r1, r3
 8001902:	f002 f87f 	bl	8003a04 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001906:	2005      	movs	r0, #5
 8001908:	f001 fd7c 	bl	8003404 <HAL_Delay>

  return;
 800190c:	bf00      	nop
}
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <rfm95_set_power>:
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param uint8_t power          must be wihin the range 2 dbm - 17 dBm.
 *
 * @return void.
 */
void rfm95_set_power(rfm95_handle_t *handle, uint8_t power){
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
	uint8_t pw = power;
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	73fb      	strb	r3, [r7, #15]
	if (power < 2)  pw = 2;
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d801      	bhi.n	800192e <rfm95_set_power+0x1a>
 800192a:	2302      	movs	r3, #2
 800192c:	73fb      	strb	r3, [r7, #15]
	if (power > 17) pw = 17;
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	2b11      	cmp	r3, #17
 8001932:	d901      	bls.n	8001938 <rfm95_set_power+0x24>
 8001934:	2311      	movs	r3, #17
 8001936:	73fb      	strb	r3, [r7, #15]

	handle->config.tx_power = pw;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

	return;
 8001940:	bf00      	nop
}
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <rfm95_set_SF>:
 * @param *handle    rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param rfm95_sf_t sf             must be within 7 - 12 (rely on the dedicated rfm95_sf_t structure, do not manually write).
 *
 * @return void.
 */
void rfm95_set_SF(rfm95_handle_t *handle, rfm95_sf_t sf){
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	70fb      	strb	r3, [r7, #3]
	handle->config.sf = sf;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	return;
 8001960:	bf00      	nop
}
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <rfm95_set_CR>:
 * @param *handle    rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param rfm95_cr_t cr             must be within 4/5 - 4/8 (rely on the dedicated rfm95_cr_t structure, do not manually write).
 *
 * @return void.
 */
void rfm95_set_CR(rfm95_handle_t *handle, rfm95_cr_t cr){
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	70fb      	strb	r3, [r7, #3]
	handle->config.cr = cr;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
	return;
 8001980:	bf00      	nop
}
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <rfm95_set_BW>:
 * @param *handle    rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param rfm95_bw_t bw             must be within 62.5 - 500 kHz (rely on the dedicated rfm95_cr_t structure, do not manually write).
 *
 * @return void.
 */
void rfm95_set_BW(rfm95_handle_t *handle, rfm95_bw_t bw){
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	70fb      	strb	r3, [r7, #3]
	handle->config.bandwidth = bw;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	return;
 80019a0:	bf00      	nop
}
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <rfm95_set_frequency>:
 * @param *handle  rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param uint32_t freq           must be within 863 - 870 MHz.
 *
 * @return void.
 */
void rfm95_set_frequency(rfm95_handle_t *handle, uint32_t freq){
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
	uint32_t f = freq;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	60fb      	str	r3, [r7, #12]
	if (f < LOW_FREQ_BAND_EU868)  f = LOW_FREQ_BAND_EU868;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4a09      	ldr	r2, [pc, #36]	@ (80019e4 <rfm95_set_frequency+0x38>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d201      	bcs.n	80019c6 <rfm95_set_frequency+0x1a>
 80019c2:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <rfm95_set_frequency+0x38>)
 80019c4:	60fb      	str	r3, [r7, #12]
	if (f > HIGH_FREQ_BAND_EU868) f = HIGH_FREQ_BAND_EU868;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4a07      	ldr	r2, [pc, #28]	@ (80019e8 <rfm95_set_frequency+0x3c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <rfm95_set_frequency+0x26>
 80019ce:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <rfm95_set_frequency+0x3c>)
 80019d0:	60fb      	str	r3, [r7, #12]

	handle->config.channel_freq = f;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	649a      	str	r2, [r3, #72]	@ 0x48
	return;
 80019d8:	bf00      	nop
}
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	337055c0 	.word	0x337055c0
 80019e8:	33db2580 	.word	0x33db2580

080019ec <rfm95_set_syncWord>:
 * @param *handle  rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param uint8_t syncWord        any value (0x12 suggested, avoid 0x34 reserved for LoRaWAN).
 *
 * @return void.
 */
void rfm95_set_syncWord(rfm95_handle_t *handle, uint8_t syncWord){
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	70fb      	strb	r3, [r7, #3]
	uint8_t sync = syncWord;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	73fb      	strb	r3, [r7, #15]

	if(sync == 0x34) sync = LORA_DEF_SYNC_WORD;
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	2b34      	cmp	r3, #52	@ 0x34
 8001a00:	d101      	bne.n	8001a06 <rfm95_set_syncWord+0x1a>
 8001a02:	2312      	movs	r3, #18
 8001a04:	73fb      	strb	r3, [r7, #15]
	handle->config.sync_word = sync;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	return;
 8001a0e:	bf00      	nop
}
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <rfm95_getRSSI>:
 * @param *handle  rfm95_handle_t   structure containing RFM95 configurations and function pointers.
 * @param *int16_t rssi             this variable will store the actual rssi value.
 *
 * @return true if no errors occurred.
 */
bool rfm95_getRSSI(rfm95_handle_t *handle, int16_t *rssi){
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
  uint8_t read;
  if(!read_register(handle, RFM95_REGISTER_PKT_RSSI, &read, 1)) return false;
 8001a24:	f107 020f 	add.w	r2, r7, #15
 8001a28:	2301      	movs	r3, #1
 8001a2a:	211a      	movs	r1, #26
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff fc52 	bl	80012d6 <read_register>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f083 0301 	eor.w	r3, r3, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <rfm95_getRSSI+0x28>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e006      	b.n	8001a50 <rfm95_getRSSI+0x36>

  *rssi = -157 + read;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	3b9d      	subs	r3, #157	@ 0x9d
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	b21a      	sxth	r2, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	801a      	strh	r2, [r3, #0]
  return true;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <rfm95_getSNR>:
 * @param *handle  rfm95_handle_t   structure containing RFM95 configurations and function pointers.
 * @param *int16_t snr              this variable will store the actual snr value.
 *
 * @return true if no errors occurred.
 */
bool rfm95_getSNR(rfm95_handle_t *handle, int8_t *snr){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint8_t read;
  if(!read_register(handle, RFM95_REGISTER_PACKET_SNR, &read, 1)) return false;
 8001a62:	f107 020f 	add.w	r2, r7, #15
 8001a66:	2301      	movs	r3, #1
 8001a68:	2119      	movs	r1, #25
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fc33 	bl	80012d6 <read_register>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f083 0301 	eor.w	r3, r3, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <rfm95_getSNR+0x28>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e009      	b.n	8001a94 <rfm95_getSNR+0x3c>

  *snr =  (((int8_t)read)/4);
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	da00      	bge.n	8001a8a <rfm95_getSNR+0x32>
 8001a88:	3303      	adds	r3, #3
 8001a8a:	109b      	asrs	r3, r3, #2
 8001a8c:	b25a      	sxtb	r2, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	701a      	strb	r2, [r3, #0]
  return true;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <rfm95_getModemStatus>:
 * @param *handle  rfm95_handle_t   structure containing RFM95 configurations and function pointers.
 * @param *uint8_t status           this variable will store only the 5 LSBs of the modem status register (1st 3 bits ignored).
 *
 * @return true if no errors occurred.
 */
bool rfm95_getModemStatus(rfm95_handle_t *handle, uint8_t *status){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint8_t read;
  if(!read_register(handle, RFM95_REGISTER_MODEM_STATUS, &read, 1)) return false;
 8001aa6:	f107 020f 	add.w	r2, r7, #15
 8001aaa:	2301      	movs	r3, #1
 8001aac:	2118      	movs	r1, #24
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fc11 	bl	80012d6 <read_register>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f083 0301 	eor.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <rfm95_getModemStatus+0x28>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e006      	b.n	8001ad2 <rfm95_getModemStatus+0x36>

  *status = read & 0x1F;
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	701a      	strb	r2, [r3, #0]
  return true;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <rfm95_stdby>:
 *
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers
 *
 * @return true if no errors occurred
 */
bool rfm95_stdby(rfm95_handle_t *handle){
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  // Move modem to LoRa standby
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 8001ae2:	2281      	movs	r2, #129	@ 0x81
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fc31 	bl	800134e <write_register>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f083 0301 	eor.w	r3, r3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <rfm95_stdby+0x22>
 8001af8:	2300      	movs	r3, #0
 8001afa:	e011      	b.n	8001b20 <rfm95_stdby+0x46>

  // Wait for the modem to be ready
  if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8001afc:	220a      	movs	r2, #10
 8001afe:	2102      	movs	r1, #2
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff fe0b 	bl	800171c <wait_for_irq>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f083 0301 	eor.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <rfm95_stdby+0x3c>
 8001b12:	2300      	movs	r3, #0
 8001b14:	e004      	b.n	8001b20 <rfm95_stdby+0x46>

  handle->rfm_status = STNBY_MODE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return true;
 8001b1e:	2301      	movs	r3, #1
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <rfm95_send>:
 * @param *uint8_t senda_daya       pointer to data buffer to be transmitted.
 * @param size_t   send_data_length size for the TX buffer
 *
 * @return true if no errors occurred.
 */
bool rfm95_send(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]

  // make changes effective
  if (!rfm95_modify_power(handle))     return false;
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff fc3b 	bl	80013b0 <rfm95_modify_power>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f083 0301 	eor.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <rfm95_send+0x22>
 8001b46:	2300      	movs	r3, #0
 8001b48:	e0e5      	b.n	8001d16 <rfm95_send+0x1ee>
  if (!rfm95_modify_SF(handle))        return false;
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff fc96 	bl	800147c <rfm95_modify_SF>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f083 0301 	eor.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <rfm95_send+0x38>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e0da      	b.n	8001d16 <rfm95_send+0x1ee>
  if (!rfm95_modify_frequency(handle)) return false;
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f7ff fd23 	bl	80015ac <rfm95_modify_frequency>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f083 0301 	eor.w	r3, r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <rfm95_send+0x4e>
 8001b72:	2300      	movs	r3, #0
 8001b74:	e0cf      	b.n	8001d16 <rfm95_send+0x1ee>
  if (!rfm95_modify_CR_BW(handle))     return false;
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7ff fce4 	bl	8001544 <rfm95_modify_CR_BW>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f083 0301 	eor.w	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <rfm95_send+0x64>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e0c4      	b.n	8001d16 <rfm95_send+0x1ee>
  if (!rfm95_modify_syncWord(handle))  return false;
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7ff fd6b 	bl	8001668 <rfm95_modify_syncWord>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f083 0301 	eor.w	r3, r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <rfm95_send+0x7a>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e0b9      	b.n	8001d16 <rfm95_send+0x1ee>

  // Set the payload length.
  if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, send_data_length)) return false;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2122      	movs	r1, #34	@ 0x22
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f7ff fbcf 	bl	800134e <write_register>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f083 0301 	eor.w	r3, r3, #1
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <rfm95_send+0x98>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e0aa      	b.n	8001d16 <rfm95_send+0x1ee>

  // Enable tx-done interrupt, clear flags and previous interrupt time
  if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8001bc0:	2240      	movs	r2, #64	@ 0x40
 8001bc2:	2140      	movs	r1, #64	@ 0x40
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f7ff fbc2 	bl	800134e <write_register>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f083 0301 	eor.w	r3, r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <rfm95_send+0xb2>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e09d      	b.n	8001d16 <rfm95_send+0x1ee>
  if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xFF)) return false;
 8001bda:	22ff      	movs	r2, #255	@ 0xff
 8001bdc:	2112      	movs	r1, #18
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7ff fbb5 	bl	800134e <write_register>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f083 0301 	eor.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <rfm95_send+0xcc>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e090      	b.n	8001d16 <rfm95_send+0x1ee>
  handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	631a      	str	r2, [r3, #48]	@ 0x30
  handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	635a      	str	r2, [r3, #52]	@ 0x34
  handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	639a      	str	r2, [r3, #56]	@ 0x38

  // Move modem to LoRa standby
  if (handle->rfm_status != STNBY_MODE){
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d01d      	beq.n	8001c4e <rfm95_send+0x126>
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 8001c12:	2281      	movs	r2, #129	@ 0x81
 8001c14:	2101      	movs	r1, #1
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f7ff fb99 	bl	800134e <write_register>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f083 0301 	eor.w	r3, r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <rfm95_send+0x104>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e074      	b.n	8001d16 <rfm95_send+0x1ee>

    // Wait for the modem to be ready
    if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	2102      	movs	r1, #2
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f7ff fd73 	bl	800171c <wait_for_irq>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f083 0301 	eor.w	r3, r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <rfm95_send+0x11e>
 8001c42:	2300      	movs	r3, #0
 8001c44:	e067      	b.n	8001d16 <rfm95_send+0x1ee>
    handle->rfm_status = STNBY_MODE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  // Set pointer to start of TX section in FIFO
  if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, RFM95_FIFO_TX_BASE_ADDRESS)) return false;
 8001c4e:	2200      	movs	r2, #0
 8001c50:	210d      	movs	r1, #13
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f7ff fb7b 	bl	800134e <write_register>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f083 0301 	eor.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <rfm95_send+0x140>
 8001c64:	2300      	movs	r3, #0
 8001c66:	e056      	b.n	8001d16 <rfm95_send+0x1ee>

  // Write payload to FIFO.
  for (size_t i = 0; i < send_data_length; i++) {
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	e00b      	b.n	8001c86 <rfm95_send+0x15e>
    write_register(handle, RFM95_REGISTER_FIFO_ACCESS, send_data[i]);
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	4413      	add	r3, r2
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	2100      	movs	r1, #0
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f7ff fb67 	bl	800134e <write_register>
  for (size_t i = 0; i < send_data_length; i++) {
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d3ef      	bcc.n	8001c6e <rfm95_send+0x146>
  }

  // Set modem to tx mode.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_TX)) return false;
 8001c8e:	2283      	movs	r2, #131	@ 0x83
 8001c90:	2101      	movs	r1, #1
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f7ff fb5b 	bl	800134e <write_register>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f083 0301 	eor.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <rfm95_send+0x180>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e036      	b.n	8001d16 <rfm95_send+0x1ee>

  // Wait for the modem to be ready
  if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8001ca8:	220a      	movs	r2, #10
 8001caa:	2102      	movs	r1, #2
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f7ff fd35 	bl	800171c <wait_for_irq>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f083 0301 	eor.w	r3, r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <rfm95_send+0x19a>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e029      	b.n	8001d16 <rfm95_send+0x1ee>
  handle->rfm_status = TRANSMIT_MODE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  // Wait for the transfer complete interrupt.
  if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 8001cca:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7ff fd23 	bl	800171c <wait_for_irq>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f083 0301 	eor.w	r3, r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <rfm95_send+0x1be>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e017      	b.n	8001d16 <rfm95_send+0x1ee>

  // LSE Tick corresponding to the end of TX --> not needed here
  uint32_t tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	613b      	str	r3, [r7, #16]
  handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	631a      	str	r2, [r3, #48]	@ 0x30

  // Return modem to sleep.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 8001cf2:	2280      	movs	r2, #128	@ 0x80
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f7ff fb29 	bl	800134e <write_register>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f083 0301 	eor.w	r3, r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <rfm95_send+0x1e4>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e004      	b.n	8001d16 <rfm95_send+0x1ee>
  handle->rfm_status = SLEEP_MODE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return 1;
 8001d14:	2301      	movs	r3, #1
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <rfm95_enter_rx_mode>:
 *
 * @param *handle  rfm95_handle_t   structure containing RFM95 configurations and function pointers.
 *
 * @return true if no errors occurred.
 */
bool rfm95_enter_rx_mode(rfm95_handle_t *handle){
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]

  // Clear flags and previous interrupt time, configure mapping for RX done.
  if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8001d26:	2200      	movs	r2, #0
 8001d28:	2140      	movs	r1, #64	@ 0x40
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff fb0f 	bl	800134e <write_register>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f083 0301 	eor.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <rfm95_enter_rx_mode+0x22>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e05b      	b.n	8001df8 <rfm95_enter_rx_mode+0xda>
  if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xFF)) return false;
 8001d40:	22ff      	movs	r2, #255	@ 0xff
 8001d42:	2112      	movs	r1, #18
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff fb02 	bl	800134e <write_register>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f083 0301 	eor.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <rfm95_enter_rx_mode+0x3c>
 8001d56:	2300      	movs	r3, #0
 8001d58:	e04e      	b.n	8001df8 <rfm95_enter_rx_mode+0xda>
  handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	635a      	str	r2, [r3, #52]	@ 0x34
  handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	639a      	str	r2, [r3, #56]	@ 0x38

  // Move modem to LoRa standby
  if (handle->rfm_status != STNBY_MODE){
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d01d      	beq.n	8001db4 <rfm95_enter_rx_mode+0x96>
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 8001d78:	2281      	movs	r2, #129	@ 0x81
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff fae6 	bl	800134e <write_register>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f083 0301 	eor.w	r3, r3, #1
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <rfm95_enter_rx_mode+0x74>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e032      	b.n	8001df8 <rfm95_enter_rx_mode+0xda>

    // Wait for the modem to be ready.
    if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8001d92:	220a      	movs	r2, #10
 8001d94:	2102      	movs	r1, #2
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff fcc0 	bl	800171c <wait_for_irq>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f083 0301 	eor.w	r3, r3, #1
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <rfm95_enter_rx_mode+0x8e>
 8001da8:	2300      	movs	r3, #0
 8001daa:	e025      	b.n	8001df8 <rfm95_enter_rx_mode+0xda>
    handle->rfm_status = STNBY_MODE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  // Enter RX CONT mode
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_RX_CONT)) return false;
 8001db4:	2285      	movs	r2, #133	@ 0x85
 8001db6:	2101      	movs	r1, #1
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff fac8 	bl	800134e <write_register>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f083 0301 	eor.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <rfm95_enter_rx_mode+0xb0>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e014      	b.n	8001df8 <rfm95_enter_rx_mode+0xda>

  // Wait for the modem to be ready.
  handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8001dd4:	220a      	movs	r2, #10
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff fc9f 	bl	800171c <wait_for_irq>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f083 0301 	eor.w	r3, r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <rfm95_enter_rx_mode+0xd0>
 8001dea:	2300      	movs	r3, #0
 8001dec:	e004      	b.n	8001df8 <rfm95_enter_rx_mode+0xda>
  handle->rfm_status = RXCONTIN_MODE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2203      	movs	r2, #3
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	return 1;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <rfm95_receive>:
 * @param *uint8_t rx_buff          will contain the received payload.
 * @param size_t   rx_data_length   will contain the received number of bytes.
 *
 * @return true if no errors occurred.
 */
bool rfm95_receive(rfm95_handle_t *handle, uint8_t *rx_buff, uint8_t *rx_data_length){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]

  // Move modem to LoRa standby.
  if (handle->rfm_status != STNBY_MODE){
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d01d      	beq.n	8001e54 <rfm95_receive+0x54>
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 8001e18:	2281      	movs	r2, #129	@ 0x81
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f7ff fa96 	bl	800134e <write_register>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f083 0301 	eor.w	r3, r3, #1
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <rfm95_receive+0x32>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e088      	b.n	8001f44 <rfm95_receive+0x144>

    // Wait for the modem to be ready.
    if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8001e32:	220a      	movs	r2, #10
 8001e34:	2102      	movs	r1, #2
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff fc70 	bl	800171c <wait_for_irq>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f083 0301 	eor.w	r3, r3, #1
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <rfm95_receive+0x4c>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e07b      	b.n	8001f44 <rfm95_receive+0x144>
    handle->rfm_status = STNBY_MODE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  // proceed with payload extraction:
  uint8_t irq_flags;
  read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 8001e54:	f107 0217 	add.w	r2, r7, #23
 8001e58:	2301      	movs	r3, #1
 8001e5a:	2112      	movs	r1, #18
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f7ff fa3a 	bl	80012d6 <read_register>

  // Check if there was a CRC error.
  if (irq_flags & RFM95_PAYLOAD_CRC_ERR_MSK) {
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d012      	beq.n	8001e92 <rfm95_receive+0x92>
    // Return modem to sleep.
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 8001e6c:	2280      	movs	r2, #128	@ 0x80
 8001e6e:	2101      	movs	r1, #1
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff fa6c 	bl	800134e <write_register>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f083 0301 	eor.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <rfm95_receive+0x86>
 8001e82:	2300      	movs	r3, #0
 8001e84:	e05e      	b.n	8001f44 <rfm95_receive+0x144>
    handle->rfm_status = SLEEP_MODE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return false;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e058      	b.n	8001f44 <rfm95_receive+0x144>
  }

  // Read received payload length.
  uint8_t rx_bytes;
  if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &rx_bytes, 1)) return false;
 8001e92:	f107 0216 	add.w	r2, r7, #22
 8001e96:	2301      	movs	r3, #1
 8001e98:	2113      	movs	r1, #19
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7ff fa1b 	bl	80012d6 <read_register>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f083 0301 	eor.w	r3, r3, #1
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <rfm95_receive+0xb0>
 8001eac:	2300      	movs	r3, #0
 8001eae:	e049      	b.n	8001f44 <rfm95_receive+0x144>

  // block here if no bytes were received
  if (rx_bytes == 0) {
 8001eb0:	7dbb      	ldrb	r3, [r7, #22]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <rfm95_receive+0xc4>
    write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP);
 8001eb6:	2280      	movs	r2, #128	@ 0x80
 8001eb8:	2101      	movs	r1, #1
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f7ff fa47 	bl	800134e <write_register>
    return false;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e03f      	b.n	8001f44 <rfm95_receive+0x144>
  }

  // Read packet location within the FIFO buffer
  uint8_t fifo_rx_entry;
  if (!read_register(handle, RFM95_REGISTER_FIFO_RX_CURR_ADDR, &fifo_rx_entry, 1)) return false;
 8001ec4:	f107 0215 	add.w	r2, r7, #21
 8001ec8:	2301      	movs	r3, #1
 8001eca:	2110      	movs	r1, #16
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f7ff fa02 	bl	80012d6 <read_register>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f083 0301 	eor.w	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <rfm95_receive+0xe2>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e030      	b.n	8001f44 <rfm95_receive+0x144>

  // Read received payload itself.
  if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, fifo_rx_entry)) return false;
 8001ee2:	7d7b      	ldrb	r3, [r7, #21]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	210d      	movs	r1, #13
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f7ff fa30 	bl	800134e <write_register>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f083 0301 	eor.w	r3, r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <rfm95_receive+0xfe>
 8001efa:	2300      	movs	r3, #0
 8001efc:	e022      	b.n	8001f44 <rfm95_receive+0x144>
  if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, rx_buff, rx_bytes))return false;
 8001efe:	7dbb      	ldrb	r3, [r7, #22]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	2100      	movs	r1, #0
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7ff f9e6 	bl	80012d6 <read_register>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f083 0301 	eor.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <rfm95_receive+0x11a>
 8001f16:	2300      	movs	r3, #0
 8001f18:	e014      	b.n	8001f44 <rfm95_receive+0x144>

  // Return modem to sleep --> needed to clear the FIFO
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 8001f1a:	2280      	movs	r2, #128	@ 0x80
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7ff fa15 	bl	800134e <write_register>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f083 0301 	eor.w	r3, r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <rfm95_receive+0x134>
 8001f30:	2300      	movs	r3, #0
 8001f32:	e007      	b.n	8001f44 <rfm95_receive+0x144>
  handle->rfm_status = SLEEP_MODE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  *rx_data_length = rx_bytes;
 8001f3c:	7dba      	ldrb	r2, [r7, #22]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	701a      	strb	r2, [r3, #0]

	return true;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <rfm95_on_interrupt>:
 * @param *handle   rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param interrupt rfm95_interrupt_t defining which interrupt triggered the IRQ (either DIO0, DIO1 or DIO5).
 *
 * @return void.
 */
void rfm95_on_interrupt(rfm95_handle_t *handle, rfm95_interrupt_t interrupt) {
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
  if (handle->rfm_timer->Instance->CR & LPTIM_CR_ENABLE) {
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <rfm95_on_interrupt+0x32>
    // get timing if and only if LPTIM is running
    handle->interrupt_times[interrupt] = handle->get_precision_tick();
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	78fc      	ldrb	r4, [r7, #3]
 8001f6e:	4798      	blx	r3
 8001f70:	4601      	mov	r1, r0
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f104 020c 	add.w	r2, r4, #12
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return;
 8001f7c:	e005      	b.n	8001f8a <rfm95_on_interrupt+0x3e>
  }

  // else, skip...
  handle->interrupt_times[interrupt] = 0;
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	320c      	adds	r2, #12
 8001f84:	2100      	movs	r1, #0
 8001f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd90      	pop	{r4, r7, pc}

08001f90 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db0c      	blt.n	8001fbc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4907      	ldr	r1, [pc, #28]	@ (8001fc8 <__NVIC_ClearPendingIRQ+0x38>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb6:	3360      	adds	r3, #96	@ 0x60
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100

08001fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fd0:	f001 f99c 	bl	800330c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd4:	f000 f960 	bl	8002298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd8:	f000 fad6 	bl	8002588 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001fdc:	f000 faa4 	bl	8002528 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001fe0:	f000 f9fa 	bl	80023d8 <MX_RTC_Init>
  MX_SPI3_Init();
 8001fe4:	f000 fa58 	bl	8002498 <MX_SPI3_Init>
  MX_LPTIM1_Init();
 8001fe8:	f000 f9b6 	bl	8002358 <MX_LPTIM1_Init>
  MX_RNG_Init();
 8001fec:	f000 f9e0 	bl	80023b0 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  // needed after programming -> avoid conflicts with sleep mode
  HAL_Delay(2000);
 8001ff0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ff4:	f001 fa06 	bl	8003404 <HAL_Delay>

  // init RX and TX handler
  init_buffers(&h_buffs);
 8001ff8:	4897      	ldr	r0, [pc, #604]	@ (8002258 <main+0x28c>)
 8001ffa:	f7fe ffc8 	bl	8000f8e <init_buffers>

  // init RF in RX mode
  if (!init_rfm()) printf("Error during RFM initialization\r\n");
 8001ffe:	f000 fbb5 	bl	800276c <init_rfm>
 8002002:	4603      	mov	r3, r0
 8002004:	f083 0301 	eor.w	r3, r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <main+0x48>
 800200e:	4893      	ldr	r0, [pc, #588]	@ (800225c <main+0x290>)
 8002010:	f005 fe82 	bl	8007d18 <puts>

  h_sys.evt_flags |= SYS_EVT_RX_PENDING;
 8002014:	4b92      	ldr	r3, [pc, #584]	@ (8002260 <main+0x294>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	b2da      	uxtb	r2, r3
 8002020:	4b8f      	ldr	r3, [pc, #572]	@ (8002260 <main+0x294>)
 8002022:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    /* System state machine */
    switch (h_sys.state){
 8002024:	4b8e      	ldr	r3, [pc, #568]	@ (8002260 <main+0x294>)
 8002026:	785b      	ldrb	r3, [r3, #1]
 8002028:	2b04      	cmp	r3, #4
 800202a:	f200 810f 	bhi.w	800224c <main+0x280>
 800202e:	a201      	add	r2, pc, #4	@ (adr r2, 8002034 <main+0x68>)
 8002030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002034:	080020f7 	.word	0x080020f7
 8002038:	08002181 	.word	0x08002181
 800203c:	0800223d 	.word	0x0800223d
 8002040:	08002245 	.word	0x08002245
 8002044:	08002049 	.word	0x08002049

      case SYS_RDY:         /* Sys rdy -> submit new task or sleep */

        /* atomicity ensured during task registration */
        HAL_SuspendTick();
 8002048:	f001 fa00 	bl	800344c <HAL_SuspendTick>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800204c:	b672      	cpsid	i
}
 800204e:	bf00      	nop
        __disable_irq();

        /* check pending flags */
        if (h_sys.evt_flags & SYS_EVT_RX_PENDING){         // RX event is pending
 8002050:	4b83      	ldr	r3, [pc, #524]	@ (8002260 <main+0x294>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <main+0xaa>

          h_sys.state = SYS_HANDLE_RX;
 800205e:	4b80      	ldr	r3, [pc, #512]	@ (8002260 <main+0x294>)
 8002060:	2200      	movs	r2, #0
 8002062:	705a      	strb	r2, [r3, #1]
          h_sys.evt_flags &= ~SYS_EVT_RX_PENDING;
 8002064:	4b7e      	ldr	r3, [pc, #504]	@ (8002260 <main+0x294>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f023 0302 	bic.w	r3, r3, #2
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b7b      	ldr	r3, [pc, #492]	@ (8002260 <main+0x294>)
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e03a      	b.n	80020ec <main+0x120>

        } else if (h_sys.evt_flags & SYS_EVT_TX_PENDING){  // TX event is pending
 8002076:	4b7a      	ldr	r3, [pc, #488]	@ (8002260 <main+0x294>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00b      	beq.n	800209c <main+0xd0>

          h_sys.state = SYS_HANLDE_TX;
 8002084:	4b76      	ldr	r3, [pc, #472]	@ (8002260 <main+0x294>)
 8002086:	2201      	movs	r2, #1
 8002088:	705a      	strb	r2, [r3, #1]
          h_sys.evt_flags &= ~SYS_EVT_TX_PENDING;
 800208a:	4b75      	ldr	r3, [pc, #468]	@ (8002260 <main+0x294>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4b72      	ldr	r3, [pc, #456]	@ (8002260 <main+0x294>)
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	e027      	b.n	80020ec <main+0x120>

        } else if (h_sys.evt_flags & SYS_EVT_ERROR){       // ERR event is pending
 800209c:	4b70      	ldr	r3, [pc, #448]	@ (8002260 <main+0x294>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <main+0xf6>

          // RFU...
          h_sys.state = SYS_HANDLE_ERR;
 80020aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002260 <main+0x294>)
 80020ac:	2202      	movs	r2, #2
 80020ae:	705a      	strb	r2, [r3, #1]
          h_sys.evt_flags &= ~SYS_EVT_ERROR;
 80020b0:	4b6b      	ldr	r3, [pc, #428]	@ (8002260 <main+0x294>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f023 0308 	bic.w	r3, r3, #8
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	4b68      	ldr	r3, [pc, #416]	@ (8002260 <main+0x294>)
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	e014      	b.n	80020ec <main+0x120>

        } else if (h_sys.evt_flags & SYS_EVT_TIMEOUT){     // TIMEOUT event is pending
 80020c2:	4b67      	ldr	r3, [pc, #412]	@ (8002260 <main+0x294>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00b      	beq.n	80020e8 <main+0x11c>

          // RFU...
          h_sys.state = SYS_HANDLE_TIMEOUT;
 80020d0:	4b63      	ldr	r3, [pc, #396]	@ (8002260 <main+0x294>)
 80020d2:	2203      	movs	r2, #3
 80020d4:	705a      	strb	r2, [r3, #1]
          h_sys.evt_flags &= ~SYS_EVT_TIMEOUT;
 80020d6:	4b62      	ldr	r3, [pc, #392]	@ (8002260 <main+0x294>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f023 0310 	bic.w	r3, r3, #16
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002260 <main+0x294>)
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e001      	b.n	80020ec <main+0x120>

        } else {
          // No events pending -> back to sleep
          enterStopMode();
 80020e8:	f000 fd4c 	bl	8002b84 <enterStopMode>
        }

        /* end of atomic block */
        HAL_ResumeTick();
 80020ec:	f001 f9be 	bl	800346c <HAL_ResumeTick>
  __ASM volatile ("cpsie i" : : : "memory");
 80020f0:	b662      	cpsie	i
}
 80020f2:	bf00      	nop
        __enable_irq();

        break;
 80020f4:	e0ae      	b.n	8002254 <main+0x288>

      case SYS_HANDLE_RX:        /* Sys handle RX event */

        printf("handle RX\r\n");
 80020f6:	485b      	ldr	r0, [pc, #364]	@ (8002264 <main+0x298>)
 80020f8:	f005 fe0e 	bl	8007d18 <puts>

        app_flags = on_rx_event(&rfm95_handle, &h_buffs);
 80020fc:	4956      	ldr	r1, [pc, #344]	@ (8002258 <main+0x28c>)
 80020fe:	485a      	ldr	r0, [pc, #360]	@ (8002268 <main+0x29c>)
 8002100:	f7fe fb2b 	bl	800075a <on_rx_event>
 8002104:	4603      	mov	r3, r0
 8002106:	4a59      	ldr	r2, [pc, #356]	@ (800226c <main+0x2a0>)
 8002108:	8013      	strh	r3, [r2, #0]

        if (app_flags.err_flags) {           /* If any error occurred */
 800210a:	4b58      	ldr	r3, [pc, #352]	@ (800226c <main+0x2a0>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d020      	beq.n	8002154 <main+0x188>

          if (app_flags.err_flags & EVT_RFM_SPI_ERR) {
 8002112:	4b56      	ldr	r3, [pc, #344]	@ (800226c <main+0x2a0>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <main+0x162>
            printf("SPI ERROR\r\n");
 800211e:	4854      	ldr	r0, [pc, #336]	@ (8002270 <main+0x2a4>)
 8002120:	f005 fdfa 	bl	8007d18 <puts>

            // reset RFM and restart in RX mode
            reset_rfm(&rfm95_handle);
 8002124:	4850      	ldr	r0, [pc, #320]	@ (8002268 <main+0x29c>)
 8002126:	f7ff fbd7 	bl	80018d8 <reset_rfm>
            init_rfm();
 800212a:	f000 fb1f 	bl	800276c <init_rfm>
             */

            // PKT dropped, do nothing...

          }
          if (app_flags.err_flags & EVT_RX_FIFO_FULL) {
 800212e:	4b4f      	ldr	r3, [pc, #316]	@ (800226c <main+0x2a0>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <main+0x174>
            // TODO
            printf("RX FIFO Full\r\n");
 800213a:	484e      	ldr	r0, [pc, #312]	@ (8002274 <main+0x2a8>)
 800213c:	f005 fdec 	bl	8007d18 <puts>
          }
          if (app_flags.err_flags & EVT_BAD_PKT_FORMAT) {
 8002140:	4b4a      	ldr	r3, [pc, #296]	@ (800226c <main+0x2a0>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d015      	beq.n	8002178 <main+0x1ac>
            // TODO
            printf("BAD PKT Full\r\n");
 800214c:	484a      	ldr	r0, [pc, #296]	@ (8002278 <main+0x2ac>)
 800214e:	f005 fde3 	bl	8007d18 <puts>
 8002152:	e011      	b.n	8002178 <main+0x1ac>
          }

        } else if (app_flags.status_flags) {  /* If status flags are present */
 8002154:	4b45      	ldr	r3, [pc, #276]	@ (800226c <main+0x2a0>)
 8002156:	785b      	ldrb	r3, [r3, #1]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00d      	beq.n	8002178 <main+0x1ac>

          // Process event flags here:
          if (app_flags.status_flags & EVT_SCHEDULE_TX) {
 800215c:	4b43      	ldr	r3, [pc, #268]	@ (800226c <main+0x2a0>)
 800215e:	785b      	ldrb	r3, [r3, #1]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <main+0x1ac>

            printf("NEW PKT\r\n");
 8002168:	4844      	ldr	r0, [pc, #272]	@ (800227c <main+0x2b0>)
 800216a:	f005 fdd5 	bl	8007d18 <puts>
            /*
             *  New PKT pushed in the RX FIFO:
             *  Schedule TX event, and TX
             */
            schedule_tx_evt(MIN_WAIT_TIME_1, MAX_WAIT_TIME_1);
 800216e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002172:	200a      	movs	r0, #10
 8002174:	f000 fc84 	bl	8002a80 <schedule_tx_evt>
        } else {                              /* No events pending */
          // no events pending -> do nothing
        }

        // make system ready again
        h_sys.state = SYS_RDY;
 8002178:	4b39      	ldr	r3, [pc, #228]	@ (8002260 <main+0x294>)
 800217a:	2204      	movs	r2, #4
 800217c:	705a      	strb	r2, [r3, #1]
        break;
 800217e:	e069      	b.n	8002254 <main+0x288>

      case SYS_HANLDE_TX:        /* Sys handle TX event */

        printf("handle TX\r\n");
 8002180:	483f      	ldr	r0, [pc, #252]	@ (8002280 <main+0x2b4>)
 8002182:	f005 fdc9 	bl	8007d18 <puts>

        HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002186:	483f      	ldr	r0, [pc, #252]	@ (8002284 <main+0x2b8>)
 8002188:	f003 ff52 	bl	8006030 <HAL_RTCEx_DeactivateWakeUpTimer>

        app_flags = on_tx_event(&rfm95_handle, &h_buffs);
 800218c:	4932      	ldr	r1, [pc, #200]	@ (8002258 <main+0x28c>)
 800218e:	4836      	ldr	r0, [pc, #216]	@ (8002268 <main+0x29c>)
 8002190:	f7fe fbee 	bl	8000970 <on_tx_event>
 8002194:	4603      	mov	r3, r0
 8002196:	4a35      	ldr	r2, [pc, #212]	@ (800226c <main+0x2a0>)
 8002198:	8013      	strh	r3, [r2, #0]

        if (app_flags.err_flags) {           /* If any error occurred */
 800219a:	4b34      	ldr	r3, [pc, #208]	@ (800226c <main+0x2a0>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00e      	beq.n	80021c0 <main+0x1f4>

          if (app_flags.err_flags & EVT_RFM_SPI_ERR) {
 80021a2:	4b32      	ldr	r3, [pc, #200]	@ (800226c <main+0x2a0>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d042      	beq.n	8002234 <main+0x268>
            printf("SPI ERROR\r\n");
 80021ae:	4830      	ldr	r0, [pc, #192]	@ (8002270 <main+0x2a4>)
 80021b0:	f005 fdb2 	bl	8007d18 <puts>

            // reset RFM and restart in RX mode
            reset_rfm(&rfm95_handle);
 80021b4:	482c      	ldr	r0, [pc, #176]	@ (8002268 <main+0x29c>)
 80021b6:	f7ff fb8f 	bl	80018d8 <reset_rfm>
            init_rfm();
 80021ba:	f000 fad7 	bl	800276c <init_rfm>
 80021be:	e039      	b.n	8002234 <main+0x268>
          }
          // RFU... add other flags

        } else if (app_flags.status_flags) {  /* If status flags are present */
 80021c0:	4b2a      	ldr	r3, [pc, #168]	@ (800226c <main+0x2a0>)
 80021c2:	785b      	ldrb	r3, [r3, #1]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d035      	beq.n	8002234 <main+0x268>

          // Process event flags here:
          if(app_flags.status_flags & EVT_RFM_MODEM_RX) {
 80021c8:	4b28      	ldr	r3, [pc, #160]	@ (800226c <main+0x2a0>)
 80021ca:	785b      	ldrb	r3, [r3, #1]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <main+0x21a>

            printf("Modem RX -> reschedule \r\n");
 80021d4:	482c      	ldr	r0, [pc, #176]	@ (8002288 <main+0x2bc>)
 80021d6:	f005 fd9f 	bl	8007d18 <puts>
            //  RFM is receiving something wait for the end of RX event
            schedule_tx_evt(MIN_WAIT_TIME_1, MAX_WAIT_TIME_1);
 80021da:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80021de:	200a      	movs	r0, #10
 80021e0:	f000 fc4e 	bl	8002a80 <schedule_tx_evt>
 80021e4:	e026      	b.n	8002234 <main+0x268>

          } else if (app_flags.status_flags & EVT_TX_FIFO_EMPTY){
 80021e6:	4b21      	ldr	r3, [pc, #132]	@ (800226c <main+0x2a0>)
 80021e8:	785b      	ldrb	r3, [r3, #1]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <main+0x22e>

            printf("NO TX Events\r\n");
 80021f2:	4826      	ldr	r0, [pc, #152]	@ (800228c <main+0x2c0>)
 80021f4:	f005 fd90 	bl	8007d18 <puts>
 80021f8:	e01c      	b.n	8002234 <main+0x268>
            // Do nothing...

          } else if (app_flags.status_flags & EVT_SCHEDULE_PRI_TX){
 80021fa:	4b1c      	ldr	r3, [pc, #112]	@ (800226c <main+0x2a0>)
 80021fc:	785b      	ldrb	r3, [r3, #1]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <main+0x24c>

            printf("PRI TX PKTs\r\n");
 8002206:	4822      	ldr	r0, [pc, #136]	@ (8002290 <main+0x2c4>)
 8002208:	f005 fd86 	bl	8007d18 <puts>
            // Other new PKTs are waiting for 1st TX
            schedule_tx_evt(MIN_WAIT_TIME_1, MAX_WAIT_TIME_1);
 800220c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002210:	200a      	movs	r0, #10
 8002212:	f000 fc35 	bl	8002a80 <schedule_tx_evt>
 8002216:	e00d      	b.n	8002234 <main+0x268>

          } else if (app_flags.status_flags & EVT_SCHEDULE_TX){
 8002218:	4b14      	ldr	r3, [pc, #80]	@ (800226c <main+0x2a0>)
 800221a:	785b      	ldrb	r3, [r3, #1]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <main+0x268>

            printf("Normal TX PKTs\r\n");
 8002224:	481b      	ldr	r0, [pc, #108]	@ (8002294 <main+0x2c8>)
 8002226:	f005 fd77 	bl	8007d18 <puts>
            // Schedule event for PKT retransmission mechanism
            schedule_tx_evt(MIN_WAIT_TIME, MAX_WAIT_TIME);
 800222a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800222e:	2032      	movs	r0, #50	@ 0x32
 8002230:	f000 fc26 	bl	8002a80 <schedule_tx_evt>
        } else {                              /* No events pending */
          // no events pending -> do nothing
        }

        // make system ready again
        h_sys.state = SYS_RDY;
 8002234:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <main+0x294>)
 8002236:	2204      	movs	r2, #4
 8002238:	705a      	strb	r2, [r3, #1]
        break;
 800223a:	e00b      	b.n	8002254 <main+0x288>
      case SYS_HANDLE_ERR:       /* Sys handle ERR event */

        // RFU...

        // make system ready again
        h_sys.state = SYS_RDY;
 800223c:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <main+0x294>)
 800223e:	2204      	movs	r2, #4
 8002240:	705a      	strb	r2, [r3, #1]
        break;
 8002242:	e007      	b.n	8002254 <main+0x288>
      case SYS_HANDLE_TIMEOUT:   /* Sys handle TIMEOUT event */

        //RFU...

        // make system ready again
        h_sys.state = SYS_RDY;
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <main+0x294>)
 8002246:	2204      	movs	r2, #4
 8002248:	705a      	strb	r2, [r3, #1]
        break;
 800224a:	e003      	b.n	8002254 <main+0x288>

      default:
        h_sys.state = SYS_RDY;
 800224c:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <main+0x294>)
 800224e:	2204      	movs	r2, #4
 8002250:	705a      	strb	r2, [r3, #1]
        break;
 8002252:	bf00      	nop
    switch (h_sys.state){
 8002254:	e6e6      	b.n	8002024 <main+0x58>
 8002256:	bf00      	nop
 8002258:	20000010 	.word	0x20000010
 800225c:	08008474 	.word	0x08008474
 8002260:	20000018 	.word	0x20000018
 8002264:	08008498 	.word	0x08008498
 8002268:	200000a4 	.word	0x200000a4
 800226c:	20001f3c 	.word	0x20001f3c
 8002270:	080084a4 	.word	0x080084a4
 8002274:	080084b0 	.word	0x080084b0
 8002278:	080084c0 	.word	0x080084c0
 800227c:	080084d0 	.word	0x080084d0
 8002280:	080084dc 	.word	0x080084dc
 8002284:	20001e24 	.word	0x20001e24
 8002288:	080084e8 	.word	0x080084e8
 800228c:	08008504 	.word	0x08008504
 8002290:	08008514 	.word	0x08008514
 8002294:	08008524 	.word	0x08008524

08002298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b096      	sub	sp, #88	@ 0x58
 800229c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	2244      	movs	r2, #68	@ 0x44
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f005 fd3e 	bl	8007d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ac:	463b      	mov	r3, r7
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80022be:	f001 ff69 	bl	8004194 <HAL_PWREx_ControlVoltageScaling>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80022c8:	f000 fd78 	bl	8002dbc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80022cc:	f001 ff44 	bl	8004158 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80022d0:	4b20      	ldr	r3, [pc, #128]	@ (8002354 <SystemClock_Config+0xbc>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002354 <SystemClock_Config+0xbc>)
 80022d8:	f023 0318 	bic.w	r3, r3, #24
 80022dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80022e0:	2306      	movs	r3, #6
 80022e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022e4:	2301      	movs	r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ee:	2310      	movs	r3, #16
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022f2:	2302      	movs	r3, #2
 80022f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022f6:	2302      	movs	r3, #2
 80022f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80022fe:	230a      	movs	r3, #10
 8002300:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002302:	2307      	movs	r3, #7
 8002304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8002306:	2308      	movs	r3, #8
 8002308:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800230a:	2302      	movs	r3, #2
 800230c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4618      	mov	r0, r3
 8002314:	f001 ffc0 	bl	8004298 <HAL_RCC_OscConfig>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800231e:	f000 fd4d 	bl	8002dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002322:	230f      	movs	r3, #15
 8002324:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002326:	2303      	movs	r3, #3
 8002328:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002336:	463b      	mov	r3, r7
 8002338:	2104      	movs	r1, #4
 800233a:	4618      	mov	r0, r3
 800233c:	f002 fb88 	bl	8004a50 <HAL_RCC_ClockConfig>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002346:	f000 fd39 	bl	8002dbc <Error_Handler>
  }
}
 800234a:	bf00      	nop
 800234c:	3758      	adds	r7, #88	@ 0x58
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000

08002358 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800235c:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <MX_LPTIM1_Init+0x50>)
 800235e:	4a13      	ldr	r2, [pc, #76]	@ (80023ac <MX_LPTIM1_Init+0x54>)
 8002360:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002362:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <MX_LPTIM1_Init+0x50>)
 8002364:	2200      	movs	r2, #0
 8002366:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002368:	4b0f      	ldr	r3, [pc, #60]	@ (80023a8 <MX_LPTIM1_Init+0x50>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <MX_LPTIM1_Init+0x50>)
 8002370:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002374:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002376:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <MX_LPTIM1_Init+0x50>)
 8002378:	2200      	movs	r2, #0
 800237a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800237c:	4b0a      	ldr	r3, [pc, #40]	@ (80023a8 <MX_LPTIM1_Init+0x50>)
 800237e:	2200      	movs	r2, #0
 8002380:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002382:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <MX_LPTIM1_Init+0x50>)
 8002384:	2200      	movs	r2, #0
 8002386:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002388:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <MX_LPTIM1_Init+0x50>)
 800238a:	2200      	movs	r2, #0
 800238c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800238e:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <MX_LPTIM1_Init+0x50>)
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002394:	4804      	ldr	r0, [pc, #16]	@ (80023a8 <MX_LPTIM1_Init+0x50>)
 8002396:	f001 fb65 	bl	8003a64 <HAL_LPTIM_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 80023a0:	f000 fd0c 	bl	8002dbc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20001ddc 	.word	0x20001ddc
 80023ac:	40007c00 	.word	0x40007c00

080023b0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <MX_RNG_Init+0x20>)
 80023b6:	4a07      	ldr	r2, [pc, #28]	@ (80023d4 <MX_RNG_Init+0x24>)
 80023b8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023ba:	4805      	ldr	r0, [pc, #20]	@ (80023d0 <MX_RNG_Init+0x20>)
 80023bc:	f003 fa28 	bl	8005810 <HAL_RNG_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80023c6:	f000 fcf9 	bl	8002dbc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20001e14 	.word	0x20001e14
 80023d4:	50060800 	.word	0x50060800

080023d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80023ec:	2300      	movs	r3, #0
 80023ee:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023f0:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <MX_RTC_Init+0xb8>)
 80023f2:	4a28      	ldr	r2, [pc, #160]	@ (8002494 <MX_RTC_Init+0xbc>)
 80023f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80023f6:	4b26      	ldr	r3, [pc, #152]	@ (8002490 <MX_RTC_Init+0xb8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80023fc:	4b24      	ldr	r3, [pc, #144]	@ (8002490 <MX_RTC_Init+0xb8>)
 80023fe:	227f      	movs	r2, #127	@ 0x7f
 8002400:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002402:	4b23      	ldr	r3, [pc, #140]	@ (8002490 <MX_RTC_Init+0xb8>)
 8002404:	22ff      	movs	r2, #255	@ 0xff
 8002406:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002408:	4b21      	ldr	r3, [pc, #132]	@ (8002490 <MX_RTC_Init+0xb8>)
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800240e:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <MX_RTC_Init+0xb8>)
 8002410:	2200      	movs	r2, #0
 8002412:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002414:	4b1e      	ldr	r3, [pc, #120]	@ (8002490 <MX_RTC_Init+0xb8>)
 8002416:	2200      	movs	r2, #0
 8002418:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800241a:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <MX_RTC_Init+0xb8>)
 800241c:	2200      	movs	r2, #0
 800241e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002420:	481b      	ldr	r0, [pc, #108]	@ (8002490 <MX_RTC_Init+0xb8>)
 8002422:	f003 fa4c 	bl	80058be <HAL_RTC_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800242c:	f000 fcc6 	bl	8002dbc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002430:	2300      	movs	r3, #0
 8002432:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002434:	2300      	movs	r3, #0
 8002436:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002438:	2300      	movs	r3, #0
 800243a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800243c:	2300      	movs	r3, #0
 800243e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	2201      	movs	r2, #1
 8002448:	4619      	mov	r1, r3
 800244a:	4811      	ldr	r0, [pc, #68]	@ (8002490 <MX_RTC_Init+0xb8>)
 800244c:	f003 fabf 	bl	80059ce <HAL_RTC_SetTime>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002456:	f000 fcb1 	bl	8002dbc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800245a:	2301      	movs	r3, #1
 800245c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800245e:	2301      	movs	r3, #1
 8002460:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002462:	2301      	movs	r3, #1
 8002464:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002466:	2300      	movs	r3, #0
 8002468:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800246a:	463b      	mov	r3, r7
 800246c:	2201      	movs	r2, #1
 800246e:	4619      	mov	r1, r3
 8002470:	4807      	ldr	r0, [pc, #28]	@ (8002490 <MX_RTC_Init+0xb8>)
 8002472:	f003 fba5 	bl	8005bc0 <HAL_RTC_SetDate>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800247c:	f000 fc9e 	bl	8002dbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // make sure RTC wkup is not running:
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002480:	4803      	ldr	r0, [pc, #12]	@ (8002490 <MX_RTC_Init+0xb8>)
 8002482:	f003 fdd5 	bl	8006030 <HAL_RTCEx_DeactivateWakeUpTimer>

  /* USER CODE END RTC_Init 2 */

}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20001e24 	.word	0x20001e24
 8002494:	40002800 	.word	0x40002800

08002498 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800249e:	4b20      	ldr	r3, [pc, #128]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024a0:	4a20      	ldr	r2, [pc, #128]	@ (8002524 <MX_SPI3_Init+0x8c>)
 80024a2:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80024a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024a6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024aa:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80024ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80024b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024b4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80024b8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ba:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024c0:	4b17      	ldr	r3, [pc, #92]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80024c6:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024cc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80024ce:	4b14      	ldr	r3, [pc, #80]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024d0:	2218      	movs	r2, #24
 80024d2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024d4:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80024da:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024dc:	2200      	movs	r2, #0
 80024de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024e8:	2207      	movs	r2, #7
 80024ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024f4:	2208      	movs	r2, #8
 80024f6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80024f8:	4809      	ldr	r0, [pc, #36]	@ (8002520 <MX_SPI3_Init+0x88>)
 80024fa:	f003 fe1d 	bl	8006138 <HAL_SPI_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8002504:	f000 fc5a 	bl	8002dbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */
  /*
   * This dummy sequence sets clock LOW when idle, MOSI and MISO to a definite state (either HIGH or LOW)
   */
   uint8_t dummy = 0xFF;
 8002508:	23ff      	movs	r3, #255	@ 0xff
 800250a:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Transmit(&hspi3, &dummy, 1, 10);
 800250c:	1df9      	adds	r1, r7, #7
 800250e:	230a      	movs	r3, #10
 8002510:	2201      	movs	r2, #1
 8002512:	4803      	ldr	r0, [pc, #12]	@ (8002520 <MX_SPI3_Init+0x88>)
 8002514:	f003 feb3 	bl	800627e <HAL_SPI_Transmit>

  /* USER CODE END SPI3_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20001e48 	.word	0x20001e48
 8002524:	40003c00 	.word	0x40003c00

08002528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800252c:	4b14      	ldr	r3, [pc, #80]	@ (8002580 <MX_USART2_UART_Init+0x58>)
 800252e:	4a15      	ldr	r2, [pc, #84]	@ (8002584 <MX_USART2_UART_Init+0x5c>)
 8002530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002532:	4b13      	ldr	r3, [pc, #76]	@ (8002580 <MX_USART2_UART_Init+0x58>)
 8002534:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800253a:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <MX_USART2_UART_Init+0x58>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002540:	4b0f      	ldr	r3, [pc, #60]	@ (8002580 <MX_USART2_UART_Init+0x58>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002546:	4b0e      	ldr	r3, [pc, #56]	@ (8002580 <MX_USART2_UART_Init+0x58>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800254c:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <MX_USART2_UART_Init+0x58>)
 800254e:	220c      	movs	r2, #12
 8002550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002552:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <MX_USART2_UART_Init+0x58>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002558:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <MX_USART2_UART_Init+0x58>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800255e:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <MX_USART2_UART_Init+0x58>)
 8002560:	2200      	movs	r2, #0
 8002562:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002564:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <MX_USART2_UART_Init+0x58>)
 8002566:	2200      	movs	r2, #0
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800256a:	4805      	ldr	r0, [pc, #20]	@ (8002580 <MX_USART2_UART_Init+0x58>)
 800256c:	f004 fd10 	bl	8006f90 <HAL_UART_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002576:	f000 fc21 	bl	8002dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20001eac 	.word	0x20001eac
 8002584:	40004400 	.word	0x40004400

08002588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	@ 0x28
 800258c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800259e:	4b6f      	ldr	r3, [pc, #444]	@ (800275c <MX_GPIO_Init+0x1d4>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	4a6e      	ldr	r2, [pc, #440]	@ (800275c <MX_GPIO_Init+0x1d4>)
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025aa:	4b6c      	ldr	r3, [pc, #432]	@ (800275c <MX_GPIO_Init+0x1d4>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025b6:	4b69      	ldr	r3, [pc, #420]	@ (800275c <MX_GPIO_Init+0x1d4>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ba:	4a68      	ldr	r2, [pc, #416]	@ (800275c <MX_GPIO_Init+0x1d4>)
 80025bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c2:	4b66      	ldr	r3, [pc, #408]	@ (800275c <MX_GPIO_Init+0x1d4>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ce:	4b63      	ldr	r3, [pc, #396]	@ (800275c <MX_GPIO_Init+0x1d4>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d2:	4a62      	ldr	r2, [pc, #392]	@ (800275c <MX_GPIO_Init+0x1d4>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025da:	4b60      	ldr	r3, [pc, #384]	@ (800275c <MX_GPIO_Init+0x1d4>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	4b5d      	ldr	r3, [pc, #372]	@ (800275c <MX_GPIO_Init+0x1d4>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ea:	4a5c      	ldr	r2, [pc, #368]	@ (800275c <MX_GPIO_Init+0x1d4>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f2:	4b5a      	ldr	r3, [pc, #360]	@ (800275c <MX_GPIO_Init+0x1d4>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025fe:	4b57      	ldr	r3, [pc, #348]	@ (800275c <MX_GPIO_Init+0x1d4>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002602:	4a56      	ldr	r2, [pc, #344]	@ (800275c <MX_GPIO_Init+0x1d4>)
 8002604:	f043 0308 	orr.w	r3, r3, #8
 8002608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800260a:	4b54      	ldr	r3, [pc, #336]	@ (800275c <MX_GPIO_Init+0x1d4>)
 800260c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002616:	2200      	movs	r2, #0
 8002618:	2120      	movs	r1, #32
 800261a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800261e:	f001 f9f1 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM95_RST_GPIO_Port, RFM95_RST_Pin, GPIO_PIN_SET);
 8002622:	2201      	movs	r2, #1
 8002624:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800262c:	f001 f9ea 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM95_CS_GPIO_Port, RFM95_CS_Pin, GPIO_PIN_SET);
 8002630:	2201      	movs	r2, #1
 8002632:	2104      	movs	r1, #4
 8002634:	484a      	ldr	r0, [pc, #296]	@ (8002760 <MX_GPIO_Init+0x1d8>)
 8002636:	f001 f9e5 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_GPIO_Port, Test_Pin, GPIO_PIN_RESET);
 800263a:	2200      	movs	r2, #0
 800263c:	2120      	movs	r1, #32
 800263e:	4849      	ldr	r0, [pc, #292]	@ (8002764 <MX_GPIO_Init+0x1dc>)
 8002640:	f001 f9e0 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002644:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800264a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800264e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	4619      	mov	r1, r3
 800265a:	4843      	ldr	r0, [pc, #268]	@ (8002768 <MX_GPIO_Init+0x1e0>)
 800265c:	f001 f828 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002660:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8002664:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002666:	2303      	movs	r3, #3
 8002668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	483c      	ldr	r0, [pc, #240]	@ (8002768 <MX_GPIO_Init+0x1e0>)
 8002676:	f001 f81b 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 800267a:	f241 13d3 	movw	r3, #4563	@ 0x11d3
 800267e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002680:	2303      	movs	r3, #3
 8002682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	4619      	mov	r1, r3
 800268e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002692:	f001 f80d 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002696:	2320      	movs	r3, #32
 8002698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800269a:	2301      	movs	r3, #1
 800269c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2300      	movs	r3, #0
 80026a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4619      	mov	r1, r3
 80026ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026b0:	f000 fffe 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80026b4:	f64f 73d7 	movw	r3, #65495	@ 0xffd7
 80026b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ba:	2303      	movs	r3, #3
 80026bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4619      	mov	r1, r3
 80026c8:	4826      	ldr	r0, [pc, #152]	@ (8002764 <MX_GPIO_Init+0x1dc>)
 80026ca:	f000 fff1 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM95_DIO0_Pin RFM95_DIO1_Pin RFM95_DIO5_Pin */
  GPIO_InitStruct.Pin = RFM95_DIO0_Pin|RFM95_DIO1_Pin|RFM95_DIO5_Pin;
 80026ce:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80026d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026e8:	f000 ffe2 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM95_RST_Pin */
  GPIO_InitStruct.Pin = RFM95_RST_Pin;
 80026ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80026f2:	2311      	movs	r3, #17
 80026f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RFM95_RST_GPIO_Port, &GPIO_InitStruct);
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4619      	mov	r1, r3
 8002704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002708:	f000 ffd2 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM95_CS_Pin */
  GPIO_InitStruct.Pin = RFM95_CS_Pin;
 800270c:	2304      	movs	r3, #4
 800270e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002710:	2301      	movs	r3, #1
 8002712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002714:	2301      	movs	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002718:	2301      	movs	r3, #1
 800271a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RFM95_CS_GPIO_Port, &GPIO_InitStruct);
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	4619      	mov	r1, r3
 8002722:	480f      	ldr	r0, [pc, #60]	@ (8002760 <MX_GPIO_Init+0x1d8>)
 8002724:	f000 ffc4 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Test_Pin */
  GPIO_InitStruct.Pin = Test_Pin;
 8002728:	2320      	movs	r3, #32
 800272a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272c:	2301      	movs	r3, #1
 800272e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	2300      	movs	r3, #0
 8002736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Test_GPIO_Port, &GPIO_InitStruct);
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	4619      	mov	r1, r3
 800273e:	4809      	ldr	r0, [pc, #36]	@ (8002764 <MX_GPIO_Init+0x1dc>)
 8002740:	f000 ffb6 	bl	80036b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002744:	2200      	movs	r2, #0
 8002746:	2100      	movs	r1, #0
 8002748:	2017      	movs	r0, #23
 800274a:	f000 ff7a 	bl	8003642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800274e:	2017      	movs	r0, #23
 8002750:	f000 ff93 	bl	800367a <HAL_NVIC_EnableIRQ>
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002754:	bf00      	nop
 8002756:	3728      	adds	r7, #40	@ 0x28
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	48000c00 	.word	0x48000c00
 8002764:	48000400 	.word	0x48000400
 8002768:	48000800 	.word	0x48000800

0800276c <init_rfm>:
// -------------- RFM95 user defined functions -------------------

/*
 *
 */
bool init_rfm(){
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0

  // Start lptim timer
  HAL_LPTIM_Counter_Start_IT(&hlptim1, 0xFFFF);
 8002770:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002774:	482a      	ldr	r0, [pc, #168]	@ (8002820 <init_rfm+0xb4>)
 8002776:	f001 fa17 	bl	8003ba8 <HAL_LPTIM_Counter_Start_IT>

  // config RFM95
  rfm95_handle.rfm_timer  = &hlptim1;
 800277a:	4b2a      	ldr	r3, [pc, #168]	@ (8002824 <init_rfm+0xb8>)
 800277c:	4a28      	ldr	r2, [pc, #160]	@ (8002820 <init_rfm+0xb4>)
 800277e:	601a      	str	r2, [r3, #0]
  rfm95_handle.spi_handle = &hspi3;
 8002780:	4b28      	ldr	r3, [pc, #160]	@ (8002824 <init_rfm+0xb8>)
 8002782:	4a29      	ldr	r2, [pc, #164]	@ (8002828 <init_rfm+0xbc>)
 8002784:	605a      	str	r2, [r3, #4]
  rfm95_handle.nrst_port  = RFM95_RST_GPIO_Port;
 8002786:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <init_rfm+0xb8>)
 8002788:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800278c:	611a      	str	r2, [r3, #16]
  rfm95_handle.nrst_pin   = RFM95_RST_Pin;
 800278e:	4b25      	ldr	r3, [pc, #148]	@ (8002824 <init_rfm+0xb8>)
 8002790:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002794:	829a      	strh	r2, [r3, #20]
  rfm95_handle.nss_port   = RFM95_CS_GPIO_Port;
 8002796:	4b23      	ldr	r3, [pc, #140]	@ (8002824 <init_rfm+0xb8>)
 8002798:	4a24      	ldr	r2, [pc, #144]	@ (800282c <init_rfm+0xc0>)
 800279a:	609a      	str	r2, [r3, #8]
  rfm95_handle.nss_pin    = RFM95_CS_Pin;
 800279c:	4b21      	ldr	r3, [pc, #132]	@ (8002824 <init_rfm+0xb8>)
 800279e:	2204      	movs	r2, #4
 80027a0:	819a      	strh	r2, [r3, #12]

  rfm95_handle.precision_tick_frequency = LSE_CLK;
 80027a2:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <init_rfm+0xb8>)
 80027a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80027a8:	619a      	str	r2, [r3, #24]
  rfm95_handle.precision_tick_drift_ns_per_s = 20000;
 80027aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002824 <init_rfm+0xb8>)
 80027ac:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80027b0:	61da      	str	r2, [r3, #28]
  rfm95_handle.get_precision_tick = get_precision_tick;
 80027b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002824 <init_rfm+0xb8>)
 80027b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002830 <init_rfm+0xc4>)
 80027b6:	621a      	str	r2, [r3, #32]
  rfm95_handle.precision_sleep_until = precision_sleep_until;
 80027b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002824 <init_rfm+0xb8>)
 80027ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002834 <init_rfm+0xc8>)
 80027bc:	625a      	str	r2, [r3, #36]	@ 0x24
  rfm95_handle.on_after_interrupts_configured = rfm95_after_interrupts_configured;
 80027be:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <init_rfm+0xb8>)
 80027c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002838 <init_rfm+0xcc>)
 80027c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  //rfm95_handle.random_int = random_int;
  rfm95_handle.get_battery_level = get_battery_level;
 80027c4:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <init_rfm+0xb8>)
 80027c6:	4a1d      	ldr	r2, [pc, #116]	@ (800283c <init_rfm+0xd0>)
 80027c8:	629a      	str	r2, [r3, #40]	@ 0x28

  // Modify parameters here:
  rfm95_set_power(&rfm95_handle, LORA_TX_POWER); // power 2 dBm - 17 dBm
 80027ca:	2102      	movs	r1, #2
 80027cc:	4815      	ldr	r0, [pc, #84]	@ (8002824 <init_rfm+0xb8>)
 80027ce:	f7ff f8a1 	bl	8001914 <rfm95_set_power>
  rfm95_set_frequency(&rfm95_handle, LORA_CH_FREQ);
 80027d2:	491b      	ldr	r1, [pc, #108]	@ (8002840 <init_rfm+0xd4>)
 80027d4:	4813      	ldr	r0, [pc, #76]	@ (8002824 <init_rfm+0xb8>)
 80027d6:	f7ff f8e9 	bl	80019ac <rfm95_set_frequency>
  rfm95_set_BW(&rfm95_handle, LORA_BW);
 80027da:	2101      	movs	r1, #1
 80027dc:	4811      	ldr	r0, [pc, #68]	@ (8002824 <init_rfm+0xb8>)
 80027de:	f7ff f8d5 	bl	800198c <rfm95_set_BW>
  rfm95_set_CR(&rfm95_handle, LORA_CR);
 80027e2:	2100      	movs	r1, #0
 80027e4:	480f      	ldr	r0, [pc, #60]	@ (8002824 <init_rfm+0xb8>)
 80027e6:	f7ff f8c1 	bl	800196c <rfm95_set_CR>
  rfm95_set_SF(&rfm95_handle, LORA_SF);
 80027ea:	2100      	movs	r1, #0
 80027ec:	480d      	ldr	r0, [pc, #52]	@ (8002824 <init_rfm+0xb8>)
 80027ee:	f7ff f8ad 	bl	800194c <rfm95_set_SF>

  // initialize RFM95
  if(!rfm95_init(&rfm95_handle)) return false;
 80027f2:	480c      	ldr	r0, [pc, #48]	@ (8002824 <init_rfm+0xb8>)
 80027f4:	f7fe ffc0 	bl	8001778 <rfm95_init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <init_rfm+0x96>
 80027fe:	2300      	movs	r3, #0
 8002800:	e00b      	b.n	800281a <init_rfm+0xae>

  // set RFM95 to continuous RX mode
  if(!rfm95_enter_rx_mode(&rfm95_handle)) return false;
 8002802:	4808      	ldr	r0, [pc, #32]	@ (8002824 <init_rfm+0xb8>)
 8002804:	f7ff fa8b 	bl	8001d1e <rfm95_enter_rx_mode>
 8002808:	4603      	mov	r3, r0
 800280a:	f083 0301 	eor.w	r3, r3, #1
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <init_rfm+0xac>
 8002814:	2300      	movs	r3, #0
 8002816:	e000      	b.n	800281a <init_rfm+0xae>

  return true;
 8002818:	2301      	movs	r3, #1
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20001ddc 	.word	0x20001ddc
 8002824:	200000a4 	.word	0x200000a4
 8002828:	20001e48 	.word	0x20001e48
 800282c:	48000c00 	.word	0x48000c00
 8002830:	08002845 	.word	0x08002845
 8002834:	08002875 	.word	0x08002875
 8002838:	0800293d 	.word	0x0800293d
 800283c:	0800292d 	.word	0x0800292d
 8002840:	33bca100 	.word	0x33bca100

08002844 <get_precision_tick>:

/*
 * return precise timing based on internal LPTIM module
 */
static uint32_t get_precision_tick(){
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800284a:	b672      	cpsid	i
}
 800284c:	bf00      	nop
	__disable_irq();
	uint32_t precision_tick = lptim_tick_msb | HAL_LPTIM_ReadCounter(&hlptim1);
 800284e:	4807      	ldr	r0, [pc, #28]	@ (800286c <get_precision_tick+0x28>)
 8002850:	f001 fa6a 	bl	8003d28 <HAL_LPTIM_ReadCounter>
 8002854:	4602      	mov	r2, r0
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <get_precision_tick+0x2c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800285e:	b662      	cpsie	i
}
 8002860:	bf00      	nop
	__enable_irq();
	return precision_tick;
 8002862:	687b      	ldr	r3, [r7, #4]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20001ddc 	.word	0x20001ddc
 8002870:	20001f34 	.word	0x20001f34

08002874 <precision_sleep_until>:

/*
 * Allows to set the MCU into STOP2 mode with accurate wkup timer
 */
static void precision_sleep_until(uint32_t target_ticks){
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	while(1){
		uint32_t curr_tick = get_precision_tick();
 800287c:	f7ff ffe2 	bl	8002844 <get_precision_tick>
 8002880:	6178      	str	r0, [r7, #20]

		// exit condition:
		if(target_ticks < curr_tick) break;
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	429a      	cmp	r2, r3
 8002888:	d33f      	bcc.n	800290a <precision_sleep_until+0x96>

		uint32_t sleep_ticks = target_ticks - curr_tick;
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	613b      	str	r3, [r7, #16]

		// avoid short sleep intervals:
		if(sleep_ticks < 10) break;
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b09      	cmp	r3, #9
 8002896:	d93a      	bls.n	800290e <precision_sleep_until+0x9a>
		else {
			// overall CMP value - some margin (needed to reset clock configurations after stop mode2)
			uint32_t compare_tick = (curr_tick & 0xFFFF) + sleep_ticks - 10;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	b29a      	uxth	r2, r3
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	3b0a      	subs	r3, #10
 80028a2:	60fb      	str	r3, [r7, #12]

			if (compare_tick >= 0xFFFF){ // ARR will awake MCU before compare
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d904      	bls.n	80028b8 <precision_sleep_until+0x44>
				HAL_SuspendTick();
 80028ae:	f000 fdcd 	bl	800344c <HAL_SuspendTick>
				enterStopMode();
 80028b2:	f000 f967 	bl	8002b84 <enterStopMode>
 80028b6:	e7e1      	b.n	800287c <precision_sleep_until+0x8>
			} else { // otherwise CMP keeps MCU sleep all time
				__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 80028b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <precision_sleep_until+0xb4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2208      	movs	r2, #8
 80028be:	605a      	str	r2, [r3, #4]
				__HAL_LPTIM_COMPARE_SET(&hlptim1, compare_tick);            // set CMP limit
 80028c0:	4b19      	ldr	r3, [pc, #100]	@ (8002928 <precision_sleep_until+0xb4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	615a      	str	r2, [r3, #20]

				while (!__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK));  // wait for effective change
 80028c8:	bf00      	nop
 80028ca:	4b17      	ldr	r3, [pc, #92]	@ (8002928 <precision_sleep_until+0xb4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d1f8      	bne.n	80028ca <precision_sleep_until+0x56>

				__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);          // clear CMP interrupt flag
 80028d8:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <precision_sleep_until+0xb4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2201      	movs	r2, #1
 80028de:	605a      	str	r2, [r3, #4]
				__HAL_LPTIM_ENABLE_IT(&hlptim1, LPTIM_IT_CMPM);             // enable CMP interrupt
 80028e0:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <precision_sleep_until+0xb4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <precision_sleep_until+0xb4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	609a      	str	r2, [r3, #8]

				HAL_SuspendTick();
 80028f0:	f000 fdac 	bl	800344c <HAL_SuspendTick>
				enterStopMode();
 80028f4:	f000 f946 	bl	8002b84 <enterStopMode>

				__HAL_LPTIM_DISABLE_IT(&hlptim1, LPTIM_IT_CMPM);            // disable CMP interrupt
 80028f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <precision_sleep_until+0xb4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <precision_sleep_until+0xb4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	609a      	str	r2, [r3, #8]
	while(1){
 8002908:	e7b8      	b.n	800287c <precision_sleep_until+0x8>
		if(target_ticks < curr_tick) break;
 800290a:	bf00      	nop
 800290c:	e000      	b.n	8002910 <precision_sleep_until+0x9c>
		if(sleep_ticks < 10) break;
 800290e:	bf00      	nop
			}
		}
	}

	while(get_precision_tick() < target_ticks);                       // wait residue time here ( < 10 ticks)
 8002910:	bf00      	nop
 8002912:	f7ff ff97 	bl	8002844 <get_precision_tick>
 8002916:	4602      	mov	r2, r0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4293      	cmp	r3, r2
 800291c:	d8f9      	bhi.n	8002912 <precision_sleep_until+0x9e>
}
 800291e:	bf00      	nop
 8002920:	bf00      	nop
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20001ddc 	.word	0x20001ddc

0800292c <get_battery_level>:


static uint8_t get_battery_level(){
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
	return 0;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <rfm95_after_interrupts_configured>:

/*
 * This function is executed after initializing rfm95 (ready to accept interrupts
 * without hard fault errors)
 */
void rfm95_after_interrupts_configured(){
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002940:	2200      	movs	r2, #0
 8002942:	2100      	movs	r1, #0
 8002944:	2028      	movs	r0, #40	@ 0x28
 8002946:	f000 fe7c 	bl	8003642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800294a:	2028      	movs	r0, #40	@ 0x28
 800294c:	f000 fe95 	bl	800367a <HAL_NVIC_EnableIRQ>
}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}

08002954 <get_random_number>:
 * - 0 = no errors
 * - 1 = timeout
 * - 2 = seed error  -> RNG must be reinitialized (random number must be discarded)
 * - 3 = Clock error -> ensure rng_clk >= ahb_clk/16 (>= 5 MHz)
 */
uint8_t get_random_number(uint32_t *random_number, uint16_t timeout){
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]

  // enable RNG peripheral:
  __HAL_RNG_ENABLE(&hrng);
 8002960:	4b2c      	ldr	r3, [pc, #176]	@ (8002a14 <get_random_number+0xc0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4b2b      	ldr	r3, [pc, #172]	@ (8002a14 <get_random_number+0xc0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0204 	orr.w	r2, r2, #4
 800296e:	601a      	str	r2, [r3, #0]

  // clear clock error and seed error interrupt flags:
  __HAL_RNG_CLEAR_IT(&hrng, RNG_IT_CEI);
 8002970:	4b28      	ldr	r3, [pc, #160]	@ (8002a14 <get_random_number+0xc0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0220 	mvn.w	r2, #32
 8002978:	605a      	str	r2, [r3, #4]
  __HAL_RNG_CLEAR_IT(&hrng, RNG_IT_SEI);
 800297a:	4b26      	ldr	r3, [pc, #152]	@ (8002a14 <get_random_number+0xc0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002982:	605a      	str	r2, [r3, #4]

  // wait for data ready bit to be set:
  uint32_t start = HAL_GetTick();
 8002984:	f000 fd32 	bl	80033ec <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]
  while(!__HAL_RNG_GET_FLAG(&hrng, RNG_FLAG_DRDY)){
 800298a:	e011      	b.n	80029b0 <get_random_number+0x5c>
    if (HAL_GetTick() - start > timeout) {
 800298c:	f000 fd2e 	bl	80033ec <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad2      	subs	r2, r2, r3
 8002996:	887b      	ldrh	r3, [r7, #2]
 8002998:	429a      	cmp	r2, r3
 800299a:	d909      	bls.n	80029b0 <get_random_number+0x5c>
      __HAL_RNG_DISABLE(&hrng);
 800299c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a14 <get_random_number+0xc0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a14 <get_random_number+0xc0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0204 	bic.w	r2, r2, #4
 80029aa:	601a      	str	r2, [r3, #0]
      return 1;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e02c      	b.n	8002a0a <get_random_number+0xb6>
  while(!__HAL_RNG_GET_FLAG(&hrng, RNG_FLAG_DRDY)){
 80029b0:	4b18      	ldr	r3, [pc, #96]	@ (8002a14 <get_random_number+0xc0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d1e6      	bne.n	800298c <get_random_number+0x38>
    }
  }

  // RNG can be switched off here:
  __HAL_RNG_DISABLE(&hrng);
 80029be:	4b15      	ldr	r3, [pc, #84]	@ (8002a14 <get_random_number+0xc0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b13      	ldr	r3, [pc, #76]	@ (8002a14 <get_random_number+0xc0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0204 	bic.w	r2, r2, #4
 80029cc:	601a      	str	r2, [r3, #0]

  // check seed error:
  if(__HAL_RNG_GET_IT(&hrng, RNG_IT_SEI)) return 2;
 80029ce:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <get_random_number+0xc0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d8:	2b40      	cmp	r3, #64	@ 0x40
 80029da:	d101      	bne.n	80029e0 <get_random_number+0x8c>
 80029dc:	2302      	movs	r3, #2
 80029de:	e014      	b.n	8002a0a <get_random_number+0xb6>

  // check clock error:
  if(__HAL_RNG_GET_IT(&hrng, RNG_IT_CEI)) return 3;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a14 <get_random_number+0xc0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d101      	bne.n	80029f2 <get_random_number+0x9e>
 80029ee:	2303      	movs	r3, #3
 80029f0:	e00b      	b.n	8002a0a <get_random_number+0xb6>

  *random_number = hrng.Instance->DR;
 80029f2:	4b08      	ldr	r3, [pc, #32]	@ (8002a14 <get_random_number+0xc0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	601a      	str	r2, [r3, #0]

  // check event seed error occurred while loading data:
  if(*random_number == 0) return 2;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <get_random_number+0xb4>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e000      	b.n	8002a0a <get_random_number+0xb6>

  return 0;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20001e14 	.word	0x20001e14

08002a18 <random_wait>:
 * @param uint16_t  max represents maximum time (in ms)
 * @param uint16_t  min represents minimum time (in ms)
 *
 * @return uint16_t in range [min, max]
 */
static uint16_t random_wait(uint16_t min, uint16_t max){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	460a      	mov	r2, r1
 8002a22:	80fb      	strh	r3, [r7, #6]
 8002a24:	4613      	mov	r3, r2
 8002a26:	80bb      	strh	r3, [r7, #4]
  if ((min >= max) || (max == 0)) return 0;
 8002a28:	88fa      	ldrh	r2, [r7, #6]
 8002a2a:	88bb      	ldrh	r3, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d202      	bcs.n	8002a36 <random_wait+0x1e>
 8002a30:	88bb      	ldrh	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <random_wait+0x22>
 8002a36:	2300      	movs	r3, #0
 8002a38:	e01d      	b.n	8002a76 <random_wait+0x5e>

  uint32_t num;
  uint8_t rng_err = get_random_number(&num, 1);
 8002a3a:	f107 0308 	add.w	r3, r7, #8
 8002a3e:	2101      	movs	r1, #1
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff87 	bl	8002954 <get_random_number>
 8002a46:	4603      	mov	r3, r0
 8002a48:	73fb      	strb	r3, [r7, #15]

  if (rng_err){
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <random_wait+0x3c>
    // TODO handle potential rng seed error/clock error here...

    num = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]
  }

  uint16_t range = max - min + 1;
 8002a54:	88ba      	ldrh	r2, [r7, #4]
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	81bb      	strh	r3, [r7, #12]
  return (uint16_t)(min + (num % range));
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	89ba      	ldrh	r2, [r7, #12]
 8002a64:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a68:	fb01 f202 	mul.w	r2, r1, r2
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	4413      	add	r3, r2
 8002a74:	b29b      	uxth	r3, r3
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <schedule_tx_evt>:
 * @param uint16_t  max represents maximum time (in ms) for the random wait
 * @param uint16_t  min represents minimum time (in ms) for the random wait
 *
 * @return uint16_t in range [min, max]
 */
static void schedule_tx_evt(uint16_t min, uint16_t max){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	@ 0x38
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	460a      	mov	r2, r1
 8002a8a:	80fb      	strh	r3, [r7, #6]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	80bb      	strh	r3, [r7, #4]
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  // get random time between [min, max] (in milliseconds)
  uint16_t t_rand = random_wait(min, max);
 8002a90:	88ba      	ldrh	r2, [r7, #4]
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff ffbe 	bl	8002a18 <random_wait>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	86fb      	strh	r3, [r7, #54]	@ 0x36

  if (t_rand <= 5) {
 8002aa0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	d80b      	bhi.n	8002abe <schedule_tx_evt+0x3e>
    /*
     * if less than 5 ms (10 RTC ticks) are computed, skip the timer
     * and directly set a TX event
     */
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002aa6:	4832      	ldr	r0, [pc, #200]	@ (8002b70 <schedule_tx_evt+0xf0>)
 8002aa8:	f003 fac2 	bl	8006030 <HAL_RTCEx_DeactivateWakeUpTimer>

    h_sys.evt_flags |= SYS_EVT_TX_PENDING;
 8002aac:	4b31      	ldr	r3, [pc, #196]	@ (8002b74 <schedule_tx_evt+0xf4>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f043 0304 	orr.w	r3, r3, #4
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b74 <schedule_tx_evt+0xf4>)
 8002aba:	701a      	strb	r2, [r3, #0]
    return;
 8002abc:	e055      	b.n	8002b6a <schedule_tx_evt+0xea>
  }

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002abe:	f107 0310 	add.w	r3, r7, #16
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	482a      	ldr	r0, [pc, #168]	@ (8002b70 <schedule_tx_evt+0xf0>)
 8002ac8:	f003 f81e 	bl	8005b08 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);  // latch time
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4826      	ldr	r0, [pc, #152]	@ (8002b70 <schedule_tx_evt+0xf0>)
 8002ad6:	f003 f8fa 	bl	8005cce <HAL_RTC_GetDate>

  // new EVT time in milliseconds
  uint32_t now_seconds = sTime.Hours * 3600 + sTime.Minutes * 60 + sTime.Seconds;
 8002ada:	7c3b      	ldrb	r3, [r7, #16]
 8002adc:	461a      	mov	r2, r3
 8002ade:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002ae2:	fb03 f202 	mul.w	r2, r3, r2
 8002ae6:	7c7b      	ldrb	r3, [r7, #17]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	460b      	mov	r3, r1
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	1a5b      	subs	r3, r3, r1
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	7cba      	ldrb	r2, [r7, #18]
 8002af6:	4413      	add	r3, r2
 8002af8:	633b      	str	r3, [r7, #48]	@ 0x30
  uint16_t milliseconds = (uint16_t)(((sTime.SecondFraction - sTime.SubSeconds) * 1000U) / (sTime.SecondFraction + 1));
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b04:	fb03 f202 	mul.w	r2, r3, r2
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  uint32_t new_evt_time = now_seconds*1000 + milliseconds + t_rand;
 8002b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b18:	fb03 f202 	mul.w	r2, r3, r2
 8002b1c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002b1e:	441a      	add	r2, r3
 8002b20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b22:	4413      	add	r3, r2
 8002b24:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (RTC->CR & RTC_CR_WUTE) { /* RTC WKUP already running */
 8002b26:	4b14      	ldr	r3, [pc, #80]	@ (8002b78 <schedule_tx_evt+0xf8>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <schedule_tx_evt+0xc6>

    // If running timer is close to trigger -> wait for it
    if (tx_evt_time <= new_evt_time + 10) return;
 8002b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b34:	f103 020a 	add.w	r2, r3, #10
 8002b38:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <schedule_tx_evt+0xfc>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d213      	bcs.n	8002b68 <schedule_tx_evt+0xe8>

    // otherwise block previous timer and start a new one with shorter WKUP CNT
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002b40:	480b      	ldr	r0, [pc, #44]	@ (8002b70 <schedule_tx_evt+0xf0>)
 8002b42:	f003 fa75 	bl	8006030 <HAL_RTCEx_DeactivateWakeUpTimer>

  }

  tx_evt_time = new_evt_time;
 8002b46:	4a0d      	ldr	r2, [pc, #52]	@ (8002b7c <schedule_tx_evt+0xfc>)
 8002b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4a:	6013      	str	r3, [r2, #0]

  // compute corresponding RTC corresponding number of ticks
  uint32_t wakeUpCounter = (uint32_t) ((t_rand * LSE_CLK / 16u)/(1000u));
 8002b4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b4e:	03db      	lsls	r3, r3, #15
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <schedule_tx_evt+0x100>)
 8002b54:	fba3 2302 	umull	r2, r3, r3, r2
 8002b58:	0a9b      	lsrs	r3, r3, #10
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeUpCounter, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b60:	4803      	ldr	r0, [pc, #12]	@ (8002b70 <schedule_tx_evt+0xf0>)
 8002b62:	f003 f9d1 	bl	8005f08 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002b66:	e000      	b.n	8002b6a <schedule_tx_evt+0xea>
    if (tx_evt_time <= new_evt_time + 10) return;
 8002b68:	bf00      	nop
}
 8002b6a:	3738      	adds	r7, #56	@ 0x38
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20001e24 	.word	0x20001e24
 8002b74:	20000018 	.word	0x20000018
 8002b78:	40002800 	.word	0x40002800
 8002b7c:	20001f38 	.word	0x20001f38
 8002b80:	10624dd3 	.word	0x10624dd3

08002b84 <enterStopMode>:
// -------------------------- System Power down routines --------------------------------

/*
 * Enter stop mode and resume clock configurations on exit
 */
void enterStopMode(){
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0

  // Stop LPTIM and clear pending bits
  HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 8002b88:	4812      	ldr	r0, [pc, #72]	@ (8002bd4 <enterStopMode+0x50>)
 8002b8a:	f001 f88b 	bl	8003ca4 <HAL_LPTIM_Counter_Stop_IT>
  LPTIM1->ICR |= 0x3F;
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <enterStopMode+0x54>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4a11      	ldr	r2, [pc, #68]	@ (8002bd8 <enterStopMode+0x54>)
 8002b94:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8002b98:	6053      	str	r3, [r2, #4]

  // CLear LPTIM IRQ at NVIC level
  NVIC_ClearPendingIRQ(LPTIM1_IRQn);
 8002b9a:	2041      	movs	r0, #65	@ 0x41
 8002b9c:	f7ff f9f8 	bl	8001f90 <__NVIC_ClearPendingIRQ>

  // wake from HSI --> faster wake up sequence:
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_HSI);
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <enterStopMode+0x58>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bdc <enterStopMode+0x58>)
 8002ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002baa:	6093      	str	r3, [r2, #8]

	// Enter stop mode 2:
	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002bac:	2001      	movs	r0, #1
 8002bae:	f001 fb47 	bl	8004240 <HAL_PWREx_EnterSTOP2Mode>

	// awake here...

	// resume system clock:
	if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) MySystemClock_Config();
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <enterStopMode+0x58>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <enterStopMode+0x3e>
 8002bbe:	f000 f80f 	bl	8002be0 <MySystemClock_Config>

	// resume system tick with correct clock
	HAL_ResumeTick();
 8002bc2:	f000 fc53 	bl	800346c <HAL_ResumeTick>

	// Enable LPTIM again:
	HAL_LPTIM_Counter_Start_IT(&hlptim1, 0xFFFF);
 8002bc6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002bca:	4802      	ldr	r0, [pc, #8]	@ (8002bd4 <enterStopMode+0x50>)
 8002bcc:	f000 ffec 	bl	8003ba8 <HAL_LPTIM_Counter_Start_IT>
}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20001ddc 	.word	0x20001ddc
 8002bd8:	40007c00 	.word	0x40007c00
 8002bdc:	40021000 	.word	0x40021000

08002be0 <MySystemClock_Config>:
/*
 * Modified clock setup function:
 * -> Avoid repeating initialization for the LSE 32 kHz clock if already running.
 *    Doing this every time the MCU exits STOP mode, results in a corrupted timing accuracy.
 */
void MySystemClock_Config(void) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b096      	sub	sp, #88	@ 0x58
 8002be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	2244      	movs	r2, #68	@ 0x44
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f005 f89a 	bl	8007d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bf4:	463b      	mov	r3, r7
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	605a      	str	r2, [r3, #4]
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	60da      	str	r2, [r3, #12]
 8002c00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002c02:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c06:	f001 fac5 	bl	8004194 <HAL_PWREx_ControlVoltageScaling>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MySystemClock_Config+0x34>
  {
    Error_Handler();
 8002c10:	f000 f8d4 	bl	8002dbc <Error_Handler>
  }

  /** Configure LSE Drive Capability only if it
  */
  if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON) == 0) || (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) != 1){
 8002c14:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc0 <MySystemClock_Config+0xe0>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d106      	bne.n	8002c30 <MySystemClock_Config+0x50>
 8002c22:	4b27      	ldr	r3, [pc, #156]	@ (8002cc0 <MySystemClock_Config+0xe0>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d00b      	beq.n	8002c48 <MySystemClock_Config+0x68>
  	HAL_PWR_EnableBkUpAccess();
 8002c30:	f001 fa92 	bl	8004158 <HAL_PWR_EnableBkUpAccess>
		__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c34:	4b22      	ldr	r3, [pc, #136]	@ (8002cc0 <MySystemClock_Config+0xe0>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c3a:	4a21      	ldr	r2, [pc, #132]	@ (8002cc0 <MySystemClock_Config+0xe0>)
 8002c3c:	f023 0318 	bic.w	r3, r3, #24
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8002c44:	2304      	movs	r3, #4
 8002c46:	617b      	str	r3, [r7, #20]


  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType |= RCC_OSCILLATORTYPE_HSI;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f043 0302 	orr.w	r3, r3, #2
 8002c4e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c50:	2301      	movs	r3, #1
 8002c52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c5a:	2310      	movs	r3, #16
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c62:	2302      	movs	r3, #2
 8002c64:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002c66:	2301      	movs	r3, #1
 8002c68:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002c6a:	230a      	movs	r3, #10
 8002c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002c6e:	2307      	movs	r3, #7
 8002c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c72:	2302      	movs	r3, #2
 8002c74:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c76:	2302      	movs	r3, #2
 8002c78:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c7a:	f107 0314 	add.w	r3, r7, #20
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f001 fb0a 	bl	8004298 <HAL_RCC_OscConfig>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MySystemClock_Config+0xae>
  {
    Error_Handler();
 8002c8a:	f000 f897 	bl	8002dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c8e:	230f      	movs	r3, #15
 8002c90:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c92:	2303      	movs	r3, #3
 8002c94:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ca2:	463b      	mov	r3, r7
 8002ca4:	2104      	movs	r1, #4
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 fed2 	bl	8004a50 <HAL_RCC_ClockConfig>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MySystemClock_Config+0xd6>
  {
    Error_Handler();
 8002cb2:	f000 f883 	bl	8002dbc <Error_Handler>
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	3758      	adds	r7, #88	@ 0x58
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_LPTIM_AutoReloadMatchCallback>:


// ------------------------------------- Call-backs --------------------------------------

// Auto-reload callback for LPTIM module
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  lptim_tick_msb += 0x10000;
 8002ccc:	4b05      	ldr	r3, [pc, #20]	@ (8002ce4 <HAL_LPTIM_AutoReloadMatchCallback+0x20>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002cd4:	4a03      	ldr	r2, [pc, #12]	@ (8002ce4 <HAL_LPTIM_AutoReloadMatchCallback+0x20>)
 8002cd6:	6013      	str	r3, [r2, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	20001f34 	.word	0x20001f34

08002ce8 <HAL_LPTIM_CompareMatchCallback>:

// Compare match callback for LPTIM module
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  // do nothing...
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_RTCEx_WakeUpTimerEventCallback>:

// RTC wkup timer -> needed to schedule tx events
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  h_sys.evt_flags |= SYS_EVT_TX_PENDING;
 8002d04:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	4b03      	ldr	r3, [pc, #12]	@ (8002d20 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8002d12:	701a      	strb	r2, [r3, #0]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	20000018 	.word	0x20000018

08002d24 <HAL_GPIO_EXTI_Callback>:

// GPIO external interrupts callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	80fb      	strh	r3, [r7, #6]

	// Events on RFM95 interrupt pins
  if (GPIO_Pin == RFM95_DIO0_Pin) {
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d34:	d112      	bne.n	8002d5c <HAL_GPIO_EXTI_Callback+0x38>
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO0);
 8002d36:	2100      	movs	r1, #0
 8002d38:	4813      	ldr	r0, [pc, #76]	@ (8002d88 <HAL_GPIO_EXTI_Callback+0x64>)
 8002d3a:	f7ff f907 	bl	8001f4c <rfm95_on_interrupt>

    // something received
    if(rfm95_handle.rfm_status == RXCONTIN_MODE) h_sys.evt_flags |= SYS_EVT_RX_PENDING;
 8002d3e:	4b12      	ldr	r3, [pc, #72]	@ (8002d88 <HAL_GPIO_EXTI_Callback+0x64>)
 8002d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d119      	bne.n	8002d7e <HAL_GPIO_EXTI_Callback+0x5a>
 8002d4a:	4b10      	ldr	r3, [pc, #64]	@ (8002d8c <HAL_GPIO_EXTI_Callback+0x68>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f043 0302 	orr.w	r3, r3, #2
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	4b0d      	ldr	r3, [pc, #52]	@ (8002d8c <HAL_GPIO_EXTI_Callback+0x68>)
 8002d58:	701a      	strb	r2, [r3, #0]
  } else if (GPIO_Pin == RFM95_DIO1_Pin) {
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
  } else if (GPIO_Pin == RFM95_DIO5_Pin) {
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
  }
}
 8002d5a:	e010      	b.n	8002d7e <HAL_GPIO_EXTI_Callback+0x5a>
  } else if (GPIO_Pin == RFM95_DIO1_Pin) {
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d62:	d104      	bne.n	8002d6e <HAL_GPIO_EXTI_Callback+0x4a>
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
 8002d64:	2101      	movs	r1, #1
 8002d66:	4808      	ldr	r0, [pc, #32]	@ (8002d88 <HAL_GPIO_EXTI_Callback+0x64>)
 8002d68:	f7ff f8f0 	bl	8001f4c <rfm95_on_interrupt>
}
 8002d6c:	e007      	b.n	8002d7e <HAL_GPIO_EXTI_Callback+0x5a>
  } else if (GPIO_Pin == RFM95_DIO5_Pin) {
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d74:	d103      	bne.n	8002d7e <HAL_GPIO_EXTI_Callback+0x5a>
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
 8002d76:	2102      	movs	r1, #2
 8002d78:	4803      	ldr	r0, [pc, #12]	@ (8002d88 <HAL_GPIO_EXTI_Callback+0x64>)
 8002d7a:	f7ff f8e7 	bl	8001f4c <rfm95_on_interrupt>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	200000a4 	.word	0x200000a4
 8002d8c:	20000018 	.word	0x20000018

08002d90 <_write>:
}

/*
 * Function used to print on UART serial (DEBUG)
 */
int _write(int file, char *ptr, int len) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	4804      	ldr	r0, [pc, #16]	@ (8002db8 <_write+0x28>)
 8002da8:	f004 f940 	bl	800702c <HAL_UART_Transmit>
  return len;
 8002dac:	687b      	ldr	r3, [r7, #4]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20001eac 	.word	0x20001eac

08002dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc0:	b672      	cpsid	i
}
 8002dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <Error_Handler+0x8>

08002dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dce:	4b0f      	ldr	r3, [pc, #60]	@ (8002e0c <HAL_MspInit+0x44>)
 8002dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8002e0c <HAL_MspInit+0x44>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dda:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <HAL_MspInit+0x44>)
 8002ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002de6:	4b09      	ldr	r3, [pc, #36]	@ (8002e0c <HAL_MspInit+0x44>)
 8002de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dea:	4a08      	ldr	r2, [pc, #32]	@ (8002e0c <HAL_MspInit+0x44>)
 8002dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002df2:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <HAL_MspInit+0x44>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000

08002e10 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b0a6      	sub	sp, #152	@ 0x98
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e18:	f107 0310 	add.w	r3, r7, #16
 8002e1c:	2288      	movs	r2, #136	@ 0x88
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f004 ff81 	bl	8007d28 <memset>
  if(hlptim->Instance==LPTIM1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a15      	ldr	r2, [pc, #84]	@ (8002e80 <HAL_LPTIM_MspInit+0x70>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d123      	bne.n	8002e78 <HAL_LPTIM_MspInit+0x68>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002e30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002e36:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e3c:	f107 0310 	add.w	r3, r7, #16
 8002e40:	4618      	mov	r0, r3
 8002e42:	f002 f829 	bl	8004e98 <HAL_RCCEx_PeriphCLKConfig>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8002e4c:	f7ff ffb6 	bl	8002dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002e50:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <HAL_LPTIM_MspInit+0x74>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e54:	4a0b      	ldr	r2, [pc, #44]	@ (8002e84 <HAL_LPTIM_MspInit+0x74>)
 8002e56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e5c:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <HAL_LPTIM_MspInit+0x74>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	2041      	movs	r0, #65	@ 0x41
 8002e6e:	f000 fbe8 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002e72:	2041      	movs	r0, #65	@ 0x41
 8002e74:	f000 fc01 	bl	800367a <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 8002e78:	bf00      	nop
 8002e7a:	3798      	adds	r7, #152	@ 0x98
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40007c00 	.word	0x40007c00
 8002e84:	40021000 	.word	0x40021000

08002e88 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b0a6      	sub	sp, #152	@ 0x98
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e90:	f107 0310 	add.w	r3, r7, #16
 8002e94:	2288      	movs	r2, #136	@ 0x88
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f004 ff45 	bl	8007d28 <memset>
  if(hrng->Instance==RNG)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a12      	ldr	r2, [pc, #72]	@ (8002eec <HAL_RNG_MspInit+0x64>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d11c      	bne.n	8002ee2 <HAL_RNG_MspInit+0x5a>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002ea8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002eac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8002eae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002eb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eb6:	f107 0310 	add.w	r3, r7, #16
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f001 ffec 	bl	8004e98 <HAL_RCCEx_PeriphCLKConfig>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_RNG_MspInit+0x42>
    {
      Error_Handler();
 8002ec6:	f7ff ff79 	bl	8002dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002eca:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <HAL_RNG_MspInit+0x68>)
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ece:	4a08      	ldr	r2, [pc, #32]	@ (8002ef0 <HAL_RNG_MspInit+0x68>)
 8002ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ed6:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <HAL_RNG_MspInit+0x68>)
 8002ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8002ee2:	bf00      	nop
 8002ee4:	3798      	adds	r7, #152	@ 0x98
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	50060800 	.word	0x50060800
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b0a4      	sub	sp, #144	@ 0x90
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002efc:	f107 0308 	add.w	r3, r7, #8
 8002f00:	2288      	movs	r2, #136	@ 0x88
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f004 ff0f 	bl	8007d28 <memset>
  if(hrtc->Instance==RTC)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a14      	ldr	r2, [pc, #80]	@ (8002f60 <HAL_RTC_MspInit+0x6c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d120      	bne.n	8002f56 <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f18:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f22:	f107 0308 	add.w	r3, r7, #8
 8002f26:	4618      	mov	r0, r3
 8002f28:	f001 ffb6 	bl	8004e98 <HAL_RCCEx_PeriphCLKConfig>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002f32:	f7ff ff43 	bl	8002dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f36:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <HAL_RTC_MspInit+0x70>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3c:	4a09      	ldr	r2, [pc, #36]	@ (8002f64 <HAL_RTC_MspInit+0x70>)
 8002f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2003      	movs	r0, #3
 8002f4c:	f000 fb79 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002f50:	2003      	movs	r0, #3
 8002f52:	f000 fb92 	bl	800367a <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002f56:	bf00      	nop
 8002f58:	3790      	adds	r7, #144	@ 0x90
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40002800 	.word	0x40002800
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	@ 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a20      	ldr	r2, [pc, #128]	@ (8003008 <HAL_SPI_MspInit+0xa0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d139      	bne.n	8002ffe <HAL_SPI_MspInit+0x96>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f8a:	4b20      	ldr	r3, [pc, #128]	@ (800300c <HAL_SPI_MspInit+0xa4>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800300c <HAL_SPI_MspInit+0xa4>)
 8002f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f94:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f96:	4b1d      	ldr	r3, [pc, #116]	@ (800300c <HAL_SPI_MspInit+0xa4>)
 8002f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800300c <HAL_SPI_MspInit+0xa4>)
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa6:	4a19      	ldr	r2, [pc, #100]	@ (800300c <HAL_SPI_MspInit+0xa4>)
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fae:	4b17      	ldr	r3, [pc, #92]	@ (800300c <HAL_SPI_MspInit+0xa4>)
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002fba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fcc:	2306      	movs	r3, #6
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	480e      	ldr	r0, [pc, #56]	@ (8003010 <HAL_SPI_MspInit+0xa8>)
 8002fd8:	f000 fb6a 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002fdc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fea:	2303      	movs	r3, #3
 8002fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fee:	2306      	movs	r3, #6
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff2:	f107 0314 	add.w	r3, r7, #20
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4805      	ldr	r0, [pc, #20]	@ (8003010 <HAL_SPI_MspInit+0xa8>)
 8002ffa:	f000 fb59 	bl	80036b0 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002ffe:	bf00      	nop
 8003000:	3728      	adds	r7, #40	@ 0x28
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40003c00 	.word	0x40003c00
 800300c:	40021000 	.word	0x40021000
 8003010:	48000800 	.word	0x48000800

08003014 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b0ac      	sub	sp, #176	@ 0xb0
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800302c:	f107 0314 	add.w	r3, r7, #20
 8003030:	2288      	movs	r2, #136	@ 0x88
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f004 fe77 	bl	8007d28 <memset>
  if(huart->Instance==USART2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a21      	ldr	r2, [pc, #132]	@ (80030c4 <HAL_UART_MspInit+0xb0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d13b      	bne.n	80030bc <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003044:	2302      	movs	r3, #2
 8003046:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003048:	2300      	movs	r3, #0
 800304a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	4618      	mov	r0, r3
 8003052:	f001 ff21 	bl	8004e98 <HAL_RCCEx_PeriphCLKConfig>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800305c:	f7ff feae 	bl	8002dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003060:	4b19      	ldr	r3, [pc, #100]	@ (80030c8 <HAL_UART_MspInit+0xb4>)
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	4a18      	ldr	r2, [pc, #96]	@ (80030c8 <HAL_UART_MspInit+0xb4>)
 8003066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800306a:	6593      	str	r3, [r2, #88]	@ 0x58
 800306c:	4b16      	ldr	r3, [pc, #88]	@ (80030c8 <HAL_UART_MspInit+0xb4>)
 800306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003078:	4b13      	ldr	r3, [pc, #76]	@ (80030c8 <HAL_UART_MspInit+0xb4>)
 800307a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307c:	4a12      	ldr	r2, [pc, #72]	@ (80030c8 <HAL_UART_MspInit+0xb4>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003084:	4b10      	ldr	r3, [pc, #64]	@ (80030c8 <HAL_UART_MspInit+0xb4>)
 8003086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003090:	230c      	movs	r3, #12
 8003092:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003096:	2302      	movs	r3, #2
 8003098:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a2:	2303      	movs	r3, #3
 80030a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030a8:	2307      	movs	r3, #7
 80030aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030b2:	4619      	mov	r1, r3
 80030b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030b8:	f000 fafa 	bl	80036b0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80030bc:	bf00      	nop
 80030be:	37b0      	adds	r7, #176	@ 0xb0
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40004400 	.word	0x40004400
 80030c8:	40021000 	.word	0x40021000

080030cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <NMI_Handler+0x4>

080030d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030d8:	bf00      	nop
 80030da:	e7fd      	b.n	80030d8 <HardFault_Handler+0x4>

080030dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030e0:	bf00      	nop
 80030e2:	e7fd      	b.n	80030e0 <MemManage_Handler+0x4>

080030e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030e8:	bf00      	nop
 80030ea:	e7fd      	b.n	80030e8 <BusFault_Handler+0x4>

080030ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030f0:	bf00      	nop
 80030f2:	e7fd      	b.n	80030f0 <UsageFault_Handler+0x4>

080030f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003122:	f000 f94f 	bl	80033c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003130:	4802      	ldr	r0, [pc, #8]	@ (800313c <RTC_WKUP_IRQHandler+0x10>)
 8003132:	f002 ffdb 	bl	80060ec <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20001e24 	.word	0x20001e24

08003140 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO0_Pin);
 8003144:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003148:	f000 fc74 	bl	8003a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}

08003150 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO1_Pin);
 8003154:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003158:	f000 fc6c 	bl	8003a34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO5_Pin);
 800315c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003160:	f000 fc68 	bl	8003a34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003164:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003168:	f000 fc64 	bl	8003a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}

08003170 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003174:	4802      	ldr	r0, [pc, #8]	@ (8003180 <LPTIM1_IRQHandler+0x10>)
 8003176:	f000 fde4 	bl	8003d42 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20001ddc 	.word	0x20001ddc

08003184 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	e00a      	b.n	80031ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003196:	f3af 8000 	nop.w
 800319a:	4601      	mov	r1, r0
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	60ba      	str	r2, [r7, #8]
 80031a2:	b2ca      	uxtb	r2, r1
 80031a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3301      	adds	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	dbf0      	blt.n	8003196 <_read+0x12>
  }

  return len;
 80031b4:	687b      	ldr	r3, [r7, #4]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <_close>:
  }
  return len;
}

int _close(int file)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031e6:	605a      	str	r2, [r3, #4]
  return 0;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <_isatty>:

int _isatty(int file)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031fe:	2301      	movs	r3, #1
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003230:	4a14      	ldr	r2, [pc, #80]	@ (8003284 <_sbrk+0x5c>)
 8003232:	4b15      	ldr	r3, [pc, #84]	@ (8003288 <_sbrk+0x60>)
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800323c:	4b13      	ldr	r3, [pc, #76]	@ (800328c <_sbrk+0x64>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003244:	4b11      	ldr	r3, [pc, #68]	@ (800328c <_sbrk+0x64>)
 8003246:	4a12      	ldr	r2, [pc, #72]	@ (8003290 <_sbrk+0x68>)
 8003248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800324a:	4b10      	ldr	r3, [pc, #64]	@ (800328c <_sbrk+0x64>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	429a      	cmp	r2, r3
 8003256:	d207      	bcs.n	8003268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003258:	f004 fd6e 	bl	8007d38 <__errno>
 800325c:	4603      	mov	r3, r0
 800325e:	220c      	movs	r2, #12
 8003260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003266:	e009      	b.n	800327c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003268:	4b08      	ldr	r3, [pc, #32]	@ (800328c <_sbrk+0x64>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800326e:	4b07      	ldr	r3, [pc, #28]	@ (800328c <_sbrk+0x64>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	4a05      	ldr	r2, [pc, #20]	@ (800328c <_sbrk+0x64>)
 8003278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800327a:	68fb      	ldr	r3, [r7, #12]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20018000 	.word	0x20018000
 8003288:	00000400 	.word	0x00000400
 800328c:	20001f40 	.word	0x20001f40
 8003290:	20002098 	.word	0x20002098

08003294 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <SystemInit+0x20>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329e:	4a05      	ldr	r2, [pc, #20]	@ (80032b4 <SystemInit+0x20>)
 80032a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80032b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032bc:	f7ff ffea 	bl	8003294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032c0:	480c      	ldr	r0, [pc, #48]	@ (80032f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80032c2:	490d      	ldr	r1, [pc, #52]	@ (80032f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032c4:	4a0d      	ldr	r2, [pc, #52]	@ (80032fc <LoopForever+0xe>)
  movs r3, #0
 80032c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032c8:	e002      	b.n	80032d0 <LoopCopyDataInit>

080032ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ce:	3304      	adds	r3, #4

080032d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032d4:	d3f9      	bcc.n	80032ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003304 <LoopForever+0x16>)
  movs r3, #0
 80032da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032dc:	e001      	b.n	80032e2 <LoopFillZerobss>

080032de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032e0:	3204      	adds	r2, #4

080032e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032e4:	d3fb      	bcc.n	80032de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032e6:	f004 fd2d 	bl	8007d44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032ea:	f7fe fe6f 	bl	8001fcc <main>

080032ee <LoopForever>:

LoopForever:
    b LoopForever
 80032ee:	e7fe      	b.n	80032ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80032f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80032f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032f8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80032fc:	080085e4 	.word	0x080085e4
  ldr r2, =_sbss
 8003300:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8003304:	20002094 	.word	0x20002094

08003308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003308:	e7fe      	b.n	8003308 <ADC1_2_IRQHandler>
	...

0800330c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003316:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <HAL_Init+0x3c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a0b      	ldr	r2, [pc, #44]	@ (8003348 <HAL_Init+0x3c>)
 800331c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003320:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003322:	2003      	movs	r0, #3
 8003324:	f000 f982 	bl	800362c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003328:	2000      	movs	r0, #0
 800332a:	f000 f80f 	bl	800334c <HAL_InitTick>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	71fb      	strb	r3, [r7, #7]
 8003338:	e001      	b.n	800333e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800333a:	f7ff fd45 	bl	8002dc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800333e:	79fb      	ldrb	r3, [r7, #7]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40022000 	.word	0x40022000

0800334c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003358:	4b17      	ldr	r3, [pc, #92]	@ (80033b8 <HAL_InitTick+0x6c>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d023      	beq.n	80033a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003360:	4b16      	ldr	r3, [pc, #88]	@ (80033bc <HAL_InitTick+0x70>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b14      	ldr	r3, [pc, #80]	@ (80033b8 <HAL_InitTick+0x6c>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800336e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f98d 	bl	8003696 <HAL_SYSTICK_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10f      	bne.n	80033a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b0f      	cmp	r3, #15
 8003386:	d809      	bhi.n	800339c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003388:	2200      	movs	r2, #0
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003390:	f000 f957 	bl	8003642 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003394:	4a0a      	ldr	r2, [pc, #40]	@ (80033c0 <HAL_InitTick+0x74>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e007      	b.n	80033ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
 80033a0:	e004      	b.n	80033ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	e001      	b.n	80033ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000024 	.word	0x20000024
 80033bc:	2000001c 	.word	0x2000001c
 80033c0:	20000020 	.word	0x20000020

080033c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033c8:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_IncTick+0x20>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <HAL_IncTick+0x24>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	4a04      	ldr	r2, [pc, #16]	@ (80033e8 <HAL_IncTick+0x24>)
 80033d6:	6013      	str	r3, [r2, #0]
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000024 	.word	0x20000024
 80033e8:	20001f44 	.word	0x20001f44

080033ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return uwTick;
 80033f0:	4b03      	ldr	r3, [pc, #12]	@ (8003400 <HAL_GetTick+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20001f44 	.word	0x20001f44

08003404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800340c:	f7ff ffee 	bl	80033ec <HAL_GetTick>
 8003410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800341c:	d005      	beq.n	800342a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800341e:	4b0a      	ldr	r3, [pc, #40]	@ (8003448 <HAL_Delay+0x44>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800342a:	bf00      	nop
 800342c:	f7ff ffde 	bl	80033ec <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	429a      	cmp	r2, r3
 800343a:	d8f7      	bhi.n	800342c <HAL_Delay+0x28>
  {
  }
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000024 	.word	0x20000024

0800344c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003450:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <HAL_SuspendTick+0x1c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a04      	ldr	r2, [pc, #16]	@ (8003468 <HAL_SuspendTick+0x1c>)
 8003456:	f023 0302 	bic.w	r3, r3, #2
 800345a:	6013      	str	r3, [r2, #0]
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e000e010 	.word	0xe000e010

0800346c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_ResumeTick+0x1c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a04      	ldr	r2, [pc, #16]	@ (8003488 <HAL_ResumeTick+0x1c>)
 8003476:	f043 0302 	orr.w	r3, r3, #2
 800347a:	6013      	str	r3, [r2, #0]
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000e010 	.word	0xe000e010

0800348c <__NVIC_SetPriorityGrouping>:
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800349c:	4b0c      	ldr	r3, [pc, #48]	@ (80034d0 <__NVIC_SetPriorityGrouping+0x44>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034a8:	4013      	ands	r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034be:	4a04      	ldr	r2, [pc, #16]	@ (80034d0 <__NVIC_SetPriorityGrouping+0x44>)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	60d3      	str	r3, [r2, #12]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <__NVIC_GetPriorityGrouping>:
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d8:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <__NVIC_GetPriorityGrouping+0x18>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	f003 0307 	and.w	r3, r3, #7
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <__NVIC_EnableIRQ>:
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	db0b      	blt.n	800351a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	4907      	ldr	r1, [pc, #28]	@ (8003528 <__NVIC_EnableIRQ+0x38>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2001      	movs	r0, #1
 8003512:	fa00 f202 	lsl.w	r2, r0, r2
 8003516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000e100 	.word	0xe000e100

0800352c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353c:	2b00      	cmp	r3, #0
 800353e:	db0a      	blt.n	8003556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	490c      	ldr	r1, [pc, #48]	@ (8003578 <__NVIC_SetPriority+0x4c>)
 8003546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354a:	0112      	lsls	r2, r2, #4
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	440b      	add	r3, r1
 8003550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003554:	e00a      	b.n	800356c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4908      	ldr	r1, [pc, #32]	@ (800357c <__NVIC_SetPriority+0x50>)
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	3b04      	subs	r3, #4
 8003564:	0112      	lsls	r2, r2, #4
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	440b      	add	r3, r1
 800356a:	761a      	strb	r2, [r3, #24]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000e100 	.word	0xe000e100
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	@ 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f1c3 0307 	rsb	r3, r3, #7
 800359a:	2b04      	cmp	r3, #4
 800359c:	bf28      	it	cs
 800359e:	2304      	movcs	r3, #4
 80035a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d902      	bls.n	80035b0 <NVIC_EncodePriority+0x30>
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3b03      	subs	r3, #3
 80035ae:	e000      	b.n	80035b2 <NVIC_EncodePriority+0x32>
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	401a      	ands	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	43d9      	mvns	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	4313      	orrs	r3, r2
         );
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3724      	adds	r7, #36	@ 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f8:	d301      	bcc.n	80035fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fa:	2301      	movs	r3, #1
 80035fc:	e00f      	b.n	800361e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003628 <SysTick_Config+0x40>)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003606:	210f      	movs	r1, #15
 8003608:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800360c:	f7ff ff8e 	bl	800352c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003610:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <SysTick_Config+0x40>)
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003616:	4b04      	ldr	r3, [pc, #16]	@ (8003628 <SysTick_Config+0x40>)
 8003618:	2207      	movs	r2, #7
 800361a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	e000e010 	.word	0xe000e010

0800362c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ff29 	bl	800348c <__NVIC_SetPriorityGrouping>
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b086      	sub	sp, #24
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003654:	f7ff ff3e 	bl	80034d4 <__NVIC_GetPriorityGrouping>
 8003658:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	6978      	ldr	r0, [r7, #20]
 8003660:	f7ff ff8e 	bl	8003580 <NVIC_EncodePriority>
 8003664:	4602      	mov	r2, r0
 8003666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff5d 	bl	800352c <__NVIC_SetPriority>
}
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	4603      	mov	r3, r0
 8003682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ff31 	bl	80034f0 <__NVIC_EnableIRQ>
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff ffa2 	bl	80035e8 <SysTick_Config>
 80036a4:	4603      	mov	r3, r0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036be:	e17f      	b.n	80039c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	2101      	movs	r1, #1
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	fa01 f303 	lsl.w	r3, r1, r3
 80036cc:	4013      	ands	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 8171 	beq.w	80039ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d005      	beq.n	80036f0 <HAL_GPIO_Init+0x40>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d130      	bne.n	8003752 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	2203      	movs	r2, #3
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003726:	2201      	movs	r2, #1
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	f003 0201 	and.w	r2, r3, #1
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b03      	cmp	r3, #3
 800375c:	d118      	bne.n	8003790 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003762:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003764:	2201      	movs	r2, #1
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	08db      	lsrs	r3, r3, #3
 800377a:	f003 0201 	and.w	r2, r3, #1
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b03      	cmp	r3, #3
 800379a:	d017      	beq.n	80037cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d123      	bne.n	8003820 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	08da      	lsrs	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3208      	adds	r2, #8
 80037e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	220f      	movs	r2, #15
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4013      	ands	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	08da      	lsrs	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3208      	adds	r2, #8
 800381a:	6939      	ldr	r1, [r7, #16]
 800381c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0203 	and.w	r2, r3, #3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80ac 	beq.w	80039ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003862:	4b5f      	ldr	r3, [pc, #380]	@ (80039e0 <HAL_GPIO_Init+0x330>)
 8003864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003866:	4a5e      	ldr	r2, [pc, #376]	@ (80039e0 <HAL_GPIO_Init+0x330>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6613      	str	r3, [r2, #96]	@ 0x60
 800386e:	4b5c      	ldr	r3, [pc, #368]	@ (80039e0 <HAL_GPIO_Init+0x330>)
 8003870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800387a:	4a5a      	ldr	r2, [pc, #360]	@ (80039e4 <HAL_GPIO_Init+0x334>)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	3302      	adds	r3, #2
 8003882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003886:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	220f      	movs	r2, #15
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038a4:	d025      	beq.n	80038f2 <HAL_GPIO_Init+0x242>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4f      	ldr	r2, [pc, #316]	@ (80039e8 <HAL_GPIO_Init+0x338>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01f      	beq.n	80038ee <HAL_GPIO_Init+0x23e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4e      	ldr	r2, [pc, #312]	@ (80039ec <HAL_GPIO_Init+0x33c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d019      	beq.n	80038ea <HAL_GPIO_Init+0x23a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4d      	ldr	r2, [pc, #308]	@ (80039f0 <HAL_GPIO_Init+0x340>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_GPIO_Init+0x236>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4c      	ldr	r2, [pc, #304]	@ (80039f4 <HAL_GPIO_Init+0x344>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00d      	beq.n	80038e2 <HAL_GPIO_Init+0x232>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4b      	ldr	r2, [pc, #300]	@ (80039f8 <HAL_GPIO_Init+0x348>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d007      	beq.n	80038de <HAL_GPIO_Init+0x22e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4a      	ldr	r2, [pc, #296]	@ (80039fc <HAL_GPIO_Init+0x34c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <HAL_GPIO_Init+0x22a>
 80038d6:	2306      	movs	r3, #6
 80038d8:	e00c      	b.n	80038f4 <HAL_GPIO_Init+0x244>
 80038da:	2307      	movs	r3, #7
 80038dc:	e00a      	b.n	80038f4 <HAL_GPIO_Init+0x244>
 80038de:	2305      	movs	r3, #5
 80038e0:	e008      	b.n	80038f4 <HAL_GPIO_Init+0x244>
 80038e2:	2304      	movs	r3, #4
 80038e4:	e006      	b.n	80038f4 <HAL_GPIO_Init+0x244>
 80038e6:	2303      	movs	r3, #3
 80038e8:	e004      	b.n	80038f4 <HAL_GPIO_Init+0x244>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e002      	b.n	80038f4 <HAL_GPIO_Init+0x244>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_GPIO_Init+0x244>
 80038f2:	2300      	movs	r3, #0
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	f002 0203 	and.w	r2, r2, #3
 80038fa:	0092      	lsls	r2, r2, #2
 80038fc:	4093      	lsls	r3, r2
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003904:	4937      	ldr	r1, [pc, #220]	@ (80039e4 <HAL_GPIO_Init+0x334>)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	3302      	adds	r3, #2
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003912:	4b3b      	ldr	r3, [pc, #236]	@ (8003a00 <HAL_GPIO_Init+0x350>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003936:	4a32      	ldr	r2, [pc, #200]	@ (8003a00 <HAL_GPIO_Init+0x350>)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800393c:	4b30      	ldr	r3, [pc, #192]	@ (8003a00 <HAL_GPIO_Init+0x350>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003960:	4a27      	ldr	r2, [pc, #156]	@ (8003a00 <HAL_GPIO_Init+0x350>)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003966:	4b26      	ldr	r3, [pc, #152]	@ (8003a00 <HAL_GPIO_Init+0x350>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	43db      	mvns	r3, r3
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800398a:	4a1d      	ldr	r2, [pc, #116]	@ (8003a00 <HAL_GPIO_Init+0x350>)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003990:	4b1b      	ldr	r3, [pc, #108]	@ (8003a00 <HAL_GPIO_Init+0x350>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	43db      	mvns	r3, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039b4:	4a12      	ldr	r2, [pc, #72]	@ (8003a00 <HAL_GPIO_Init+0x350>)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f47f ae78 	bne.w	80036c0 <HAL_GPIO_Init+0x10>
  }
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40010000 	.word	0x40010000
 80039e8:	48000400 	.word	0x48000400
 80039ec:	48000800 	.word	0x48000800
 80039f0:	48000c00 	.word	0x48000c00
 80039f4:	48001000 	.word	0x48001000
 80039f8:	48001400 	.word	0x48001400
 80039fc:	48001800 	.word	0x48001800
 8003a00:	40010400 	.word	0x40010400

08003a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	807b      	strh	r3, [r7, #2]
 8003a10:	4613      	mov	r3, r2
 8003a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a14:	787b      	ldrb	r3, [r7, #1]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a20:	e002      	b.n	8003a28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a22:	887a      	ldrh	r2, [r7, #2]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a3e:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d006      	beq.n	8003a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a4a:	4a05      	ldr	r2, [pc, #20]	@ (8003a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff f966 	bl	8002d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40010400 	.word	0x40010400

08003a64 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e08f      	b.n	8003b96 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d106      	bne.n	8003a96 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff f9bd 	bl	8002e10 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d004      	beq.n	8003ab8 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ab6:	d103      	bne.n	8003ac0 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 031e 	bic.w	r3, r3, #30
 8003abe:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d005      	beq.n	8003ad8 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003ad2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4b31      	ldr	r3, [pc, #196]	@ (8003ba0 <HAL_LPTIM_Init+0x13c>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003ae8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003aee:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8003af4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8003afa:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d107      	bne.n	8003b1a <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003b12:	4313      	orrs	r3, r2
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d004      	beq.n	8003b2c <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b2a:	d107      	bne.n	8003b3c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003b34:	4313      	orrs	r3, r2
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00a      	beq.n	8003b5e <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003b50:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003b56:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ba4 <HAL_LPTIM_Init+0x140>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d108      	bne.n	8003b82 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	621a      	str	r2, [r3, #32]
 8003b80:	e004      	b.n	8003b8c <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b8a:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	ff19f1fe 	.word	0xff19f1fe
 8003ba4:	40007c00 	.word	0x40007c00

08003ba8 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a37      	ldr	r2, [pc, #220]	@ (8003c9c <HAL_LPTIM_Counter_Start_IT+0xf4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d106      	bne.n	8003bd2 <HAL_LPTIM_Counter_Start_IT+0x2a>
 8003bc4:	4b36      	ldr	r3, [pc, #216]	@ (8003ca0 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	4a35      	ldr	r2, [pc, #212]	@ (8003ca0 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6213      	str	r3, [r2, #32]
 8003bd0:	e005      	b.n	8003bde <HAL_LPTIM_Counter_Start_IT+0x36>
 8003bd2:	4b33      	ldr	r3, [pc, #204]	@ (8003ca0 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	4a32      	ldr	r2, [pc, #200]	@ (8003ca0 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	6213      	str	r3, [r2, #32]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d00c      	beq.n	8003c00 <HAL_LPTIM_Counter_Start_IT+0x58>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bee:	d107      	bne.n	8003c00 <HAL_LPTIM_Counter_Start_IT+0x58>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8003bfe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2210      	movs	r2, #16
 8003c16:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003c20:	2110      	movs	r1, #16
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f968 	bl	8003ef8 <LPTIM_WaitForFlag>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d101      	bne.n	8003c32 <HAL_LPTIM_Counter_Start_IT+0x8a>
  {
    return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e02f      	b.n	8003c92 <HAL_LPTIM_Counter_Start_IT+0xea>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f990 	bl	8003f58 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f94f 	bl	8003edc <HAL_LPTIM_GetState>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d101      	bne.n	8003c48 <HAL_LPTIM_Counter_Start_IT+0xa0>
  {
    return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e024      	b.n	8003c92 <HAL_LPTIM_Counter_Start_IT+0xea>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0210 	orr.w	r2, r2, #16
 8003c56:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0202 	orr.w	r2, r2, #2
 8003c66:	609a      	str	r2, [r3, #8]
  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);

#endif
  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0204 	orr.w	r2, r2, #4
 8003c86:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40007c00 	.word	0x40007c00
 8003ca0:	40010400 	.word	0x40010400

08003ca4 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003d20 <HAL_LPTIM_Counter_Stop_IT+0x7c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d106      	bne.n	8003cc4 <HAL_LPTIM_Counter_Stop_IT+0x20>
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	4a1a      	ldr	r2, [pc, #104]	@ (8003d24 <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8003cbc:	f023 0301 	bic.w	r3, r3, #1
 8003cc0:	6213      	str	r3, [r2, #32]
 8003cc2:	e005      	b.n	8003cd0 <HAL_LPTIM_Counter_Stop_IT+0x2c>
 8003cc4:	4b17      	ldr	r3, [pc, #92]	@ (8003d24 <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	4a16      	ldr	r2, [pc, #88]	@ (8003d24 <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8003cca:	f023 0302 	bic.w	r3, r3, #2
 8003cce:	6213      	str	r3, [r2, #32]

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f93d 	bl	8003f58 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f8fc 	bl	8003edc <HAL_LPTIM_GetState>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d101      	bne.n	8003cee <HAL_LPTIM_Counter_Stop_IT+0x4a>
  {
    return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e014      	b.n	8003d18 <HAL_LPTIM_Counter_Stop_IT+0x74>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0210 	bic.w	r2, r2, #16
 8003cfc:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0202 	bic.w	r2, r2, #2
 8003d0c:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
#endif
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40007c00 	.word	0x40007c00
 8003d24:	40010400 	.word	0x40010400

08003d28 <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69db      	ldr	r3, [r3, #28]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d10d      	bne.n	8003d74 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d106      	bne.n	8003d74 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe ffba 	bl	8002ce8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d10d      	bne.n	8003d9e <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d106      	bne.n	8003d9e <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2202      	movs	r2, #2
 8003d96:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7fe ff93 	bl	8002cc4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d10d      	bne.n	8003dc8 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d106      	bne.n	8003dc8 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f858 	bl	8003e78 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d10d      	bne.n	8003df2 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d106      	bne.n	8003df2 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2208      	movs	r2, #8
 8003dea:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f84d 	bl	8003e8c <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d10d      	bne.n	8003e1c <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b10      	cmp	r3, #16
 8003e0c:	d106      	bne.n	8003e1c <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2210      	movs	r2, #16
 8003e14:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f842 	bl	8003ea0 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d10d      	bne.n	8003e46 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d106      	bne.n	8003e46 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f837 	bl	8003eb4 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e50:	2b40      	cmp	r3, #64	@ 0x40
 8003e52:	d10d      	bne.n	8003e70 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5e:	2b40      	cmp	r3, #64	@ 0x40
 8003e60:	d106      	bne.n	8003e70 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2240      	movs	r2, #64	@ 0x40
 8003e68:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f82c 	bl	8003ec8 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003eea:	b2db      	uxtb	r3, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003f06:	4b12      	ldr	r3, [pc, #72]	@ (8003f50 <LPTIM_WaitForFlag+0x58>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a12      	ldr	r2, [pc, #72]	@ (8003f54 <LPTIM_WaitForFlag+0x5c>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	0b9b      	lsrs	r3, r3, #14
 8003f12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f16:	fb02 f303 	mul.w	r3, r2, r3
 8003f1a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	4013      	ands	r3, r2
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d002      	beq.n	8003f42 <LPTIM_WaitForFlag+0x4a>
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1ec      	bne.n	8003f1c <LPTIM_WaitForFlag+0x24>

  return result;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	2000001c 	.word	0x2000001c
 8003f54:	d1b71759 	.word	0xd1b71759

08003f58 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08c      	sub	sp, #48	@ 0x30
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f64:	f3ef 8310 	mrs	r3, PRIMASK
 8003f68:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f6e:	2301      	movs	r3, #1
 8003f70:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f383 8810 	msr	PRIMASK, r3
}
 8003f78:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a73      	ldr	r2, [pc, #460]	@ (800414c <LPTIM_Disable+0x1f4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <LPTIM_Disable+0x34>
 8003f84:	4a72      	ldr	r2, [pc, #456]	@ (8004150 <LPTIM_Disable+0x1f8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d007      	beq.n	8003f9a <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8003f8a:	e00d      	b.n	8003fa8 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003f8c:	4b71      	ldr	r3, [pc, #452]	@ (8004154 <LPTIM_Disable+0x1fc>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f92:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8003f98:	e006      	b.n	8003fa8 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003f9a:	4b6e      	ldr	r3, [pc, #440]	@ (8004154 <LPTIM_Disable+0x1fc>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8003fa6:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a5d      	ldr	r2, [pc, #372]	@ (800414c <LPTIM_Disable+0x1f4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <LPTIM_Disable+0x8a>
 8003fda:	4a5d      	ldr	r2, [pc, #372]	@ (8004150 <LPTIM_Disable+0x1f8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00d      	beq.n	8003ffc <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8003fe0:	e019      	b.n	8004016 <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8003fe2:	4b5c      	ldr	r3, [pc, #368]	@ (8004154 <LPTIM_Disable+0x1fc>)
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe6:	4a5b      	ldr	r2, [pc, #364]	@ (8004154 <LPTIM_Disable+0x1fc>)
 8003fe8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fec:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003fee:	4b59      	ldr	r3, [pc, #356]	@ (8004154 <LPTIM_Disable+0x1fc>)
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff2:	4a58      	ldr	r2, [pc, #352]	@ (8004154 <LPTIM_Disable+0x1fc>)
 8003ff4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ff8:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 8003ffa:	e00c      	b.n	8004016 <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8003ffc:	4b55      	ldr	r3, [pc, #340]	@ (8004154 <LPTIM_Disable+0x1fc>)
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004000:	4a54      	ldr	r2, [pc, #336]	@ (8004154 <LPTIM_Disable+0x1fc>)
 8004002:	f043 0320 	orr.w	r3, r3, #32
 8004006:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004008:	4b52      	ldr	r3, [pc, #328]	@ (8004154 <LPTIM_Disable+0x1fc>)
 800400a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400c:	4a51      	ldr	r2, [pc, #324]	@ (8004154 <LPTIM_Disable+0x1fc>)
 800400e:	f023 0320 	bic.w	r3, r3, #32
 8004012:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 8004014:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d102      	bne.n	8004022 <LPTIM_Disable+0xca>
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d075      	beq.n	800410e <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a49      	ldr	r2, [pc, #292]	@ (800414c <LPTIM_Disable+0x1f4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <LPTIM_Disable+0xdc>
 800402c:	4a48      	ldr	r2, [pc, #288]	@ (8004150 <LPTIM_Disable+0x1f8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8004032:	e011      	b.n	8004058 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8004034:	4b47      	ldr	r3, [pc, #284]	@ (8004154 <LPTIM_Disable+0x1fc>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403a:	4a46      	ldr	r2, [pc, #280]	@ (8004154 <LPTIM_Disable+0x1fc>)
 800403c:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8004040:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8004044:	e008      	b.n	8004058 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8004046:	4b43      	ldr	r3, [pc, #268]	@ (8004154 <LPTIM_Disable+0x1fc>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404c:	4a41      	ldr	r2, [pc, #260]	@ (8004154 <LPTIM_Disable+0x1fc>)
 800404e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004052:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8004056:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01a      	beq.n	8004094 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004076:	2108      	movs	r1, #8
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff ff3d 	bl	8003ef8 <LPTIM_WaitForFlag>
 800407e:	4603      	mov	r3, r0
 8004080:	2b03      	cmp	r3, #3
 8004082:	d103      	bne.n	800408c <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2203      	movs	r2, #3
 8004088:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2208      	movs	r2, #8
 8004092:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d01a      	beq.n	80040d0 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80040b2:	2110      	movs	r1, #16
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff ff1f 	bl	8003ef8 <LPTIM_WaitForFlag>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d103      	bne.n	80040c8 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2203      	movs	r2, #3
 80040c4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2210      	movs	r2, #16
 80040ce:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1d      	ldr	r2, [pc, #116]	@ (800414c <LPTIM_Disable+0x1f4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d003      	beq.n	80040e2 <LPTIM_Disable+0x18a>
 80040da:	4a1d      	ldr	r2, [pc, #116]	@ (8004150 <LPTIM_Disable+0x1f8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00b      	beq.n	80040f8 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80040e0:	e015      	b.n	800410e <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80040e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004154 <LPTIM_Disable+0x1fc>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040ec:	4919      	ldr	r1, [pc, #100]	@ (8004154 <LPTIM_Disable+0x1fc>)
 80040ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 80040f6:	e00a      	b.n	800410e <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80040f8:	4b16      	ldr	r3, [pc, #88]	@ (8004154 <LPTIM_Disable+0x1fc>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004102:	4914      	ldr	r1, [pc, #80]	@ (8004154 <LPTIM_Disable+0x1fc>)
 8004104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 800410c:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004124:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6a3a      	ldr	r2, [r7, #32]
 800412c:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	621a      	str	r2, [r3, #32]
 8004136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004138:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f383 8810 	msr	PRIMASK, r3
}
 8004140:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004142:	bf00      	nop
 8004144:	3730      	adds	r7, #48	@ 0x30
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40007c00 	.word	0x40007c00
 8004150:	40009400 	.word	0x40009400
 8004154:	40021000 	.word	0x40021000

08004158 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800415c:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a04      	ldr	r2, [pc, #16]	@ (8004174 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004166:	6013      	str	r3, [r2, #0]
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40007000 	.word	0x40007000

08004178 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800417c:	4b04      	ldr	r3, [pc, #16]	@ (8004190 <HAL_PWREx_GetVoltageRange+0x18>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40007000 	.word	0x40007000

08004194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a2:	d130      	bne.n	8004206 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041a4:	4b23      	ldr	r3, [pc, #140]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b0:	d038      	beq.n	8004224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041b2:	4b20      	ldr	r3, [pc, #128]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004238 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2232      	movs	r2, #50	@ 0x32
 80041c8:	fb02 f303 	mul.w	r3, r2, r3
 80041cc:	4a1b      	ldr	r2, [pc, #108]	@ (800423c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	0c9b      	lsrs	r3, r3, #18
 80041d4:	3301      	adds	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041d8:	e002      	b.n	80041e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3b01      	subs	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041e0:	4b14      	ldr	r3, [pc, #80]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ec:	d102      	bne.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f2      	bne.n	80041da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004200:	d110      	bne.n	8004224 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e00f      	b.n	8004226 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004206:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800420e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004212:	d007      	beq.n	8004224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004214:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800421c:	4a05      	ldr	r2, [pc, #20]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004222:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40007000 	.word	0x40007000
 8004238:	2000001c 	.word	0x2000001c
 800423c:	431bde83 	.word	0x431bde83

08004240 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 800424a:	4b11      	ldr	r3, [pc, #68]	@ (8004290 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 0307 	bic.w	r3, r3, #7
 8004252:	4a0f      	ldr	r2, [pc, #60]	@ (8004290 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004254:	f043 0302 	orr.w	r3, r3, #2
 8004258:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800425a:	4b0e      	ldr	r3, [pc, #56]	@ (8004294 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	4a0d      	ldr	r2, [pc, #52]	@ (8004294 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004260:	f043 0304 	orr.w	r3, r3, #4
 8004264:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800426c:	bf30      	wfi
 800426e:	e002      	b.n	8004276 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004270:	bf40      	sev
    __WFE();
 8004272:	bf20      	wfe
    __WFE();
 8004274:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004276:	4b07      	ldr	r3, [pc, #28]	@ (8004294 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	4a06      	ldr	r2, [pc, #24]	@ (8004294 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	6113      	str	r3, [r2, #16]
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40007000 	.word	0x40007000
 8004294:	e000ed00 	.word	0xe000ed00

08004298 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e3ca      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042aa:	4b97      	ldr	r3, [pc, #604]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b4:	4b94      	ldr	r3, [pc, #592]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 80e4 	beq.w	8004494 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d007      	beq.n	80042e2 <HAL_RCC_OscConfig+0x4a>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	f040 808b 	bne.w	80043f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	f040 8087 	bne.w	80043f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042e2:	4b89      	ldr	r3, [pc, #548]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_RCC_OscConfig+0x62>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e3a2      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1a      	ldr	r2, [r3, #32]
 80042fe:	4b82      	ldr	r3, [pc, #520]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d004      	beq.n	8004314 <HAL_RCC_OscConfig+0x7c>
 800430a:	4b7f      	ldr	r3, [pc, #508]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004312:	e005      	b.n	8004320 <HAL_RCC_OscConfig+0x88>
 8004314:	4b7c      	ldr	r3, [pc, #496]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004320:	4293      	cmp	r3, r2
 8004322:	d223      	bcs.n	800436c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fd55 	bl	8004dd8 <RCC_SetFlashLatencyFromMSIRange>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e383      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004338:	4b73      	ldr	r3, [pc, #460]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a72      	ldr	r2, [pc, #456]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 800433e:	f043 0308 	orr.w	r3, r3, #8
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	4b70      	ldr	r3, [pc, #448]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	496d      	ldr	r1, [pc, #436]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004356:	4b6c      	ldr	r3, [pc, #432]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	4968      	ldr	r1, [pc, #416]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
 800436a:	e025      	b.n	80043b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800436c:	4b66      	ldr	r3, [pc, #408]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a65      	ldr	r2, [pc, #404]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004372:	f043 0308 	orr.w	r3, r3, #8
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	4b63      	ldr	r3, [pc, #396]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	4960      	ldr	r1, [pc, #384]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800438a:	4b5f      	ldr	r3, [pc, #380]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	495b      	ldr	r1, [pc, #364]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fd15 	bl	8004dd8 <RCC_SetFlashLatencyFromMSIRange>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e343      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043b8:	f000 fc4a 	bl	8004c50 <HAL_RCC_GetSysClockFreq>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b52      	ldr	r3, [pc, #328]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	091b      	lsrs	r3, r3, #4
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	4950      	ldr	r1, [pc, #320]	@ (800450c <HAL_RCC_OscConfig+0x274>)
 80043ca:	5ccb      	ldrb	r3, [r1, r3]
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	fa22 f303 	lsr.w	r3, r2, r3
 80043d4:	4a4e      	ldr	r2, [pc, #312]	@ (8004510 <HAL_RCC_OscConfig+0x278>)
 80043d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004514 <HAL_RCC_OscConfig+0x27c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fe ffb5 	bl	800334c <HAL_InitTick>
 80043e2:	4603      	mov	r3, r0
 80043e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d052      	beq.n	8004492 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	e327      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d032      	beq.n	800445e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043f8:	4b43      	ldr	r3, [pc, #268]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a42      	ldr	r2, [pc, #264]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004404:	f7fe fff2 	bl	80033ec <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800440c:	f7fe ffee 	bl	80033ec <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e310      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800441e:	4b3a      	ldr	r3, [pc, #232]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800442a:	4b37      	ldr	r3, [pc, #220]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a36      	ldr	r2, [pc, #216]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004430:	f043 0308 	orr.w	r3, r3, #8
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	4b34      	ldr	r3, [pc, #208]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	4931      	ldr	r1, [pc, #196]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004448:	4b2f      	ldr	r3, [pc, #188]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	492c      	ldr	r1, [pc, #176]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004458:	4313      	orrs	r3, r2
 800445a:	604b      	str	r3, [r1, #4]
 800445c:	e01a      	b.n	8004494 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800445e:	4b2a      	ldr	r3, [pc, #168]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a29      	ldr	r2, [pc, #164]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800446a:	f7fe ffbf 	bl	80033ec <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004472:	f7fe ffbb 	bl	80033ec <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e2dd      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004484:	4b20      	ldr	r3, [pc, #128]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f0      	bne.n	8004472 <HAL_RCC_OscConfig+0x1da>
 8004490:	e000      	b.n	8004494 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004492:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d074      	beq.n	800458a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d005      	beq.n	80044b2 <HAL_RCC_OscConfig+0x21a>
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b0c      	cmp	r3, #12
 80044aa:	d10e      	bne.n	80044ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d10b      	bne.n	80044ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b2:	4b15      	ldr	r3, [pc, #84]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d064      	beq.n	8004588 <HAL_RCC_OscConfig+0x2f0>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d160      	bne.n	8004588 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e2ba      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d2:	d106      	bne.n	80044e2 <HAL_RCC_OscConfig+0x24a>
 80044d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a0b      	ldr	r2, [pc, #44]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 80044da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	e026      	b.n	8004530 <HAL_RCC_OscConfig+0x298>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044ea:	d115      	bne.n	8004518 <HAL_RCC_OscConfig+0x280>
 80044ec:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a05      	ldr	r2, [pc, #20]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 80044f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	4b03      	ldr	r3, [pc, #12]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a02      	ldr	r2, [pc, #8]	@ (8004508 <HAL_RCC_OscConfig+0x270>)
 80044fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	e014      	b.n	8004530 <HAL_RCC_OscConfig+0x298>
 8004506:	bf00      	nop
 8004508:	40021000 	.word	0x40021000
 800450c:	0800858c 	.word	0x0800858c
 8004510:	2000001c 	.word	0x2000001c
 8004514:	20000020 	.word	0x20000020
 8004518:	4ba0      	ldr	r3, [pc, #640]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a9f      	ldr	r2, [pc, #636]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 800451e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4b9d      	ldr	r3, [pc, #628]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a9c      	ldr	r2, [pc, #624]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 800452a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800452e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d013      	beq.n	8004560 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fe ff58 	bl	80033ec <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004540:	f7fe ff54 	bl	80033ec <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b64      	cmp	r3, #100	@ 0x64
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e276      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004552:	4b92      	ldr	r3, [pc, #584]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0x2a8>
 800455e:	e014      	b.n	800458a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fe ff44 	bl	80033ec <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004568:	f7fe ff40 	bl	80033ec <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	@ 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e262      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800457a:	4b88      	ldr	r3, [pc, #544]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x2d0>
 8004586:	e000      	b.n	800458a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d060      	beq.n	8004658 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b04      	cmp	r3, #4
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_OscConfig+0x310>
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b0c      	cmp	r3, #12
 80045a0:	d119      	bne.n	80045d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d116      	bne.n	80045d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045a8:	4b7c      	ldr	r3, [pc, #496]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_OscConfig+0x328>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e23f      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c0:	4b76      	ldr	r3, [pc, #472]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	4973      	ldr	r1, [pc, #460]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045d4:	e040      	b.n	8004658 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d023      	beq.n	8004626 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045de:	4b6f      	ldr	r3, [pc, #444]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6e      	ldr	r2, [pc, #440]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 80045e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fe feff 	bl	80033ec <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f2:	f7fe fefb 	bl	80033ec <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e21d      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004604:	4b65      	ldr	r3, [pc, #404]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004610:	4b62      	ldr	r3, [pc, #392]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	495f      	ldr	r1, [pc, #380]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
 8004624:	e018      	b.n	8004658 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004626:	4b5d      	ldr	r3, [pc, #372]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a5c      	ldr	r2, [pc, #368]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 800462c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004632:	f7fe fedb 	bl	80033ec <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463a:	f7fe fed7 	bl	80033ec <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e1f9      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800464c:	4b53      	ldr	r3, [pc, #332]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f0      	bne.n	800463a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d03c      	beq.n	80046de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01c      	beq.n	80046a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800466c:	4b4b      	ldr	r3, [pc, #300]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 800466e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004672:	4a4a      	ldr	r2, [pc, #296]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fe feb6 	bl	80033ec <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004684:	f7fe feb2 	bl	80033ec <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e1d4      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004696:	4b41      	ldr	r3, [pc, #260]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 8004698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ef      	beq.n	8004684 <HAL_RCC_OscConfig+0x3ec>
 80046a4:	e01b      	b.n	80046de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a6:	4b3d      	ldr	r3, [pc, #244]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 80046a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ac:	4a3b      	ldr	r2, [pc, #236]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fe fe99 	bl	80033ec <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046be:	f7fe fe95 	bl	80033ec <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e1b7      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046d0:	4b32      	ldr	r3, [pc, #200]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 80046d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1ef      	bne.n	80046be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80a6 	beq.w	8004838 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ec:	2300      	movs	r3, #0
 80046ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046f0:	4b2a      	ldr	r3, [pc, #168]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10d      	bne.n	8004718 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046fc:	4b27      	ldr	r3, [pc, #156]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 80046fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004700:	4a26      	ldr	r2, [pc, #152]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 8004702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004706:	6593      	str	r3, [r2, #88]	@ 0x58
 8004708:	4b24      	ldr	r3, [pc, #144]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 800470a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004714:	2301      	movs	r3, #1
 8004716:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004718:	4b21      	ldr	r3, [pc, #132]	@ (80047a0 <HAL_RCC_OscConfig+0x508>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d118      	bne.n	8004756 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004724:	4b1e      	ldr	r3, [pc, #120]	@ (80047a0 <HAL_RCC_OscConfig+0x508>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1d      	ldr	r2, [pc, #116]	@ (80047a0 <HAL_RCC_OscConfig+0x508>)
 800472a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800472e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004730:	f7fe fe5c 	bl	80033ec <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004738:	f7fe fe58 	bl	80033ec <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e17a      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474a:	4b15      	ldr	r3, [pc, #84]	@ (80047a0 <HAL_RCC_OscConfig+0x508>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d108      	bne.n	8004770 <HAL_RCC_OscConfig+0x4d8>
 800475e:	4b0f      	ldr	r3, [pc, #60]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004764:	4a0d      	ldr	r2, [pc, #52]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800476e:	e029      	b.n	80047c4 <HAL_RCC_OscConfig+0x52c>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b05      	cmp	r3, #5
 8004776:	d115      	bne.n	80047a4 <HAL_RCC_OscConfig+0x50c>
 8004778:	4b08      	ldr	r3, [pc, #32]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477e:	4a07      	ldr	r2, [pc, #28]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 8004780:	f043 0304 	orr.w	r3, r3, #4
 8004784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004788:	4b04      	ldr	r3, [pc, #16]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478e:	4a03      	ldr	r2, [pc, #12]	@ (800479c <HAL_RCC_OscConfig+0x504>)
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004798:	e014      	b.n	80047c4 <HAL_RCC_OscConfig+0x52c>
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000
 80047a0:	40007000 	.word	0x40007000
 80047a4:	4b9c      	ldr	r3, [pc, #624]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047aa:	4a9b      	ldr	r2, [pc, #620]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047b4:	4b98      	ldr	r3, [pc, #608]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ba:	4a97      	ldr	r2, [pc, #604]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80047bc:	f023 0304 	bic.w	r3, r3, #4
 80047c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d016      	beq.n	80047fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047cc:	f7fe fe0e 	bl	80033ec <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fe fe0a 	bl	80033ec <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e12a      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ea:	4b8b      	ldr	r3, [pc, #556]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0ed      	beq.n	80047d4 <HAL_RCC_OscConfig+0x53c>
 80047f8:	e015      	b.n	8004826 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fa:	f7fe fdf7 	bl	80033ec <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004800:	e00a      	b.n	8004818 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004802:	f7fe fdf3 	bl	80033ec <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004810:	4293      	cmp	r3, r2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e113      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004818:	4b7f      	ldr	r3, [pc, #508]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1ed      	bne.n	8004802 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004826:	7ffb      	ldrb	r3, [r7, #31]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d105      	bne.n	8004838 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800482c:	4b7a      	ldr	r3, [pc, #488]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004830:	4a79      	ldr	r2, [pc, #484]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 8004832:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004836:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80fe 	beq.w	8004a3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004846:	2b02      	cmp	r3, #2
 8004848:	f040 80d0 	bne.w	80049ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800484c:	4b72      	ldr	r3, [pc, #456]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 0203 	and.w	r2, r3, #3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	429a      	cmp	r2, r3
 800485e:	d130      	bne.n	80048c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486a:	3b01      	subs	r3, #1
 800486c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d127      	bne.n	80048c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d11f      	bne.n	80048c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800488c:	2a07      	cmp	r2, #7
 800488e:	bf14      	ite	ne
 8004890:	2201      	movne	r2, #1
 8004892:	2200      	moveq	r2, #0
 8004894:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004896:	4293      	cmp	r3, r2
 8004898:	d113      	bne.n	80048c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	3b01      	subs	r3, #1
 80048a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d109      	bne.n	80048c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	3b01      	subs	r3, #1
 80048bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d06e      	beq.n	80049a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	2b0c      	cmp	r3, #12
 80048c6:	d069      	beq.n	800499c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048c8:	4b53      	ldr	r3, [pc, #332]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d105      	bne.n	80048e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048d4:	4b50      	ldr	r3, [pc, #320]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0ad      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048e4:	4b4c      	ldr	r3, [pc, #304]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80048ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048f0:	f7fe fd7c 	bl	80033ec <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f8:	f7fe fd78 	bl	80033ec <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e09a      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800490a:	4b43      	ldr	r3, [pc, #268]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004916:	4b40      	ldr	r3, [pc, #256]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	4b40      	ldr	r3, [pc, #256]	@ (8004a1c <HAL_RCC_OscConfig+0x784>)
 800491c:	4013      	ands	r3, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004926:	3a01      	subs	r2, #1
 8004928:	0112      	lsls	r2, r2, #4
 800492a:	4311      	orrs	r1, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004930:	0212      	lsls	r2, r2, #8
 8004932:	4311      	orrs	r1, r2
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004938:	0852      	lsrs	r2, r2, #1
 800493a:	3a01      	subs	r2, #1
 800493c:	0552      	lsls	r2, r2, #21
 800493e:	4311      	orrs	r1, r2
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004944:	0852      	lsrs	r2, r2, #1
 8004946:	3a01      	subs	r2, #1
 8004948:	0652      	lsls	r2, r2, #25
 800494a:	4311      	orrs	r1, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004950:	0912      	lsrs	r2, r2, #4
 8004952:	0452      	lsls	r2, r2, #17
 8004954:	430a      	orrs	r2, r1
 8004956:	4930      	ldr	r1, [pc, #192]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 8004958:	4313      	orrs	r3, r2
 800495a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800495c:	4b2e      	ldr	r3, [pc, #184]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a2d      	ldr	r2, [pc, #180]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 8004962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004966:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004968:	4b2b      	ldr	r3, [pc, #172]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4a2a      	ldr	r2, [pc, #168]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 800496e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004972:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004974:	f7fe fd3a 	bl	80033ec <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497c:	f7fe fd36 	bl	80033ec <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e058      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498e:	4b22      	ldr	r3, [pc, #136]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800499a:	e050      	b.n	8004a3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e04f      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d148      	bne.n	8004a3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a19      	ldr	r2, [pc, #100]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80049b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049b8:	4b17      	ldr	r3, [pc, #92]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4a16      	ldr	r2, [pc, #88]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80049be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049c4:	f7fe fd12 	bl	80033ec <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fe fd0e 	bl	80033ec <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e030      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049de:	4b0e      	ldr	r3, [pc, #56]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0x734>
 80049ea:	e028      	b.n	8004a3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b0c      	cmp	r3, #12
 80049f0:	d023      	beq.n	8004a3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f2:	4b09      	ldr	r3, [pc, #36]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a08      	ldr	r2, [pc, #32]	@ (8004a18 <HAL_RCC_OscConfig+0x780>)
 80049f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fe:	f7fe fcf5 	bl	80033ec <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a04:	e00c      	b.n	8004a20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a06:	f7fe fcf1 	bl	80033ec <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d905      	bls.n	8004a20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e013      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a20:	4b09      	ldr	r3, [pc, #36]	@ (8004a48 <HAL_RCC_OscConfig+0x7b0>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1ec      	bne.n	8004a06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a2c:	4b06      	ldr	r3, [pc, #24]	@ (8004a48 <HAL_RCC_OscConfig+0x7b0>)
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	4905      	ldr	r1, [pc, #20]	@ (8004a48 <HAL_RCC_OscConfig+0x7b0>)
 8004a32:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <HAL_RCC_OscConfig+0x7b4>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	60cb      	str	r3, [r1, #12]
 8004a38:	e001      	b.n	8004a3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	feeefffc 	.word	0xfeeefffc

08004a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0e7      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a64:	4b75      	ldr	r3, [pc, #468]	@ (8004c3c <HAL_RCC_ClockConfig+0x1ec>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d910      	bls.n	8004a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a72:	4b72      	ldr	r3, [pc, #456]	@ (8004c3c <HAL_RCC_ClockConfig+0x1ec>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f023 0207 	bic.w	r2, r3, #7
 8004a7a:	4970      	ldr	r1, [pc, #448]	@ (8004c3c <HAL_RCC_ClockConfig+0x1ec>)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a82:	4b6e      	ldr	r3, [pc, #440]	@ (8004c3c <HAL_RCC_ClockConfig+0x1ec>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0cf      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d010      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	4b66      	ldr	r3, [pc, #408]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d908      	bls.n	8004ac2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab0:	4b63      	ldr	r3, [pc, #396]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	4960      	ldr	r1, [pc, #384]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d04c      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad6:	4b5a      	ldr	r3, [pc, #360]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d121      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e0a6      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aee:	4b54      	ldr	r3, [pc, #336]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d115      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e09a      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b06:	4b4e      	ldr	r3, [pc, #312]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e08e      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b16:	4b4a      	ldr	r3, [pc, #296]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e086      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b26:	4b46      	ldr	r3, [pc, #280]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f023 0203 	bic.w	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4943      	ldr	r1, [pc, #268]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b38:	f7fe fc58 	bl	80033ec <HAL_GetTick>
 8004b3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3e:	e00a      	b.n	8004b56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b40:	f7fe fc54 	bl	80033ec <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e06e      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b56:	4b3a      	ldr	r3, [pc, #232]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 020c 	and.w	r2, r3, #12
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d1eb      	bne.n	8004b40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d010      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	4b31      	ldr	r3, [pc, #196]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d208      	bcs.n	8004b96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b84:	4b2e      	ldr	r3, [pc, #184]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	492b      	ldr	r1, [pc, #172]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b96:	4b29      	ldr	r3, [pc, #164]	@ (8004c3c <HAL_RCC_ClockConfig+0x1ec>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d210      	bcs.n	8004bc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba4:	4b25      	ldr	r3, [pc, #148]	@ (8004c3c <HAL_RCC_ClockConfig+0x1ec>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f023 0207 	bic.w	r2, r3, #7
 8004bac:	4923      	ldr	r1, [pc, #140]	@ (8004c3c <HAL_RCC_ClockConfig+0x1ec>)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb4:	4b21      	ldr	r3, [pc, #132]	@ (8004c3c <HAL_RCC_ClockConfig+0x1ec>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e036      	b.n	8004c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	4918      	ldr	r1, [pc, #96]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d009      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bf0:	4b13      	ldr	r3, [pc, #76]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4910      	ldr	r1, [pc, #64]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c04:	f000 f824 	bl	8004c50 <HAL_RCC_GetSysClockFreq>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c40 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	490b      	ldr	r1, [pc, #44]	@ (8004c44 <HAL_RCC_ClockConfig+0x1f4>)
 8004c16:	5ccb      	ldrb	r3, [r1, r3]
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c20:	4a09      	ldr	r2, [pc, #36]	@ (8004c48 <HAL_RCC_ClockConfig+0x1f8>)
 8004c22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c24:	4b09      	ldr	r3, [pc, #36]	@ (8004c4c <HAL_RCC_ClockConfig+0x1fc>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fe fb8f 	bl	800334c <HAL_InitTick>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c32:	7afb      	ldrb	r3, [r7, #11]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40022000 	.word	0x40022000
 8004c40:	40021000 	.word	0x40021000
 8004c44:	0800858c 	.word	0x0800858c
 8004c48:	2000001c 	.word	0x2000001c
 8004c4c:	20000020 	.word	0x20000020

08004c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b089      	sub	sp, #36	@ 0x24
 8004c54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 030c 	and.w	r3, r3, #12
 8004c66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c68:	4b3b      	ldr	r3, [pc, #236]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_GetSysClockFreq+0x34>
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	2b0c      	cmp	r3, #12
 8004c7c:	d121      	bne.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d11e      	bne.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c84:	4b34      	ldr	r3, [pc, #208]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d107      	bne.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c90:	4b31      	ldr	r3, [pc, #196]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c96:	0a1b      	lsrs	r3, r3, #8
 8004c98:	f003 030f 	and.w	r3, r3, #15
 8004c9c:	61fb      	str	r3, [r7, #28]
 8004c9e:	e005      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	091b      	lsrs	r3, r3, #4
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cac:	4a2b      	ldr	r2, [pc, #172]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10d      	bne.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d102      	bne.n	8004cce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cc8:	4b25      	ldr	r3, [pc, #148]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cca:	61bb      	str	r3, [r7, #24]
 8004ccc:	e004      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d101      	bne.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cd4:	4b23      	ldr	r3, [pc, #140]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d134      	bne.n	8004d48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cde:	4b1e      	ldr	r3, [pc, #120]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d003      	beq.n	8004cf6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d003      	beq.n	8004cfc <HAL_RCC_GetSysClockFreq+0xac>
 8004cf4:	e005      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cf8:	617b      	str	r3, [r7, #20]
      break;
 8004cfa:	e005      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004cfc:	4b19      	ldr	r3, [pc, #100]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cfe:	617b      	str	r3, [r7, #20]
      break;
 8004d00:	e002      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	617b      	str	r3, [r7, #20]
      break;
 8004d06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d08:	4b13      	ldr	r3, [pc, #76]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	3301      	adds	r3, #1
 8004d14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d16:	4b10      	ldr	r3, [pc, #64]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	0a1b      	lsrs	r3, r3, #8
 8004d1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	fb03 f202 	mul.w	r2, r3, r2
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	0e5b      	lsrs	r3, r3, #25
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	3301      	adds	r3, #1
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d48:	69bb      	ldr	r3, [r7, #24]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3724      	adds	r7, #36	@ 0x24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	080085a4 	.word	0x080085a4
 8004d60:	00f42400 	.word	0x00f42400
 8004d64:	007a1200 	.word	0x007a1200

08004d68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d6c:	4b03      	ldr	r3, [pc, #12]	@ (8004d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	2000001c 	.word	0x2000001c

08004d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d84:	f7ff fff0 	bl	8004d68 <HAL_RCC_GetHCLKFreq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	4b06      	ldr	r3, [pc, #24]	@ (8004da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	0a1b      	lsrs	r3, r3, #8
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	4904      	ldr	r1, [pc, #16]	@ (8004da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d96:	5ccb      	ldrb	r3, [r1, r3]
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40021000 	.word	0x40021000
 8004da8:	0800859c 	.word	0x0800859c

08004dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004db0:	f7ff ffda 	bl	8004d68 <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	0adb      	lsrs	r3, r3, #11
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4904      	ldr	r1, [pc, #16]	@ (8004dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	0800859c 	.word	0x0800859c

08004dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004de0:	2300      	movs	r3, #0
 8004de2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004de4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004df0:	f7ff f9c2 	bl	8004178 <HAL_PWREx_GetVoltageRange>
 8004df4:	6178      	str	r0, [r7, #20]
 8004df6:	e014      	b.n	8004e22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004df8:	4b25      	ldr	r3, [pc, #148]	@ (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfc:	4a24      	ldr	r2, [pc, #144]	@ (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e04:	4b22      	ldr	r3, [pc, #136]	@ (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e10:	f7ff f9b2 	bl	8004178 <HAL_PWREx_GetVoltageRange>
 8004e14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e16:	4b1e      	ldr	r3, [pc, #120]	@ (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e28:	d10b      	bne.n	8004e42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b80      	cmp	r3, #128	@ 0x80
 8004e2e:	d919      	bls.n	8004e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2ba0      	cmp	r3, #160	@ 0xa0
 8004e34:	d902      	bls.n	8004e3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e36:	2302      	movs	r3, #2
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	e013      	b.n	8004e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	e010      	b.n	8004e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b80      	cmp	r3, #128	@ 0x80
 8004e46:	d902      	bls.n	8004e4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e48:	2303      	movs	r3, #3
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	e00a      	b.n	8004e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b80      	cmp	r3, #128	@ 0x80
 8004e52:	d102      	bne.n	8004e5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e54:	2302      	movs	r3, #2
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	e004      	b.n	8004e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b70      	cmp	r3, #112	@ 0x70
 8004e5e:	d101      	bne.n	8004e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e60:	2301      	movs	r3, #1
 8004e62:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e64:	4b0b      	ldr	r3, [pc, #44]	@ (8004e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f023 0207 	bic.w	r2, r3, #7
 8004e6c:	4909      	ldr	r1, [pc, #36]	@ (8004e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e74:	4b07      	ldr	r3, [pc, #28]	@ (8004e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d001      	beq.n	8004e86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40021000 	.word	0x40021000
 8004e94:	40022000 	.word	0x40022000

08004e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d041      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ebc:	d02a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ebe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ec2:	d824      	bhi.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ec4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ec8:	d008      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004eca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ece:	d81e      	bhi.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ed4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ed8:	d010      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004eda:	e018      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004edc:	4b86      	ldr	r3, [pc, #536]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a85      	ldr	r2, [pc, #532]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ee8:	e015      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3304      	adds	r3, #4
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fabb 	bl	800546c <RCCEx_PLLSAI1_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004efa:	e00c      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3320      	adds	r3, #32
 8004f00:	2100      	movs	r1, #0
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fba6 	bl	8005654 <RCCEx_PLLSAI2_Config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f0c:	e003      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	74fb      	strb	r3, [r7, #19]
      break;
 8004f12:	e000      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f16:	7cfb      	ldrb	r3, [r7, #19]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10b      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f1c:	4b76      	ldr	r3, [pc, #472]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f2a:	4973      	ldr	r1, [pc, #460]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f32:	e001      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f34:	7cfb      	ldrb	r3, [r7, #19]
 8004f36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d041      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f4c:	d02a      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f52:	d824      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f58:	d008      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f5e:	d81e      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f68:	d010      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f6a:	e018      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f6c:	4b62      	ldr	r3, [pc, #392]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4a61      	ldr	r2, [pc, #388]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f78:	e015      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fa73 	bl	800546c <RCCEx_PLLSAI1_Config>
 8004f86:	4603      	mov	r3, r0
 8004f88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f8a:	e00c      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3320      	adds	r3, #32
 8004f90:	2100      	movs	r1, #0
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fb5e 	bl	8005654 <RCCEx_PLLSAI2_Config>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f9c:	e003      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	74fb      	strb	r3, [r7, #19]
      break;
 8004fa2:	e000      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa6:	7cfb      	ldrb	r3, [r7, #19]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fac:	4b52      	ldr	r3, [pc, #328]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fba:	494f      	ldr	r1, [pc, #316]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004fc2:	e001      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc4:	7cfb      	ldrb	r3, [r7, #19]
 8004fc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 80a0 	beq.w	8005116 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fda:	4b47      	ldr	r3, [pc, #284]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e000      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fea:	2300      	movs	r3, #0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00d      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff0:	4b41      	ldr	r3, [pc, #260]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff4:	4a40      	ldr	r2, [pc, #256]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005008:	2301      	movs	r3, #1
 800500a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800500c:	4b3b      	ldr	r3, [pc, #236]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a3a      	ldr	r2, [pc, #232]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005016:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005018:	f7fe f9e8 	bl	80033ec <HAL_GetTick>
 800501c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800501e:	e009      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005020:	f7fe f9e4 	bl	80033ec <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d902      	bls.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	74fb      	strb	r3, [r7, #19]
        break;
 8005032:	e005      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005034:	4b31      	ldr	r3, [pc, #196]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ef      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005040:	7cfb      	ldrb	r3, [r7, #19]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d15c      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005046:	4b2c      	ldr	r3, [pc, #176]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005050:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01f      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	429a      	cmp	r2, r3
 8005062:	d019      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005064:	4b24      	ldr	r3, [pc, #144]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800506e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005070:	4b21      	ldr	r3, [pc, #132]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005076:	4a20      	ldr	r2, [pc, #128]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800507c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005080:	4b1d      	ldr	r3, [pc, #116]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005086:	4a1c      	ldr	r2, [pc, #112]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005088:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800508c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005090:	4a19      	ldr	r2, [pc, #100]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d016      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a2:	f7fe f9a3 	bl	80033ec <HAL_GetTick>
 80050a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a8:	e00b      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050aa:	f7fe f99f 	bl	80033ec <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d902      	bls.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	74fb      	strb	r3, [r7, #19]
            break;
 80050c0:	e006      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c2:	4b0d      	ldr	r3, [pc, #52]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ec      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050d0:	7cfb      	ldrb	r3, [r7, #19]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10c      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050d6:	4b08      	ldr	r3, [pc, #32]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e6:	4904      	ldr	r1, [pc, #16]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050ee:	e009      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050f0:	7cfb      	ldrb	r3, [r7, #19]
 80050f2:	74bb      	strb	r3, [r7, #18]
 80050f4:	e006      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050f6:	bf00      	nop
 80050f8:	40021000 	.word	0x40021000
 80050fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005100:	7cfb      	ldrb	r3, [r7, #19]
 8005102:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005104:	7c7b      	ldrb	r3, [r7, #17]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d105      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800510a:	4b9e      	ldr	r3, [pc, #632]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510e:	4a9d      	ldr	r2, [pc, #628]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005110:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005114:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005122:	4b98      	ldr	r3, [pc, #608]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005128:	f023 0203 	bic.w	r2, r3, #3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005130:	4994      	ldr	r1, [pc, #592]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005144:	4b8f      	ldr	r3, [pc, #572]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800514a:	f023 020c 	bic.w	r2, r3, #12
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005152:	498c      	ldr	r1, [pc, #560]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005166:	4b87      	ldr	r3, [pc, #540]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	4983      	ldr	r1, [pc, #524]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005188:	4b7e      	ldr	r3, [pc, #504]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005196:	497b      	ldr	r1, [pc, #492]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051aa:	4b76      	ldr	r3, [pc, #472]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051b8:	4972      	ldr	r1, [pc, #456]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051cc:	4b6d      	ldr	r3, [pc, #436]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051da:	496a      	ldr	r1, [pc, #424]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ee:	4b65      	ldr	r3, [pc, #404]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fc:	4961      	ldr	r1, [pc, #388]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005210:	4b5c      	ldr	r3, [pc, #368]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005216:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800521e:	4959      	ldr	r1, [pc, #356]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005232:	4b54      	ldr	r3, [pc, #336]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005238:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005240:	4950      	ldr	r1, [pc, #320]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005254:	4b4b      	ldr	r3, [pc, #300]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005262:	4948      	ldr	r1, [pc, #288]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005276:	4b43      	ldr	r3, [pc, #268]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800527c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005284:	493f      	ldr	r1, [pc, #252]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d028      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005298:	4b3a      	ldr	r3, [pc, #232]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052a6:	4937      	ldr	r1, [pc, #220]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052b6:	d106      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052b8:	4b32      	ldr	r3, [pc, #200]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4a31      	ldr	r2, [pc, #196]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052c2:	60d3      	str	r3, [r2, #12]
 80052c4:	e011      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052ce:	d10c      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3304      	adds	r3, #4
 80052d4:	2101      	movs	r1, #1
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f8c8 	bl	800546c <RCCEx_PLLSAI1_Config>
 80052dc:	4603      	mov	r3, r0
 80052de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052e0:	7cfb      	ldrb	r3, [r7, #19]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052e6:	7cfb      	ldrb	r3, [r7, #19]
 80052e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d028      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052f6:	4b23      	ldr	r3, [pc, #140]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005304:	491f      	ldr	r1, [pc, #124]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005310:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005314:	d106      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005316:	4b1b      	ldr	r3, [pc, #108]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	4a1a      	ldr	r2, [pc, #104]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005320:	60d3      	str	r3, [r2, #12]
 8005322:	e011      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005328:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800532c:	d10c      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3304      	adds	r3, #4
 8005332:	2101      	movs	r1, #1
 8005334:	4618      	mov	r0, r3
 8005336:	f000 f899 	bl	800546c <RCCEx_PLLSAI1_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800533e:	7cfb      	ldrb	r3, [r7, #19]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005344:	7cfb      	ldrb	r3, [r7, #19]
 8005346:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d02b      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005354:	4b0b      	ldr	r3, [pc, #44]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005362:	4908      	ldr	r1, [pc, #32]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800536e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005372:	d109      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005374:	4b03      	ldr	r3, [pc, #12]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4a02      	ldr	r2, [pc, #8]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800537e:	60d3      	str	r3, [r2, #12]
 8005380:	e014      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005382:	bf00      	nop
 8005384:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800538c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005390:	d10c      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3304      	adds	r3, #4
 8005396:	2101      	movs	r1, #1
 8005398:	4618      	mov	r0, r3
 800539a:	f000 f867 	bl	800546c <RCCEx_PLLSAI1_Config>
 800539e:	4603      	mov	r3, r0
 80053a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053a2:	7cfb      	ldrb	r3, [r7, #19]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80053a8:	7cfb      	ldrb	r3, [r7, #19]
 80053aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d02f      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053c6:	4928      	ldr	r1, [pc, #160]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053d6:	d10d      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3304      	adds	r3, #4
 80053dc:	2102      	movs	r1, #2
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f844 	bl	800546c <RCCEx_PLLSAI1_Config>
 80053e4:	4603      	mov	r3, r0
 80053e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053e8:	7cfb      	ldrb	r3, [r7, #19]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d014      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053ee:	7cfb      	ldrb	r3, [r7, #19]
 80053f0:	74bb      	strb	r3, [r7, #18]
 80053f2:	e011      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053fc:	d10c      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3320      	adds	r3, #32
 8005402:	2102      	movs	r1, #2
 8005404:	4618      	mov	r0, r3
 8005406:	f000 f925 	bl	8005654 <RCCEx_PLLSAI2_Config>
 800540a:	4603      	mov	r3, r0
 800540c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800540e:	7cfb      	ldrb	r3, [r7, #19]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005414:	7cfb      	ldrb	r3, [r7, #19]
 8005416:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005424:	4b10      	ldr	r3, [pc, #64]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005432:	490d      	ldr	r1, [pc, #52]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005434:	4313      	orrs	r3, r2
 8005436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005446:	4b08      	ldr	r3, [pc, #32]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800544c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005456:	4904      	ldr	r1, [pc, #16]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800545e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40021000 	.word	0x40021000

0800546c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800547a:	4b75      	ldr	r3, [pc, #468]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d018      	beq.n	80054b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005486:	4b72      	ldr	r3, [pc, #456]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f003 0203 	and.w	r2, r3, #3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d10d      	bne.n	80054b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
       ||
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800549e:	4b6c      	ldr	r3, [pc, #432]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
       ||
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d047      	beq.n	8005542 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	73fb      	strb	r3, [r7, #15]
 80054b6:	e044      	b.n	8005542 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d018      	beq.n	80054f2 <RCCEx_PLLSAI1_Config+0x86>
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d825      	bhi.n	8005510 <RCCEx_PLLSAI1_Config+0xa4>
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d002      	beq.n	80054ce <RCCEx_PLLSAI1_Config+0x62>
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d009      	beq.n	80054e0 <RCCEx_PLLSAI1_Config+0x74>
 80054cc:	e020      	b.n	8005510 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ce:	4b60      	ldr	r3, [pc, #384]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d11d      	bne.n	8005516 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054de:	e01a      	b.n	8005516 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054e0:	4b5b      	ldr	r3, [pc, #364]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d116      	bne.n	800551a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054f0:	e013      	b.n	800551a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054f2:	4b57      	ldr	r3, [pc, #348]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10f      	bne.n	800551e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054fe:	4b54      	ldr	r3, [pc, #336]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800550e:	e006      	b.n	800551e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	73fb      	strb	r3, [r7, #15]
      break;
 8005514:	e004      	b.n	8005520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005516:	bf00      	nop
 8005518:	e002      	b.n	8005520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800551a:	bf00      	nop
 800551c:	e000      	b.n	8005520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800551e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10d      	bne.n	8005542 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005526:	4b4a      	ldr	r3, [pc, #296]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6819      	ldr	r1, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	3b01      	subs	r3, #1
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	430b      	orrs	r3, r1
 800553c:	4944      	ldr	r1, [pc, #272]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800553e:	4313      	orrs	r3, r2
 8005540:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d17d      	bne.n	8005644 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005548:	4b41      	ldr	r3, [pc, #260]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a40      	ldr	r2, [pc, #256]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800554e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005554:	f7fd ff4a 	bl	80033ec <HAL_GetTick>
 8005558:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800555a:	e009      	b.n	8005570 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800555c:	f7fd ff46 	bl	80033ec <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d902      	bls.n	8005570 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	73fb      	strb	r3, [r7, #15]
        break;
 800556e:	e005      	b.n	800557c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005570:	4b37      	ldr	r3, [pc, #220]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1ef      	bne.n	800555c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d160      	bne.n	8005644 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d111      	bne.n	80055ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005588:	4b31      	ldr	r3, [pc, #196]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6892      	ldr	r2, [r2, #8]
 8005598:	0211      	lsls	r1, r2, #8
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68d2      	ldr	r2, [r2, #12]
 800559e:	0912      	lsrs	r2, r2, #4
 80055a0:	0452      	lsls	r2, r2, #17
 80055a2:	430a      	orrs	r2, r1
 80055a4:	492a      	ldr	r1, [pc, #168]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	610b      	str	r3, [r1, #16]
 80055aa:	e027      	b.n	80055fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d112      	bne.n	80055d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055b2:	4b27      	ldr	r3, [pc, #156]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80055ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6892      	ldr	r2, [r2, #8]
 80055c2:	0211      	lsls	r1, r2, #8
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6912      	ldr	r2, [r2, #16]
 80055c8:	0852      	lsrs	r2, r2, #1
 80055ca:	3a01      	subs	r2, #1
 80055cc:	0552      	lsls	r2, r2, #21
 80055ce:	430a      	orrs	r2, r1
 80055d0:	491f      	ldr	r1, [pc, #124]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	610b      	str	r3, [r1, #16]
 80055d6:	e011      	b.n	80055fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80055e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6892      	ldr	r2, [r2, #8]
 80055e8:	0211      	lsls	r1, r2, #8
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6952      	ldr	r2, [r2, #20]
 80055ee:	0852      	lsrs	r2, r2, #1
 80055f0:	3a01      	subs	r2, #1
 80055f2:	0652      	lsls	r2, r2, #25
 80055f4:	430a      	orrs	r2, r1
 80055f6:	4916      	ldr	r1, [pc, #88]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055fc:	4b14      	ldr	r3, [pc, #80]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a13      	ldr	r2, [pc, #76]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005602:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005606:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005608:	f7fd fef0 	bl	80033ec <HAL_GetTick>
 800560c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800560e:	e009      	b.n	8005624 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005610:	f7fd feec 	bl	80033ec <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d902      	bls.n	8005624 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	73fb      	strb	r3, [r7, #15]
          break;
 8005622:	e005      	b.n	8005630 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005624:	4b0a      	ldr	r3, [pc, #40]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0ef      	beq.n	8005610 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005636:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	4904      	ldr	r1, [pc, #16]	@ (8005650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005640:	4313      	orrs	r3, r2
 8005642:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005644:	7bfb      	ldrb	r3, [r7, #15]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	40021000 	.word	0x40021000

08005654 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005662:	4b6a      	ldr	r3, [pc, #424]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d018      	beq.n	80056a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800566e:	4b67      	ldr	r3, [pc, #412]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f003 0203 	and.w	r2, r3, #3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d10d      	bne.n	800569a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
       ||
 8005682:	2b00      	cmp	r3, #0
 8005684:	d009      	beq.n	800569a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005686:	4b61      	ldr	r3, [pc, #388]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	091b      	lsrs	r3, r3, #4
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
       ||
 8005696:	429a      	cmp	r2, r3
 8005698:	d047      	beq.n	800572a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	73fb      	strb	r3, [r7, #15]
 800569e:	e044      	b.n	800572a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d018      	beq.n	80056da <RCCEx_PLLSAI2_Config+0x86>
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d825      	bhi.n	80056f8 <RCCEx_PLLSAI2_Config+0xa4>
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d002      	beq.n	80056b6 <RCCEx_PLLSAI2_Config+0x62>
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d009      	beq.n	80056c8 <RCCEx_PLLSAI2_Config+0x74>
 80056b4:	e020      	b.n	80056f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056b6:	4b55      	ldr	r3, [pc, #340]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d11d      	bne.n	80056fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c6:	e01a      	b.n	80056fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056c8:	4b50      	ldr	r3, [pc, #320]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d116      	bne.n	8005702 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056d8:	e013      	b.n	8005702 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056da:	4b4c      	ldr	r3, [pc, #304]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10f      	bne.n	8005706 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056e6:	4b49      	ldr	r3, [pc, #292]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056f6:	e006      	b.n	8005706 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      break;
 80056fc:	e004      	b.n	8005708 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056fe:	bf00      	nop
 8005700:	e002      	b.n	8005708 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005706:	bf00      	nop
    }

    if(status == HAL_OK)
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10d      	bne.n	800572a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800570e:	4b3f      	ldr	r3, [pc, #252]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6819      	ldr	r1, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	3b01      	subs	r3, #1
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	430b      	orrs	r3, r1
 8005724:	4939      	ldr	r1, [pc, #228]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005726:	4313      	orrs	r3, r2
 8005728:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d167      	bne.n	8005800 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005730:	4b36      	ldr	r3, [pc, #216]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a35      	ldr	r2, [pc, #212]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800573a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800573c:	f7fd fe56 	bl	80033ec <HAL_GetTick>
 8005740:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005742:	e009      	b.n	8005758 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005744:	f7fd fe52 	bl	80033ec <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d902      	bls.n	8005758 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	73fb      	strb	r3, [r7, #15]
        break;
 8005756:	e005      	b.n	8005764 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005758:	4b2c      	ldr	r3, [pc, #176]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1ef      	bne.n	8005744 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d14a      	bne.n	8005800 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d111      	bne.n	8005794 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005770:	4b26      	ldr	r3, [pc, #152]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6892      	ldr	r2, [r2, #8]
 8005780:	0211      	lsls	r1, r2, #8
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68d2      	ldr	r2, [r2, #12]
 8005786:	0912      	lsrs	r2, r2, #4
 8005788:	0452      	lsls	r2, r2, #17
 800578a:	430a      	orrs	r2, r1
 800578c:	491f      	ldr	r1, [pc, #124]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 800578e:	4313      	orrs	r3, r2
 8005790:	614b      	str	r3, [r1, #20]
 8005792:	e011      	b.n	80057b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005794:	4b1d      	ldr	r3, [pc, #116]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800579c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6892      	ldr	r2, [r2, #8]
 80057a4:	0211      	lsls	r1, r2, #8
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6912      	ldr	r2, [r2, #16]
 80057aa:	0852      	lsrs	r2, r2, #1
 80057ac:	3a01      	subs	r2, #1
 80057ae:	0652      	lsls	r2, r2, #25
 80057b0:	430a      	orrs	r2, r1
 80057b2:	4916      	ldr	r1, [pc, #88]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057b8:	4b14      	ldr	r3, [pc, #80]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a13      	ldr	r2, [pc, #76]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c4:	f7fd fe12 	bl	80033ec <HAL_GetTick>
 80057c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057ca:	e009      	b.n	80057e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057cc:	f7fd fe0e 	bl	80033ec <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d902      	bls.n	80057e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	73fb      	strb	r3, [r7, #15]
          break;
 80057de:	e005      	b.n	80057ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057e0:	4b0a      	ldr	r3, [pc, #40]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0ef      	beq.n	80057cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057f2:	4b06      	ldr	r3, [pc, #24]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f4:	695a      	ldr	r2, [r3, #20]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	4904      	ldr	r1, [pc, #16]	@ (800580c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40021000 	.word	0x40021000

08005810 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e049      	b.n	80058b6 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	795b      	ldrb	r3, [r3, #5]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d105      	bne.n	8005838 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fd fb28 	bl	8002e88 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f042 0204 	orr.w	r2, r2, #4
 800584c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005858:	2b40      	cmp	r3, #64	@ 0x40
 800585a:	d104      	bne.n	8005866 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2204      	movs	r2, #4
 8005860:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e027      	b.n	80058b6 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005866:	f7fd fdc1 	bl	80033ec <HAL_GetTick>
 800586a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800586c:	e015      	b.n	800589a <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800586e:	f7fd fdbd 	bl	80033ec <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d90e      	bls.n	800589a <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b01      	cmp	r3, #1
 8005888:	d007      	beq.n	800589a <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2204      	movs	r2, #4
 800588e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e00d      	b.n	80058b6 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d1e2      	bne.n	800586e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d079      	beq.n	80059c4 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d106      	bne.n	80058ea <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7fd fb05 	bl	8002ef4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2202      	movs	r2, #2
 80058ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d058      	beq.n	80059b2 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	22ca      	movs	r2, #202	@ 0xca
 8005906:	625a      	str	r2, [r3, #36]	@ 0x24
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2253      	movs	r2, #83	@ 0x53
 800590e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fa4d 	bl	8005db0 <RTC_EnterInitMode>
 8005916:	4603      	mov	r3, r0
 8005918:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d127      	bne.n	8005970 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6812      	ldr	r2, [r2, #0]
 800592a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800592e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005932:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6899      	ldr	r1, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	68d2      	ldr	r2, [r2, #12]
 800595a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6919      	ldr	r1, [r3, #16]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	041a      	lsls	r2, r3, #16
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fa51 	bl	8005e18 <RTC_ExitInitMode>
 8005976:	4603      	mov	r3, r0
 8005978:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d113      	bne.n	80059a8 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0203 	bic.w	r2, r2, #3
 800598e:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69da      	ldr	r2, [r3, #28]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	22ff      	movs	r2, #255	@ 0xff
 80059ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80059b0:	e001      	b.n	80059b6 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d103      	bne.n	80059c4 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059ce:	b590      	push	{r4, r7, lr}
 80059d0:	b087      	sub	sp, #28
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_RTC_SetTime+0x1a>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e08b      	b.n	8005b00 <HAL_RTC_SetTime+0x132>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	22ca      	movs	r2, #202	@ 0xca
 80059fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2253      	movs	r2, #83	@ 0x53
 8005a06:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f9d1 	bl	8005db0 <RTC_EnterInitMode>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005a12:	7cfb      	ldrb	r3, [r7, #19]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d163      	bne.n	8005ae0 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d126      	bne.n	8005a6c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fa2c 	bl	8005e94 <RTC_ByteToBcd2>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	785b      	ldrb	r3, [r3, #1]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fa25 	bl	8005e94 <RTC_ByteToBcd2>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a4e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	789b      	ldrb	r3, [r3, #2]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fa1d 	bl	8005e94 <RTC_ByteToBcd2>
 8005a5a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a5c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	78db      	ldrb	r3, [r3, #3]
 8005a64:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	e018      	b.n	8005a9e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d102      	bne.n	8005a80 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	785b      	ldrb	r3, [r3, #1]
 8005a8a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a8c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a92:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	78db      	ldrb	r3, [r3, #3]
 8005a98:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005aa8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005aac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005abc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6899      	ldr	r1, [r3, #8]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	431a      	orrs	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f99e 	bl	8005e18 <RTC_ExitInitMode>
 8005adc:	4603      	mov	r3, r0
 8005ade:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	22ff      	movs	r2, #255	@ 0xff
 8005ae6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005ae8:	7cfb      	ldrb	r3, [r7, #19]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d103      	bne.n	8005af6 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005afe:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd90      	pop	{r4, r7, pc}

08005b08 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005b36:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	0c1b      	lsrs	r3, r3, #16
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	0d9b      	lsrs	r3, r3, #22
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d11a      	bne.n	8005bb6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 f9a5 	bl	8005ed4 <RTC_Bcd2ToByte>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 f99c 	bl	8005ed4 <RTC_Bcd2ToByte>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	789b      	ldrb	r3, [r3, #2]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 f993 	bl	8005ed4 <RTC_Bcd2ToByte>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005bc0:	b590      	push	{r4, r7, lr}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_RTC_SetDate+0x1a>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e075      	b.n	8005cc6 <HAL_RTC_SetDate+0x106>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2202      	movs	r2, #2
 8005be6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10e      	bne.n	8005c0e <HAL_RTC_SetDate+0x4e>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	f023 0310 	bic.w	r3, r3, #16
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	330a      	adds	r3, #10
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d11c      	bne.n	8005c4e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	78db      	ldrb	r3, [r3, #3]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 f93b 	bl	8005e94 <RTC_ByteToBcd2>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 f934 	bl	8005e94 <RTC_ByteToBcd2>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005c30:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	789b      	ldrb	r3, [r3, #2]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 f92c 	bl	8005e94 <RTC_ByteToBcd2>
 8005c3c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c3e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	e00e      	b.n	8005c6c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	78db      	ldrb	r3, [r3, #3]
 8005c52:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	785b      	ldrb	r3, [r3, #1]
 8005c58:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005c5a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005c60:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	22ca      	movs	r2, #202	@ 0xca
 8005c72:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2253      	movs	r2, #83	@ 0x53
 8005c7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f897 	bl	8005db0 <RTC_EnterInitMode>
 8005c82:	4603      	mov	r3, r0
 8005c84:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005c86:	7cfb      	ldrb	r3, [r7, #19]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10c      	bne.n	8005ca6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005c96:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c9a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f8bb 	bl	8005e18 <RTC_ExitInitMode>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	22ff      	movs	r2, #255	@ 0xff
 8005cac:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005cae:	7cfb      	ldrb	r3, [r7, #19]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d103      	bne.n	8005cbc <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005cc4:	7cfb      	ldrb	r3, [r7, #19]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd90      	pop	{r4, r7, pc}

08005cce <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b086      	sub	sp, #24
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005ce4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ce8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	0c1b      	lsrs	r3, r3, #16
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	0a1b      	lsrs	r3, r3, #8
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	0b5b      	lsrs	r3, r3, #13
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d11a      	bne.n	8005d5e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	78db      	ldrb	r3, [r3, #3]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 f8d1 	bl	8005ed4 <RTC_Bcd2ToByte>
 8005d32:	4603      	mov	r3, r0
 8005d34:	461a      	mov	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 f8c8 	bl	8005ed4 <RTC_Bcd2ToByte>
 8005d44:	4603      	mov	r3, r0
 8005d46:	461a      	mov	r2, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	789b      	ldrb	r3, [r3, #2]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 f8bf 	bl	8005ed4 <RTC_Bcd2ToByte>
 8005d56:	4603      	mov	r3, r0
 8005d58:	461a      	mov	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a0d      	ldr	r2, [pc, #52]	@ (8005dac <HAL_RTC_WaitForSynchro+0x44>)
 8005d76:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005d78:	f7fd fb38 	bl	80033ec <HAL_GetTick>
 8005d7c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d7e:	e009      	b.n	8005d94 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d80:	f7fd fb34 	bl	80033ec <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d8e:	d901      	bls.n	8005d94 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e007      	b.n	8005da4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0ee      	beq.n	8005d80 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	0003ff5f 	.word	0x0003ff5f

08005db0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d120      	bne.n	8005e0c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dd2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005dd4:	f7fd fb0a 	bl	80033ec <HAL_GetTick>
 8005dd8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005dda:	e00d      	b.n	8005df8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005ddc:	f7fd fb06 	bl	80033ec <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005dea:	d905      	bls.n	8005df8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2203      	movs	r2, #3
 8005df4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d102      	bne.n	8005e0c <RTC_EnterInitMode+0x5c>
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d1e7      	bne.n	8005ddc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e20:	2300      	movs	r3, #0
 8005e22:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005e24:	4b1a      	ldr	r3, [pc, #104]	@ (8005e90 <RTC_ExitInitMode+0x78>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4a19      	ldr	r2, [pc, #100]	@ (8005e90 <RTC_ExitInitMode+0x78>)
 8005e2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e2e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005e30:	4b17      	ldr	r3, [pc, #92]	@ (8005e90 <RTC_ExitInitMode+0x78>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10c      	bne.n	8005e56 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff ff93 	bl	8005d68 <HAL_RTC_WaitForSynchro>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01e      	beq.n	8005e86 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	73fb      	strb	r3, [r7, #15]
 8005e54:	e017      	b.n	8005e86 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005e56:	4b0e      	ldr	r3, [pc, #56]	@ (8005e90 <RTC_ExitInitMode+0x78>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8005e90 <RTC_ExitInitMode+0x78>)
 8005e5c:	f023 0320 	bic.w	r3, r3, #32
 8005e60:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff ff80 	bl	8005d68 <HAL_RTC_WaitForSynchro>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2203      	movs	r2, #3
 8005e72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005e7a:	4b05      	ldr	r3, [pc, #20]	@ (8005e90 <RTC_ExitInitMode+0x78>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	4a04      	ldr	r2, [pc, #16]	@ (8005e90 <RTC_ExitInitMode+0x78>)
 8005e80:	f043 0320 	orr.w	r3, r3, #32
 8005e84:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40002800 	.word	0x40002800

08005e94 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005ea6:	e005      	b.n	8005eb4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005eae:	7afb      	ldrb	r3, [r7, #11]
 8005eb0:	3b0a      	subs	r3, #10
 8005eb2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005eb4:	7afb      	ldrb	r3, [r7, #11]
 8005eb6:	2b09      	cmp	r3, #9
 8005eb8:	d8f6      	bhi.n	8005ea8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	7afb      	ldrb	r3, [r7, #11]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	b2db      	uxtb	r3, r3
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	091b      	lsrs	r3, r3, #4
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	0092      	lsls	r2, r2, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	4413      	add	r3, r2
 8005efa:	b2db      	uxtb	r3, r3
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e07f      	b.n	8006022 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	22ca      	movs	r2, #202	@ 0xca
 8005f38:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2253      	movs	r2, #83	@ 0x53
 8005f40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f50:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005f62:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d120      	bne.n	8005fb4 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8005f72:	f7fd fa3b 	bl	80033ec <HAL_GetTick>
 8005f76:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005f78:	e015      	b.n	8005fa6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f7a:	f7fd fa37 	bl	80033ec <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f88:	d90d      	bls.n	8005fa6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	22ff      	movs	r2, #255	@ 0xff
 8005f90:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2203      	movs	r2, #3
 8005f96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e03d      	b.n	8006022 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0e2      	beq.n	8005f7a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f023 0107 	bic.w	r1, r3, #7
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005fd0:	4b16      	ldr	r3, [pc, #88]	@ (800602c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a15      	ldr	r2, [pc, #84]	@ (800602c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005fd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fda:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005fdc:	4b13      	ldr	r3, [pc, #76]	@ (800602c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	4a12      	ldr	r2, [pc, #72]	@ (800602c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fe6:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ff6:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006006:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	22ff      	movs	r2, #255	@ 0xff
 800600e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	40010400 	.word	0x40010400

08006030 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d101      	bne.n	8006046 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8006042:	2302      	movs	r3, #2
 8006044:	e04d      	b.n	80060e2 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2202      	movs	r2, #2
 8006052:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	22ca      	movs	r2, #202	@ 0xca
 800605c:	625a      	str	r2, [r3, #36]	@ 0x24
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2253      	movs	r2, #83	@ 0x53
 8006064:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006074:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006084:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8006086:	f7fd f9b1 	bl	80033ec <HAL_GetTick>
 800608a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800608c:	e015      	b.n	80060ba <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800608e:	f7fd f9ad 	bl	80033ec <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800609c:	d90d      	bls.n	80060ba <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	22ff      	movs	r2, #255	@ 0xff
 80060a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2203      	movs	r2, #3
 80060aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e013      	b.n	80060e2 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0e2      	beq.n	800608e <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	22ff      	movs	r2, #255	@ 0xff
 80060ce:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80060f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006134 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80060f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80060fa:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	b2da      	uxtb	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800611a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fc fded 	bl	8002cfc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	40010400 	.word	0x40010400

08006138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e095      	b.n	8006276 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614e:	2b00      	cmp	r3, #0
 8006150:	d108      	bne.n	8006164 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800615a:	d009      	beq.n	8006170 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	61da      	str	r2, [r3, #28]
 8006162:	e005      	b.n	8006170 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fc feec 	bl	8002f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80061b0:	d902      	bls.n	80061b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	e002      	b.n	80061be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80061bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80061c6:	d007      	beq.n	80061d8 <HAL_SPI_Init+0xa0>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80061d0:	d002      	beq.n	80061d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	431a      	orrs	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800621a:	ea42 0103 	orr.w	r1, r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006222:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	0c1b      	lsrs	r3, r3, #16
 8006234:	f003 0204 	and.w	r2, r3, #4
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	431a      	orrs	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006246:	f003 0308 	and.w	r3, r3, #8
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006254:	ea42 0103 	orr.w	r1, r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b088      	sub	sp, #32
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800628e:	f7fd f8ad 	bl	80033ec <HAL_GetTick>
 8006292:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006294:	88fb      	ldrh	r3, [r7, #6]
 8006296:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d001      	beq.n	80062a8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80062a4:	2302      	movs	r3, #2
 80062a6:	e15c      	b.n	8006562 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <HAL_SPI_Transmit+0x36>
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e154      	b.n	8006562 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <HAL_SPI_Transmit+0x48>
 80062c2:	2302      	movs	r3, #2
 80062c4:	e14d      	b.n	8006562 <HAL_SPI_Transmit+0x2e4>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2203      	movs	r2, #3
 80062d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	88fa      	ldrh	r2, [r7, #6]
 80062ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006318:	d10f      	bne.n	800633a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006328:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006338:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006344:	2b40      	cmp	r3, #64	@ 0x40
 8006346:	d007      	beq.n	8006358 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006360:	d952      	bls.n	8006408 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <HAL_SPI_Transmit+0xf2>
 800636a:	8b7b      	ldrh	r3, [r7, #26]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d145      	bne.n	80063fc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006374:	881a      	ldrh	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006380:	1c9a      	adds	r2, r3, #2
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800638a:	b29b      	uxth	r3, r3
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006394:	e032      	b.n	80063fc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d112      	bne.n	80063ca <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a8:	881a      	ldrh	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b4:	1c9a      	adds	r2, r3, #2
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063c8:	e018      	b.n	80063fc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063ca:	f7fd f80f 	bl	80033ec <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d803      	bhi.n	80063e2 <HAL_SPI_Transmit+0x164>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063e0:	d102      	bne.n	80063e8 <HAL_SPI_Transmit+0x16a>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d109      	bne.n	80063fc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e0b2      	b.n	8006562 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1c7      	bne.n	8006396 <HAL_SPI_Transmit+0x118>
 8006406:	e083      	b.n	8006510 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <HAL_SPI_Transmit+0x198>
 8006410:	8b7b      	ldrh	r3, [r7, #26]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d177      	bne.n	8006506 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800641a:	b29b      	uxth	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	d912      	bls.n	8006446 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006424:	881a      	ldrh	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006430:	1c9a      	adds	r2, r3, #2
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b02      	subs	r3, #2
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006444:	e05f      	b.n	8006506 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	330c      	adds	r3, #12
 8006450:	7812      	ldrb	r2, [r2, #0]
 8006452:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006462:	b29b      	uxth	r3, r3
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800646c:	e04b      	b.n	8006506 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b02      	cmp	r3, #2
 800647a:	d12b      	bne.n	80064d4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b01      	cmp	r3, #1
 8006484:	d912      	bls.n	80064ac <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648a:	881a      	ldrh	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006496:	1c9a      	adds	r2, r3, #2
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b02      	subs	r3, #2
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064aa:	e02c      	b.n	8006506 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	330c      	adds	r3, #12
 80064b6:	7812      	ldrb	r2, [r2, #0]
 80064b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064d2:	e018      	b.n	8006506 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064d4:	f7fc ff8a 	bl	80033ec <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d803      	bhi.n	80064ec <HAL_SPI_Transmit+0x26e>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064ea:	d102      	bne.n	80064f2 <HAL_SPI_Transmit+0x274>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e02d      	b.n	8006562 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1ae      	bne.n	800646e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006510:	69fa      	ldr	r2, [r7, #28]
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 fcf5 	bl	8006f04 <SPI_EndRxTxTransaction>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2220      	movs	r2, #32
 8006524:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e000      	b.n	8006562 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006560:	2300      	movs	r3, #0
  }
}
 8006562:	4618      	mov	r0, r3
 8006564:	3720      	adds	r7, #32
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b088      	sub	sp, #32
 800656e:	af02      	add	r7, sp, #8
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	603b      	str	r3, [r7, #0]
 8006576:	4613      	mov	r3, r2
 8006578:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b01      	cmp	r3, #1
 8006584:	d001      	beq.n	800658a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006586:	2302      	movs	r3, #2
 8006588:	e123      	b.n	80067d2 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006592:	d112      	bne.n	80065ba <HAL_SPI_Receive+0x50>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10e      	bne.n	80065ba <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2204      	movs	r2, #4
 80065a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80065a4:	88fa      	ldrh	r2, [r7, #6]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 f912 	bl	80067da <HAL_SPI_TransmitReceive>
 80065b6:	4603      	mov	r3, r0
 80065b8:	e10b      	b.n	80067d2 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ba:	f7fc ff17 	bl	80033ec <HAL_GetTick>
 80065be:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <HAL_SPI_Receive+0x62>
 80065c6:	88fb      	ldrh	r3, [r7, #6]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e100      	b.n	80067d2 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <HAL_SPI_Receive+0x74>
 80065da:	2302      	movs	r3, #2
 80065dc:	e0f9      	b.n	80067d2 <HAL_SPI_Receive+0x268>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2204      	movs	r2, #4
 80065ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	88fa      	ldrh	r2, [r7, #6]
 80065fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	88fa      	ldrh	r2, [r7, #6]
 8006606:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006630:	d908      	bls.n	8006644 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006640:	605a      	str	r2, [r3, #4]
 8006642:	e007      	b.n	8006654 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006652:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800665c:	d10f      	bne.n	800667e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800666c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800667c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006688:	2b40      	cmp	r3, #64	@ 0x40
 800668a:	d007      	beq.n	800669c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800669a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066a4:	d875      	bhi.n	8006792 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80066a6:	e037      	b.n	8006718 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d117      	bne.n	80066e6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f103 020c 	add.w	r2, r3, #12
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	7812      	ldrb	r2, [r2, #0]
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80066e4:	e018      	b.n	8006718 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066e6:	f7fc fe81 	bl	80033ec <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d803      	bhi.n	80066fe <HAL_SPI_Receive+0x194>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066fc:	d102      	bne.n	8006704 <HAL_SPI_Receive+0x19a>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d109      	bne.n	8006718 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e05c      	b.n	80067d2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1c1      	bne.n	80066a8 <HAL_SPI_Receive+0x13e>
 8006724:	e03b      	b.n	800679e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b01      	cmp	r3, #1
 8006732:	d115      	bne.n	8006760 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673e:	b292      	uxth	r2, r2
 8006740:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006746:	1c9a      	adds	r2, r3, #2
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800675e:	e018      	b.n	8006792 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006760:	f7fc fe44 	bl	80033ec <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d803      	bhi.n	8006778 <HAL_SPI_Receive+0x20e>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006776:	d102      	bne.n	800677e <HAL_SPI_Receive+0x214>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e01f      	b.n	80067d2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1c3      	bne.n	8006726 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 fb56 	bl	8006e54 <SPI_EndRxTransaction>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2220      	movs	r2, #32
 80067b2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e000      	b.n	80067d2 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80067d0:	2300      	movs	r3, #0
  }
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b08a      	sub	sp, #40	@ 0x28
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067e8:	2301      	movs	r3, #1
 80067ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067ec:	f7fc fdfe 	bl	80033ec <HAL_GetTick>
 80067f0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80067f8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006800:	887b      	ldrh	r3, [r7, #2]
 8006802:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006804:	887b      	ldrh	r3, [r7, #2]
 8006806:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006808:	7ffb      	ldrb	r3, [r7, #31]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d00c      	beq.n	8006828 <HAL_SPI_TransmitReceive+0x4e>
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006814:	d106      	bne.n	8006824 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d102      	bne.n	8006824 <HAL_SPI_TransmitReceive+0x4a>
 800681e:	7ffb      	ldrb	r3, [r7, #31]
 8006820:	2b04      	cmp	r3, #4
 8006822:	d001      	beq.n	8006828 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006824:	2302      	movs	r3, #2
 8006826:	e1f3      	b.n	8006c10 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <HAL_SPI_TransmitReceive+0x60>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <HAL_SPI_TransmitReceive+0x60>
 8006834:	887b      	ldrh	r3, [r7, #2]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e1e8      	b.n	8006c10 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <HAL_SPI_TransmitReceive+0x72>
 8006848:	2302      	movs	r3, #2
 800684a:	e1e1      	b.n	8006c10 <HAL_SPI_TransmitReceive+0x436>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b04      	cmp	r3, #4
 800685e:	d003      	beq.n	8006868 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2205      	movs	r2, #5
 8006864:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	887a      	ldrh	r2, [r7, #2]
 8006878:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	887a      	ldrh	r2, [r7, #2]
 8006880:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	887a      	ldrh	r2, [r7, #2]
 800688e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	887a      	ldrh	r2, [r7, #2]
 8006894:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068aa:	d802      	bhi.n	80068b2 <HAL_SPI_TransmitReceive+0xd8>
 80068ac:	8abb      	ldrh	r3, [r7, #20]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d908      	bls.n	80068c4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	e007      	b.n	80068d4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80068d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068de:	2b40      	cmp	r3, #64	@ 0x40
 80068e0:	d007      	beq.n	80068f2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068fa:	f240 8083 	bls.w	8006a04 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <HAL_SPI_TransmitReceive+0x132>
 8006906:	8afb      	ldrh	r3, [r7, #22]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d16f      	bne.n	80069ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006910:	881a      	ldrh	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691c:	1c9a      	adds	r2, r3, #2
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006930:	e05c      	b.n	80069ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b02      	cmp	r3, #2
 800693e:	d11b      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x19e>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d016      	beq.n	8006978 <HAL_SPI_TransmitReceive+0x19e>
 800694a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694c:	2b01      	cmp	r3, #1
 800694e:	d113      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006954:	881a      	ldrh	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006960:	1c9a      	adds	r2, r3, #2
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b01      	cmp	r3, #1
 8006984:	d11c      	bne.n	80069c0 <HAL_SPI_TransmitReceive+0x1e6>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d016      	beq.n	80069c0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699c:	b292      	uxth	r2, r2
 800699e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a4:	1c9a      	adds	r2, r3, #2
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	3b01      	subs	r3, #1
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069bc:	2301      	movs	r3, #1
 80069be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069c0:	f7fc fd14 	bl	80033ec <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d80d      	bhi.n	80069ec <HAL_SPI_TransmitReceive+0x212>
 80069d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069d6:	d009      	beq.n	80069ec <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e111      	b.n	8006c10 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d19d      	bne.n	8006932 <HAL_SPI_TransmitReceive+0x158>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d197      	bne.n	8006932 <HAL_SPI_TransmitReceive+0x158>
 8006a02:	e0e5      	b.n	8006bd0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <HAL_SPI_TransmitReceive+0x23a>
 8006a0c:	8afb      	ldrh	r3, [r7, #22]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	f040 80d1 	bne.w	8006bb6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d912      	bls.n	8006a44 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a22:	881a      	ldrh	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2e:	1c9a      	adds	r2, r3, #2
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	3b02      	subs	r3, #2
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a42:	e0b8      	b.n	8006bb6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	330c      	adds	r3, #12
 8006a4e:	7812      	ldrb	r2, [r2, #0]
 8006a50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a6a:	e0a4      	b.n	8006bb6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d134      	bne.n	8006ae4 <HAL_SPI_TransmitReceive+0x30a>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d02f      	beq.n	8006ae4 <HAL_SPI_TransmitReceive+0x30a>
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d12c      	bne.n	8006ae4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d912      	bls.n	8006aba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a98:	881a      	ldrh	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa4:	1c9a      	adds	r2, r3, #2
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	3b02      	subs	r3, #2
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ab8:	e012      	b.n	8006ae0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	330c      	adds	r3, #12
 8006ac4:	7812      	ldrb	r2, [r2, #0]
 8006ac6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d148      	bne.n	8006b84 <HAL_SPI_TransmitReceive+0x3aa>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d042      	beq.n	8006b84 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d923      	bls.n	8006b52 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b14:	b292      	uxth	r2, r2
 8006b16:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1c:	1c9a      	adds	r2, r3, #2
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b02      	subs	r3, #2
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d81f      	bhi.n	8006b80 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b4e:	605a      	str	r2, [r3, #4]
 8006b50:	e016      	b.n	8006b80 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f103 020c 	add.w	r2, r3, #12
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5e:	7812      	ldrb	r2, [r2, #0]
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b80:	2301      	movs	r3, #1
 8006b82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b84:	f7fc fc32 	bl	80033ec <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d803      	bhi.n	8006b9c <HAL_SPI_TransmitReceive+0x3c2>
 8006b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b9a:	d102      	bne.n	8006ba2 <HAL_SPI_TransmitReceive+0x3c8>
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e02c      	b.n	8006c10 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f47f af55 	bne.w	8006a6c <HAL_SPI_TransmitReceive+0x292>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f47f af4e 	bne.w	8006a6c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bd0:	6a3a      	ldr	r2, [r7, #32]
 8006bd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f995 	bl	8006f04 <SPI_EndRxTxTransaction>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d008      	beq.n	8006bf2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2220      	movs	r2, #32
 8006be4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e00e      	b.n	8006c10 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
  }
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3728      	adds	r7, #40	@ 0x28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	4613      	mov	r3, r2
 8006c26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c28:	f7fc fbe0 	bl	80033ec <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c30:	1a9b      	subs	r3, r3, r2
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	4413      	add	r3, r2
 8006c36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c38:	f7fc fbd8 	bl	80033ec <HAL_GetTick>
 8006c3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c3e:	4b39      	ldr	r3, [pc, #228]	@ (8006d24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	015b      	lsls	r3, r3, #5
 8006c44:	0d1b      	lsrs	r3, r3, #20
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	fb02 f303 	mul.w	r3, r2, r3
 8006c4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c4e:	e054      	b.n	8006cfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c56:	d050      	beq.n	8006cfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c58:	f7fc fbc8 	bl	80033ec <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d902      	bls.n	8006c6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d13d      	bne.n	8006cea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c86:	d111      	bne.n	8006cac <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c90:	d004      	beq.n	8006c9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c9a:	d107      	bne.n	8006cac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006caa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cb4:	d10f      	bne.n	8006cd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e017      	b.n	8006d1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4013      	ands	r3, r2
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	bf0c      	ite	eq
 8006d0a:	2301      	moveq	r3, #1
 8006d0c:	2300      	movne	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d19b      	bne.n	8006c50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3720      	adds	r7, #32
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	2000001c 	.word	0x2000001c

08006d28 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	@ 0x28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d3a:	f7fc fb57 	bl	80033ec <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	1a9b      	subs	r3, r3, r2
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	4413      	add	r3, r2
 8006d48:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006d4a:	f7fc fb4f 	bl	80033ec <HAL_GetTick>
 8006d4e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	330c      	adds	r3, #12
 8006d56:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d58:	4b3d      	ldr	r3, [pc, #244]	@ (8006e50 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	00da      	lsls	r2, r3, #3
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	0d1b      	lsrs	r3, r3, #20
 8006d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d6a:	fb02 f303 	mul.w	r3, r2, r3
 8006d6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d70:	e060      	b.n	8006e34 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006d78:	d107      	bne.n	8006d8a <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d104      	bne.n	8006d8a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d90:	d050      	beq.n	8006e34 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d92:	f7fc fb2b 	bl	80033ec <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d902      	bls.n	8006da8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d13d      	bne.n	8006e24 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006db6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dc0:	d111      	bne.n	8006de6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dca:	d004      	beq.n	8006dd6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dd4:	d107      	bne.n	8006de6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006de4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dee:	d10f      	bne.n	8006e10 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e010      	b.n	8006e46 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d196      	bne.n	8006d72 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3728      	adds	r7, #40	@ 0x28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	2000001c 	.word	0x2000001c

08006e54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af02      	add	r7, sp, #8
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e68:	d111      	bne.n	8006e8e <SPI_EndRxTransaction+0x3a>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e72:	d004      	beq.n	8006e7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e7c:	d107      	bne.n	8006e8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e8c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2200      	movs	r2, #0
 8006e96:	2180      	movs	r1, #128	@ 0x80
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7ff febd 	bl	8006c18 <SPI_WaitFlagStateUntilTimeout>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ea8:	f043 0220 	orr.w	r2, r3, #32
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e023      	b.n	8006efc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ebc:	d11d      	bne.n	8006efa <SPI_EndRxTransaction+0xa6>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ec6:	d004      	beq.n	8006ed2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ed0:	d113      	bne.n	8006efa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f7ff ff22 	bl	8006d28 <SPI_WaitFifoStateUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d007      	beq.n	8006efa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eee:	f043 0220 	orr.w	r2, r3, #32
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e000      	b.n	8006efc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af02      	add	r7, sp, #8
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f7ff ff03 	bl	8006d28 <SPI_WaitFifoStateUntilTimeout>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d007      	beq.n	8006f38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f2c:	f043 0220 	orr.w	r2, r3, #32
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e027      	b.n	8006f88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2180      	movs	r1, #128	@ 0x80
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f7ff fe68 	bl	8006c18 <SPI_WaitFlagStateUntilTimeout>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d007      	beq.n	8006f5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f52:	f043 0220 	orr.w	r2, r3, #32
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e014      	b.n	8006f88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7ff fedc 	bl	8006d28 <SPI_WaitFifoStateUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f7a:	f043 0220 	orr.w	r2, r3, #32
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e000      	b.n	8006f88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e040      	b.n	8007024 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fc f82e 	bl	8003014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2224      	movs	r2, #36	@ 0x24
 8006fbc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0201 	bic.w	r2, r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fb6a 	bl	80076b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f8af 	bl	8007140 <UART_SetConfig>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e01b      	b.n	8007024 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800700a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0201 	orr.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fbe9 	bl	80077f4 <UART_CheckIdleState>
 8007022:	4603      	mov	r3, r0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08a      	sub	sp, #40	@ 0x28
 8007030:	af02      	add	r7, sp, #8
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	4613      	mov	r3, r2
 800703a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007040:	2b20      	cmp	r3, #32
 8007042:	d177      	bne.n	8007134 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <HAL_UART_Transmit+0x24>
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e070      	b.n	8007136 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2221      	movs	r2, #33	@ 0x21
 8007060:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007062:	f7fc f9c3 	bl	80033ec <HAL_GetTick>
 8007066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	88fa      	ldrh	r2, [r7, #6]
 800706c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	88fa      	ldrh	r2, [r7, #6]
 8007074:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007080:	d108      	bne.n	8007094 <HAL_UART_Transmit+0x68>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d104      	bne.n	8007094 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800708a:	2300      	movs	r3, #0
 800708c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	e003      	b.n	800709c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007098:	2300      	movs	r3, #0
 800709a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800709c:	e02f      	b.n	80070fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2200      	movs	r2, #0
 80070a6:	2180      	movs	r1, #128	@ 0x80
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 fc4b 	bl	8007944 <UART_WaitOnFlagUntilTimeout>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2220      	movs	r2, #32
 80070b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e03b      	b.n	8007136 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10b      	bne.n	80070dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	881a      	ldrh	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070d0:	b292      	uxth	r2, r2
 80070d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	3302      	adds	r3, #2
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	e007      	b.n	80070ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	781a      	ldrb	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	3301      	adds	r3, #1
 80070ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1c9      	bne.n	800709e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2200      	movs	r2, #0
 8007112:	2140      	movs	r1, #64	@ 0x40
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 fc15 	bl	8007944 <UART_WaitOnFlagUntilTimeout>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d004      	beq.n	800712a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2220      	movs	r2, #32
 8007124:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e005      	b.n	8007136 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	e000      	b.n	8007136 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007134:	2302      	movs	r3, #2
  }
}
 8007136:	4618      	mov	r0, r3
 8007138:	3720      	adds	r7, #32
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007144:	b08a      	sub	sp, #40	@ 0x28
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	431a      	orrs	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	431a      	orrs	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	4313      	orrs	r3, r2
 8007166:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4ba4      	ldr	r3, [pc, #656]	@ (8007400 <UART_SetConfig+0x2c0>)
 8007170:	4013      	ands	r3, r2
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007178:	430b      	orrs	r3, r1
 800717a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a99      	ldr	r2, [pc, #612]	@ (8007404 <UART_SetConfig+0x2c4>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d004      	beq.n	80071ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071a8:	4313      	orrs	r3, r2
 80071aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071bc:	430a      	orrs	r2, r1
 80071be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a90      	ldr	r2, [pc, #576]	@ (8007408 <UART_SetConfig+0x2c8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d126      	bne.n	8007218 <UART_SetConfig+0xd8>
 80071ca:	4b90      	ldr	r3, [pc, #576]	@ (800740c <UART_SetConfig+0x2cc>)
 80071cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d0:	f003 0303 	and.w	r3, r3, #3
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d81b      	bhi.n	8007210 <UART_SetConfig+0xd0>
 80071d8:	a201      	add	r2, pc, #4	@ (adr r2, 80071e0 <UART_SetConfig+0xa0>)
 80071da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071de:	bf00      	nop
 80071e0:	080071f1 	.word	0x080071f1
 80071e4:	08007201 	.word	0x08007201
 80071e8:	080071f9 	.word	0x080071f9
 80071ec:	08007209 	.word	0x08007209
 80071f0:	2301      	movs	r3, #1
 80071f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071f6:	e116      	b.n	8007426 <UART_SetConfig+0x2e6>
 80071f8:	2302      	movs	r3, #2
 80071fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071fe:	e112      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007200:	2304      	movs	r3, #4
 8007202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007206:	e10e      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007208:	2308      	movs	r3, #8
 800720a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800720e:	e10a      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007210:	2310      	movs	r3, #16
 8007212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007216:	e106      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a7c      	ldr	r2, [pc, #496]	@ (8007410 <UART_SetConfig+0x2d0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d138      	bne.n	8007294 <UART_SetConfig+0x154>
 8007222:	4b7a      	ldr	r3, [pc, #488]	@ (800740c <UART_SetConfig+0x2cc>)
 8007224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007228:	f003 030c 	and.w	r3, r3, #12
 800722c:	2b0c      	cmp	r3, #12
 800722e:	d82d      	bhi.n	800728c <UART_SetConfig+0x14c>
 8007230:	a201      	add	r2, pc, #4	@ (adr r2, 8007238 <UART_SetConfig+0xf8>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	0800726d 	.word	0x0800726d
 800723c:	0800728d 	.word	0x0800728d
 8007240:	0800728d 	.word	0x0800728d
 8007244:	0800728d 	.word	0x0800728d
 8007248:	0800727d 	.word	0x0800727d
 800724c:	0800728d 	.word	0x0800728d
 8007250:	0800728d 	.word	0x0800728d
 8007254:	0800728d 	.word	0x0800728d
 8007258:	08007275 	.word	0x08007275
 800725c:	0800728d 	.word	0x0800728d
 8007260:	0800728d 	.word	0x0800728d
 8007264:	0800728d 	.word	0x0800728d
 8007268:	08007285 	.word	0x08007285
 800726c:	2300      	movs	r3, #0
 800726e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007272:	e0d8      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007274:	2302      	movs	r3, #2
 8007276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800727a:	e0d4      	b.n	8007426 <UART_SetConfig+0x2e6>
 800727c:	2304      	movs	r3, #4
 800727e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007282:	e0d0      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007284:	2308      	movs	r3, #8
 8007286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800728a:	e0cc      	b.n	8007426 <UART_SetConfig+0x2e6>
 800728c:	2310      	movs	r3, #16
 800728e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007292:	e0c8      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a5e      	ldr	r2, [pc, #376]	@ (8007414 <UART_SetConfig+0x2d4>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d125      	bne.n	80072ea <UART_SetConfig+0x1aa>
 800729e:	4b5b      	ldr	r3, [pc, #364]	@ (800740c <UART_SetConfig+0x2cc>)
 80072a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80072a8:	2b30      	cmp	r3, #48	@ 0x30
 80072aa:	d016      	beq.n	80072da <UART_SetConfig+0x19a>
 80072ac:	2b30      	cmp	r3, #48	@ 0x30
 80072ae:	d818      	bhi.n	80072e2 <UART_SetConfig+0x1a2>
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d00a      	beq.n	80072ca <UART_SetConfig+0x18a>
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	d814      	bhi.n	80072e2 <UART_SetConfig+0x1a2>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <UART_SetConfig+0x182>
 80072bc:	2b10      	cmp	r3, #16
 80072be:	d008      	beq.n	80072d2 <UART_SetConfig+0x192>
 80072c0:	e00f      	b.n	80072e2 <UART_SetConfig+0x1a2>
 80072c2:	2300      	movs	r3, #0
 80072c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072c8:	e0ad      	b.n	8007426 <UART_SetConfig+0x2e6>
 80072ca:	2302      	movs	r3, #2
 80072cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072d0:	e0a9      	b.n	8007426 <UART_SetConfig+0x2e6>
 80072d2:	2304      	movs	r3, #4
 80072d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072d8:	e0a5      	b.n	8007426 <UART_SetConfig+0x2e6>
 80072da:	2308      	movs	r3, #8
 80072dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072e0:	e0a1      	b.n	8007426 <UART_SetConfig+0x2e6>
 80072e2:	2310      	movs	r3, #16
 80072e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072e8:	e09d      	b.n	8007426 <UART_SetConfig+0x2e6>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a4a      	ldr	r2, [pc, #296]	@ (8007418 <UART_SetConfig+0x2d8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d125      	bne.n	8007340 <UART_SetConfig+0x200>
 80072f4:	4b45      	ldr	r3, [pc, #276]	@ (800740c <UART_SetConfig+0x2cc>)
 80072f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80072fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007300:	d016      	beq.n	8007330 <UART_SetConfig+0x1f0>
 8007302:	2bc0      	cmp	r3, #192	@ 0xc0
 8007304:	d818      	bhi.n	8007338 <UART_SetConfig+0x1f8>
 8007306:	2b80      	cmp	r3, #128	@ 0x80
 8007308:	d00a      	beq.n	8007320 <UART_SetConfig+0x1e0>
 800730a:	2b80      	cmp	r3, #128	@ 0x80
 800730c:	d814      	bhi.n	8007338 <UART_SetConfig+0x1f8>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <UART_SetConfig+0x1d8>
 8007312:	2b40      	cmp	r3, #64	@ 0x40
 8007314:	d008      	beq.n	8007328 <UART_SetConfig+0x1e8>
 8007316:	e00f      	b.n	8007338 <UART_SetConfig+0x1f8>
 8007318:	2300      	movs	r3, #0
 800731a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800731e:	e082      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007320:	2302      	movs	r3, #2
 8007322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007326:	e07e      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007328:	2304      	movs	r3, #4
 800732a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800732e:	e07a      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007330:	2308      	movs	r3, #8
 8007332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007336:	e076      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007338:	2310      	movs	r3, #16
 800733a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800733e:	e072      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a35      	ldr	r2, [pc, #212]	@ (800741c <UART_SetConfig+0x2dc>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d12a      	bne.n	80073a0 <UART_SetConfig+0x260>
 800734a:	4b30      	ldr	r3, [pc, #192]	@ (800740c <UART_SetConfig+0x2cc>)
 800734c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007350:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007354:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007358:	d01a      	beq.n	8007390 <UART_SetConfig+0x250>
 800735a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800735e:	d81b      	bhi.n	8007398 <UART_SetConfig+0x258>
 8007360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007364:	d00c      	beq.n	8007380 <UART_SetConfig+0x240>
 8007366:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800736a:	d815      	bhi.n	8007398 <UART_SetConfig+0x258>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <UART_SetConfig+0x238>
 8007370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007374:	d008      	beq.n	8007388 <UART_SetConfig+0x248>
 8007376:	e00f      	b.n	8007398 <UART_SetConfig+0x258>
 8007378:	2300      	movs	r3, #0
 800737a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800737e:	e052      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007380:	2302      	movs	r3, #2
 8007382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007386:	e04e      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007388:	2304      	movs	r3, #4
 800738a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800738e:	e04a      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007390:	2308      	movs	r3, #8
 8007392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007396:	e046      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007398:	2310      	movs	r3, #16
 800739a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800739e:	e042      	b.n	8007426 <UART_SetConfig+0x2e6>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a17      	ldr	r2, [pc, #92]	@ (8007404 <UART_SetConfig+0x2c4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d13a      	bne.n	8007420 <UART_SetConfig+0x2e0>
 80073aa:	4b18      	ldr	r3, [pc, #96]	@ (800740c <UART_SetConfig+0x2cc>)
 80073ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80073b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073b8:	d01a      	beq.n	80073f0 <UART_SetConfig+0x2b0>
 80073ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073be:	d81b      	bhi.n	80073f8 <UART_SetConfig+0x2b8>
 80073c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073c4:	d00c      	beq.n	80073e0 <UART_SetConfig+0x2a0>
 80073c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073ca:	d815      	bhi.n	80073f8 <UART_SetConfig+0x2b8>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <UART_SetConfig+0x298>
 80073d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073d4:	d008      	beq.n	80073e8 <UART_SetConfig+0x2a8>
 80073d6:	e00f      	b.n	80073f8 <UART_SetConfig+0x2b8>
 80073d8:	2300      	movs	r3, #0
 80073da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073de:	e022      	b.n	8007426 <UART_SetConfig+0x2e6>
 80073e0:	2302      	movs	r3, #2
 80073e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073e6:	e01e      	b.n	8007426 <UART_SetConfig+0x2e6>
 80073e8:	2304      	movs	r3, #4
 80073ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073ee:	e01a      	b.n	8007426 <UART_SetConfig+0x2e6>
 80073f0:	2308      	movs	r3, #8
 80073f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073f6:	e016      	b.n	8007426 <UART_SetConfig+0x2e6>
 80073f8:	2310      	movs	r3, #16
 80073fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073fe:	e012      	b.n	8007426 <UART_SetConfig+0x2e6>
 8007400:	efff69f3 	.word	0xefff69f3
 8007404:	40008000 	.word	0x40008000
 8007408:	40013800 	.word	0x40013800
 800740c:	40021000 	.word	0x40021000
 8007410:	40004400 	.word	0x40004400
 8007414:	40004800 	.word	0x40004800
 8007418:	40004c00 	.word	0x40004c00
 800741c:	40005000 	.word	0x40005000
 8007420:	2310      	movs	r3, #16
 8007422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a9f      	ldr	r2, [pc, #636]	@ (80076a8 <UART_SetConfig+0x568>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d17a      	bne.n	8007526 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007430:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007434:	2b08      	cmp	r3, #8
 8007436:	d824      	bhi.n	8007482 <UART_SetConfig+0x342>
 8007438:	a201      	add	r2, pc, #4	@ (adr r2, 8007440 <UART_SetConfig+0x300>)
 800743a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743e:	bf00      	nop
 8007440:	08007465 	.word	0x08007465
 8007444:	08007483 	.word	0x08007483
 8007448:	0800746d 	.word	0x0800746d
 800744c:	08007483 	.word	0x08007483
 8007450:	08007473 	.word	0x08007473
 8007454:	08007483 	.word	0x08007483
 8007458:	08007483 	.word	0x08007483
 800745c:	08007483 	.word	0x08007483
 8007460:	0800747b 	.word	0x0800747b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007464:	f7fd fc8c 	bl	8004d80 <HAL_RCC_GetPCLK1Freq>
 8007468:	61f8      	str	r0, [r7, #28]
        break;
 800746a:	e010      	b.n	800748e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800746c:	4b8f      	ldr	r3, [pc, #572]	@ (80076ac <UART_SetConfig+0x56c>)
 800746e:	61fb      	str	r3, [r7, #28]
        break;
 8007470:	e00d      	b.n	800748e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007472:	f7fd fbed 	bl	8004c50 <HAL_RCC_GetSysClockFreq>
 8007476:	61f8      	str	r0, [r7, #28]
        break;
 8007478:	e009      	b.n	800748e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800747a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800747e:	61fb      	str	r3, [r7, #28]
        break;
 8007480:	e005      	b.n	800748e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800748c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 80fb 	beq.w	800768c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	4613      	mov	r3, r2
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	4413      	add	r3, r2
 80074a0:	69fa      	ldr	r2, [r7, #28]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d305      	bcc.n	80074b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074ac:	69fa      	ldr	r2, [r7, #28]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d903      	bls.n	80074ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80074b8:	e0e8      	b.n	800768c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	2200      	movs	r2, #0
 80074be:	461c      	mov	r4, r3
 80074c0:	4615      	mov	r5, r2
 80074c2:	f04f 0200 	mov.w	r2, #0
 80074c6:	f04f 0300 	mov.w	r3, #0
 80074ca:	022b      	lsls	r3, r5, #8
 80074cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80074d0:	0222      	lsls	r2, r4, #8
 80074d2:	68f9      	ldr	r1, [r7, #12]
 80074d4:	6849      	ldr	r1, [r1, #4]
 80074d6:	0849      	lsrs	r1, r1, #1
 80074d8:	2000      	movs	r0, #0
 80074da:	4688      	mov	r8, r1
 80074dc:	4681      	mov	r9, r0
 80074de:	eb12 0a08 	adds.w	sl, r2, r8
 80074e2:	eb43 0b09 	adc.w	fp, r3, r9
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	603b      	str	r3, [r7, #0]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074f4:	4650      	mov	r0, sl
 80074f6:	4659      	mov	r1, fp
 80074f8:	f7f8 fe66 	bl	80001c8 <__aeabi_uldivmod>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	4613      	mov	r3, r2
 8007502:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800750a:	d308      	bcc.n	800751e <UART_SetConfig+0x3de>
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007512:	d204      	bcs.n	800751e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	60da      	str	r2, [r3, #12]
 800751c:	e0b6      	b.n	800768c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007524:	e0b2      	b.n	800768c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800752e:	d15e      	bne.n	80075ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007530:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007534:	2b08      	cmp	r3, #8
 8007536:	d828      	bhi.n	800758a <UART_SetConfig+0x44a>
 8007538:	a201      	add	r2, pc, #4	@ (adr r2, 8007540 <UART_SetConfig+0x400>)
 800753a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753e:	bf00      	nop
 8007540:	08007565 	.word	0x08007565
 8007544:	0800756d 	.word	0x0800756d
 8007548:	08007575 	.word	0x08007575
 800754c:	0800758b 	.word	0x0800758b
 8007550:	0800757b 	.word	0x0800757b
 8007554:	0800758b 	.word	0x0800758b
 8007558:	0800758b 	.word	0x0800758b
 800755c:	0800758b 	.word	0x0800758b
 8007560:	08007583 	.word	0x08007583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007564:	f7fd fc0c 	bl	8004d80 <HAL_RCC_GetPCLK1Freq>
 8007568:	61f8      	str	r0, [r7, #28]
        break;
 800756a:	e014      	b.n	8007596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800756c:	f7fd fc1e 	bl	8004dac <HAL_RCC_GetPCLK2Freq>
 8007570:	61f8      	str	r0, [r7, #28]
        break;
 8007572:	e010      	b.n	8007596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007574:	4b4d      	ldr	r3, [pc, #308]	@ (80076ac <UART_SetConfig+0x56c>)
 8007576:	61fb      	str	r3, [r7, #28]
        break;
 8007578:	e00d      	b.n	8007596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800757a:	f7fd fb69 	bl	8004c50 <HAL_RCC_GetSysClockFreq>
 800757e:	61f8      	str	r0, [r7, #28]
        break;
 8007580:	e009      	b.n	8007596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007586:	61fb      	str	r3, [r7, #28]
        break;
 8007588:	e005      	b.n	8007596 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007594:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d077      	beq.n	800768c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	005a      	lsls	r2, r3, #1
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	085b      	lsrs	r3, r3, #1
 80075a6:	441a      	add	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	2b0f      	cmp	r3, #15
 80075b6:	d916      	bls.n	80075e6 <UART_SetConfig+0x4a6>
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075be:	d212      	bcs.n	80075e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	f023 030f 	bic.w	r3, r3, #15
 80075c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	085b      	lsrs	r3, r3, #1
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	8afb      	ldrh	r3, [r7, #22]
 80075d8:	4313      	orrs	r3, r2
 80075da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	8afa      	ldrh	r2, [r7, #22]
 80075e2:	60da      	str	r2, [r3, #12]
 80075e4:	e052      	b.n	800768c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80075ec:	e04e      	b.n	800768c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80075f2:	2b08      	cmp	r3, #8
 80075f4:	d827      	bhi.n	8007646 <UART_SetConfig+0x506>
 80075f6:	a201      	add	r2, pc, #4	@ (adr r2, 80075fc <UART_SetConfig+0x4bc>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	08007621 	.word	0x08007621
 8007600:	08007629 	.word	0x08007629
 8007604:	08007631 	.word	0x08007631
 8007608:	08007647 	.word	0x08007647
 800760c:	08007637 	.word	0x08007637
 8007610:	08007647 	.word	0x08007647
 8007614:	08007647 	.word	0x08007647
 8007618:	08007647 	.word	0x08007647
 800761c:	0800763f 	.word	0x0800763f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007620:	f7fd fbae 	bl	8004d80 <HAL_RCC_GetPCLK1Freq>
 8007624:	61f8      	str	r0, [r7, #28]
        break;
 8007626:	e014      	b.n	8007652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007628:	f7fd fbc0 	bl	8004dac <HAL_RCC_GetPCLK2Freq>
 800762c:	61f8      	str	r0, [r7, #28]
        break;
 800762e:	e010      	b.n	8007652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007630:	4b1e      	ldr	r3, [pc, #120]	@ (80076ac <UART_SetConfig+0x56c>)
 8007632:	61fb      	str	r3, [r7, #28]
        break;
 8007634:	e00d      	b.n	8007652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007636:	f7fd fb0b 	bl	8004c50 <HAL_RCC_GetSysClockFreq>
 800763a:	61f8      	str	r0, [r7, #28]
        break;
 800763c:	e009      	b.n	8007652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800763e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007642:	61fb      	str	r3, [r7, #28]
        break;
 8007644:	e005      	b.n	8007652 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007650:	bf00      	nop
    }

    if (pclk != 0U)
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d019      	beq.n	800768c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	085a      	lsrs	r2, r3, #1
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	441a      	add	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	fbb2 f3f3 	udiv	r3, r2, r3
 800766a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	2b0f      	cmp	r3, #15
 8007670:	d909      	bls.n	8007686 <UART_SetConfig+0x546>
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007678:	d205      	bcs.n	8007686 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	60da      	str	r2, [r3, #12]
 8007684:	e002      	b.n	800768c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007698:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800769c:	4618      	mov	r0, r3
 800769e:	3728      	adds	r7, #40	@ 0x28
 80076a0:	46bd      	mov	sp, r7
 80076a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076a6:	bf00      	nop
 80076a8:	40008000 	.word	0x40008000
 80076ac:	00f42400 	.word	0x00f42400

080076b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076bc:	f003 0308 	and.w	r3, r3, #8
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00a      	beq.n	800771e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007722:	f003 0304 	and.w	r3, r3, #4
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007744:	f003 0310 	and.w	r3, r3, #16
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00a      	beq.n	8007762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007766:	f003 0320 	and.w	r3, r3, #32
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	430a      	orrs	r2, r1
 8007782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01a      	beq.n	80077c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077ae:	d10a      	bne.n	80077c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	605a      	str	r2, [r3, #4]
  }
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b098      	sub	sp, #96	@ 0x60
 80077f8:	af02      	add	r7, sp, #8
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007804:	f7fb fdf2 	bl	80033ec <HAL_GetTick>
 8007808:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0308 	and.w	r3, r3, #8
 8007814:	2b08      	cmp	r3, #8
 8007816:	d12e      	bne.n	8007876 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007818:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007820:	2200      	movs	r2, #0
 8007822:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f88c 	bl	8007944 <UART_WaitOnFlagUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d021      	beq.n	8007876 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007846:	653b      	str	r3, [r7, #80]	@ 0x50
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007850:	647b      	str	r3, [r7, #68]	@ 0x44
 8007852:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800785e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e6      	bne.n	8007832 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2220      	movs	r2, #32
 8007868:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e062      	b.n	800793c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b04      	cmp	r3, #4
 8007882:	d149      	bne.n	8007918 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007884:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800788c:	2200      	movs	r2, #0
 800788e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f856 	bl	8007944 <UART_WaitOnFlagUntilTimeout>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d03c      	beq.n	8007918 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	623b      	str	r3, [r7, #32]
   return(result);
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80078be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e6      	bne.n	800789e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3308      	adds	r3, #8
 80078d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	60fb      	str	r3, [r7, #12]
   return(result);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f023 0301 	bic.w	r3, r3, #1
 80078e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3308      	adds	r3, #8
 80078ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078f0:	61fa      	str	r2, [r7, #28]
 80078f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	69b9      	ldr	r1, [r7, #24]
 80078f6:	69fa      	ldr	r2, [r7, #28]
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	617b      	str	r3, [r7, #20]
   return(result);
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e5      	bne.n	80078d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2220      	movs	r2, #32
 8007908:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e011      	b.n	800793c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2220      	movs	r2, #32
 8007922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3758      	adds	r7, #88	@ 0x58
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	603b      	str	r3, [r7, #0]
 8007950:	4613      	mov	r3, r2
 8007952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007954:	e04f      	b.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800795c:	d04b      	beq.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800795e:	f7fb fd45 	bl	80033ec <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	429a      	cmp	r2, r3
 800796c:	d302      	bcc.n	8007974 <UART_WaitOnFlagUntilTimeout+0x30>
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e04e      	b.n	8007a16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0304 	and.w	r3, r3, #4
 8007982:	2b00      	cmp	r3, #0
 8007984:	d037      	beq.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b80      	cmp	r3, #128	@ 0x80
 800798a:	d034      	beq.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2b40      	cmp	r3, #64	@ 0x40
 8007990:	d031      	beq.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	f003 0308 	and.w	r3, r3, #8
 800799c:	2b08      	cmp	r3, #8
 800799e:	d110      	bne.n	80079c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2208      	movs	r2, #8
 80079a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f838 	bl	8007a1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2208      	movs	r2, #8
 80079b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e029      	b.n	8007a16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079d0:	d111      	bne.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f81e 	bl	8007a1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e00f      	b.n	8007a16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69da      	ldr	r2, [r3, #28]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4013      	ands	r3, r2
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	bf0c      	ite	eq
 8007a06:	2301      	moveq	r3, #1
 8007a08:	2300      	movne	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	79fb      	ldrb	r3, [r7, #7]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d0a0      	beq.n	8007956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b095      	sub	sp, #84	@ 0x54
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e6      	bne.n	8007a26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	f023 0301 	bic.w	r3, r3, #1
 8007a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3308      	adds	r3, #8
 8007a76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a80:	e841 2300 	strex	r3, r2, [r1]
 8007a84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e5      	bne.n	8007a58 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d118      	bne.n	8007ac6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	f023 0310 	bic.w	r3, r3, #16
 8007aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ab2:	61bb      	str	r3, [r7, #24]
 8007ab4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6979      	ldr	r1, [r7, #20]
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e6      	bne.n	8007a94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007ada:	bf00      	nop
 8007adc:	3754      	adds	r7, #84	@ 0x54
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
	...

08007ae8 <std>:
 8007ae8:	2300      	movs	r3, #0
 8007aea:	b510      	push	{r4, lr}
 8007aec:	4604      	mov	r4, r0
 8007aee:	e9c0 3300 	strd	r3, r3, [r0]
 8007af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007af6:	6083      	str	r3, [r0, #8]
 8007af8:	8181      	strh	r1, [r0, #12]
 8007afa:	6643      	str	r3, [r0, #100]	@ 0x64
 8007afc:	81c2      	strh	r2, [r0, #14]
 8007afe:	6183      	str	r3, [r0, #24]
 8007b00:	4619      	mov	r1, r3
 8007b02:	2208      	movs	r2, #8
 8007b04:	305c      	adds	r0, #92	@ 0x5c
 8007b06:	f000 f90f 	bl	8007d28 <memset>
 8007b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b40 <std+0x58>)
 8007b0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b44 <std+0x5c>)
 8007b10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b12:	4b0d      	ldr	r3, [pc, #52]	@ (8007b48 <std+0x60>)
 8007b14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b16:	4b0d      	ldr	r3, [pc, #52]	@ (8007b4c <std+0x64>)
 8007b18:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b50 <std+0x68>)
 8007b1c:	6224      	str	r4, [r4, #32]
 8007b1e:	429c      	cmp	r4, r3
 8007b20:	d006      	beq.n	8007b30 <std+0x48>
 8007b22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b26:	4294      	cmp	r4, r2
 8007b28:	d002      	beq.n	8007b30 <std+0x48>
 8007b2a:	33d0      	adds	r3, #208	@ 0xd0
 8007b2c:	429c      	cmp	r4, r3
 8007b2e:	d105      	bne.n	8007b3c <std+0x54>
 8007b30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b38:	f000 b928 	b.w	8007d8c <__retarget_lock_init_recursive>
 8007b3c:	bd10      	pop	{r4, pc}
 8007b3e:	bf00      	nop
 8007b40:	08008065 	.word	0x08008065
 8007b44:	08008087 	.word	0x08008087
 8007b48:	080080bf 	.word	0x080080bf
 8007b4c:	080080e3 	.word	0x080080e3
 8007b50:	20001f48 	.word	0x20001f48

08007b54 <stdio_exit_handler>:
 8007b54:	4a02      	ldr	r2, [pc, #8]	@ (8007b60 <stdio_exit_handler+0xc>)
 8007b56:	4903      	ldr	r1, [pc, #12]	@ (8007b64 <stdio_exit_handler+0x10>)
 8007b58:	4803      	ldr	r0, [pc, #12]	@ (8007b68 <stdio_exit_handler+0x14>)
 8007b5a:	f000 b869 	b.w	8007c30 <_fwalk_sglue>
 8007b5e:	bf00      	nop
 8007b60:	20000028 	.word	0x20000028
 8007b64:	08007ffd 	.word	0x08007ffd
 8007b68:	20000038 	.word	0x20000038

08007b6c <cleanup_stdio>:
 8007b6c:	6841      	ldr	r1, [r0, #4]
 8007b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba0 <cleanup_stdio+0x34>)
 8007b70:	4299      	cmp	r1, r3
 8007b72:	b510      	push	{r4, lr}
 8007b74:	4604      	mov	r4, r0
 8007b76:	d001      	beq.n	8007b7c <cleanup_stdio+0x10>
 8007b78:	f000 fa40 	bl	8007ffc <_fflush_r>
 8007b7c:	68a1      	ldr	r1, [r4, #8]
 8007b7e:	4b09      	ldr	r3, [pc, #36]	@ (8007ba4 <cleanup_stdio+0x38>)
 8007b80:	4299      	cmp	r1, r3
 8007b82:	d002      	beq.n	8007b8a <cleanup_stdio+0x1e>
 8007b84:	4620      	mov	r0, r4
 8007b86:	f000 fa39 	bl	8007ffc <_fflush_r>
 8007b8a:	68e1      	ldr	r1, [r4, #12]
 8007b8c:	4b06      	ldr	r3, [pc, #24]	@ (8007ba8 <cleanup_stdio+0x3c>)
 8007b8e:	4299      	cmp	r1, r3
 8007b90:	d004      	beq.n	8007b9c <cleanup_stdio+0x30>
 8007b92:	4620      	mov	r0, r4
 8007b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b98:	f000 ba30 	b.w	8007ffc <_fflush_r>
 8007b9c:	bd10      	pop	{r4, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20001f48 	.word	0x20001f48
 8007ba4:	20001fb0 	.word	0x20001fb0
 8007ba8:	20002018 	.word	0x20002018

08007bac <global_stdio_init.part.0>:
 8007bac:	b510      	push	{r4, lr}
 8007bae:	4b0b      	ldr	r3, [pc, #44]	@ (8007bdc <global_stdio_init.part.0+0x30>)
 8007bb0:	4c0b      	ldr	r4, [pc, #44]	@ (8007be0 <global_stdio_init.part.0+0x34>)
 8007bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8007be4 <global_stdio_init.part.0+0x38>)
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	2200      	movs	r2, #0
 8007bba:	2104      	movs	r1, #4
 8007bbc:	f7ff ff94 	bl	8007ae8 <std>
 8007bc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	2109      	movs	r1, #9
 8007bc8:	f7ff ff8e 	bl	8007ae8 <std>
 8007bcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bd6:	2112      	movs	r1, #18
 8007bd8:	f7ff bf86 	b.w	8007ae8 <std>
 8007bdc:	20002080 	.word	0x20002080
 8007be0:	20001f48 	.word	0x20001f48
 8007be4:	08007b55 	.word	0x08007b55

08007be8 <__sfp_lock_acquire>:
 8007be8:	4801      	ldr	r0, [pc, #4]	@ (8007bf0 <__sfp_lock_acquire+0x8>)
 8007bea:	f000 b8d0 	b.w	8007d8e <__retarget_lock_acquire_recursive>
 8007bee:	bf00      	nop
 8007bf0:	20002085 	.word	0x20002085

08007bf4 <__sfp_lock_release>:
 8007bf4:	4801      	ldr	r0, [pc, #4]	@ (8007bfc <__sfp_lock_release+0x8>)
 8007bf6:	f000 b8cb 	b.w	8007d90 <__retarget_lock_release_recursive>
 8007bfa:	bf00      	nop
 8007bfc:	20002085 	.word	0x20002085

08007c00 <__sinit>:
 8007c00:	b510      	push	{r4, lr}
 8007c02:	4604      	mov	r4, r0
 8007c04:	f7ff fff0 	bl	8007be8 <__sfp_lock_acquire>
 8007c08:	6a23      	ldr	r3, [r4, #32]
 8007c0a:	b11b      	cbz	r3, 8007c14 <__sinit+0x14>
 8007c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c10:	f7ff bff0 	b.w	8007bf4 <__sfp_lock_release>
 8007c14:	4b04      	ldr	r3, [pc, #16]	@ (8007c28 <__sinit+0x28>)
 8007c16:	6223      	str	r3, [r4, #32]
 8007c18:	4b04      	ldr	r3, [pc, #16]	@ (8007c2c <__sinit+0x2c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1f5      	bne.n	8007c0c <__sinit+0xc>
 8007c20:	f7ff ffc4 	bl	8007bac <global_stdio_init.part.0>
 8007c24:	e7f2      	b.n	8007c0c <__sinit+0xc>
 8007c26:	bf00      	nop
 8007c28:	08007b6d 	.word	0x08007b6d
 8007c2c:	20002080 	.word	0x20002080

08007c30 <_fwalk_sglue>:
 8007c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c34:	4607      	mov	r7, r0
 8007c36:	4688      	mov	r8, r1
 8007c38:	4614      	mov	r4, r2
 8007c3a:	2600      	movs	r6, #0
 8007c3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c40:	f1b9 0901 	subs.w	r9, r9, #1
 8007c44:	d505      	bpl.n	8007c52 <_fwalk_sglue+0x22>
 8007c46:	6824      	ldr	r4, [r4, #0]
 8007c48:	2c00      	cmp	r4, #0
 8007c4a:	d1f7      	bne.n	8007c3c <_fwalk_sglue+0xc>
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c52:	89ab      	ldrh	r3, [r5, #12]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d907      	bls.n	8007c68 <_fwalk_sglue+0x38>
 8007c58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	d003      	beq.n	8007c68 <_fwalk_sglue+0x38>
 8007c60:	4629      	mov	r1, r5
 8007c62:	4638      	mov	r0, r7
 8007c64:	47c0      	blx	r8
 8007c66:	4306      	orrs	r6, r0
 8007c68:	3568      	adds	r5, #104	@ 0x68
 8007c6a:	e7e9      	b.n	8007c40 <_fwalk_sglue+0x10>

08007c6c <_puts_r>:
 8007c6c:	6a03      	ldr	r3, [r0, #32]
 8007c6e:	b570      	push	{r4, r5, r6, lr}
 8007c70:	6884      	ldr	r4, [r0, #8]
 8007c72:	4605      	mov	r5, r0
 8007c74:	460e      	mov	r6, r1
 8007c76:	b90b      	cbnz	r3, 8007c7c <_puts_r+0x10>
 8007c78:	f7ff ffc2 	bl	8007c00 <__sinit>
 8007c7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c7e:	07db      	lsls	r3, r3, #31
 8007c80:	d405      	bmi.n	8007c8e <_puts_r+0x22>
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	0598      	lsls	r0, r3, #22
 8007c86:	d402      	bmi.n	8007c8e <_puts_r+0x22>
 8007c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c8a:	f000 f880 	bl	8007d8e <__retarget_lock_acquire_recursive>
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	0719      	lsls	r1, r3, #28
 8007c92:	d502      	bpl.n	8007c9a <_puts_r+0x2e>
 8007c94:	6923      	ldr	r3, [r4, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d135      	bne.n	8007d06 <_puts_r+0x9a>
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f000 fa63 	bl	8008168 <__swsetup_r>
 8007ca2:	b380      	cbz	r0, 8007d06 <_puts_r+0x9a>
 8007ca4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007ca8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007caa:	07da      	lsls	r2, r3, #31
 8007cac:	d405      	bmi.n	8007cba <_puts_r+0x4e>
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	059b      	lsls	r3, r3, #22
 8007cb2:	d402      	bmi.n	8007cba <_puts_r+0x4e>
 8007cb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cb6:	f000 f86b 	bl	8007d90 <__retarget_lock_release_recursive>
 8007cba:	4628      	mov	r0, r5
 8007cbc:	bd70      	pop	{r4, r5, r6, pc}
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	da04      	bge.n	8007ccc <_puts_r+0x60>
 8007cc2:	69a2      	ldr	r2, [r4, #24]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	dc17      	bgt.n	8007cf8 <_puts_r+0x8c>
 8007cc8:	290a      	cmp	r1, #10
 8007cca:	d015      	beq.n	8007cf8 <_puts_r+0x8c>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	6022      	str	r2, [r4, #0]
 8007cd2:	7019      	strb	r1, [r3, #0]
 8007cd4:	68a3      	ldr	r3, [r4, #8]
 8007cd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	60a3      	str	r3, [r4, #8]
 8007cde:	2900      	cmp	r1, #0
 8007ce0:	d1ed      	bne.n	8007cbe <_puts_r+0x52>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	da11      	bge.n	8007d0a <_puts_r+0x9e>
 8007ce6:	4622      	mov	r2, r4
 8007ce8:	210a      	movs	r1, #10
 8007cea:	4628      	mov	r0, r5
 8007cec:	f000 f9fd 	bl	80080ea <__swbuf_r>
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d0d7      	beq.n	8007ca4 <_puts_r+0x38>
 8007cf4:	250a      	movs	r5, #10
 8007cf6:	e7d7      	b.n	8007ca8 <_puts_r+0x3c>
 8007cf8:	4622      	mov	r2, r4
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	f000 f9f5 	bl	80080ea <__swbuf_r>
 8007d00:	3001      	adds	r0, #1
 8007d02:	d1e7      	bne.n	8007cd4 <_puts_r+0x68>
 8007d04:	e7ce      	b.n	8007ca4 <_puts_r+0x38>
 8007d06:	3e01      	subs	r6, #1
 8007d08:	e7e4      	b.n	8007cd4 <_puts_r+0x68>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	6022      	str	r2, [r4, #0]
 8007d10:	220a      	movs	r2, #10
 8007d12:	701a      	strb	r2, [r3, #0]
 8007d14:	e7ee      	b.n	8007cf4 <_puts_r+0x88>
	...

08007d18 <puts>:
 8007d18:	4b02      	ldr	r3, [pc, #8]	@ (8007d24 <puts+0xc>)
 8007d1a:	4601      	mov	r1, r0
 8007d1c:	6818      	ldr	r0, [r3, #0]
 8007d1e:	f7ff bfa5 	b.w	8007c6c <_puts_r>
 8007d22:	bf00      	nop
 8007d24:	20000034 	.word	0x20000034

08007d28 <memset>:
 8007d28:	4402      	add	r2, r0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d100      	bne.n	8007d32 <memset+0xa>
 8007d30:	4770      	bx	lr
 8007d32:	f803 1b01 	strb.w	r1, [r3], #1
 8007d36:	e7f9      	b.n	8007d2c <memset+0x4>

08007d38 <__errno>:
 8007d38:	4b01      	ldr	r3, [pc, #4]	@ (8007d40 <__errno+0x8>)
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	20000034 	.word	0x20000034

08007d44 <__libc_init_array>:
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	4d0d      	ldr	r5, [pc, #52]	@ (8007d7c <__libc_init_array+0x38>)
 8007d48:	4c0d      	ldr	r4, [pc, #52]	@ (8007d80 <__libc_init_array+0x3c>)
 8007d4a:	1b64      	subs	r4, r4, r5
 8007d4c:	10a4      	asrs	r4, r4, #2
 8007d4e:	2600      	movs	r6, #0
 8007d50:	42a6      	cmp	r6, r4
 8007d52:	d109      	bne.n	8007d68 <__libc_init_array+0x24>
 8007d54:	4d0b      	ldr	r5, [pc, #44]	@ (8007d84 <__libc_init_array+0x40>)
 8007d56:	4c0c      	ldr	r4, [pc, #48]	@ (8007d88 <__libc_init_array+0x44>)
 8007d58:	f000 fb80 	bl	800845c <_init>
 8007d5c:	1b64      	subs	r4, r4, r5
 8007d5e:	10a4      	asrs	r4, r4, #2
 8007d60:	2600      	movs	r6, #0
 8007d62:	42a6      	cmp	r6, r4
 8007d64:	d105      	bne.n	8007d72 <__libc_init_array+0x2e>
 8007d66:	bd70      	pop	{r4, r5, r6, pc}
 8007d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d6c:	4798      	blx	r3
 8007d6e:	3601      	adds	r6, #1
 8007d70:	e7ee      	b.n	8007d50 <__libc_init_array+0xc>
 8007d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d76:	4798      	blx	r3
 8007d78:	3601      	adds	r6, #1
 8007d7a:	e7f2      	b.n	8007d62 <__libc_init_array+0x1e>
 8007d7c:	080085dc 	.word	0x080085dc
 8007d80:	080085dc 	.word	0x080085dc
 8007d84:	080085dc 	.word	0x080085dc
 8007d88:	080085e0 	.word	0x080085e0

08007d8c <__retarget_lock_init_recursive>:
 8007d8c:	4770      	bx	lr

08007d8e <__retarget_lock_acquire_recursive>:
 8007d8e:	4770      	bx	lr

08007d90 <__retarget_lock_release_recursive>:
 8007d90:	4770      	bx	lr

08007d92 <memcpy>:
 8007d92:	440a      	add	r2, r1
 8007d94:	4291      	cmp	r1, r2
 8007d96:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007d9a:	d100      	bne.n	8007d9e <memcpy+0xc>
 8007d9c:	4770      	bx	lr
 8007d9e:	b510      	push	{r4, lr}
 8007da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007da8:	4291      	cmp	r1, r2
 8007daa:	d1f9      	bne.n	8007da0 <memcpy+0xe>
 8007dac:	bd10      	pop	{r4, pc}
	...

08007db0 <sbrk_aligned>:
 8007db0:	b570      	push	{r4, r5, r6, lr}
 8007db2:	4e0f      	ldr	r6, [pc, #60]	@ (8007df0 <sbrk_aligned+0x40>)
 8007db4:	460c      	mov	r4, r1
 8007db6:	6831      	ldr	r1, [r6, #0]
 8007db8:	4605      	mov	r5, r0
 8007dba:	b911      	cbnz	r1, 8007dc2 <sbrk_aligned+0x12>
 8007dbc:	f000 fac0 	bl	8008340 <_sbrk_r>
 8007dc0:	6030      	str	r0, [r6, #0]
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	f000 fabb 	bl	8008340 <_sbrk_r>
 8007dca:	1c43      	adds	r3, r0, #1
 8007dcc:	d103      	bne.n	8007dd6 <sbrk_aligned+0x26>
 8007dce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	bd70      	pop	{r4, r5, r6, pc}
 8007dd6:	1cc4      	adds	r4, r0, #3
 8007dd8:	f024 0403 	bic.w	r4, r4, #3
 8007ddc:	42a0      	cmp	r0, r4
 8007dde:	d0f8      	beq.n	8007dd2 <sbrk_aligned+0x22>
 8007de0:	1a21      	subs	r1, r4, r0
 8007de2:	4628      	mov	r0, r5
 8007de4:	f000 faac 	bl	8008340 <_sbrk_r>
 8007de8:	3001      	adds	r0, #1
 8007dea:	d1f2      	bne.n	8007dd2 <sbrk_aligned+0x22>
 8007dec:	e7ef      	b.n	8007dce <sbrk_aligned+0x1e>
 8007dee:	bf00      	nop
 8007df0:	20002088 	.word	0x20002088

08007df4 <_malloc_r>:
 8007df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df8:	1ccd      	adds	r5, r1, #3
 8007dfa:	f025 0503 	bic.w	r5, r5, #3
 8007dfe:	3508      	adds	r5, #8
 8007e00:	2d0c      	cmp	r5, #12
 8007e02:	bf38      	it	cc
 8007e04:	250c      	movcc	r5, #12
 8007e06:	2d00      	cmp	r5, #0
 8007e08:	4606      	mov	r6, r0
 8007e0a:	db01      	blt.n	8007e10 <_malloc_r+0x1c>
 8007e0c:	42a9      	cmp	r1, r5
 8007e0e:	d904      	bls.n	8007e1a <_malloc_r+0x26>
 8007e10:	230c      	movs	r3, #12
 8007e12:	6033      	str	r3, [r6, #0]
 8007e14:	2000      	movs	r0, #0
 8007e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ef0 <_malloc_r+0xfc>
 8007e1e:	f000 f915 	bl	800804c <__malloc_lock>
 8007e22:	f8d8 3000 	ldr.w	r3, [r8]
 8007e26:	461c      	mov	r4, r3
 8007e28:	bb44      	cbnz	r4, 8007e7c <_malloc_r+0x88>
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f7ff ffbf 	bl	8007db0 <sbrk_aligned>
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	4604      	mov	r4, r0
 8007e36:	d158      	bne.n	8007eea <_malloc_r+0xf6>
 8007e38:	f8d8 4000 	ldr.w	r4, [r8]
 8007e3c:	4627      	mov	r7, r4
 8007e3e:	2f00      	cmp	r7, #0
 8007e40:	d143      	bne.n	8007eca <_malloc_r+0xd6>
 8007e42:	2c00      	cmp	r4, #0
 8007e44:	d04b      	beq.n	8007ede <_malloc_r+0xea>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	4639      	mov	r1, r7
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	eb04 0903 	add.w	r9, r4, r3
 8007e50:	f000 fa76 	bl	8008340 <_sbrk_r>
 8007e54:	4581      	cmp	r9, r0
 8007e56:	d142      	bne.n	8007ede <_malloc_r+0xea>
 8007e58:	6821      	ldr	r1, [r4, #0]
 8007e5a:	1a6d      	subs	r5, r5, r1
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f7ff ffa6 	bl	8007db0 <sbrk_aligned>
 8007e64:	3001      	adds	r0, #1
 8007e66:	d03a      	beq.n	8007ede <_malloc_r+0xea>
 8007e68:	6823      	ldr	r3, [r4, #0]
 8007e6a:	442b      	add	r3, r5
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	bb62      	cbnz	r2, 8007ed0 <_malloc_r+0xdc>
 8007e76:	f8c8 7000 	str.w	r7, [r8]
 8007e7a:	e00f      	b.n	8007e9c <_malloc_r+0xa8>
 8007e7c:	6822      	ldr	r2, [r4, #0]
 8007e7e:	1b52      	subs	r2, r2, r5
 8007e80:	d420      	bmi.n	8007ec4 <_malloc_r+0xd0>
 8007e82:	2a0b      	cmp	r2, #11
 8007e84:	d917      	bls.n	8007eb6 <_malloc_r+0xc2>
 8007e86:	1961      	adds	r1, r4, r5
 8007e88:	42a3      	cmp	r3, r4
 8007e8a:	6025      	str	r5, [r4, #0]
 8007e8c:	bf18      	it	ne
 8007e8e:	6059      	strne	r1, [r3, #4]
 8007e90:	6863      	ldr	r3, [r4, #4]
 8007e92:	bf08      	it	eq
 8007e94:	f8c8 1000 	streq.w	r1, [r8]
 8007e98:	5162      	str	r2, [r4, r5]
 8007e9a:	604b      	str	r3, [r1, #4]
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f000 f8db 	bl	8008058 <__malloc_unlock>
 8007ea2:	f104 000b 	add.w	r0, r4, #11
 8007ea6:	1d23      	adds	r3, r4, #4
 8007ea8:	f020 0007 	bic.w	r0, r0, #7
 8007eac:	1ac2      	subs	r2, r0, r3
 8007eae:	bf1c      	itt	ne
 8007eb0:	1a1b      	subne	r3, r3, r0
 8007eb2:	50a3      	strne	r3, [r4, r2]
 8007eb4:	e7af      	b.n	8007e16 <_malloc_r+0x22>
 8007eb6:	6862      	ldr	r2, [r4, #4]
 8007eb8:	42a3      	cmp	r3, r4
 8007eba:	bf0c      	ite	eq
 8007ebc:	f8c8 2000 	streq.w	r2, [r8]
 8007ec0:	605a      	strne	r2, [r3, #4]
 8007ec2:	e7eb      	b.n	8007e9c <_malloc_r+0xa8>
 8007ec4:	4623      	mov	r3, r4
 8007ec6:	6864      	ldr	r4, [r4, #4]
 8007ec8:	e7ae      	b.n	8007e28 <_malloc_r+0x34>
 8007eca:	463c      	mov	r4, r7
 8007ecc:	687f      	ldr	r7, [r7, #4]
 8007ece:	e7b6      	b.n	8007e3e <_malloc_r+0x4a>
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	d1fb      	bne.n	8007ed0 <_malloc_r+0xdc>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	6053      	str	r3, [r2, #4]
 8007edc:	e7de      	b.n	8007e9c <_malloc_r+0xa8>
 8007ede:	230c      	movs	r3, #12
 8007ee0:	6033      	str	r3, [r6, #0]
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f000 f8b8 	bl	8008058 <__malloc_unlock>
 8007ee8:	e794      	b.n	8007e14 <_malloc_r+0x20>
 8007eea:	6005      	str	r5, [r0, #0]
 8007eec:	e7d6      	b.n	8007e9c <_malloc_r+0xa8>
 8007eee:	bf00      	nop
 8007ef0:	2000208c 	.word	0x2000208c

08007ef4 <__sflush_r>:
 8007ef4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efc:	0716      	lsls	r6, r2, #28
 8007efe:	4605      	mov	r5, r0
 8007f00:	460c      	mov	r4, r1
 8007f02:	d454      	bmi.n	8007fae <__sflush_r+0xba>
 8007f04:	684b      	ldr	r3, [r1, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	dc02      	bgt.n	8007f10 <__sflush_r+0x1c>
 8007f0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	dd48      	ble.n	8007fa2 <__sflush_r+0xae>
 8007f10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f12:	2e00      	cmp	r6, #0
 8007f14:	d045      	beq.n	8007fa2 <__sflush_r+0xae>
 8007f16:	2300      	movs	r3, #0
 8007f18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f1c:	682f      	ldr	r7, [r5, #0]
 8007f1e:	6a21      	ldr	r1, [r4, #32]
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	d030      	beq.n	8007f86 <__sflush_r+0x92>
 8007f24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	0759      	lsls	r1, r3, #29
 8007f2a:	d505      	bpl.n	8007f38 <__sflush_r+0x44>
 8007f2c:	6863      	ldr	r3, [r4, #4]
 8007f2e:	1ad2      	subs	r2, r2, r3
 8007f30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f32:	b10b      	cbz	r3, 8007f38 <__sflush_r+0x44>
 8007f34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f36:	1ad2      	subs	r2, r2, r3
 8007f38:	2300      	movs	r3, #0
 8007f3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f3c:	6a21      	ldr	r1, [r4, #32]
 8007f3e:	4628      	mov	r0, r5
 8007f40:	47b0      	blx	r6
 8007f42:	1c43      	adds	r3, r0, #1
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	d106      	bne.n	8007f56 <__sflush_r+0x62>
 8007f48:	6829      	ldr	r1, [r5, #0]
 8007f4a:	291d      	cmp	r1, #29
 8007f4c:	d82b      	bhi.n	8007fa6 <__sflush_r+0xb2>
 8007f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8007ff8 <__sflush_r+0x104>)
 8007f50:	40ca      	lsrs	r2, r1
 8007f52:	07d6      	lsls	r6, r2, #31
 8007f54:	d527      	bpl.n	8007fa6 <__sflush_r+0xb2>
 8007f56:	2200      	movs	r2, #0
 8007f58:	6062      	str	r2, [r4, #4]
 8007f5a:	04d9      	lsls	r1, r3, #19
 8007f5c:	6922      	ldr	r2, [r4, #16]
 8007f5e:	6022      	str	r2, [r4, #0]
 8007f60:	d504      	bpl.n	8007f6c <__sflush_r+0x78>
 8007f62:	1c42      	adds	r2, r0, #1
 8007f64:	d101      	bne.n	8007f6a <__sflush_r+0x76>
 8007f66:	682b      	ldr	r3, [r5, #0]
 8007f68:	b903      	cbnz	r3, 8007f6c <__sflush_r+0x78>
 8007f6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f6e:	602f      	str	r7, [r5, #0]
 8007f70:	b1b9      	cbz	r1, 8007fa2 <__sflush_r+0xae>
 8007f72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f76:	4299      	cmp	r1, r3
 8007f78:	d002      	beq.n	8007f80 <__sflush_r+0x8c>
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f000 fa24 	bl	80083c8 <_free_r>
 8007f80:	2300      	movs	r3, #0
 8007f82:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f84:	e00d      	b.n	8007fa2 <__sflush_r+0xae>
 8007f86:	2301      	movs	r3, #1
 8007f88:	4628      	mov	r0, r5
 8007f8a:	47b0      	blx	r6
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	1c50      	adds	r0, r2, #1
 8007f90:	d1c9      	bne.n	8007f26 <__sflush_r+0x32>
 8007f92:	682b      	ldr	r3, [r5, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d0c6      	beq.n	8007f26 <__sflush_r+0x32>
 8007f98:	2b1d      	cmp	r3, #29
 8007f9a:	d001      	beq.n	8007fa0 <__sflush_r+0xac>
 8007f9c:	2b16      	cmp	r3, #22
 8007f9e:	d11e      	bne.n	8007fde <__sflush_r+0xea>
 8007fa0:	602f      	str	r7, [r5, #0]
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	e022      	b.n	8007fec <__sflush_r+0xf8>
 8007fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007faa:	b21b      	sxth	r3, r3
 8007fac:	e01b      	b.n	8007fe6 <__sflush_r+0xf2>
 8007fae:	690f      	ldr	r7, [r1, #16]
 8007fb0:	2f00      	cmp	r7, #0
 8007fb2:	d0f6      	beq.n	8007fa2 <__sflush_r+0xae>
 8007fb4:	0793      	lsls	r3, r2, #30
 8007fb6:	680e      	ldr	r6, [r1, #0]
 8007fb8:	bf08      	it	eq
 8007fba:	694b      	ldreq	r3, [r1, #20]
 8007fbc:	600f      	str	r7, [r1, #0]
 8007fbe:	bf18      	it	ne
 8007fc0:	2300      	movne	r3, #0
 8007fc2:	eba6 0807 	sub.w	r8, r6, r7
 8007fc6:	608b      	str	r3, [r1, #8]
 8007fc8:	f1b8 0f00 	cmp.w	r8, #0
 8007fcc:	dde9      	ble.n	8007fa2 <__sflush_r+0xae>
 8007fce:	6a21      	ldr	r1, [r4, #32]
 8007fd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007fd2:	4643      	mov	r3, r8
 8007fd4:	463a      	mov	r2, r7
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	47b0      	blx	r6
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	dc08      	bgt.n	8007ff0 <__sflush_r+0xfc>
 8007fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fe6:	81a3      	strh	r3, [r4, #12]
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ff0:	4407      	add	r7, r0
 8007ff2:	eba8 0800 	sub.w	r8, r8, r0
 8007ff6:	e7e7      	b.n	8007fc8 <__sflush_r+0xd4>
 8007ff8:	20400001 	.word	0x20400001

08007ffc <_fflush_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	690b      	ldr	r3, [r1, #16]
 8008000:	4605      	mov	r5, r0
 8008002:	460c      	mov	r4, r1
 8008004:	b913      	cbnz	r3, 800800c <_fflush_r+0x10>
 8008006:	2500      	movs	r5, #0
 8008008:	4628      	mov	r0, r5
 800800a:	bd38      	pop	{r3, r4, r5, pc}
 800800c:	b118      	cbz	r0, 8008016 <_fflush_r+0x1a>
 800800e:	6a03      	ldr	r3, [r0, #32]
 8008010:	b90b      	cbnz	r3, 8008016 <_fflush_r+0x1a>
 8008012:	f7ff fdf5 	bl	8007c00 <__sinit>
 8008016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0f3      	beq.n	8008006 <_fflush_r+0xa>
 800801e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008020:	07d0      	lsls	r0, r2, #31
 8008022:	d404      	bmi.n	800802e <_fflush_r+0x32>
 8008024:	0599      	lsls	r1, r3, #22
 8008026:	d402      	bmi.n	800802e <_fflush_r+0x32>
 8008028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800802a:	f7ff feb0 	bl	8007d8e <__retarget_lock_acquire_recursive>
 800802e:	4628      	mov	r0, r5
 8008030:	4621      	mov	r1, r4
 8008032:	f7ff ff5f 	bl	8007ef4 <__sflush_r>
 8008036:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008038:	07da      	lsls	r2, r3, #31
 800803a:	4605      	mov	r5, r0
 800803c:	d4e4      	bmi.n	8008008 <_fflush_r+0xc>
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	059b      	lsls	r3, r3, #22
 8008042:	d4e1      	bmi.n	8008008 <_fflush_r+0xc>
 8008044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008046:	f7ff fea3 	bl	8007d90 <__retarget_lock_release_recursive>
 800804a:	e7dd      	b.n	8008008 <_fflush_r+0xc>

0800804c <__malloc_lock>:
 800804c:	4801      	ldr	r0, [pc, #4]	@ (8008054 <__malloc_lock+0x8>)
 800804e:	f7ff be9e 	b.w	8007d8e <__retarget_lock_acquire_recursive>
 8008052:	bf00      	nop
 8008054:	20002084 	.word	0x20002084

08008058 <__malloc_unlock>:
 8008058:	4801      	ldr	r0, [pc, #4]	@ (8008060 <__malloc_unlock+0x8>)
 800805a:	f7ff be99 	b.w	8007d90 <__retarget_lock_release_recursive>
 800805e:	bf00      	nop
 8008060:	20002084 	.word	0x20002084

08008064 <__sread>:
 8008064:	b510      	push	{r4, lr}
 8008066:	460c      	mov	r4, r1
 8008068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806c:	f000 f956 	bl	800831c <_read_r>
 8008070:	2800      	cmp	r0, #0
 8008072:	bfab      	itete	ge
 8008074:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008076:	89a3      	ldrhlt	r3, [r4, #12]
 8008078:	181b      	addge	r3, r3, r0
 800807a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800807e:	bfac      	ite	ge
 8008080:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008082:	81a3      	strhlt	r3, [r4, #12]
 8008084:	bd10      	pop	{r4, pc}

08008086 <__swrite>:
 8008086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800808a:	461f      	mov	r7, r3
 800808c:	898b      	ldrh	r3, [r1, #12]
 800808e:	05db      	lsls	r3, r3, #23
 8008090:	4605      	mov	r5, r0
 8008092:	460c      	mov	r4, r1
 8008094:	4616      	mov	r6, r2
 8008096:	d505      	bpl.n	80080a4 <__swrite+0x1e>
 8008098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809c:	2302      	movs	r3, #2
 800809e:	2200      	movs	r2, #0
 80080a0:	f000 f92a 	bl	80082f8 <_lseek_r>
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080ae:	81a3      	strh	r3, [r4, #12]
 80080b0:	4632      	mov	r2, r6
 80080b2:	463b      	mov	r3, r7
 80080b4:	4628      	mov	r0, r5
 80080b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ba:	f000 b951 	b.w	8008360 <_write_r>

080080be <__sseek>:
 80080be:	b510      	push	{r4, lr}
 80080c0:	460c      	mov	r4, r1
 80080c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c6:	f000 f917 	bl	80082f8 <_lseek_r>
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	bf15      	itete	ne
 80080d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080da:	81a3      	strheq	r3, [r4, #12]
 80080dc:	bf18      	it	ne
 80080de:	81a3      	strhne	r3, [r4, #12]
 80080e0:	bd10      	pop	{r4, pc}

080080e2 <__sclose>:
 80080e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e6:	f000 b94d 	b.w	8008384 <_close_r>

080080ea <__swbuf_r>:
 80080ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ec:	460e      	mov	r6, r1
 80080ee:	4614      	mov	r4, r2
 80080f0:	4605      	mov	r5, r0
 80080f2:	b118      	cbz	r0, 80080fc <__swbuf_r+0x12>
 80080f4:	6a03      	ldr	r3, [r0, #32]
 80080f6:	b90b      	cbnz	r3, 80080fc <__swbuf_r+0x12>
 80080f8:	f7ff fd82 	bl	8007c00 <__sinit>
 80080fc:	69a3      	ldr	r3, [r4, #24]
 80080fe:	60a3      	str	r3, [r4, #8]
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	071a      	lsls	r2, r3, #28
 8008104:	d501      	bpl.n	800810a <__swbuf_r+0x20>
 8008106:	6923      	ldr	r3, [r4, #16]
 8008108:	b943      	cbnz	r3, 800811c <__swbuf_r+0x32>
 800810a:	4621      	mov	r1, r4
 800810c:	4628      	mov	r0, r5
 800810e:	f000 f82b 	bl	8008168 <__swsetup_r>
 8008112:	b118      	cbz	r0, 800811c <__swbuf_r+0x32>
 8008114:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008118:	4638      	mov	r0, r7
 800811a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	6922      	ldr	r2, [r4, #16]
 8008120:	1a98      	subs	r0, r3, r2
 8008122:	6963      	ldr	r3, [r4, #20]
 8008124:	b2f6      	uxtb	r6, r6
 8008126:	4283      	cmp	r3, r0
 8008128:	4637      	mov	r7, r6
 800812a:	dc05      	bgt.n	8008138 <__swbuf_r+0x4e>
 800812c:	4621      	mov	r1, r4
 800812e:	4628      	mov	r0, r5
 8008130:	f7ff ff64 	bl	8007ffc <_fflush_r>
 8008134:	2800      	cmp	r0, #0
 8008136:	d1ed      	bne.n	8008114 <__swbuf_r+0x2a>
 8008138:	68a3      	ldr	r3, [r4, #8]
 800813a:	3b01      	subs	r3, #1
 800813c:	60a3      	str	r3, [r4, #8]
 800813e:	6823      	ldr	r3, [r4, #0]
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	6022      	str	r2, [r4, #0]
 8008144:	701e      	strb	r6, [r3, #0]
 8008146:	6962      	ldr	r2, [r4, #20]
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	429a      	cmp	r2, r3
 800814c:	d004      	beq.n	8008158 <__swbuf_r+0x6e>
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	07db      	lsls	r3, r3, #31
 8008152:	d5e1      	bpl.n	8008118 <__swbuf_r+0x2e>
 8008154:	2e0a      	cmp	r6, #10
 8008156:	d1df      	bne.n	8008118 <__swbuf_r+0x2e>
 8008158:	4621      	mov	r1, r4
 800815a:	4628      	mov	r0, r5
 800815c:	f7ff ff4e 	bl	8007ffc <_fflush_r>
 8008160:	2800      	cmp	r0, #0
 8008162:	d0d9      	beq.n	8008118 <__swbuf_r+0x2e>
 8008164:	e7d6      	b.n	8008114 <__swbuf_r+0x2a>
	...

08008168 <__swsetup_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4b29      	ldr	r3, [pc, #164]	@ (8008210 <__swsetup_r+0xa8>)
 800816c:	4605      	mov	r5, r0
 800816e:	6818      	ldr	r0, [r3, #0]
 8008170:	460c      	mov	r4, r1
 8008172:	b118      	cbz	r0, 800817c <__swsetup_r+0x14>
 8008174:	6a03      	ldr	r3, [r0, #32]
 8008176:	b90b      	cbnz	r3, 800817c <__swsetup_r+0x14>
 8008178:	f7ff fd42 	bl	8007c00 <__sinit>
 800817c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008180:	0719      	lsls	r1, r3, #28
 8008182:	d422      	bmi.n	80081ca <__swsetup_r+0x62>
 8008184:	06da      	lsls	r2, r3, #27
 8008186:	d407      	bmi.n	8008198 <__swsetup_r+0x30>
 8008188:	2209      	movs	r2, #9
 800818a:	602a      	str	r2, [r5, #0]
 800818c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008190:	81a3      	strh	r3, [r4, #12]
 8008192:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008196:	e033      	b.n	8008200 <__swsetup_r+0x98>
 8008198:	0758      	lsls	r0, r3, #29
 800819a:	d512      	bpl.n	80081c2 <__swsetup_r+0x5a>
 800819c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800819e:	b141      	cbz	r1, 80081b2 <__swsetup_r+0x4a>
 80081a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081a4:	4299      	cmp	r1, r3
 80081a6:	d002      	beq.n	80081ae <__swsetup_r+0x46>
 80081a8:	4628      	mov	r0, r5
 80081aa:	f000 f90d 	bl	80083c8 <_free_r>
 80081ae:	2300      	movs	r3, #0
 80081b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081b8:	81a3      	strh	r3, [r4, #12]
 80081ba:	2300      	movs	r3, #0
 80081bc:	6063      	str	r3, [r4, #4]
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f043 0308 	orr.w	r3, r3, #8
 80081c8:	81a3      	strh	r3, [r4, #12]
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	b94b      	cbnz	r3, 80081e2 <__swsetup_r+0x7a>
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d8:	d003      	beq.n	80081e2 <__swsetup_r+0x7a>
 80081da:	4621      	mov	r1, r4
 80081dc:	4628      	mov	r0, r5
 80081de:	f000 f83f 	bl	8008260 <__smakebuf_r>
 80081e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e6:	f013 0201 	ands.w	r2, r3, #1
 80081ea:	d00a      	beq.n	8008202 <__swsetup_r+0x9a>
 80081ec:	2200      	movs	r2, #0
 80081ee:	60a2      	str	r2, [r4, #8]
 80081f0:	6962      	ldr	r2, [r4, #20]
 80081f2:	4252      	negs	r2, r2
 80081f4:	61a2      	str	r2, [r4, #24]
 80081f6:	6922      	ldr	r2, [r4, #16]
 80081f8:	b942      	cbnz	r2, 800820c <__swsetup_r+0xa4>
 80081fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081fe:	d1c5      	bne.n	800818c <__swsetup_r+0x24>
 8008200:	bd38      	pop	{r3, r4, r5, pc}
 8008202:	0799      	lsls	r1, r3, #30
 8008204:	bf58      	it	pl
 8008206:	6962      	ldrpl	r2, [r4, #20]
 8008208:	60a2      	str	r2, [r4, #8]
 800820a:	e7f4      	b.n	80081f6 <__swsetup_r+0x8e>
 800820c:	2000      	movs	r0, #0
 800820e:	e7f7      	b.n	8008200 <__swsetup_r+0x98>
 8008210:	20000034 	.word	0x20000034

08008214 <__swhatbuf_r>:
 8008214:	b570      	push	{r4, r5, r6, lr}
 8008216:	460c      	mov	r4, r1
 8008218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800821c:	2900      	cmp	r1, #0
 800821e:	b096      	sub	sp, #88	@ 0x58
 8008220:	4615      	mov	r5, r2
 8008222:	461e      	mov	r6, r3
 8008224:	da0d      	bge.n	8008242 <__swhatbuf_r+0x2e>
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800822c:	f04f 0100 	mov.w	r1, #0
 8008230:	bf14      	ite	ne
 8008232:	2340      	movne	r3, #64	@ 0x40
 8008234:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008238:	2000      	movs	r0, #0
 800823a:	6031      	str	r1, [r6, #0]
 800823c:	602b      	str	r3, [r5, #0]
 800823e:	b016      	add	sp, #88	@ 0x58
 8008240:	bd70      	pop	{r4, r5, r6, pc}
 8008242:	466a      	mov	r2, sp
 8008244:	f000 f8ae 	bl	80083a4 <_fstat_r>
 8008248:	2800      	cmp	r0, #0
 800824a:	dbec      	blt.n	8008226 <__swhatbuf_r+0x12>
 800824c:	9901      	ldr	r1, [sp, #4]
 800824e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008252:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008256:	4259      	negs	r1, r3
 8008258:	4159      	adcs	r1, r3
 800825a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800825e:	e7eb      	b.n	8008238 <__swhatbuf_r+0x24>

08008260 <__smakebuf_r>:
 8008260:	898b      	ldrh	r3, [r1, #12]
 8008262:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008264:	079d      	lsls	r5, r3, #30
 8008266:	4606      	mov	r6, r0
 8008268:	460c      	mov	r4, r1
 800826a:	d507      	bpl.n	800827c <__smakebuf_r+0x1c>
 800826c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	6123      	str	r3, [r4, #16]
 8008274:	2301      	movs	r3, #1
 8008276:	6163      	str	r3, [r4, #20]
 8008278:	b003      	add	sp, #12
 800827a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800827c:	ab01      	add	r3, sp, #4
 800827e:	466a      	mov	r2, sp
 8008280:	f7ff ffc8 	bl	8008214 <__swhatbuf_r>
 8008284:	9f00      	ldr	r7, [sp, #0]
 8008286:	4605      	mov	r5, r0
 8008288:	4639      	mov	r1, r7
 800828a:	4630      	mov	r0, r6
 800828c:	f7ff fdb2 	bl	8007df4 <_malloc_r>
 8008290:	b948      	cbnz	r0, 80082a6 <__smakebuf_r+0x46>
 8008292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008296:	059a      	lsls	r2, r3, #22
 8008298:	d4ee      	bmi.n	8008278 <__smakebuf_r+0x18>
 800829a:	f023 0303 	bic.w	r3, r3, #3
 800829e:	f043 0302 	orr.w	r3, r3, #2
 80082a2:	81a3      	strh	r3, [r4, #12]
 80082a4:	e7e2      	b.n	800826c <__smakebuf_r+0xc>
 80082a6:	89a3      	ldrh	r3, [r4, #12]
 80082a8:	6020      	str	r0, [r4, #0]
 80082aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ae:	81a3      	strh	r3, [r4, #12]
 80082b0:	9b01      	ldr	r3, [sp, #4]
 80082b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082b6:	b15b      	cbz	r3, 80082d0 <__smakebuf_r+0x70>
 80082b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082bc:	4630      	mov	r0, r6
 80082be:	f000 f80b 	bl	80082d8 <_isatty_r>
 80082c2:	b128      	cbz	r0, 80082d0 <__smakebuf_r+0x70>
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	f023 0303 	bic.w	r3, r3, #3
 80082ca:	f043 0301 	orr.w	r3, r3, #1
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	431d      	orrs	r5, r3
 80082d4:	81a5      	strh	r5, [r4, #12]
 80082d6:	e7cf      	b.n	8008278 <__smakebuf_r+0x18>

080082d8 <_isatty_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4d06      	ldr	r5, [pc, #24]	@ (80082f4 <_isatty_r+0x1c>)
 80082dc:	2300      	movs	r3, #0
 80082de:	4604      	mov	r4, r0
 80082e0:	4608      	mov	r0, r1
 80082e2:	602b      	str	r3, [r5, #0]
 80082e4:	f7fa ff87 	bl	80031f6 <_isatty>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d102      	bne.n	80082f2 <_isatty_r+0x1a>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	b103      	cbz	r3, 80082f2 <_isatty_r+0x1a>
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	20002090 	.word	0x20002090

080082f8 <_lseek_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4d07      	ldr	r5, [pc, #28]	@ (8008318 <_lseek_r+0x20>)
 80082fc:	4604      	mov	r4, r0
 80082fe:	4608      	mov	r0, r1
 8008300:	4611      	mov	r1, r2
 8008302:	2200      	movs	r2, #0
 8008304:	602a      	str	r2, [r5, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	f7fa ff80 	bl	800320c <_lseek>
 800830c:	1c43      	adds	r3, r0, #1
 800830e:	d102      	bne.n	8008316 <_lseek_r+0x1e>
 8008310:	682b      	ldr	r3, [r5, #0]
 8008312:	b103      	cbz	r3, 8008316 <_lseek_r+0x1e>
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	bd38      	pop	{r3, r4, r5, pc}
 8008318:	20002090 	.word	0x20002090

0800831c <_read_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4d07      	ldr	r5, [pc, #28]	@ (800833c <_read_r+0x20>)
 8008320:	4604      	mov	r4, r0
 8008322:	4608      	mov	r0, r1
 8008324:	4611      	mov	r1, r2
 8008326:	2200      	movs	r2, #0
 8008328:	602a      	str	r2, [r5, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	f7fa ff2a 	bl	8003184 <_read>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d102      	bne.n	800833a <_read_r+0x1e>
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	b103      	cbz	r3, 800833a <_read_r+0x1e>
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	20002090 	.word	0x20002090

08008340 <_sbrk_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4d06      	ldr	r5, [pc, #24]	@ (800835c <_sbrk_r+0x1c>)
 8008344:	2300      	movs	r3, #0
 8008346:	4604      	mov	r4, r0
 8008348:	4608      	mov	r0, r1
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	f7fa ff6c 	bl	8003228 <_sbrk>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_sbrk_r+0x1a>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_sbrk_r+0x1a>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	20002090 	.word	0x20002090

08008360 <_write_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d07      	ldr	r5, [pc, #28]	@ (8008380 <_write_r+0x20>)
 8008364:	4604      	mov	r4, r0
 8008366:	4608      	mov	r0, r1
 8008368:	4611      	mov	r1, r2
 800836a:	2200      	movs	r2, #0
 800836c:	602a      	str	r2, [r5, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	f7fa fd0e 	bl	8002d90 <_write>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d102      	bne.n	800837e <_write_r+0x1e>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b103      	cbz	r3, 800837e <_write_r+0x1e>
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	20002090 	.word	0x20002090

08008384 <_close_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4d06      	ldr	r5, [pc, #24]	@ (80083a0 <_close_r+0x1c>)
 8008388:	2300      	movs	r3, #0
 800838a:	4604      	mov	r4, r0
 800838c:	4608      	mov	r0, r1
 800838e:	602b      	str	r3, [r5, #0]
 8008390:	f7fa ff15 	bl	80031be <_close>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d102      	bne.n	800839e <_close_r+0x1a>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	b103      	cbz	r3, 800839e <_close_r+0x1a>
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	20002090 	.word	0x20002090

080083a4 <_fstat_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4d07      	ldr	r5, [pc, #28]	@ (80083c4 <_fstat_r+0x20>)
 80083a8:	2300      	movs	r3, #0
 80083aa:	4604      	mov	r4, r0
 80083ac:	4608      	mov	r0, r1
 80083ae:	4611      	mov	r1, r2
 80083b0:	602b      	str	r3, [r5, #0]
 80083b2:	f7fa ff10 	bl	80031d6 <_fstat>
 80083b6:	1c43      	adds	r3, r0, #1
 80083b8:	d102      	bne.n	80083c0 <_fstat_r+0x1c>
 80083ba:	682b      	ldr	r3, [r5, #0]
 80083bc:	b103      	cbz	r3, 80083c0 <_fstat_r+0x1c>
 80083be:	6023      	str	r3, [r4, #0]
 80083c0:	bd38      	pop	{r3, r4, r5, pc}
 80083c2:	bf00      	nop
 80083c4:	20002090 	.word	0x20002090

080083c8 <_free_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4605      	mov	r5, r0
 80083cc:	2900      	cmp	r1, #0
 80083ce:	d041      	beq.n	8008454 <_free_r+0x8c>
 80083d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083d4:	1f0c      	subs	r4, r1, #4
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	bfb8      	it	lt
 80083da:	18e4      	addlt	r4, r4, r3
 80083dc:	f7ff fe36 	bl	800804c <__malloc_lock>
 80083e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008458 <_free_r+0x90>)
 80083e2:	6813      	ldr	r3, [r2, #0]
 80083e4:	b933      	cbnz	r3, 80083f4 <_free_r+0x2c>
 80083e6:	6063      	str	r3, [r4, #4]
 80083e8:	6014      	str	r4, [r2, #0]
 80083ea:	4628      	mov	r0, r5
 80083ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083f0:	f7ff be32 	b.w	8008058 <__malloc_unlock>
 80083f4:	42a3      	cmp	r3, r4
 80083f6:	d908      	bls.n	800840a <_free_r+0x42>
 80083f8:	6820      	ldr	r0, [r4, #0]
 80083fa:	1821      	adds	r1, r4, r0
 80083fc:	428b      	cmp	r3, r1
 80083fe:	bf01      	itttt	eq
 8008400:	6819      	ldreq	r1, [r3, #0]
 8008402:	685b      	ldreq	r3, [r3, #4]
 8008404:	1809      	addeq	r1, r1, r0
 8008406:	6021      	streq	r1, [r4, #0]
 8008408:	e7ed      	b.n	80083e6 <_free_r+0x1e>
 800840a:	461a      	mov	r2, r3
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	b10b      	cbz	r3, 8008414 <_free_r+0x4c>
 8008410:	42a3      	cmp	r3, r4
 8008412:	d9fa      	bls.n	800840a <_free_r+0x42>
 8008414:	6811      	ldr	r1, [r2, #0]
 8008416:	1850      	adds	r0, r2, r1
 8008418:	42a0      	cmp	r0, r4
 800841a:	d10b      	bne.n	8008434 <_free_r+0x6c>
 800841c:	6820      	ldr	r0, [r4, #0]
 800841e:	4401      	add	r1, r0
 8008420:	1850      	adds	r0, r2, r1
 8008422:	4283      	cmp	r3, r0
 8008424:	6011      	str	r1, [r2, #0]
 8008426:	d1e0      	bne.n	80083ea <_free_r+0x22>
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	6053      	str	r3, [r2, #4]
 800842e:	4408      	add	r0, r1
 8008430:	6010      	str	r0, [r2, #0]
 8008432:	e7da      	b.n	80083ea <_free_r+0x22>
 8008434:	d902      	bls.n	800843c <_free_r+0x74>
 8008436:	230c      	movs	r3, #12
 8008438:	602b      	str	r3, [r5, #0]
 800843a:	e7d6      	b.n	80083ea <_free_r+0x22>
 800843c:	6820      	ldr	r0, [r4, #0]
 800843e:	1821      	adds	r1, r4, r0
 8008440:	428b      	cmp	r3, r1
 8008442:	bf04      	itt	eq
 8008444:	6819      	ldreq	r1, [r3, #0]
 8008446:	685b      	ldreq	r3, [r3, #4]
 8008448:	6063      	str	r3, [r4, #4]
 800844a:	bf04      	itt	eq
 800844c:	1809      	addeq	r1, r1, r0
 800844e:	6021      	streq	r1, [r4, #0]
 8008450:	6054      	str	r4, [r2, #4]
 8008452:	e7ca      	b.n	80083ea <_free_r+0x22>
 8008454:	bd38      	pop	{r3, r4, r5, pc}
 8008456:	bf00      	nop
 8008458:	2000208c 	.word	0x2000208c

0800845c <_init>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	bf00      	nop
 8008460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008462:	bc08      	pop	{r3}
 8008464:	469e      	mov	lr, r3
 8008466:	4770      	bx	lr

08008468 <_fini>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	bf00      	nop
 800846c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846e:	bc08      	pop	{r3}
 8008470:	469e      	mov	lr, r3
 8008472:	4770      	bx	lr
