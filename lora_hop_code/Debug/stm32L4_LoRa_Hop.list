
stm32L4_LoRa_Hop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008364  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080084ec  080084ec  000094ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800864c  0800864c  0000a084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800864c  0800864c  0000964c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008654  08008654  0000a084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008654  08008654  00009654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008658  08008658  00009658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800865c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020d8  20000084  080086e0  0000a084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000215c  080086e0  0000a15c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159be  00000000  00000000  0000a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003130  00000000  00000000  0001fa72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00022ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e94  00000000  00000000  00023e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296bf  00000000  00000000  00024d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d5b  00000000  00000000  0004e3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f69a0  00000000  00000000  00064136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015aad6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005408  00000000  00000000  0015ab1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0015ff24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080084d4 	.word	0x080084d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	080084d4 	.word	0x080084d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <init_LL>:
 *
 * @param LL_handler* h_LL  linked list handler.
 *
 * @return: none
 */
void init_LL(LL_handler* h_LL){
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  h_LL->head = 0;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2200      	movs	r2, #0
 8000500:	801a      	strh	r2, [r3, #0]
  h_LL->tail = 0;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2200      	movs	r2, #0
 8000506:	805a      	strh	r2, [r3, #2]
  h_LL->ins_idx = 0;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	809a      	strh	r2, [r3, #4]

  h_LL->ll_status = LL_EMPTY;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2201      	movs	r2, #1
 8000512:	731a      	strb	r2, [r3, #12]

  // init free node sequence:
  for(uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000514:	2300      	movs	r3, #0
 8000516:	81fb      	strh	r3, [r7, #14]
 8000518:	e00b      	b.n	8000532 <init_LL+0x3e>

    h_LL->ll_buff[i].next_free_idx = i + 1;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	689a      	ldr	r2, [r3, #8]
 800051e:	89fb      	ldrh	r3, [r7, #14]
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	4413      	add	r3, r2
 8000524:	89fa      	ldrh	r2, [r7, #14]
 8000526:	3201      	adds	r2, #1
 8000528:	b292      	uxth	r2, r2
 800052a:	80da      	strh	r2, [r3, #6]
  for(uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 800052c:	89fb      	ldrh	r3, [r7, #14]
 800052e:	3301      	adds	r3, #1
 8000530:	81fb      	strh	r3, [r7, #14]
 8000532:	89fb      	ldrh	r3, [r7, #14]
 8000534:	2b63      	cmp	r3, #99	@ 0x63
 8000536:	d9f0      	bls.n	800051a <init_LL+0x26>
  }

  // link last element to the flag "LL IS FULL"
  h_LL->ll_buff[BUFF_FIFO_SIZE - 1].next_free_idx = LL_IDX_IS_FULL;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	f503 7346 	add.w	r3, r3, #792	@ 0x318
 8000540:	2264      	movs	r2, #100	@ 0x64
 8000542:	80da      	strh	r2, [r3, #6]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <add_pkt_LL>:
 * @param uint16_t    idx_main_buff  index in the main RX buffer associated to this element in the LL.
 *
 * @return: - LL_IDX_IS_FULL if the LL is full;
 *          - Insertion index on success;
 */
uint16_t add_pkt_LL(LL_handler* h_LL, uint16_t idx_main_buff){
 8000550:	b480      	push	{r7}
 8000552:	b087      	sub	sp, #28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	807b      	strh	r3, [r7, #2]
  if (h_LL->ll_status == LL_FULL) return LL_IDX_IS_FULL;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	7b1b      	ldrb	r3, [r3, #12]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d101      	bne.n	8000568 <add_pkt_LL+0x18>
 8000564:	2364      	movs	r3, #100	@ 0x64
 8000566:	e03c      	b.n	80005e2 <add_pkt_LL+0x92>

  // LL not full...

  // default node added when LL is empty
  LL_node new_node = {
 8000568:	887b      	ldrh	r3, [r7, #2]
 800056a:	81bb      	strh	r3, [r7, #12]
 800056c:	2367      	movs	r3, #103	@ 0x67
 800056e:	81fb      	strh	r3, [r7, #14]
 8000570:	2366      	movs	r3, #102	@ 0x66
 8000572:	823b      	strh	r3, [r7, #16]
 8000574:	2300      	movs	r3, #0
 8000576:	827b      	strh	r3, [r7, #18]
    .next_element_idx = LL_IDX_IS_TAIL,
    .prev_element_idx = LL_IDX_IS_HEAD,
    .next_free_idx = 0  // used only when freeing up slots
  };

  uint16_t old_tail_idx = h_LL->tail;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	885b      	ldrh	r3, [r3, #2]
 800057c:	82fb      	strh	r3, [r7, #22]
  uint16_t new_tail_idx = h_LL->ins_idx;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	889b      	ldrh	r3, [r3, #4]
 8000582:	82bb      	strh	r3, [r7, #20]

  // if some nodes are already in the LL -> link the new one
  if (h_LL->ll_status != LL_EMPTY){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	7b1b      	ldrb	r3, [r3, #12]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d00b      	beq.n	80005a4 <add_pkt_LL+0x54>
    // old tail becomes the previous node of the new tail
    new_node.prev_element_idx = old_tail_idx;
 800058c:	8afb      	ldrh	r3, [r7, #22]
 800058e:	823b      	strh	r3, [r7, #16]

    h_LL->ll_buff[old_tail_idx].next_element_idx = new_tail_idx;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	689a      	ldr	r2, [r3, #8]
 8000594:	8afb      	ldrh	r3, [r7, #22]
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	4413      	add	r3, r2
 800059a:	8aba      	ldrh	r2, [r7, #20]
 800059c:	805a      	strh	r2, [r3, #2]
    h_LL->tail = new_tail_idx;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	8aba      	ldrh	r2, [r7, #20]
 80005a2:	805a      	strh	r2, [r3, #2]
  }

  // update next insertion index
  h_LL->ins_idx = h_LL->ll_buff[new_tail_idx].next_free_idx;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	8abb      	ldrh	r3, [r7, #20]
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	4413      	add	r3, r2
 80005ae:	88da      	ldrh	r2, [r3, #6]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	809a      	strh	r2, [r3, #4]

  // update LL status after inserion
  if (h_LL->ins_idx == LL_IDX_IS_FULL) h_LL->ll_status = LL_FULL;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	889b      	ldrh	r3, [r3, #4]
 80005b8:	2b64      	cmp	r3, #100	@ 0x64
 80005ba:	d103      	bne.n	80005c4 <add_pkt_LL+0x74>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	731a      	strb	r2, [r3, #12]
 80005c2:	e002      	b.n	80005ca <add_pkt_LL+0x7a>
  else h_LL->ll_status = LL_AVAILABLE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2202      	movs	r2, #2
 80005c8:	731a      	strb	r2, [r3, #12]

  h_LL->ll_buff[new_tail_idx] = new_node;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	689a      	ldr	r2, [r3, #8]
 80005ce:	8abb      	ldrh	r3, [r7, #20]
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	4413      	add	r3, r2
 80005d4:	461a      	mov	r2, r3
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	cb03      	ldmia	r3!, {r0, r1}
 80005dc:	6010      	str	r0, [r2, #0]
 80005de:	6051      	str	r1, [r2, #4]

  return new_tail_idx;
 80005e0:	8abb      	ldrh	r3, [r7, #20]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	371c      	adds	r7, #28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <remove_pkt_LL>:
 * @param uint16_t    t_idx  index in the target buffer (LL internal buffer) to be removed.
 *
 * @return: - LL_IDX_IS_EMPTY if the LL is empty;
 *          - 0 on success;
 */
uint16_t remove_pkt_LL(LL_handler* h_LL, uint16_t t_idx){
 80005ee:	b480      	push	{r7}
 80005f0:	b085      	sub	sp, #20
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	460b      	mov	r3, r1
 80005f8:	807b      	strh	r3, [r7, #2]
  // if LL is empty no pkt can be removed
  if (h_LL->ll_status == LL_EMPTY) return LL_IDX_IS_EMPTY;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7b1b      	ldrb	r3, [r3, #12]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d101      	bne.n	8000606 <remove_pkt_LL+0x18>
 8000602:	2365      	movs	r3, #101	@ 0x65
 8000604:	e055      	b.n	80006b2 <remove_pkt_LL+0xc4>

  // at least one node exists...

  LL_node c_node = h_LL->ll_buff[t_idx];
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	689a      	ldr	r2, [r3, #8]
 800060a:	887b      	ldrh	r3, [r7, #2]
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	441a      	add	r2, r3
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	6810      	ldr	r0, [r2, #0]
 8000616:	6851      	ldr	r1, [r2, #4]
 8000618:	c303      	stmia	r3!, {r0, r1}

  if ((c_node.prev_element_idx == LL_IDX_IS_HEAD) & (c_node.next_element_idx == LL_IDX_IS_TAIL)){
 800061a:	89bb      	ldrh	r3, [r7, #12]
 800061c:	2b66      	cmp	r3, #102	@ 0x66
 800061e:	bf0c      	ite	eq
 8000620:	2301      	moveq	r3, #1
 8000622:	2300      	movne	r3, #0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	897b      	ldrh	r3, [r7, #10]
 8000628:	2b67      	cmp	r3, #103	@ 0x67
 800062a:	bf0c      	ite	eq
 800062c:	2301      	moveq	r3, #1
 800062e:	2300      	movne	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	4013      	ands	r3, r2
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <remove_pkt_LL+0x54>
    // last node in the LL
    h_LL->ll_status = LL_EMPTY;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	731a      	strb	r2, [r3, #12]
 8000640:	e02b      	b.n	800069a <remove_pkt_LL+0xac>

  } else {

    if (c_node.prev_element_idx == LL_IDX_IS_HEAD){         /* removing head element */
 8000642:	89bb      	ldrh	r3, [r7, #12]
 8000644:	2b66      	cmp	r3, #102	@ 0x66
 8000646:	d10b      	bne.n	8000660 <remove_pkt_LL+0x72>

      h_LL->head = c_node.next_element_idx;
 8000648:	897a      	ldrh	r2, [r7, #10]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	801a      	strh	r2, [r3, #0]
      h_LL->ll_buff[h_LL->head].prev_element_idx = LL_IDX_IS_HEAD;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689a      	ldr	r2, [r3, #8]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	4413      	add	r3, r2
 800065a:	2266      	movs	r2, #102	@ 0x66
 800065c:	809a      	strh	r2, [r3, #4]
 800065e:	e01c      	b.n	800069a <remove_pkt_LL+0xac>

    } else if (c_node.next_element_idx == LL_IDX_IS_TAIL){  /* removing tail element */
 8000660:	897b      	ldrh	r3, [r7, #10]
 8000662:	2b67      	cmp	r3, #103	@ 0x67
 8000664:	d10b      	bne.n	800067e <remove_pkt_LL+0x90>

      h_LL->tail = c_node.prev_element_idx;
 8000666:	89ba      	ldrh	r2, [r7, #12]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	805a      	strh	r2, [r3, #2]
      h_LL->ll_buff[h_LL->tail].next_element_idx = LL_IDX_IS_TAIL;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	689a      	ldr	r2, [r3, #8]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	885b      	ldrh	r3, [r3, #2]
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	4413      	add	r3, r2
 8000678:	2267      	movs	r2, #103	@ 0x67
 800067a:	805a      	strh	r2, [r3, #2]
 800067c:	e00d      	b.n	800069a <remove_pkt_LL+0xac>

    } else {                                                /* removing intermediate node */

      h_LL->ll_buff[c_node.prev_element_idx].next_element_idx = c_node.next_element_idx;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	689a      	ldr	r2, [r3, #8]
 8000682:	89bb      	ldrh	r3, [r7, #12]
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	4413      	add	r3, r2
 8000688:	897a      	ldrh	r2, [r7, #10]
 800068a:	805a      	strh	r2, [r3, #2]
      h_LL->ll_buff[c_node.next_element_idx].prev_element_idx = c_node.prev_element_idx;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	897b      	ldrh	r3, [r7, #10]
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	4413      	add	r3, r2
 8000696:	89ba      	ldrh	r2, [r7, #12]
 8000698:	809a      	strh	r2, [r3, #4]
    }
  }

  // Update free slot sequence for O(1) isnertions
  h_LL->ll_buff[t_idx].next_free_idx = h_LL->ins_idx;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	887b      	ldrh	r3, [r7, #2]
 80006a0:	00db      	lsls	r3, r3, #3
 80006a2:	4413      	add	r3, r2
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	8892      	ldrh	r2, [r2, #4]
 80006a8:	80da      	strh	r2, [r3, #6]
  h_LL->ins_idx = t_idx;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	887a      	ldrh	r2, [r7, #2]
 80006ae:	809a      	strh	r2, [r3, #4]

  return 0;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <get_head_LL>:
 * @param LL_handler* h_LL   linked list handler.
 *
 * @return: - LL_IDX_IS_EMPTY if the LL is empty;
 *          - index in main buffer on success;
 */
uint16_t get_head_LL(LL_handler* h_LL){
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  // return index in main buffer (RX FIFO) marked as head of the sequence
  if (h_LL->ll_status != LL_EMPTY) return h_LL->head;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	7b1b      	ldrb	r3, [r3, #12]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d002      	beq.n	80006d4 <get_head_LL+0x16>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	e000      	b.n	80006d6 <get_head_LL+0x18>

  // if LL is empty, return false index
  return LL_IDX_IS_EMPTY;
 80006d4:	2365      	movs	r3, #101	@ 0x65
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <get_tail_LL>:
 * @param LL_handler* h_LL   linked list handler.
 *
 * @return: - LL_IDX_IS_EMPTY if the LL is empty;
 *          - index in main buffer on success;
 */
uint16_t get_tail_LL(LL_handler* h_LL){
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
  // return index in main buffer (RX FIFO) marked as tail of the sequence
  if (h_LL->ll_status != LL_EMPTY) return h_LL->tail;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7b1b      	ldrb	r3, [r3, #12]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d002      	beq.n	80006f8 <get_tail_LL+0x16>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	885b      	ldrh	r3, [r3, #2]
 80006f6:	e000      	b.n	80006fa <get_tail_LL+0x18>

  // if LL is empty, return false index
  return LL_IDX_IS_EMPTY;
 80006f8:	2365      	movs	r3, #101	@ 0x65
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <LL_get_RXbuff_idx>:
 * @param LL_handler* h_LL   linked list handler.
 *
 * @return: - LL_IDX_IS_EMPTY if the LL is empty;
 *          - index in main buffer on success;
 */
uint16_t LL_get_RXbuff_idx(LL_handler* h_LL, uint16_t idx){
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
 800070e:	460b      	mov	r3, r1
 8000710:	807b      	strh	r3, [r7, #2]
  // return index in main buffer (RX FIFO) corresponding to this LL element
  return h_LL->ll_buff[idx].idx_rx_buff;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	689a      	ldr	r2, [r3, #8]
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	4413      	add	r3, r2
 800071c:	881b      	ldrh	r3, [r3, #0]
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <get_prev_LL>:
 *
 * @return: - LL_IDX_IS_EMPTY if the LL is empty;
 *          - index of next element otherwise.
 *            (OBS!!! if CURR element is head, prev element is LL_IDX_IS_HEAD.
 */
uint16_t get_prev_LL(LL_handler* h_LL, uint16_t curr_idx){
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	460b      	mov	r3, r1
 8000734:	807b      	strh	r3, [r7, #2]
  // return index of the next element in the LL
  if (h_LL->ll_status != LL_EMPTY) return h_LL->ll_buff[curr_idx].prev_element_idx;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	7b1b      	ldrb	r3, [r3, #12]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d006      	beq.n	800074c <get_prev_LL+0x22>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	689a      	ldr	r2, [r3, #8]
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	4413      	add	r3, r2
 8000748:	889b      	ldrh	r3, [r3, #4]
 800074a:	e000      	b.n	800074e <get_prev_LL+0x24>

  // if LL is empty, return false index
  return LL_IDX_IS_EMPTY;
 800074c:	2365      	movs	r3, #101	@ 0x65
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <on_rx_event>:
 *          STATUS FLAGS (in .status_flags field):
 *          - EVT_SCHEDULE_TX set if a new pkt has been added to the RX FIFO. The controller should TX
 *            that pkt (correpsoning to the tail in the LL TX buffer) in the next TX event.
 *
 */
events_flags on_rx_event(rfm95_handle_t* h_rfm, h_rx_tx* h_fifo){
 800075a:	b580      	push	{r7, lr}
 800075c:	b096      	sub	sp, #88	@ 0x58
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	6039      	str	r1, [r7, #0]

  /* track error flags */
  events_flags app_flags = {0};
 8000764:	2300      	movs	r3, #0
 8000766:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

  /* strcuture to hold all the informations */
  bc_pkt rx_pkt = {0};
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	2240      	movs	r2, #64	@ 0x40
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f007 fb14 	bl	8007da0 <memset>

  /* 1st track SNR and RSSI of the last received packet */
  int8_t  snr;
  int16_t rssi;
  if(!rfm95_getSNR(h_rfm, &snr))   app_flags.err_flags |= EVT_RFM_SPI_ERR;
 8000778:	f107 030f 	add.w	r3, r7, #15
 800077c:	4619      	mov	r1, r3
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f001 f98c 	bl	8001a9c <rfm95_getSNR>
 8000784:	4603      	mov	r3, r0
 8000786:	f083 0301 	eor.w	r3, r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d006      	beq.n	800079e <on_rx_event+0x44>
 8000790:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  if(!rfm95_getRSSI(h_rfm, &rssi)) app_flags.err_flags |= EVT_RFM_SPI_ERR;
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	4619      	mov	r1, r3
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f001 f95a 	bl	8001a5e <rfm95_getRSSI>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f083 0301 	eor.w	r3, r3, #1
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d006      	beq.n	80007c4 <on_rx_event+0x6a>
 80007b6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

  /* set standby mode to read data from rfm95 */
  if(!rfm95_stdby(h_rfm)) app_flags.err_flags |= EVT_RFM_SPI_ERR;
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f001 f9aa 	bl	8001b1e <rfm95_stdby>
 80007ca:	4603      	mov	r3, r0
 80007cc:	f083 0301 	eor.w	r3, r3, #1
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d006      	beq.n	80007e4 <on_rx_event+0x8a>
 80007d6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

  /* read received data */
  if(!rfm95_receive(h_rfm, &rx_pkt.pl[0], &rx_pkt.pl_len))app_flags.err_flags |= EVT_RFM_RX_ERR;
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	f103 0208 	add.w	r2, r3, #8
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	3309      	adds	r3, #9
 80007f2:	4619      	mov	r1, r3
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f001 fb25 	bl	8001e44 <rfm95_receive>
 80007fa:	4603      	mov	r3, r0
 80007fc:	f083 0301 	eor.w	r3, r3, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d006      	beq.n	8000814 <on_rx_event+0xba>
 8000806:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800080a:	f043 0302 	orr.w	r3, r3, #2
 800080e:	b2db      	uxtb	r3, r3
 8000810:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

  /* set RFM95 back to continuous RX mode */
  if(!rfm95_enter_rx_mode(h_rfm)) app_flags.err_flags |= EVT_RFM_SPI_ERR;
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f001 faa4 	bl	8001d62 <rfm95_enter_rx_mode>
 800081a:	4603      	mov	r3, r0
 800081c:	f083 0301 	eor.w	r3, r3, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d006      	beq.n	8000834 <on_rx_event+0xda>
 8000826:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

  /* If any error occurred, stop code here */
  if(app_flags.err_flags != 0) return app_flags;
 8000834:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000838:	2b00      	cmp	r3, #0
 800083a:	d004      	beq.n	8000846 <on_rx_event+0xec>
 800083c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000840:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8000844:	e075      	b.n	8000932 <on_rx_event+0x1d8>
//
//  memcpy(rx_pkt.pl, sample_buffer, ENV_NODE_PYL_SIZE + 5);
//  rx_pkt.pl_len = ENV_NODE_PYL_SIZE + 5;

  /* preliminary check on payload size */
  if (rx_pkt.pl_len < ENV_NODE_PYL_SIZE){
 8000846:	7e3b      	ldrb	r3, [r7, #24]
 8000848:	2b29      	cmp	r3, #41	@ 0x29
 800084a:	d80b      	bhi.n	8000864 <on_rx_event+0x10a>
    app_flags.err_flags |= EVT_BAD_PKT_FORMAT;
 800084c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    return app_flags;
 800085a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800085e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8000862:	e066      	b.n	8000932 <on_rx_event+0x1d8>
  }

  /* read received sync word */
  uint16_t rx_sync = (uint16_t)((rx_pkt.pl[SYNC_WORD_POS] << 8) | rx_pkt.pl[SYNC_WORD_POS+1]);
 8000864:	7e7b      	ldrb	r3, [r7, #25]
 8000866:	b21b      	sxth	r3, r3
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	b21a      	sxth	r2, r3
 800086c:	7ebb      	ldrb	r3, [r7, #26]
 800086e:	b21b      	sxth	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b21b      	sxth	r3, r3
 8000874:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

  /* clear flags */
  app_flags.err_flags &= 0x00;
 8000878:	2300      	movs	r3, #0
 800087a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

  /* Extract informations */

  rx_pkt.ack = false;                                   // init as NACK
 800087e:	2300      	movs	r3, #0
 8000880:	747b      	strb	r3, [r7, #17]
  rx_pkt.tx_attempts = 0;                               // full attempts available
 8000882:	2300      	movs	r3, #0
 8000884:	743b      	strb	r3, [r7, #16]
  rx_pkt.nodeID = rx_pkt.pl[NODE_ID_POS];               // byte0 = nodeID
 8000886:	7f3b      	ldrb	r3, [r7, #28]
 8000888:	74bb      	strb	r3, [r7, #18]

  // byte1 and byte2 = pktID
  rx_pkt.pktID = (rx_pkt.pl[PKT_ID_MSB_POS] << 8) | rx_pkt.pl[PKT_ID_LSB_POS];
 800088a:	7f7b      	ldrb	r3, [r7, #29]
 800088c:	b21b      	sxth	r3, r3
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	b21a      	sxth	r2, r3
 8000892:	7fbb      	ldrb	r3, [r7, #30]
 8000894:	b21b      	sxth	r3, r3
 8000896:	4313      	orrs	r3, r2
 8000898:	b21b      	sxth	r3, r3
 800089a:	b29b      	uxth	r3, r3
 800089c:	82bb      	strh	r3, [r7, #20]

  // rx_bcID and tx_bcID depend on subsequent conditions

  if ((rx_pkt.pl_len == ENV_NODE_PYL_SIZE) && (rx_sync == SYNC_WORD_ENV)) {       /* receiving from an ENV NODE */
 800089e:	7e3b      	ldrb	r3, [r7, #24]
 80008a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80008a2:	d111      	bne.n	80008c8 <on_rx_event+0x16e>
 80008a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80008a8:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d10b      	bne.n	80008c8 <on_rx_event+0x16e>

    app_flags = process_envNode_up(h_fifo, &rx_pkt, rssi);
 80008b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	6838      	ldr	r0, [r7, #0]
 80008bc:	f000 fa21 	bl	8000d02 <process_envNode_up>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80008c6:	e030      	b.n	800092a <on_rx_event+0x1d0>

  } else if ((rx_pkt.pl_len > ENV_NODE_PYL_SIZE) && (rx_sync == SYNC_WORD_BC)) {  /* receiving fron BC NODE -> some hops happened */
 80008c8:	7e3b      	ldrb	r3, [r7, #24]
 80008ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80008cc:	d926      	bls.n	800091c <on_rx_event+0x1c2>
 80008ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80008d2:	f241 12aa 	movw	r2, #4522	@ 0x11aa
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d120      	bne.n	800091c <on_rx_event+0x1c2>

    /*
     * if receiving from bcNode, at leat one Hop happened
     * -> extarct 1st bc ID and last bc ID in the hopping sequence
     */
    rx_pkt.tx_bcID = rx_pkt.pl[rx_pkt.pl_len - 1];  // last RX byte corresponds to the BC_ID of the last BC in the hop-sequence
 80008da:	7e3b      	ldrb	r3, [r7, #24]
 80008dc:	3b01      	subs	r3, #1
 80008de:	3358      	adds	r3, #88	@ 0x58
 80008e0:	443b      	add	r3, r7
 80008e2:	f813 3c3f 	ldrb.w	r3, [r3, #-63]
 80008e6:	75fb      	strb	r3, [r7, #23]

    // get the BC_ID of the 1st BC in the hop-sequence
    rx_pkt.rx_bcID = rx_pkt.pl[BC_ID1_POS];
 80008e8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80008ec:	75bb      	strb	r3, [r7, #22]

    if (rx_pkt.tx_bcID > MY_BC_ID) {    /* RX from node further in the BCs sequence --> UPLINK */
 80008ee:	7dfb      	ldrb	r3, [r7, #23]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d909      	bls.n	8000908 <on_rx_event+0x1ae>

      app_flags = process_bcNode_up(h_fifo, &rx_pkt);
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4619      	mov	r1, r3
 80008fa:	6838      	ldr	r0, [r7, #0]
 80008fc:	f000 f946 	bl	8000b8c <process_bcNode_up>
 8000900:	4603      	mov	r3, r0
 8000902:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    if (rx_pkt.tx_bcID > MY_BC_ID) {    /* RX from node further in the BCs sequence --> UPLINK */
 8000906:	e010      	b.n	800092a <on_rx_event+0x1d0>

    } else {                            /* RX from node ahead in the BCs sequence --> ACK */

      app_flags = process_bcNode_ack(h_fifo, &rx_pkt);
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4619      	mov	r1, r3
 800090e:	6838      	ldr	r0, [r7, #0]
 8000910:	f000 face 	bl	8000eb0 <process_bcNode_ack>
 8000914:	4603      	mov	r3, r0
 8000916:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    if (rx_pkt.tx_bcID > MY_BC_ID) {    /* RX from node further in the BCs sequence --> UPLINK */
 800091a:	e006      	b.n	800092a <on_rx_event+0x1d0>

    }

  } else {                              /* BAD PKT format */

    app_flags.err_flags |= EVT_BAD_PKT_FORMAT;
 800091c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	b2db      	uxtb	r3, r3
 8000926:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

  }

  return app_flags;
 800092a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800092e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
}
 8000932:	2300      	movs	r3, #0
 8000934:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8000938:	f362 0307 	bfi	r3, r2, #0, #8
 800093c:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000940:	f362 230f 	bfi	r3, r2, #8, #8
 8000944:	4618      	mov	r0, r3
 8000946:	3758      	adds	r7, #88	@ 0x58
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <on_tx_event>:
 *                             --> The next TX event should be rescheduled with short wait time
 *          - EVT_SCHEDULE_TX set if the TX queue contains only "old PKTs" (i.e. waiting for reTX)
 *                             --> The next TX event should be rescheduled with long wait time
 *
 */
events_flags on_tx_event(rfm95_handle_t* h_rfm, h_rx_tx* h_fifo){
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	@ 0x50
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  /* track error flags */
  events_flags app_flags = {0};
 8000956:	2300      	movs	r3, #0
 8000958:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  uint16_t fifo_status;
  uint16_t tx_idx = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  uint8_t rfm_reg;

  // check RFM95 MODEM status:
  if(!rfm95_getModemStatus(h_rfm, &rfm_reg)) app_flags.err_flags |= EVT_RFM_SPI_ERR;
 8000962:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 8000966:	4619      	mov	r1, r3
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f001 f8b9 	bl	8001ae0 <rfm95_getModemStatus>
 800096e:	4603      	mov	r3, r0
 8000970:	f083 0301 	eor.w	r3, r3, #1
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d006      	beq.n	8000988 <on_tx_event+0x3c>
 800097a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  /* If any error occurred, stop code here */
  if(app_flags.err_flags != 0) goto cleanup;
 8000988:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800098c:	2b00      	cmp	r3, #0
 800098e:	f040 80cf 	bne.w	8000b30 <on_tx_event+0x1e4>

  if((rfm_reg & 0x03) != 0) {
 8000992:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000996:	f003 0303 	and.w	r3, r3, #3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d007      	beq.n	80009ae <on_tx_event+0x62>
    /*
     * RFM modem in "signal deteted" or "signal synchronized
     * -> Skip this TX and wait for the end of the event
     */
    app_flags.status_flags |= EVT_RFM_MODEM_RX;
 800099e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    goto cleanup;
 80009ac:	e0c7      	b.n	8000b3e <on_tx_event+0x1f2>
  }

  /* set standby mode to read data from rfm95 */
  if(!rfm95_stdby(h_rfm)) app_flags.err_flags |= EVT_RFM_SPI_ERR;
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f001 f8b5 	bl	8001b1e <rfm95_stdby>
 80009b4:	4603      	mov	r3, r0
 80009b6:	f083 0301 	eor.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d006      	beq.n	80009ce <on_tx_event+0x82>
 80009c0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  if(app_flags.err_flags != 0) goto cleanup;
 80009ce:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f040 80ae 	bne.w	8000b34 <on_tx_event+0x1e8>

  /* clear flags */
  app_flags.err_flags &= 0x00;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  uint8_t pyl_buff[LORA_PAYLOAD_MAX_SIZE];
  uint8_t pyl_len;

  /* 1st try looking for "new PKTs" with no TX yet -> Higher priority */
  tx_idx = get_nextTX_pkt(h_fifo, TX_SEQ_ENTRY_TAIL, pyl_buff, &pyl_len);
 80009de:	f107 030b 	add.w	r3, r7, #11
 80009e2:	f107 020c 	add.w	r2, r7, #12
 80009e6:	2100      	movs	r1, #0
 80009e8:	6838      	ldr	r0, [r7, #0]
 80009ea:	f000 fb86 	bl	80010fa <get_nextTX_pkt>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

  if(tx_idx == LL_BUFF_EMPTY) {                   /* No events to TX */
 80009f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80009f8:	2b72      	cmp	r3, #114	@ 0x72
 80009fa:	d107      	bne.n	8000a0c <on_tx_event+0xc0>

    app_flags.status_flags |= EVT_TX_FIFO_EMPTY;
 80009fc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    goto cleanup;
 8000a0a:	e098      	b.n	8000b3e <on_tx_event+0x1f2>

  } else if(tx_idx == RX_BUFF_IDX_NOT_DEFINED) {  /* No "New PKTs present */
 8000a0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a10:	2b71      	cmp	r3, #113	@ 0x71
 8000a12:	d10a      	bne.n	8000a2a <on_tx_event+0xde>

    /* TX oldest one */
    tx_idx = get_nextTX_pkt(h_fifo, TX_SEQ_ENTRY_HEAD, pyl_buff, &pyl_len);
 8000a14:	f107 030b 	add.w	r3, r7, #11
 8000a18:	f107 020c 	add.w	r2, r7, #12
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	6838      	ldr	r0, [r7, #0]
 8000a20:	f000 fb6b 	bl	80010fa <get_nextTX_pkt>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  } else {
    // RFU...
  }

  /* TX payload here */
  if (!rfm95_send(h_rfm, pyl_buff, pyl_len)) app_flags.err_flags |= EVT_RFM_SPI_ERR;
 8000a2a:	7afb      	ldrb	r3, [r7, #11]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	4619      	mov	r1, r3
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f001 f899 	bl	8001b6c <rfm95_send>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	f083 0301 	eor.w	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d006      	beq.n	8000a54 <on_tx_event+0x108>
 8000a46:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  if(app_flags.err_flags != 0) goto cleanup;
 8000a54:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d16d      	bne.n	8000b38 <on_tx_event+0x1ec>

  /* Set RFM back to RX mode */
  if (!rfm95_enter_rx_mode(h_rfm)) app_flags.err_flags |= EVT_RFM_SPI_ERR;
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f001 f980 	bl	8001d62 <rfm95_enter_rx_mode>
 8000a62:	4603      	mov	r3, r0
 8000a64:	f083 0301 	eor.w	r3, r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d006      	beq.n	8000a7c <on_tx_event+0x130>
 8000a6e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  if(app_flags.err_flags != 0) goto cleanup;
 8000a7c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d15b      	bne.n	8000b3c <on_tx_event+0x1f0>

  /* Update TX attempts for this PKT */
  h_fifo->h_rx[tx_idx].pkt.tx_attempts += 1;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	6859      	ldr	r1, [r3, #4]
 8000a88:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	011b      	lsls	r3, r3, #4
 8000a90:	4413      	add	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	440b      	add	r3, r1
 8000a96:	7919      	ldrb	r1, [r3, #4]
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	6858      	ldr	r0, [r3, #4]
 8000a9c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	4413      	add	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4403      	add	r3, r0
 8000aaa:	1c4a      	adds	r2, r1, #1
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	711a      	strb	r2, [r3, #4]
  if (h_fifo->h_rx[tx_idx].pkt.tx_attempts >= BC_TX_ATTEMPTS) { /* remove this PKT from TX queue */
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	6859      	ldr	r1, [r3, #4]
 8000ab4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000ab8:	4613      	mov	r3, r2
 8000aba:	011b      	lsls	r3, r3, #4
 8000abc:	4413      	add	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	791b      	ldrb	r3, [r3, #4]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d905      	bls.n	8000ad4 <on_tx_event+0x188>

    tx_queue_remove(h_fifo, tx_idx);
 8000ac8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000acc:	4619      	mov	r1, r3
 8000ace:	6838      	ldr	r0, [r7, #0]
 8000ad0:	f000 fbbb 	bl	800124a <tx_queue_remove>

  }

  /* get updated TX queue status */
  fifo_status = get_nextTX_pri(h_fifo);
 8000ad4:	6838      	ldr	r0, [r7, #0]
 8000ad6:	f000 fb8d 	bl	80011f4 <get_nextTX_pri>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

  if (fifo_status == LL_BUFF_EMPTY){                /* TX BUFF EMPTY -> Sop TX timer */
 8000ae0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000ae4:	2b72      	cmp	r3, #114	@ 0x72
 8000ae6:	d107      	bne.n	8000af8 <on_tx_event+0x1ac>

    app_flags.status_flags |= EVT_TX_FIFO_EMPTY;
 8000ae8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000af6:	e016      	b.n	8000b26 <on_tx_event+0x1da>

  } else if (fifo_status == TX_BUFF_PRI) {          /* TX Buff has "new PKTs" -> short wait */
 8000af8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000afc:	2b74      	cmp	r3, #116	@ 0x74
 8000afe:	d107      	bne.n	8000b10 <on_tx_event+0x1c4>

    app_flags.status_flags |= EVT_SCHEDULE_PRI_TX;
 8000b00:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000b0e:	e00a      	b.n	8000b26 <on_tx_event+0x1da>

  } else if (fifo_status == TX_BUFF_NO_PRI) {       /* TX Buff has "old PKTs" -> longer wait for reTX*/
 8000b10:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000b14:	2b73      	cmp	r3, #115	@ 0x73
 8000b16:	d106      	bne.n	8000b26 <on_tx_event+0x1da>

    app_flags.status_flags |= EVT_SCHEDULE_TX;
 8000b18:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

  } else {                                          /* RFU... */
    //RFU...
  }

  return app_flags;
 8000b26:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000b2a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8000b2e:	e020      	b.n	8000b72 <on_tx_event+0x226>
  if(app_flags.err_flags != 0) goto cleanup;
 8000b30:	bf00      	nop
 8000b32:	e004      	b.n	8000b3e <on_tx_event+0x1f2>
  if(app_flags.err_flags != 0) goto cleanup;
 8000b34:	bf00      	nop
 8000b36:	e002      	b.n	8000b3e <on_tx_event+0x1f2>
  if(app_flags.err_flags != 0) goto cleanup;
 8000b38:	bf00      	nop
 8000b3a:	e000      	b.n	8000b3e <on_tx_event+0x1f2>
  if(app_flags.err_flags != 0) goto cleanup;
 8000b3c:	bf00      	nop

  // Return statement -> Flags + RFM in RX mode
  cleanup:
    if (app_flags.status_flags & EVT_TX_FIFO_EMPTY){ // re-enter RX mode only if minor flag was set
 8000b3e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00f      	beq.n	8000b6a <on_tx_event+0x21e>

      if (!rfm95_enter_rx_mode(h_rfm)) app_flags.err_flags |= EVT_RFM_SPI_ERR;
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f001 f909 	bl	8001d62 <rfm95_enter_rx_mode>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f083 0301 	eor.w	r3, r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d006      	beq.n	8000b6a <on_tx_event+0x21e>
 8000b5c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    }
    return app_flags;
 8000b6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000b6e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
}
 8000b72:	2300      	movs	r3, #0
 8000b74:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8000b78:	f362 0307 	bfi	r3, r2, #0, #8
 8000b7c:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8000b80:	f362 230f 	bfi	r3, r2, #8, #8
 8000b84:	4618      	mov	r0, r3
 8000b86:	3750      	adds	r7, #80	@ 0x50
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <process_bcNode_up>:
 *
 *          - the bit EVT_SCHEDULE_TX in the .status_flags field is set if a new pkt was added. The controller
 *            should TX that pkt (tail in the LL sequence) in the next TX event.
 *
 */
events_flags process_bcNode_up(h_rx_tx* h_fifo, bc_pkt* rx_pkt){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b098      	sub	sp, #96	@ 0x60
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  /* track error flags */
  events_flags app_flags = {0};
 8000b96:	2300      	movs	r3, #0
 8000b98:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
  uint16_t fifo_err_status;

  bool add_new_pkt = true;           // track wether this pkt has to be added
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  bool tx_new_pkt = true;            // new pkts TX immediatey after RX
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  uint16_t add_idx = BUFF_FIFO_SIZE; // track insert idx (no additional computational cost)
 8000ba8:	2364      	movs	r3, #100	@ 0x64
 8000baa:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  /* Scan through the RX buffer */
  for (uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8000bb4:	e057      	b.n	8000c66 <process_bcNode_up+0xda>

    rnode c_node = h_fifo->h_rx[i];
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6859      	ldr	r1, [r3, #4]
 8000bba:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	011b      	lsls	r3, r3, #4
 8000bc2:	4413      	add	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	18ca      	adds	r2, r1, r3
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	4611      	mov	r1, r2
 8000bce:	2244      	movs	r2, #68	@ 0x44
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f007 f91a 	bl	8007e0a <memcpy>

    if (c_node.slot_free == true){
 8000bd6:	7b3b      	ldrb	r3, [r7, #12]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00a      	beq.n	8000bf2 <process_bcNode_up+0x66>

      // Empty slot -> eligible for insertion
      if (i <= add_idx) add_idx = i;
 8000bdc:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8000be0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d834      	bhi.n	8000c52 <process_bcNode_up+0xc6>
 8000be8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000bec:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
      continue;
 8000bf0:	e02f      	b.n	8000c52 <process_bcNode_up+0xc6>

    } else { /* This slot in the FIFO contains a valid PKT */

      if (rx_pkt->nodeID != c_node.pkt.nodeID) { /* The RX pkt has a different Node ID */
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	789a      	ldrb	r2, [r3, #2]
 8000bf6:	7cbb      	ldrb	r3, [r7, #18]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d12c      	bne.n	8000c56 <process_bcNode_up+0xca>
        // Skip... Move to the next valid pkt in the RX buff
        continue;

      } else { /* Coincident Node IDs */

        if ((rx_pkt->pktID > c_node.pkt.pktID)) {       /* Newer packet received --> replace older pkts (older pkt IDs) */
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	889a      	ldrh	r2, [r3, #4]
 8000c00:	8abb      	ldrh	r3, [r7, #20]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d913      	bls.n	8000c2e <process_bcNode_up+0xa2>

          /*
           * remove old pkt from queue
           * -> in the end replaced by received one
           */
          fifo_err_status = remove_pkt(h_fifo, i);
 8000c06:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f000 f9d9 	bl	8000fc4 <remove_pkt>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

          // Empty slot -> eligible for insertion
          if (i <= add_idx) add_idx = i;
 8000c18:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8000c1c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d81b      	bhi.n	8000c5c <process_bcNode_up+0xd0>
 8000c24:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000c28:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8000c2c:	e016      	b.n	8000c5c <process_bcNode_up+0xd0>

        } else if((rx_pkt->pktID == c_node.pkt.pktID)) {/* Same identical pktID (i.e. same information) */
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	889a      	ldrh	r2, [r3, #4]
 8000c32:	8abb      	ldrh	r3, [r7, #20]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d108      	bne.n	8000c4a <process_bcNode_up+0xbe>

          if (rx_pkt->rx_bcID == c_node.pkt.rx_bcID) {  /* Same "receive point" */
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	799a      	ldrb	r2, [r3, #6]
 8000c3c:	7dbb      	ldrb	r3, [r7, #22]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d10b      	bne.n	8000c5a <process_bcNode_up+0xce>
            /*
             * In my FIFO i have a pkt identical to the RX one, but
             * they followed different hops
             */

            add_new_pkt = false;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
            /*
             * pkt with identical node IDs, pkt IDs, 1st rx point.
             * Only one copy can be present in the RX fifo, so i can block
             * the RX scan procedure.
             */
            break;
 8000c48:	e011      	b.n	8000c6e <process_bcNode_up+0xe2>

          /*
           * - rx_pktID older than mine (in my RX FIFO i have a newwer pkt
           *   from the same environmental node) -> do not propagate
           */
          add_new_pkt = false;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
           * i already have "newer" informations from the same ENV node (i.e.
           * pktIDs older than RX pktID).
           * All the other pkts from the same node ID will have older
           * pkt IDs than the received one!
           */
          break;
 8000c50:	e00d      	b.n	8000c6e <process_bcNode_up+0xe2>
      continue;
 8000c52:	bf00      	nop
 8000c54:	e002      	b.n	8000c5c <process_bcNode_up+0xd0>
        continue;
 8000c56:	bf00      	nop
 8000c58:	e000      	b.n	8000c5c <process_bcNode_up+0xd0>
            continue;
 8000c5a:	bf00      	nop
  for (uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000c5c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000c60:	3301      	adds	r3, #1
 8000c62:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8000c66:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000c6a:	2b63      	cmp	r3, #99	@ 0x63
 8000c6c:	d9a3      	bls.n	8000bb6 <process_bcNode_up+0x2a>

    }

  } /* RX FIFO scan completed */

  if (add_new_pkt == true) { /* If the flag is still set -> Add pkt */
 8000c6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d034      	beq.n	8000ce0 <process_bcNode_up+0x154>

    // add my bc ID informations:
    rx_pkt->pl[rx_pkt->pl_len] = MY_BC_ID;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	7a1b      	ldrb	r3, [r3, #8]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	2202      	movs	r2, #2
 8000c82:	725a      	strb	r2, [r3, #9]
    rx_pkt->pl_len = rx_pkt->pl_len + 1;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	7a1b      	ldrb	r3, [r3, #8]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	721a      	strb	r2, [r3, #8]

    fifo_err_status = add_pkt(h_fifo, add_idx, rx_pkt);
 8000c90:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	4619      	mov	r1, r3
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f000 f9cb 	bl	8001034 <add_pkt>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    app_flags.err_flags |= (fifo_err_status == RX_BUFF_FULL) ? EVT_RX_FIFO_FULL : 0;
 8000ca4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8000cae:	2a6e      	cmp	r2, #110	@ 0x6e
 8000cb0:	d101      	bne.n	8000cb6 <process_bcNode_up+0x12a>
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	e000      	b.n	8000cb8 <process_bcNode_up+0x12c>
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

    if ((app_flags.err_flags == 0) && tx_new_pkt) {
 8000cc2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10a      	bne.n	8000ce0 <process_bcNode_up+0x154>
 8000cca:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d006      	beq.n	8000ce0 <process_bcNode_up+0x154>
      // If adding a new pkt flag a TX event -> Try to travel through the BCs as quick as possible
      app_flags.status_flags |= EVT_SCHEDULE_TX;
 8000cd2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8000cd6:	f043 0302 	orr.w	r3, r3, #2
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51

    }

  }

  return app_flags;
 8000ce0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000ce4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8000cee:	f362 0307 	bfi	r3, r2, #0, #8
 8000cf2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8000cf6:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3760      	adds	r7, #96	@ 0x60
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <process_envNode_up>:
 *
 *          - the bit EVT_SCHEDULE_TX in the .status_flags field is set if a new pkt was added. The controller
 *            should TX that pkt (tail in the LL sequence) in the next TX event.
 *
 */
events_flags process_envNode_up(h_rx_tx* h_fifo, bc_pkt* rx_pkt, int16_t rssi){
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b09a      	sub	sp, #104	@ 0x68
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	80fb      	strh	r3, [r7, #6]
  /* track error flags */
  events_flags app_flags = {0};
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  uint16_t fifo_err_status;

  bool add_new_pkt = true;           // track wether this pkt has to be added
 8000d16:	2301      	movs	r3, #1
 8000d18:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  uint16_t add_idx = BUFF_FIFO_SIZE; // track insert idx (no additional computational cost)
 8000d1c:	2364      	movs	r3, #100	@ 0x64
 8000d1e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

  for(uint16_t i = 0; i < BUFF_FIFO_SIZE; i++) {
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8000d28:	e055      	b.n	8000dd6 <process_envNode_up+0xd4>

    rnode c_node = h_fifo->h_rx[i];
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	6859      	ldr	r1, [r3, #4]
 8000d2e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8000d32:	4613      	mov	r3, r2
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	4413      	add	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	18ca      	adds	r2, r1, r3
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4611      	mov	r1, r2
 8000d42:	2244      	movs	r2, #68	@ 0x44
 8000d44:	4618      	mov	r0, r3
 8000d46:	f007 f860 	bl	8007e0a <memcpy>

    if (c_node.slot_free == true){
 8000d4a:	7d3b      	ldrb	r3, [r7, #20]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00a      	beq.n	8000d66 <process_envNode_up+0x64>

      // Empty slot -> eligible for insertion
      if (i <= add_idx) add_idx = i;
 8000d50:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8000d54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d832      	bhi.n	8000dc2 <process_envNode_up+0xc0>
 8000d5c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000d60:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      continue;
 8000d64:	e02d      	b.n	8000dc2 <process_envNode_up+0xc0>

    } else { /* This slot in the FIFO contains a valid PKT */

      if (rx_pkt->nodeID != c_node.pkt.nodeID) { /* The RX pkt has a different Node ID */
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	789a      	ldrb	r2, [r3, #2]
 8000d6a:	7ebb      	ldrb	r3, [r7, #26]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d12a      	bne.n	8000dc6 <process_envNode_up+0xc4>
        // Skip... Move to the next valid pkt in the RX buff
        continue;

      } else { /* Coincident Node IDs */

        if ((rx_pkt->pktID > c_node.pkt.pktID)) {       /* Newer packet received --> replace older pkts (older pkt IDs) */
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	889a      	ldrh	r2, [r3, #4]
 8000d74:	8bbb      	ldrh	r3, [r7, #28]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d913      	bls.n	8000da2 <process_envNode_up+0xa0>

          /*
           * remove old pkt from queue
           * -> in the end replaced by received one
           */
          fifo_err_status = remove_pkt(h_fifo, i);
 8000d7a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000d7e:	4619      	mov	r1, r3
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f000 f91f 	bl	8000fc4 <remove_pkt>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

          // Empty slot -> eligible for insertion
          if (i <= add_idx) add_idx = i;
 8000d8c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8000d90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d819      	bhi.n	8000dcc <process_envNode_up+0xca>
 8000d98:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000d9c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8000da0:	e014      	b.n	8000dcc <process_envNode_up+0xca>

        } else if((rx_pkt->pktID == c_node.pkt.pktID)) {/* Same identical pktID (i.e. same information) */
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	889a      	ldrh	r2, [r3, #4]
 8000da6:	8bbb      	ldrh	r3, [r7, #28]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d106      	bne.n	8000dba <process_envNode_up+0xb8>

          if (c_node.pkt.rx_bcID == MY_BC_ID){
 8000dac:	7fbb      	ldrb	r3, [r7, #30]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d10b      	bne.n	8000dca <process_envNode_up+0xc8>
            /*
             * The env node is adding redundancy, but i have already seen
             * this PKT -> ignore
             */
            add_new_pkt = false;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            break;
 8000db8:	e011      	b.n	8000dde <process_envNode_up+0xdc>

          /*
           * - rx_pktID older than mine (in my RX FIFO i have a newer pkt
           *   from the same environmental node) -> do not propagate
           */
          add_new_pkt = false;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
           * i already have "newer" informations from the same ENV node (i.e.
           * pktIDs older than RX pktID).
           * All the other pkts from the same node ID will have older
           * pkt IDs than the received one!
           */
          break;
 8000dc0:	e00d      	b.n	8000dde <process_envNode_up+0xdc>
      continue;
 8000dc2:	bf00      	nop
 8000dc4:	e002      	b.n	8000dcc <process_envNode_up+0xca>
        continue;
 8000dc6:	bf00      	nop
 8000dc8:	e000      	b.n	8000dcc <process_envNode_up+0xca>
            continue;
 8000dca:	bf00      	nop
  for(uint16_t i = 0; i < BUFF_FIFO_SIZE; i++) {
 8000dcc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8000dd6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000dda:	2b63      	cmp	r3, #99	@ 0x63
 8000ddc:	d9a5      	bls.n	8000d2a <process_envNode_up+0x28>

    }

  } /* RX FIFO scan completed */

  if (add_new_pkt == true) { /* If the flag is still set -> Add pkt */
 8000dde:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d053      	beq.n	8000e8e <process_envNode_up+0x18c>

    // modify payload (change ENV_NODE_SYNC_WORD with BC_NODE_SYNC_WORD)
    rx_pkt->pl[SYNC_WORD_POS]   = (uint8_t)((SYNC_WORD_BC >> 8) & 0xFF);
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	2211      	movs	r2, #17
 8000dea:	725a      	strb	r2, [r3, #9]
    rx_pkt->pl[SYNC_WORD_POS+1] = (uint8_t)( SYNC_WORD_BC & 0xFF);
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	22aa      	movs	r2, #170	@ 0xaa
 8000df0:	729a      	strb	r2, [r3, #10]

    // Receiving from ENV node -> add RSSI
    rx_pkt->pl[rx_pkt->pl_len]   = (uint8_t)((rssi >> 8) & 0xFF);
 8000df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df6:	121b      	asrs	r3, r3, #8
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	7a1b      	ldrb	r3, [r3, #8]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	440b      	add	r3, r1
 8000e06:	725a      	strb	r2, [r3, #9]
    rx_pkt->pl[rx_pkt->pl_len+1] = (uint8_t)(rssi & 0xFF);
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	7a1b      	ldrb	r3, [r3, #8]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	88fa      	ldrh	r2, [r7, #6]
 8000e10:	b2d1      	uxtb	r1, r2
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	4413      	add	r3, r2
 8000e16:	460a      	mov	r2, r1
 8000e18:	725a      	strb	r2, [r3, #9]
    rx_pkt->pl_len += 2;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	7a1b      	ldrb	r3, [r3, #8]
 8000e1e:	3302      	adds	r3, #2
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	721a      	strb	r2, [r3, #8]

    // add my bc ID informations:
    rx_pkt->rx_bcID = MY_BC_ID;
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2202      	movs	r2, #2
 8000e2a:	719a      	strb	r2, [r3, #6]
    rx_pkt->pl[rx_pkt->pl_len] = MY_BC_ID;
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	7a1b      	ldrb	r3, [r3, #8]
 8000e30:	461a      	mov	r2, r3
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	4413      	add	r3, r2
 8000e36:	2202      	movs	r2, #2
 8000e38:	725a      	strb	r2, [r3, #9]
    rx_pkt->pl_len = rx_pkt->pl_len + 1;
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	7a1b      	ldrb	r3, [r3, #8]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	721a      	strb	r2, [r3, #8]

    fifo_err_status = add_pkt(h_fifo, add_idx, rx_pkt);
 8000e46:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f000 f8f0 	bl	8001034 <add_pkt>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
    app_flags.err_flags |= (fifo_err_status == RX_BUFF_FULL) ? EVT_RX_FIFO_FULL : 0;
 8000e5a:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	f8b7 2060 	ldrh.w	r2, [r7, #96]	@ 0x60
 8000e64:	2a6e      	cmp	r2, #110	@ 0x6e
 8000e66:	d101      	bne.n	8000e6c <process_envNode_up+0x16a>
 8000e68:	2204      	movs	r2, #4
 8000e6a:	e000      	b.n	8000e6e <process_envNode_up+0x16c>
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58

    if (app_flags.err_flags == 0) { // If no errors occured -> Schedule TX event
 8000e78:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d106      	bne.n	8000e8e <process_envNode_up+0x18c>

      app_flags.status_flags |= EVT_SCHEDULE_TX;
 8000e80:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

    }

  }

  return app_flags;
 8000e8e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8000e92:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8000e96:	2300      	movs	r3, #0
 8000e98:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8000e9c:	f362 0307 	bfi	r3, r2, #0, #8
 8000ea0:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8000ea4:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3768      	adds	r7, #104	@ 0x68
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <process_bcNode_ack>:
 *
 * @return: events_err_flags, bit-field structure with all possible errors.
 *                   --> no real errors happen here (only flags used for debug).
 *
 */
events_flags process_bcNode_ack(h_rx_tx* h_fifo, bc_pkt* rx_pkt){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b096      	sub	sp, #88	@ 0x58
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  /* track error flags */
  events_flags app_flags = {0};
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  uint16_t fifo_err_status;

  /* Scan through the RX buffer */
  for (uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8000ec6:	e03e      	b.n	8000f46 <process_bcNode_ack+0x96>

    rnode c_node = h_fifo->h_rx[i];
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6859      	ldr	r1, [r3, #4]
 8000ecc:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	4413      	add	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	18ca      	adds	r2, r1, r3
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	4611      	mov	r1, r2
 8000ee0:	2244      	movs	r2, #68	@ 0x44
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f006 ff91 	bl	8007e0a <memcpy>

    if (c_node.slot_free == true){
 8000ee8:	7a3b      	ldrb	r3, [r7, #8]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d121      	bne.n	8000f32 <process_bcNode_ack+0x82>
      // Empty slot -> skip... (this happens to perform removal in O(1))
      continue;

    } else { /* This slot in the FIFO contains a valid PKT */

      if (rx_pkt->nodeID != c_node.pkt.nodeID) { /* The ACK pkt has a different Node ID */
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	789a      	ldrb	r2, [r3, #2]
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d11e      	bne.n	8000f36 <process_bcNode_ack+0x86>
        // Skip... Move to the next valid pkt in the RX buff
        continue;

      } else { /* Coincident Node IDs */

        if ((rx_pkt->pktID > c_node.pkt.pktID) ||        /* Newer or same identical packet detected --> Set ACK */
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	889a      	ldrh	r2, [r3, #4]
 8000efc:	8a3b      	ldrh	r3, [r7, #16]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d809      	bhi.n	8000f16 <process_bcNode_ack+0x66>
            ((rx_pkt->pktID == c_node.pkt.pktID) && (rx_pkt->rx_bcID == c_node.pkt.rx_bcID))) {
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	889a      	ldrh	r2, [r3, #4]
 8000f06:	8a3b      	ldrh	r3, [r7, #16]
        if ((rx_pkt->pktID > c_node.pkt.pktID) ||        /* Newer or same identical packet detected --> Set ACK */
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d116      	bne.n	8000f3a <process_bcNode_ack+0x8a>
            ((rx_pkt->pktID == c_node.pkt.pktID) && (rx_pkt->rx_bcID == c_node.pkt.rx_bcID))) {
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	799a      	ldrb	r2, [r3, #6]
 8000f10:	7cbb      	ldrb	r3, [r7, #18]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d111      	bne.n	8000f3a <process_bcNode_ack+0x8a>

          /* Node ahead has newer pktID, or same identical pkt (ACK received) */
          h_fifo->h_rx->pkt.ack = true;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	715a      	strb	r2, [r3, #5]

          /* remove from tx queue */
          fifo_err_status = tx_queue_remove(h_fifo, i);
 8000f1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000f22:	4619      	mov	r1, r3
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f990 	bl	800124a <tx_queue_remove>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8000f30:	e004      	b.n	8000f3c <process_bcNode_ack+0x8c>
      continue;
 8000f32:	bf00      	nop
 8000f34:	e002      	b.n	8000f3c <process_bcNode_ack+0x8c>
        continue;
 8000f36:	bf00      	nop
 8000f38:	e000      	b.n	8000f3c <process_bcNode_ack+0x8c>
           * - rx_pktID older than mine -> do not ACK
           * - same pkt ID but differest 1st bcID in the hop sequence (i.e. different rx point)
           */

          // skip...
          continue;
 8000f3a:	bf00      	nop
  for (uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000f3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000f40:	3301      	adds	r3, #1
 8000f42:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8000f46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000f4a:	2b63      	cmp	r3, #99	@ 0x63
 8000f4c:	d9bc      	bls.n	8000ec8 <process_bcNode_ack+0x18>

    }

  }

  return app_flags;
 8000f4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000f52:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8000f56:	2300      	movs	r3, #0
 8000f58:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8000f5c:	f362 0307 	bfi	r3, r2, #0, #8
 8000f60:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8000f64:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3758      	adds	r7, #88	@ 0x58
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <init_buffers>:
 *
 * @param h_rx_tx*  h_rx_tx  pointer to the buffer handler (which includes handlers for both RX and TX lists).
 *
 * @return: none
 */
void init_buffers(h_rx_tx* h_rx_tx){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  // init RX FIFO
  for (uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000f78:	2300      	movs	r3, #0
 8000f7a:	81fb      	strh	r3, [r7, #14]
 8000f7c:	e016      	b.n	8000fac <init_buffers+0x3c>
    h_rx_tx->h_rx[i].slot_free = true;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6859      	ldr	r1, [r3, #4]
 8000f82:	89fa      	ldrh	r2, [r7, #14]
 8000f84:	4613      	mov	r3, r2
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	4413      	add	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
    h_rx_tx->h_rx[i].ll_idx = TX_IDX_EMPTY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6859      	ldr	r1, [r3, #4]
 8000f96:	89fa      	ldrh	r2, [r7, #14]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	2270      	movs	r2, #112	@ 0x70
 8000fa4:	805a      	strh	r2, [r3, #2]
  for (uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	81fb      	strh	r3, [r7, #14]
 8000fac:	89fb      	ldrh	r3, [r7, #14]
 8000fae:	2b63      	cmp	r3, #99	@ 0x63
 8000fb0:	d9e5      	bls.n	8000f7e <init_buffers+0xe>
  }

  // init Linked List for TX sequence
  init_LL(h_rx_tx->h_tx);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fa9c 	bl	80004f4 <init_LL>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <remove_pkt>:
 * @return: - RX_BUFF_SLOT_EMPTY if the slot at buff[rm_idx] is already EMPTY;
 *          - LL_IDX_IS_EMPTY if the LL is empty (pkt already removed from the TX sequence);
 *          - TX_IDX_EMPTY if this packet has no pointer to the TX sequence LL (pkt already removed from the TX sequence);
 *          - 0 otherwise;
 */
uint16_t remove_pkt(h_rx_tx* h_rx_tx, uint16_t rm_idx){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
  // if the slot is already empty
  if(h_rx_tx->h_rx[rm_idx].slot_free == true) return RX_BUFF_SLOT_EMPTY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6859      	ldr	r1, [r3, #4]
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	4413      	add	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <remove_pkt+0x26>
 8000fe6:	236f      	movs	r3, #111	@ 0x6f
 8000fe8:	e020      	b.n	800102c <remove_pkt+0x68>

  // This slot is occupied...

  // mark this slot as free
  h_rx_tx->h_rx[rm_idx].slot_free = true;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6859      	ldr	r1, [r3, #4]
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]

  uint16_t ll_idx = h_rx_tx->h_rx[rm_idx].ll_idx;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6859      	ldr	r1, [r3, #4]
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	4613      	mov	r3, r2
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	885b      	ldrh	r3, [r3, #2]
 8001010:	81fb      	strh	r3, [r7, #14]
  if (ll_idx == TX_IDX_EMPTY) return TX_IDX_EMPTY;
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	2b70      	cmp	r3, #112	@ 0x70
 8001016:	d101      	bne.n	800101c <remove_pkt+0x58>
 8001018:	2370      	movs	r3, #112	@ 0x70
 800101a:	e007      	b.n	800102c <remove_pkt+0x68>

  return remove_pkt_LL(h_rx_tx->h_tx, ll_idx);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	89fa      	ldrh	r2, [r7, #14]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fae2 	bl	80005ee <remove_pkt_LL>
 800102a:	4603      	mov	r3, r0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <add_pkt>:
 *                           insert operation).
 *
 * @return: - RX_BUFF_FULL if the buff is FULL (notice that a FULL TX sequence implies full RX sequence);
 *          - 0 on success;
 */
uint16_t add_pkt(h_rx_tx* h_rx_tx, uint16_t add_idx, bc_pkt* bc){
 8001034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001036:	b097      	sub	sp, #92	@ 0x5c
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	460b      	mov	r3, r1
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	817b      	strh	r3, [r7, #10]
  if (add_idx == RX_BUFF_IDX_NOT_DEFINED) { // if not specified determine the 1st free index in the system buffer
 8001042:	897b      	ldrh	r3, [r7, #10]
 8001044:	2b71      	cmp	r3, #113	@ 0x71
 8001046:	d119      	bne.n	800107c <add_pkt+0x48>
    add_idx = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	817b      	strh	r3, [r7, #10]
    while(h_rx_tx->h_rx[add_idx].slot_free == false) {
 800104c:	e007      	b.n	800105e <add_pkt+0x2a>
      add_idx+=1;
 800104e:	897b      	ldrh	r3, [r7, #10]
 8001050:	3301      	adds	r3, #1
 8001052:	817b      	strh	r3, [r7, #10]
      if (add_idx == BUFF_FIFO_SIZE) return RX_BUFF_FULL;
 8001054:	897b      	ldrh	r3, [r7, #10]
 8001056:	2b64      	cmp	r3, #100	@ 0x64
 8001058:	d101      	bne.n	800105e <add_pkt+0x2a>
 800105a:	236e      	movs	r3, #110	@ 0x6e
 800105c:	e049      	b.n	80010f2 <add_pkt+0xbe>
    while(h_rx_tx->h_rx[add_idx].slot_free == false) {
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6859      	ldr	r1, [r3, #4]
 8001062:	897a      	ldrh	r2, [r7, #10]
 8001064:	4613      	mov	r3, r2
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	f083 0301 	eor.w	r3, r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1e9      	bne.n	800104e <add_pkt+0x1a>
 800107a:	e004      	b.n	8001086 <add_pkt+0x52>
    }
  } else {  // Ensure index within buffer boundaries
    if (add_idx >= BUFF_FIFO_SIZE) return RX_BUFF_FULL;
 800107c:	897b      	ldrh	r3, [r7, #10]
 800107e:	2b63      	cmp	r3, #99	@ 0x63
 8001080:	d901      	bls.n	8001086 <add_pkt+0x52>
 8001082:	236e      	movs	r3, #110	@ 0x6e
 8001084:	e035      	b.n	80010f2 <add_pkt+0xbe>
  }

  // now add_idx points to a free slot in the main buffer

  // add event to the TX LL
  uint16_t ll_idx = add_pkt_LL(h_rx_tx->h_tx, add_idx);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	897a      	ldrh	r2, [r7, #10]
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fa5e 	bl	8000550 <add_pkt_LL>
 8001094:	4603      	mov	r3, r0
 8001096:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

  // if FULL conclude here (LL FULL --> RX buff FULL)
  if(ll_idx == LL_IDX_IS_FULL) return RX_BUFF_FULL;
 800109a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800109e:	2b64      	cmp	r3, #100	@ 0x64
 80010a0:	d101      	bne.n	80010a6 <add_pkt+0x72>
 80010a2:	236e      	movs	r3, #110	@ 0x6e
 80010a4:	e025      	b.n	80010f2 <add_pkt+0xbe>

  rnode new_node = {
 80010a6:	2300      	movs	r3, #0
 80010a8:	743b      	strb	r3, [r7, #16]
 80010aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80010ae:	827b      	strh	r3, [r7, #18]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	461c      	mov	r4, r3
 80010b4:	f107 0614 	add.w	r6, r7, #20
 80010b8:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 80010bc:	4635      	mov	r5, r6
 80010be:	4623      	mov	r3, r4
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	6859      	ldr	r1, [r3, #4]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ca:	3410      	adds	r4, #16
 80010cc:	3610      	adds	r6, #16
 80010ce:	4564      	cmp	r4, ip
 80010d0:	d1f4      	bne.n	80010bc <add_pkt+0x88>
  };

//  // copy payload data into the BC structure
//  memcpy(new_node.pkt.pl, bc->pl, bc->pl_len);

  h_rx_tx->h_rx[add_idx] = new_node;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6859      	ldr	r1, [r3, #4]
 80010d6:	897a      	ldrh	r2, [r7, #10]
 80010d8:	4613      	mov	r3, r2
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	4618      	mov	r0, r3
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2244      	movs	r2, #68	@ 0x44
 80010ea:	4619      	mov	r1, r3
 80010ec:	f006 fe8d 	bl	8007e0a <memcpy>

  return 0;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	375c      	adds	r7, #92	@ 0x5c
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010fa <get_nextTX_pkt>:
 *            were found
 *          - LL_BUFF_EMPTY if the LL is empty (notice that an empty LL doesn't mean an empty RX FIFO,
 *            maybe all the packets in the RX FIFO were already ACK);
 *          - index in the main buffer on success;
 */
uint16_t get_nextTX_pkt(h_rx_tx* h_rx_tx, fifo_entry_point entry_point, uint8_t* pyl_buff, uint8_t* pyl_len){
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	460b      	mov	r3, r1
 8001108:	72fb      	strb	r3, [r7, #11]
  uint16_t idx = RX_BUFF_IDX_NOT_DEFINED;
 800110a:	2371      	movs	r3, #113	@ 0x71
 800110c:	82fb      	strh	r3, [r7, #22]

  if (entry_point == TX_SEQ_ENTRY_HEAD){
 800110e:	7afb      	ldrb	r3, [r7, #11]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d115      	bne.n	8001140 <get_nextTX_pkt+0x46>
    // get index in the main buffer by quering the LL sequence
    idx = get_head_LL(h_rx_tx->h_tx);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fad0 	bl	80006be <get_head_LL>
 800111e:	4603      	mov	r3, r0
 8001120:	82fb      	strh	r3, [r7, #22]

    if (idx == LL_IDX_IS_EMPTY) return LL_BUFF_EMPTY;
 8001122:	8afb      	ldrh	r3, [r7, #22]
 8001124:	2b65      	cmp	r3, #101	@ 0x65
 8001126:	d101      	bne.n	800112c <get_nextTX_pkt+0x32>
 8001128:	2372      	movs	r3, #114	@ 0x72
 800112a:	e05f      	b.n	80011ec <get_nextTX_pkt+0xf2>
    idx = LL_get_RXbuff_idx(h_rx_tx->h_tx, idx);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	8afa      	ldrh	r2, [r7, #22]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fae6 	bl	8000706 <LL_get_RXbuff_idx>
 800113a:	4603      	mov	r3, r0
 800113c:	82fb      	strh	r3, [r7, #22]
 800113e:	e039      	b.n	80011b4 <get_nextTX_pkt+0xba>

  } else if (entry_point == TX_SEQ_ENTRY_TAIL){
 8001140:	7afb      	ldrb	r3, [r7, #11]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d136      	bne.n	80011b4 <get_nextTX_pkt+0xba>

    // get last inserted pkt in the LL (i.e. newest pkt)
    uint16_t c_idx = get_tail_LL(h_rx_tx->h_tx);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fac9 	bl	80006e2 <get_tail_LL>
 8001150:	4603      	mov	r3, r0
 8001152:	82bb      	strh	r3, [r7, #20]

    if (c_idx == LL_IDX_IS_EMPTY) return LL_BUFF_EMPTY;
 8001154:	8abb      	ldrh	r3, [r7, #20]
 8001156:	2b65      	cmp	r3, #101	@ 0x65
 8001158:	d101      	bne.n	800115e <get_nextTX_pkt+0x64>
 800115a:	2372      	movs	r3, #114	@ 0x72
 800115c:	e046      	b.n	80011ec <get_nextTX_pkt+0xf2>
     *  scan LL (the TX buffer) looking for the 1st inserted
     *  pkt that has not been TX yet
     */
    while (1) {
      // check if this PKT has already been TX
      uint16_t rx_idx = LL_get_RXbuff_idx(h_rx_tx->h_tx, c_idx);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	8aba      	ldrh	r2, [r7, #20]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff facd 	bl	8000706 <LL_get_RXbuff_idx>
 800116c:	4603      	mov	r3, r0
 800116e:	827b      	strh	r3, [r7, #18]
      if(h_rx_tx->h_rx[rx_idx].pkt.tx_attempts > 0) break;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	8a7a      	ldrh	r2, [r7, #18]
 8001176:	4613      	mov	r3, r2
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	791b      	ldrb	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10e      	bne.n	80011a4 <get_nextTX_pkt+0xaa>
      idx = rx_idx;
 8001186:	8a7b      	ldrh	r3, [r7, #18]
 8001188:	82fb      	strh	r3, [r7, #22]

      // up to now all the pkts are "new" ones -> find the 1st one in the sequence
      c_idx = get_prev_LL(h_rx_tx->h_tx, c_idx);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	8aba      	ldrh	r2, [r7, #20]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fac9 	bl	800072a <get_prev_LL>
 8001198:	4603      	mov	r3, r0
 800119a:	82bb      	strh	r3, [r7, #20]

      // no remaining elements -> break here
      if (c_idx == LL_IDX_IS_HEAD) break;
 800119c:	8abb      	ldrh	r3, [r7, #20]
 800119e:	2b66      	cmp	r3, #102	@ 0x66
 80011a0:	d002      	beq.n	80011a8 <get_nextTX_pkt+0xae>
    while (1) {
 80011a2:	e7dc      	b.n	800115e <get_nextTX_pkt+0x64>
      if(h_rx_tx->h_rx[rx_idx].pkt.tx_attempts > 0) break;
 80011a4:	bf00      	nop
 80011a6:	e000      	b.n	80011aa <get_nextTX_pkt+0xb0>
      if (c_idx == LL_IDX_IS_HEAD) break;
 80011a8:	bf00      	nop
    }

    // in the end -> if no "new" PKTs were present terminate here
    if (idx == RX_BUFF_IDX_NOT_DEFINED) return RX_BUFF_IDX_NOT_DEFINED;
 80011aa:	8afb      	ldrh	r3, [r7, #22]
 80011ac:	2b71      	cmp	r3, #113	@ 0x71
 80011ae:	d101      	bne.n	80011b4 <get_nextTX_pkt+0xba>
 80011b0:	2371      	movs	r3, #113	@ 0x71
 80011b2:	e01b      	b.n	80011ec <get_nextTX_pkt+0xf2>

  }

  *pyl_len = h_rx_tx->h_rx[idx].pkt.pl_len;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6859      	ldr	r1, [r3, #4]
 80011b8:	8afa      	ldrh	r2, [r7, #22]
 80011ba:	4613      	mov	r3, r2
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	7b1a      	ldrb	r2, [r3, #12]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	701a      	strb	r2, [r3, #0]

  // Copy into caller's buffer
  memcpy(pyl_buff, h_rx_tx->h_rx[idx].pkt.pl, *pyl_len);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6859      	ldr	r1, [r3, #4]
 80011ce:	8afa      	ldrh	r2, [r7, #22]
 80011d0:	4613      	mov	r3, r2
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	f103 010d 	add.w	r1, r3, #13
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f006 fe10 	bl	8007e0a <memcpy>

  return idx;
 80011ea:	8afb      	ldrh	r3, [r7, #22]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <get_nextTX_pri>:
 * @return: - LL_BUFF_EMPTY  if the LL is empty (notice that an empty LL doesn't mean an empty RX FIFO)
 *                           --> TX IRQ timer shouldn't be reactivated
 *          - TX_BUFF_PRI    If at least one "new PKT" (waiting for 1st TX) is present
 *          - TX_BUFF_NO_PRI If PKTs are waiting for retransmissions (i.e. at least on TX was already done)
 */
uint16_t get_nextTX_pri(h_rx_tx* h_rx_tx){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  // get index in the main buffer by quering the LL sequence
  uint16_t idx = get_tail_LL(h_rx_tx->h_tx);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fa6e 	bl	80006e2 <get_tail_LL>
 8001206:	4603      	mov	r3, r0
 8001208:	81fb      	strh	r3, [r7, #14]

  if (idx == LL_IDX_IS_EMPTY) return LL_BUFF_EMPTY;
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	2b65      	cmp	r3, #101	@ 0x65
 800120e:	d101      	bne.n	8001214 <get_nextTX_pri+0x20>
 8001210:	2372      	movs	r3, #114	@ 0x72
 8001212:	e016      	b.n	8001242 <get_nextTX_pri+0x4e>

  // at this point at least one element exist -> get payload in RX FIFO
  uint16_t rx_idx = LL_get_RXbuff_idx(h_rx_tx->h_tx, idx);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	89fa      	ldrh	r2, [r7, #14]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fa72 	bl	8000706 <LL_get_RXbuff_idx>
 8001222:	4603      	mov	r3, r0
 8001224:	81bb      	strh	r3, [r7, #12]

  return (h_rx_tx->h_rx[rx_idx].pkt.tx_attempts == 0) ? TX_BUFF_PRI : TX_BUFF_NO_PRI;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6859      	ldr	r1, [r3, #4]
 800122a:	89ba      	ldrh	r2, [r7, #12]
 800122c:	4613      	mov	r3, r2
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	4413      	add	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <get_nextTX_pri+0x4c>
 800123c:	2374      	movs	r3, #116	@ 0x74
 800123e:	e000      	b.n	8001242 <get_nextTX_pri+0x4e>
 8001240:	2373      	movs	r3, #115	@ 0x73
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <tx_queue_remove>:
 *
 * @return: - TX_IDX_EMPTY   if the PKT is not present in the linked list (Already removed?);
 *          - LL_BUFF_EMPTY  if the LL is empty (notice that an empty LL doesn't mean an empty RX FIFO);
 *          - 0 on success;
 */
uint16_t tx_queue_remove(h_rx_tx* h_rx_tx, uint16_t rm_idx){
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	460b      	mov	r3, r1
 8001254:	807b      	strh	r3, [r7, #2]

  // get idx of the associated slot in the LL sequence
  uint16_t ll_idx = h_rx_tx->h_rx[rm_idx].ll_idx;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6859      	ldr	r1, [r3, #4]
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	4613      	mov	r3, r2
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	885b      	ldrh	r3, [r3, #2]
 8001268:	81fb      	strh	r3, [r7, #14]

  // pkt not present in the LL
  if (ll_idx == TX_IDX_EMPTY) return TX_IDX_EMPTY;
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	2b70      	cmp	r3, #112	@ 0x70
 800126e:	d101      	bne.n	8001274 <tx_queue_remove+0x2a>
 8001270:	2370      	movs	r3, #112	@ 0x70
 8001272:	e016      	b.n	80012a2 <tx_queue_remove+0x58>

  // try removal on the LL
  if(remove_pkt_LL(h_rx_tx->h_tx, ll_idx) == LL_IDX_IS_EMPTY) return LL_BUFF_EMPTY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	89fa      	ldrh	r2, [r7, #14]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f9b6 	bl	80005ee <remove_pkt_LL>
 8001282:	4603      	mov	r3, r0
 8001284:	2b65      	cmp	r3, #101	@ 0x65
 8001286:	d101      	bne.n	800128c <tx_queue_remove+0x42>
 8001288:	2372      	movs	r3, #114	@ 0x72
 800128a:	e00a      	b.n	80012a2 <tx_queue_remove+0x58>

  // At this point the reference in the TX sequence has been removed, clear the idx in the main buffer
  h_rx_tx->h_rx[rm_idx].ll_idx = TX_IDX_EMPTY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6859      	ldr	r1, [r3, #4]
 8001290:	887a      	ldrh	r2, [r7, #2]
 8001292:	4613      	mov	r3, r2
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	4413      	add	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	2270      	movs	r2, #112	@ 0x70
 800129e:	805a      	strh	r2, [r3, #2]

  return 0;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <read_register>:
 * @param *buffer pointer to data buffer to be written into the register
 * @param length  size_t specifying amount of bytes to be written
 *
 * @return: false if an SPI error occurred, true otherwise
 */
static bool read_register(rfm95_handle_t *handle, uint8_t reg, uint8_t *buffer, size_t length) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	460b      	mov	r3, r1
 80012b8:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6898      	ldr	r0, [r3, #8]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	899b      	ldrh	r3, [r3, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	4619      	mov	r1, r3
 80012c6:	f002 fbd9 	bl	8003a7c <HAL_GPIO_WritePin>

  uint8_t transmit_buffer = reg & 0x7fu;
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	75fb      	strb	r3, [r7, #23]

  if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6858      	ldr	r0, [r3, #4]
 80012d8:	f107 0117 	add.w	r1, r7, #23
 80012dc:	230a      	movs	r3, #10
 80012de:	2201      	movs	r2, #1
 80012e0:	f005 f809 	bl	80062f6 <HAL_SPI_Transmit>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <read_register+0x44>
    return false;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e015      	b.n	800131a <read_register+0x70>
  }

  if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6858      	ldr	r0, [r3, #4]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	230a      	movs	r3, #10
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	f005 f972 	bl	80065e2 <HAL_SPI_Receive>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <read_register+0x5e>
    return false;
 8001304:	2300      	movs	r3, #0
 8001306:	e008      	b.n	800131a <read_register+0x70>
  }

  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6898      	ldr	r0, [r3, #8]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	899b      	ldrh	r3, [r3, #12]
 8001310:	2201      	movs	r2, #1
 8001312:	4619      	mov	r1, r3
 8001314:	f002 fbb2 	bl	8003a7c <HAL_GPIO_WritePin>

  return true;
 8001318:	2301      	movs	r3, #1
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <write_register>:
 * @param value   uint8_t specifying byte to be written into the register
 *
 *
 * @return: false if an SPI error occurred, true otherwise
 */
static bool write_register(rfm95_handle_t *handle, uint8_t reg, uint8_t value) {
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	460b      	mov	r3, r1
 800132c:	70fb      	strb	r3, [r7, #3]
 800132e:	4613      	mov	r3, r2
 8001330:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6898      	ldr	r0, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	899b      	ldrh	r3, [r3, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	4619      	mov	r1, r3
 800133e:	f002 fb9d 	bl	8003a7c <HAL_GPIO_WritePin>

  uint8_t transmit_buffer[2] = {(reg | 0x80u), value};
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001348:	b2db      	uxtb	r3, r3
 800134a:	733b      	strb	r3, [r7, #12]
 800134c:	78bb      	ldrb	r3, [r7, #2]
 800134e:	737b      	strb	r3, [r7, #13]

  if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6858      	ldr	r0, [r3, #4]
 8001354:	f107 010c 	add.w	r1, r7, #12
 8001358:	230a      	movs	r3, #10
 800135a:	2202      	movs	r2, #2
 800135c:	f004 ffcb 	bl	80062f6 <HAL_SPI_Transmit>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <write_register+0x48>
    return false;
 8001366:	2300      	movs	r3, #0
 8001368:	e008      	b.n	800137c <write_register+0x5a>
  }

  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6898      	ldr	r0, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	899b      	ldrh	r3, [r3, #12]
 8001372:	2201      	movs	r2, #1
 8001374:	4619      	mov	r1, r3
 8001376:	f002 fb81 	bl	8003a7c <HAL_GPIO_WritePin>

  return true;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <rfm95_modify_power>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_power(rfm95_handle_t *handle){
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	memset(&pa_config, 0, sizeof(pa_config));
 800138c:	2201      	movs	r2, #1
 800138e:	2100      	movs	r1, #0
 8001390:	482e      	ldr	r0, [pc, #184]	@ (800144c <rfm95_modify_power+0xc8>)
 8001392:	f006 fd05 	bl	8007da0 <memset>
	uint8_t pa_dac_config = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]

	uint8_t power = handle->config.tx_power;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80013a0:	73bb      	strb	r3, [r7, #14]

	if (power >= 2 && power <= 17) {
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d91a      	bls.n	80013de <rfm95_modify_power+0x5a>
 80013a8:	7bbb      	ldrb	r3, [r7, #14]
 80013aa:	2b11      	cmp	r3, #17
 80013ac:	d817      	bhi.n	80013de <rfm95_modify_power+0x5a>
		pa_config.max_power = 7;
 80013ae:	4a27      	ldr	r2, [pc, #156]	@ (800144c <rfm95_modify_power+0xc8>)
 80013b0:	7813      	ldrb	r3, [r2, #0]
 80013b2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80013b6:	7013      	strb	r3, [r2, #0]
		pa_config.pa_select = 1;
 80013b8:	4a24      	ldr	r2, [pc, #144]	@ (800144c <rfm95_modify_power+0xc8>)
 80013ba:	7813      	ldrb	r3, [r2, #0]
 80013bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c0:	7013      	strb	r3, [r2, #0]
		pa_config.output_power = (power - 2);
 80013c2:	7bbb      	ldrb	r3, [r7, #14]
 80013c4:	3b02      	subs	r3, #2
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	b2d9      	uxtb	r1, r3
 80013ce:	4a1f      	ldr	r2, [pc, #124]	@ (800144c <rfm95_modify_power+0xc8>)
 80013d0:	7813      	ldrb	r3, [r2, #0]
 80013d2:	f361 0303 	bfi	r3, r1, #0, #4
 80013d6:	7013      	strb	r3, [r2, #0]
		pa_dac_config = RFM95_PA_DAC_LOW_POWER;
 80013d8:	2384      	movs	r3, #132	@ 0x84
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e013      	b.n	8001406 <rfm95_modify_power+0x82>

	} else if (power == 20) {
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	2b14      	cmp	r3, #20
 80013e2:	d110      	bne.n	8001406 <rfm95_modify_power+0x82>
		pa_config.max_power = 7;
 80013e4:	4a19      	ldr	r2, [pc, #100]	@ (800144c <rfm95_modify_power+0xc8>)
 80013e6:	7813      	ldrb	r3, [r2, #0]
 80013e8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80013ec:	7013      	strb	r3, [r2, #0]
		pa_config.pa_select = 1;
 80013ee:	4a17      	ldr	r2, [pc, #92]	@ (800144c <rfm95_modify_power+0xc8>)
 80013f0:	7813      	ldrb	r3, [r2, #0]
 80013f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f6:	7013      	strb	r3, [r2, #0]
		pa_config.output_power = 15;
 80013f8:	4a14      	ldr	r2, [pc, #80]	@ (800144c <rfm95_modify_power+0xc8>)
 80013fa:	7813      	ldrb	r3, [r2, #0]
 80013fc:	f043 030f 	orr.w	r3, r3, #15
 8001400:	7013      	strb	r3, [r2, #0]
		pa_dac_config = RFM95_PA_DAC_HIGH_POWER;
 8001402:	2387      	movs	r3, #135	@ 0x87
 8001404:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <rfm95_modify_power+0xc8>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	2109      	movs	r1, #9
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff87 	bl	8001322 <write_register>
 8001414:	4603      	mov	r3, r0
 8001416:	f083 0301 	eor.w	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <rfm95_modify_power+0xa0>
 8001420:	2300      	movs	r3, #0
 8001422:	e00e      	b.n	8001442 <rfm95_modify_power+0xbe>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	461a      	mov	r2, r3
 8001428:	214d      	movs	r1, #77	@ 0x4d
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ff79 	bl	8001322 <write_register>
 8001430:	4603      	mov	r3, r0
 8001432:	f083 0301 	eor.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <rfm95_modify_power+0xbc>
 800143c:	2300      	movs	r3, #0
 800143e:	e000      	b.n	8001442 <rfm95_modify_power+0xbe>

	return true;
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200000a0 	.word	0x200000a0

08001450 <rfm95_modify_SF>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_SF(rfm95_handle_t *handle){
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	uint8_t  sf = RFM95_SF[handle->config.sf];
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800145e:	461a      	mov	r2, r3
 8001460:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <rfm95_modify_SF+0xbc>)
 8001462:	5c9b      	ldrb	r3, [r3, r2]
 8001464:	75fb      	strb	r3, [r7, #23]

	// Configure modem SF (depends on user configuration + DR offset):
	uint8_t sf_bits = (sf << 4) | 0x04; // set SF + CRC enable
 8001466:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	b25b      	sxtb	r3, r3
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	b25b      	sxtb	r3, r3
 8001474:	75bb      	strb	r3, [r7, #22]
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, sf_bits)) return false;
 8001476:	7dbb      	ldrb	r3, [r7, #22]
 8001478:	461a      	mov	r2, r3
 800147a:	211e      	movs	r1, #30
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff50 	bl	8001322 <write_register>
 8001482:	4603      	mov	r3, r0
 8001484:	f083 0301 	eor.w	r3, r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <rfm95_modify_SF+0x42>
 800148e:	2300      	movs	r3, #0
 8001490:	e038      	b.n	8001504 <rfm95_modify_SF+0xb4>

	// AGC on (suggested in application note), LDR optimization only for Ts > 16 ms
	uint32_t bw = RFM95_BW_HZ[handle->config.bandwidth];
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001498:	461a      	mov	r2, r3
 800149a:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <rfm95_modify_SF+0xc0>)
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	613b      	str	r3, [r7, #16]

	// compute symbol time (in ms) based on current settings:
	float curr_ts = 1e3*(((float) (1<<sf)) / bw);
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
 80014a4:	2201      	movs	r2, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001514 <rfm95_modify_SF+0xc4>
 80014c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c8:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t LDRoptimize = curr_ts >= 16 ? 0x0C : 0x04;
 80014cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d0:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80014d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	db01      	blt.n	80014e2 <rfm95_modify_SF+0x92>
 80014de:	230c      	movs	r3, #12
 80014e0:	e000      	b.n	80014e4 <rfm95_modify_SF+0x94>
 80014e2:	2304      	movs	r3, #4
 80014e4:	72fb      	strb	r3, [r7, #11]
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, LDRoptimize)) return false;
 80014e6:	7afb      	ldrb	r3, [r7, #11]
 80014e8:	461a      	mov	r2, r3
 80014ea:	2126      	movs	r1, #38	@ 0x26
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff18 	bl	8001322 <write_register>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f083 0301 	eor.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <rfm95_modify_SF+0xb2>
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <rfm95_modify_SF+0xb4>

	return true;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	080085f8 	.word	0x080085f8
 8001510:	080085d8 	.word	0x080085d8
 8001514:	447a0000 	.word	0x447a0000

08001518 <rfm95_modify_CR_BW>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_CR_BW(rfm95_handle_t *handle){
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	uint8_t  cr = RFM95_CR[handle->config.cr];
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001526:	461a      	mov	r2, r3
 8001528:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <rfm95_modify_CR_BW+0x60>)
 800152a:	5c9b      	ldrb	r3, [r3, r2]
 800152c:	75fb      	strb	r3, [r7, #23]
	uint32_t bw = RFM95_BW_BIN[handle->config.bandwidth];
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001534:	461a      	mov	r2, r3
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <rfm95_modify_CR_BW+0x64>)
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	613b      	str	r3, [r7, #16]

	uint8_t data = (bw << 4) | (cr << 1);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	b2da      	uxtb	r2, r3
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	73fb      	strb	r3, [r7, #15]
	if(!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, data)) return false;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	461a      	mov	r2, r3
 8001554:	211d      	movs	r1, #29
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fee3 	bl	8001322 <write_register>
 800155c:	4603      	mov	r3, r0
 800155e:	f083 0301 	eor.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <rfm95_modify_CR_BW+0x54>
 8001568:	2300      	movs	r3, #0
 800156a:	e000      	b.n	800156e <rfm95_modify_CR_BW+0x56>

	return true;
 800156c:	2301      	movs	r3, #1
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	08008600 	.word	0x08008600
 800157c:	080085e8 	.word	0x080085e8

08001580 <rfm95_modify_frequency>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_frequency(rfm95_handle_t *handle){
 8001580:	b5b0      	push	{r4, r5, r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t frequency = handle->config.channel_freq;
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 800158c:	6179      	str	r1, [r7, #20]

  // FQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = ((uint64_t)frequency << 19) / RFM95_TCXO_FREQ;
 800158e:	6979      	ldr	r1, [r7, #20]
 8001590:	2000      	movs	r0, #0
 8001592:	460a      	mov	r2, r1
 8001594:	4603      	mov	r3, r0
 8001596:	0b55      	lsrs	r5, r2, #13
 8001598:	04d4      	lsls	r4, r2, #19
 800159a:	4a27      	ldr	r2, [pc, #156]	@ (8001638 <rfm95_modify_frequency+0xb8>)
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7fe fe10 	bl	80001c8 <__aeabi_uldivmod>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	e9c7 2302 	strd	r2, r3, [r7, #8]

  if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 80015b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	0c02      	lsrs	r2, r0, #16
 80015be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80015c2:	0c0b      	lsrs	r3, r1, #16
 80015c4:	b2d3      	uxtb	r3, r2
 80015c6:	461a      	mov	r2, r3
 80015c8:	2106      	movs	r1, #6
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fea9 	bl	8001322 <write_register>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f083 0301 	eor.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <rfm95_modify_frequency+0x60>
 80015dc:	2300      	movs	r3, #0
 80015de:	e026      	b.n	800162e <rfm95_modify_frequency+0xae>
  if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 80015e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	0a02      	lsrs	r2, r0, #8
 80015ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80015f2:	0a0b      	lsrs	r3, r1, #8
 80015f4:	b2d3      	uxtb	r3, r2
 80015f6:	461a      	mov	r2, r3
 80015f8:	2107      	movs	r1, #7
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fe91 	bl	8001322 <write_register>
 8001600:	4603      	mov	r3, r0
 8001602:	f083 0301 	eor.w	r3, r3, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <rfm95_modify_frequency+0x90>
 800160c:	2300      	movs	r3, #0
 800160e:	e00e      	b.n	800162e <rfm95_modify_frequency+0xae>
  if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 8001610:	7a3b      	ldrb	r3, [r7, #8]
 8001612:	461a      	mov	r2, r3
 8001614:	2108      	movs	r1, #8
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fe83 	bl	8001322 <write_register>
 800161c:	4603      	mov	r3, r0
 800161e:	f083 0301 	eor.w	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <rfm95_modify_frequency+0xac>
 8001628:	2300      	movs	r3, #0
 800162a:	e000      	b.n	800162e <rfm95_modify_frequency+0xae>

	return true;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bdb0      	pop	{r4, r5, r7, pc}
 8001636:	bf00      	nop
 8001638:	01e84800 	.word	0x01e84800

0800163c <rfm95_modify_syncWord>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_syncWord(rfm95_handle_t *handle){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, handle->config.sync_word)) return false;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800164a:	461a      	mov	r2, r3
 800164c:	2139      	movs	r1, #57	@ 0x39
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fe67 	bl	8001322 <write_register>
 8001654:	4603      	mov	r3, r0
 8001656:	f083 0301 	eor.w	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <rfm95_modify_syncWord+0x28>
 8001660:	2300      	movs	r3, #0
 8001662:	e000      	b.n	8001666 <rfm95_modify_syncWord+0x2a>

	return true;
 8001664:	2301      	movs	r3, #1
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <config_load_default>:
 *
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers.
 *
 * @return void.
 */
static void config_load_default(rfm95_handle_t *handle){
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if (handle->config.sf == 0) 					rfm95_set_SF(handle, RFM95_SF7);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800167e:	2b00      	cmp	r3, #0
 8001680:	d103      	bne.n	800168a <config_load_default+0x1a>
 8001682:	2100      	movs	r1, #0
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f982 	bl	800198e <rfm95_set_SF>
  if (handle->config.cr == 0) 					rfm95_set_CR(handle, RFM95_CR4_5);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001690:	2b00      	cmp	r3, #0
 8001692:	d103      	bne.n	800169c <config_load_default+0x2c>
 8001694:	2100      	movs	r1, #0
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f989 	bl	80019ae <rfm95_set_CR>
  if (handle->config.tx_power == 0)  		rfm95_set_power(handle, 14);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d103      	bne.n	80016ae <config_load_default+0x3e>
 80016a6:	210e      	movs	r1, #14
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f954 	bl	8001956 <rfm95_set_power>
  if (handle->config.bandwidth == 0) 		rfm95_set_BW(handle, RFM95_BW125);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d103      	bne.n	80016c0 <config_load_default+0x50>
 80016b8:	2101      	movs	r1, #1
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f987 	bl	80019ce <rfm95_set_BW>
  if (handle->config.sync_word == 0) 		rfm95_set_syncWord(handle, LORA_DEF_SYNC_WORD);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d103      	bne.n	80016d2 <config_load_default+0x62>
 80016ca:	2112      	movs	r1, #18
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f9af 	bl	8001a30 <rfm95_set_syncWord>
  if (handle->config.channel_freq == 0) rfm95_set_frequency(handle, 868000000);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d104      	bne.n	80016e4 <config_load_default+0x74>
 80016da:	4904      	ldr	r1, [pc, #16]	@ (80016ec <config_load_default+0x7c>)
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f987 	bl	80019f0 <rfm95_set_frequency>

  return;
 80016e2:	bf00      	nop
 80016e4:	bf00      	nop
}
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	33bca100 	.word	0x33bca100

080016f0 <wait_for_irq>:
 * @param interrupt  rfm95_interrupt_t defining the interrupt event to wait for (DIO0, DIO1, DIO5 supported in this version)
 * @param timeout_ms uint32_t defining the maximum timeout in ms.
 *
 * @return true if an interrupt is received within the specified timeout, false otherwise
 */
static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	460b      	mov	r3, r1
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4798      	blx	r3
 8001704:	4601      	mov	r1, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	fb02 f303 	mul.w	r3, r2, r3
 8001710:	4a0d      	ldr	r2, [pc, #52]	@ (8001748 <wait_for_irq+0x58>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	099b      	lsrs	r3, r3, #6
 8001718:	440b      	add	r3, r1
 800171a:	617b      	str	r3, [r7, #20]

  while (handle->interrupt_times[interrupt] == 0) {
 800171c:	e008      	b.n	8001730 <wait_for_irq+0x40>
    if (handle->get_precision_tick() >= timeout_tick) {
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4798      	blx	r3
 8001724:	4602      	mov	r2, r0
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	4293      	cmp	r3, r2
 800172a:	d801      	bhi.n	8001730 <wait_for_irq+0x40>
      return false;
 800172c:	2300      	movs	r3, #0
 800172e:	e007      	b.n	8001740 <wait_for_irq+0x50>
  while (handle->interrupt_times[interrupt] == 0) {
 8001730:	7afa      	ldrb	r2, [r7, #11]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	320c      	adds	r2, #12
 8001736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0ef      	beq.n	800171e <wait_for_irq+0x2e>
    }
  }

  return true;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	10624dd3 	.word	0x10624dd3

0800174c <rfm95_init>:



// -------------------------------- USER PUBLIC FUNCTIONS -------------------------------

uint16_t rfm95_init(rfm95_handle_t *handle){
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]


  reset_rfm(handle);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f8e0 	bl	800191a <reset_rfm>

  // setup default configurations:
  config_load_default(handle);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ff88 	bl	8001670 <config_load_default>

  // Check for correct version.
  uint8_t version;
  if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8001760:	f107 020f 	add.w	r2, r7, #15
 8001764:	2301      	movs	r3, #1
 8001766:	2142      	movs	r1, #66	@ 0x42
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff fd9e 	bl	80012aa <read_register>
 800176e:	4603      	mov	r3, r0
 8001770:	f083 0301 	eor.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <rfm95_init+0x32>
 800177a:	2300      	movs	r3, #0
 800177c:	e0c9      	b.n	8001912 <rfm95_init+0x1c6>
  if (version != RFM9x_VER) return false;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	2b12      	cmp	r3, #18
 8001782:	d001      	beq.n	8001788 <rfm95_init+0x3c>
 8001784:	2300      	movs	r3, #0
 8001786:	e0c4      	b.n	8001912 <rfm95_init+0x1c6>

  // Module must be placed in sleep mode before switching to LoRa.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_SLEEP)) return false;
 8001788:	2200      	movs	r2, #0
 800178a:	2101      	movs	r1, #1
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff fdc8 	bl	8001322 <write_register>
 8001792:	4603      	mov	r3, r0
 8001794:	f083 0301 	eor.w	r3, r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <rfm95_init+0x56>
 800179e:	2300      	movs	r3, #0
 80017a0:	e0b7      	b.n	8001912 <rfm95_init+0x1c6>
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 80017a2:	2280      	movs	r2, #128	@ 0x80
 80017a4:	2101      	movs	r1, #1
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fdbb 	bl	8001322 <write_register>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f083 0301 	eor.w	r3, r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <rfm95_init+0x70>
 80017b8:	2300      	movs	r3, #0
 80017ba:	e0aa      	b.n	8001912 <rfm95_init+0x1c6>

  // Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
  if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 80017bc:	2200      	movs	r2, #0
 80017be:	2140      	movs	r1, #64	@ 0x40
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fdae 	bl	8001322 <write_register>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f083 0301 	eor.w	r3, r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <rfm95_init+0x8a>
 80017d2:	2300      	movs	r3, #0
 80017d4:	e09d      	b.n	8001912 <rfm95_init+0x1c6>

  if (handle->on_after_interrupts_configured != NULL) {
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <rfm95_init+0x98>
    handle->on_after_interrupts_configured();
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e2:	4798      	blx	r3
  }

  // Set LNA to the highest gain with 150% boost (suggested in AN)
  if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 80017e4:	2223      	movs	r2, #35	@ 0x23
 80017e6:	210c      	movs	r1, #12
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fd9a 	bl	8001322 <write_register>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f083 0301 	eor.w	r3, r3, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <rfm95_init+0xb2>
 80017fa:	2300      	movs	r3, #0
 80017fc:	e089      	b.n	8001912 <rfm95_init+0x1c6>

  // Preamble set to 10 + 4.25 = 14.25 symbols
  if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 80017fe:	2200      	movs	r2, #0
 8001800:	2120      	movs	r1, #32
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff fd8d 	bl	8001322 <write_register>
 8001808:	4603      	mov	r3, r0
 800180a:	f083 0301 	eor.w	r3, r3, #1
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <rfm95_init+0xcc>
 8001814:	2300      	movs	r3, #0
 8001816:	e07c      	b.n	8001912 <rfm95_init+0x1c6>
  if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x0A)) return false;
 8001818:	220a      	movs	r2, #10
 800181a:	2121      	movs	r1, #33	@ 0x21
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff fd80 	bl	8001322 <write_register>
 8001822:	4603      	mov	r3, r0
 8001824:	f083 0301 	eor.w	r3, r3, #1
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <rfm95_init+0xe6>
 800182e:	2300      	movs	r3, #0
 8001830:	e06f      	b.n	8001912 <rfm95_init+0x1c6>

  // Set up TX and RX FIFO base addresses.
  if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, RFM95_FIFO_TX_BASE_ADDRESS)) return false;
 8001832:	2200      	movs	r2, #0
 8001834:	210e      	movs	r1, #14
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fd73 	bl	8001322 <write_register>
 800183c:	4603      	mov	r3, r0
 800183e:	f083 0301 	eor.w	r3, r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <rfm95_init+0x100>
 8001848:	2300      	movs	r3, #0
 800184a:	e062      	b.n	8001912 <rfm95_init+0x1c6>
  if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, RFM95_FIFO_RX_BASE_ADDRESS)) return false;
 800184c:	2200      	movs	r2, #0
 800184e:	210f      	movs	r1, #15
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fd66 	bl	8001322 <write_register>
 8001856:	4603      	mov	r3, r0
 8001858:	f083 0301 	eor.w	r3, r3, #1
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <rfm95_init+0x11a>
 8001862:	2300      	movs	r3, #0
 8001864:	e055      	b.n	8001912 <rfm95_init+0x1c6>

  // Maximum payload length of the RFM95 is 0xFF.
  if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 0xFF)) return false;
 8001866:	22ff      	movs	r2, #255	@ 0xff
 8001868:	2123      	movs	r1, #35	@ 0x23
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fd59 	bl	8001322 <write_register>
 8001870:	4603      	mov	r3, r0
 8001872:	f083 0301 	eor.w	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <rfm95_init+0x134>
 800187c:	2300      	movs	r3, #0
 800187e:	e048      	b.n	8001912 <rfm95_init+0x1c6>

  // make changes effective
  if (!rfm95_modify_power(handle))     return false;
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff fd7f 	bl	8001384 <rfm95_modify_power>
 8001886:	4603      	mov	r3, r0
 8001888:	f083 0301 	eor.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <rfm95_init+0x14a>
 8001892:	2300      	movs	r3, #0
 8001894:	e03d      	b.n	8001912 <rfm95_init+0x1c6>
  if (!rfm95_modify_SF(handle))        return false;
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fdda 	bl	8001450 <rfm95_modify_SF>
 800189c:	4603      	mov	r3, r0
 800189e:	f083 0301 	eor.w	r3, r3, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <rfm95_init+0x160>
 80018a8:	2300      	movs	r3, #0
 80018aa:	e032      	b.n	8001912 <rfm95_init+0x1c6>
  if (!rfm95_modify_frequency(handle)) return false;
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff fe67 	bl	8001580 <rfm95_modify_frequency>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <rfm95_init+0x176>
 80018be:	2300      	movs	r3, #0
 80018c0:	e027      	b.n	8001912 <rfm95_init+0x1c6>
  if (!rfm95_modify_CR_BW(handle))     return false;
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fe28 	bl	8001518 <rfm95_modify_CR_BW>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f083 0301 	eor.w	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <rfm95_init+0x18c>
 80018d4:	2300      	movs	r3, #0
 80018d6:	e01c      	b.n	8001912 <rfm95_init+0x1c6>
  if (!rfm95_modify_syncWord(handle))  return false;
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff feaf 	bl	800163c <rfm95_modify_syncWord>
 80018de:	4603      	mov	r3, r0
 80018e0:	f083 0301 	eor.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <rfm95_init+0x1a2>
 80018ea:	2300      	movs	r3, #0
 80018ec:	e011      	b.n	8001912 <rfm95_init+0x1c6>

  // Let module sleep after initialization.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 80018ee:	2280      	movs	r2, #128	@ 0x80
 80018f0:	2101      	movs	r1, #1
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff fd15 	bl	8001322 <write_register>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <rfm95_init+0x1bc>
 8001904:	2300      	movs	r3, #0
 8001906:	e004      	b.n	8001912 <rfm95_init+0x1c6>
  handle->rfm_status = SLEEP_MODE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return true;
 8001910:	2301      	movs	r3, #1
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <reset_rfm>:
 *
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers.
 *
 * @return void.
 */
void reset_rfm(rfm95_handle_t *handle){
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6918      	ldr	r0, [r3, #16]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	8a9b      	ldrh	r3, [r3, #20]
 800192a:	2200      	movs	r2, #0
 800192c:	4619      	mov	r1, r3
 800192e:	f002 f8a5 	bl	8003a7c <HAL_GPIO_WritePin>
  HAL_Delay(1); // 0.1ms would theoretically be enough
 8001932:	2001      	movs	r0, #1
 8001934:	f001 fda2 	bl	800347c <HAL_Delay>
  HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6918      	ldr	r0, [r3, #16]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	8a9b      	ldrh	r3, [r3, #20]
 8001940:	2201      	movs	r2, #1
 8001942:	4619      	mov	r1, r3
 8001944:	f002 f89a 	bl	8003a7c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001948:	2005      	movs	r0, #5
 800194a:	f001 fd97 	bl	800347c <HAL_Delay>

  return;
 800194e:	bf00      	nop
}
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <rfm95_set_power>:
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param uint8_t power          must be wihin the range 2 dbm - 17 dBm.
 *
 * @return void.
 */
void rfm95_set_power(rfm95_handle_t *handle, uint8_t power){
 8001956:	b480      	push	{r7}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	70fb      	strb	r3, [r7, #3]
	uint8_t pw = power;
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	73fb      	strb	r3, [r7, #15]
	if (power < 2)  pw = 2;
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d801      	bhi.n	8001970 <rfm95_set_power+0x1a>
 800196c:	2302      	movs	r3, #2
 800196e:	73fb      	strb	r3, [r7, #15]
	if (power > 17) pw = 17;
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	2b11      	cmp	r3, #17
 8001974:	d901      	bls.n	800197a <rfm95_set_power+0x24>
 8001976:	2311      	movs	r3, #17
 8001978:	73fb      	strb	r3, [r7, #15]

	handle->config.tx_power = pw;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

	return;
 8001982:	bf00      	nop
}
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <rfm95_set_SF>:
 * @param *handle    rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param rfm95_sf_t sf             must be within 7 - 12 (rely on the dedicated rfm95_sf_t structure, do not manually write).
 *
 * @return void.
 */
void rfm95_set_SF(rfm95_handle_t *handle, rfm95_sf_t sf){
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	70fb      	strb	r3, [r7, #3]
	handle->config.sf = sf;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	return;
 80019a2:	bf00      	nop
}
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <rfm95_set_CR>:
 * @param *handle    rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param rfm95_cr_t cr             must be within 4/5 - 4/8 (rely on the dedicated rfm95_cr_t structure, do not manually write).
 *
 * @return void.
 */
void rfm95_set_CR(rfm95_handle_t *handle, rfm95_cr_t cr){
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	70fb      	strb	r3, [r7, #3]
	handle->config.cr = cr;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
	return;
 80019c2:	bf00      	nop
}
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <rfm95_set_BW>:
 * @param *handle    rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param rfm95_bw_t bw             must be within 62.5 - 500 kHz (rely on the dedicated rfm95_cr_t structure, do not manually write).
 *
 * @return void.
 */
void rfm95_set_BW(rfm95_handle_t *handle, rfm95_bw_t bw){
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	70fb      	strb	r3, [r7, #3]
	handle->config.bandwidth = bw;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	return;
 80019e2:	bf00      	nop
}
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <rfm95_set_frequency>:
 * @param *handle  rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param uint32_t freq           must be within 863 - 870 MHz.
 *
 * @return void.
 */
void rfm95_set_frequency(rfm95_handle_t *handle, uint32_t freq){
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
	uint32_t f = freq;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	60fb      	str	r3, [r7, #12]
	if (f < LOW_FREQ_BAND_EU868)  f = LOW_FREQ_BAND_EU868;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4a09      	ldr	r2, [pc, #36]	@ (8001a28 <rfm95_set_frequency+0x38>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d201      	bcs.n	8001a0a <rfm95_set_frequency+0x1a>
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <rfm95_set_frequency+0x38>)
 8001a08:	60fb      	str	r3, [r7, #12]
	if (f > HIGH_FREQ_BAND_EU868) f = HIGH_FREQ_BAND_EU868;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	@ (8001a2c <rfm95_set_frequency+0x3c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <rfm95_set_frequency+0x26>
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <rfm95_set_frequency+0x3c>)
 8001a14:	60fb      	str	r3, [r7, #12]

	handle->config.channel_freq = f;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	649a      	str	r2, [r3, #72]	@ 0x48
	return;
 8001a1c:	bf00      	nop
}
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	337055c0 	.word	0x337055c0
 8001a2c:	33db2580 	.word	0x33db2580

08001a30 <rfm95_set_syncWord>:
 * @param *handle  rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param uint8_t syncWord        any value (0x12 suggested, avoid 0x34 reserved for LoRaWAN).
 *
 * @return void.
 */
void rfm95_set_syncWord(rfm95_handle_t *handle, uint8_t syncWord){
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
	uint8_t sync = syncWord;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	73fb      	strb	r3, [r7, #15]

	if(sync == 0x34) sync = LORA_DEF_SYNC_WORD;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	2b34      	cmp	r3, #52	@ 0x34
 8001a44:	d101      	bne.n	8001a4a <rfm95_set_syncWord+0x1a>
 8001a46:	2312      	movs	r3, #18
 8001a48:	73fb      	strb	r3, [r7, #15]
	handle->config.sync_word = sync;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	return;
 8001a52:	bf00      	nop
}
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <rfm95_getRSSI>:
 * @param *handle  rfm95_handle_t   structure containing RFM95 configurations and function pointers.
 * @param *int16_t rssi             this variable will store the actual rssi value.
 *
 * @return true if no errors occurred.
 */
bool rfm95_getRSSI(rfm95_handle_t *handle, int16_t *rssi){
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
  uint8_t read;
  if(!read_register(handle, RFM95_REGISTER_PKT_RSSI, &read, 1)) return false;
 8001a68:	f107 020f 	add.w	r2, r7, #15
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	211a      	movs	r1, #26
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff fc1a 	bl	80012aa <read_register>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f083 0301 	eor.w	r3, r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <rfm95_getRSSI+0x28>
 8001a82:	2300      	movs	r3, #0
 8001a84:	e006      	b.n	8001a94 <rfm95_getRSSI+0x36>

  *rssi = -157 + read;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	3b9d      	subs	r3, #157	@ 0x9d
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	801a      	strh	r2, [r3, #0]
  return true;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <rfm95_getSNR>:
 * @param *handle  rfm95_handle_t   structure containing RFM95 configurations and function pointers.
 * @param *int16_t snr              this variable will store the actual snr value.
 *
 * @return true if no errors occurred.
 */
bool rfm95_getSNR(rfm95_handle_t *handle, int8_t *snr){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint8_t read;
  if(!read_register(handle, RFM95_REGISTER_PACKET_SNR, &read, 1)) return false;
 8001aa6:	f107 020f 	add.w	r2, r7, #15
 8001aaa:	2301      	movs	r3, #1
 8001aac:	2119      	movs	r1, #25
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fbfb 	bl	80012aa <read_register>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f083 0301 	eor.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <rfm95_getSNR+0x28>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e009      	b.n	8001ad8 <rfm95_getSNR+0x3c>

  *snr =  (((int8_t)read)/4);
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	da00      	bge.n	8001ace <rfm95_getSNR+0x32>
 8001acc:	3303      	adds	r3, #3
 8001ace:	109b      	asrs	r3, r3, #2
 8001ad0:	b25a      	sxtb	r2, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	701a      	strb	r2, [r3, #0]
  return true;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <rfm95_getModemStatus>:
 * @param *handle  rfm95_handle_t   structure containing RFM95 configurations and function pointers.
 * @param *uint8_t status           this variable will store only the 5 LSBs of the modem status register (1st 3 bits ignored).
 *
 * @return true if no errors occurred.
 */
bool rfm95_getModemStatus(rfm95_handle_t *handle, uint8_t *status){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint8_t read;
  if(!read_register(handle, RFM95_REGISTER_MODEM_STATUS, &read, 1)) return false;
 8001aea:	f107 020f 	add.w	r2, r7, #15
 8001aee:	2301      	movs	r3, #1
 8001af0:	2118      	movs	r1, #24
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fbd9 	bl	80012aa <read_register>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f083 0301 	eor.w	r3, r3, #1
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <rfm95_getModemStatus+0x28>
 8001b04:	2300      	movs	r3, #0
 8001b06:	e006      	b.n	8001b16 <rfm95_getModemStatus+0x36>

  *status = read & 0x1F;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	701a      	strb	r2, [r3, #0]
  return true;
 8001b14:	2301      	movs	r3, #1
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <rfm95_stdby>:
 *
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers
 *
 * @return true if no errors occurred
 */
bool rfm95_stdby(rfm95_handle_t *handle){
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  // Move modem to LoRa standby
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 8001b26:	2281      	movs	r2, #129	@ 0x81
 8001b28:	2101      	movs	r1, #1
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fbf9 	bl	8001322 <write_register>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f083 0301 	eor.w	r3, r3, #1
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <rfm95_stdby+0x22>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e011      	b.n	8001b64 <rfm95_stdby+0x46>

  // Wait for the modem to be ready
  if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8001b40:	220a      	movs	r2, #10
 8001b42:	2102      	movs	r1, #2
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff fdd3 	bl	80016f0 <wait_for_irq>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f083 0301 	eor.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <rfm95_stdby+0x3c>
 8001b56:	2300      	movs	r3, #0
 8001b58:	e004      	b.n	8001b64 <rfm95_stdby+0x46>

  handle->rfm_status = STNBY_MODE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return true;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <rfm95_send>:
 * @param *uint8_t senda_daya       pointer to data buffer to be transmitted.
 * @param size_t   send_data_length size for the TX buffer
 *
 * @return true if no errors occurred.
 */
bool rfm95_send(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]

  // make changes effective
  if (!rfm95_modify_power(handle))     return false;
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7ff fc03 	bl	8001384 <rfm95_modify_power>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f083 0301 	eor.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <rfm95_send+0x22>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e0e5      	b.n	8001d5a <rfm95_send+0x1ee>
  if (!rfm95_modify_SF(handle))        return false;
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f7ff fc5e 	bl	8001450 <rfm95_modify_SF>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f083 0301 	eor.w	r3, r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <rfm95_send+0x38>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e0da      	b.n	8001d5a <rfm95_send+0x1ee>
  if (!rfm95_modify_frequency(handle)) return false;
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7ff fceb 	bl	8001580 <rfm95_modify_frequency>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f083 0301 	eor.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <rfm95_send+0x4e>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e0cf      	b.n	8001d5a <rfm95_send+0x1ee>
  if (!rfm95_modify_CR_BW(handle))     return false;
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f7ff fcac 	bl	8001518 <rfm95_modify_CR_BW>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f083 0301 	eor.w	r3, r3, #1
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <rfm95_send+0x64>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e0c4      	b.n	8001d5a <rfm95_send+0x1ee>
  if (!rfm95_modify_syncWord(handle))  return false;
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7ff fd33 	bl	800163c <rfm95_modify_syncWord>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f083 0301 	eor.w	r3, r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <rfm95_send+0x7a>
 8001be2:	2300      	movs	r3, #0
 8001be4:	e0b9      	b.n	8001d5a <rfm95_send+0x1ee>

  // Set the payload length.
  if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, send_data_length)) return false;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	2122      	movs	r1, #34	@ 0x22
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f7ff fb97 	bl	8001322 <write_register>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f083 0301 	eor.w	r3, r3, #1
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <rfm95_send+0x98>
 8001c00:	2300      	movs	r3, #0
 8001c02:	e0aa      	b.n	8001d5a <rfm95_send+0x1ee>

  // Enable tx-done interrupt, clear flags and previous interrupt time
  if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8001c04:	2240      	movs	r2, #64	@ 0x40
 8001c06:	2140      	movs	r1, #64	@ 0x40
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f7ff fb8a 	bl	8001322 <write_register>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f083 0301 	eor.w	r3, r3, #1
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <rfm95_send+0xb2>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e09d      	b.n	8001d5a <rfm95_send+0x1ee>
  if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xFF)) return false;
 8001c1e:	22ff      	movs	r2, #255	@ 0xff
 8001c20:	2112      	movs	r1, #18
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff fb7d 	bl	8001322 <write_register>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f083 0301 	eor.w	r3, r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <rfm95_send+0xcc>
 8001c34:	2300      	movs	r3, #0
 8001c36:	e090      	b.n	8001d5a <rfm95_send+0x1ee>
  handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	631a      	str	r2, [r3, #48]	@ 0x30
  handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	635a      	str	r2, [r3, #52]	@ 0x34
  handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	639a      	str	r2, [r3, #56]	@ 0x38

  // Move modem to LoRa standby
  if (handle->rfm_status != STNBY_MODE){
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d01d      	beq.n	8001c92 <rfm95_send+0x126>
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 8001c56:	2281      	movs	r2, #129	@ 0x81
 8001c58:	2101      	movs	r1, #1
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7ff fb61 	bl	8001322 <write_register>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f083 0301 	eor.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <rfm95_send+0x104>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e074      	b.n	8001d5a <rfm95_send+0x1ee>

    // Wait for the modem to be ready
    if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8001c70:	220a      	movs	r2, #10
 8001c72:	2102      	movs	r1, #2
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f7ff fd3b 	bl	80016f0 <wait_for_irq>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f083 0301 	eor.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <rfm95_send+0x11e>
 8001c86:	2300      	movs	r3, #0
 8001c88:	e067      	b.n	8001d5a <rfm95_send+0x1ee>
    handle->rfm_status = STNBY_MODE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  // Set pointer to start of TX section in FIFO
  if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, RFM95_FIFO_TX_BASE_ADDRESS)) return false;
 8001c92:	2200      	movs	r2, #0
 8001c94:	210d      	movs	r1, #13
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7ff fb43 	bl	8001322 <write_register>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f083 0301 	eor.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <rfm95_send+0x140>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e056      	b.n	8001d5a <rfm95_send+0x1ee>

  // Write payload to FIFO.
  for (size_t i = 0; i < send_data_length; i++) {
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e00b      	b.n	8001cca <rfm95_send+0x15e>
    write_register(handle, RFM95_REGISTER_FIFO_ACCESS, send_data[i]);
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f7ff fb2f 	bl	8001322 <write_register>
  for (size_t i = 0; i < send_data_length; i++) {
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d3ef      	bcc.n	8001cb2 <rfm95_send+0x146>
  }

  // Set modem to tx mode.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_TX)) return false;
 8001cd2:	2283      	movs	r2, #131	@ 0x83
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7ff fb23 	bl	8001322 <write_register>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f083 0301 	eor.w	r3, r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <rfm95_send+0x180>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e036      	b.n	8001d5a <rfm95_send+0x1ee>

  // Wait for the modem to be ready
  if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8001cec:	220a      	movs	r2, #10
 8001cee:	2102      	movs	r1, #2
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7ff fcfd 	bl	80016f0 <wait_for_irq>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f083 0301 	eor.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <rfm95_send+0x19a>
 8001d02:	2300      	movs	r3, #0
 8001d04:	e029      	b.n	8001d5a <rfm95_send+0x1ee>
  handle->rfm_status = TRANSMIT_MODE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  // Wait for the transfer complete interrupt.
  if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 8001d0e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001d12:	2100      	movs	r1, #0
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f7ff fceb 	bl	80016f0 <wait_for_irq>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f083 0301 	eor.w	r3, r3, #1
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <rfm95_send+0x1be>
 8001d26:	2300      	movs	r3, #0
 8001d28:	e017      	b.n	8001d5a <rfm95_send+0x1ee>

  // LSE Tick corresponding to the end of TX --> not needed here
  uint32_t tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	613b      	str	r3, [r7, #16]
  handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	631a      	str	r2, [r3, #48]	@ 0x30

  // Return modem to sleep.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 8001d36:	2280      	movs	r2, #128	@ 0x80
 8001d38:	2101      	movs	r1, #1
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7ff faf1 	bl	8001322 <write_register>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f083 0301 	eor.w	r3, r3, #1
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <rfm95_send+0x1e4>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e004      	b.n	8001d5a <rfm95_send+0x1ee>
  handle->rfm_status = SLEEP_MODE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return 1;
 8001d58:	2301      	movs	r3, #1
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <rfm95_enter_rx_mode>:
 *
 * @param *handle  rfm95_handle_t   structure containing RFM95 configurations and function pointers.
 *
 * @return true if no errors occurred.
 */
bool rfm95_enter_rx_mode(rfm95_handle_t *handle){
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]

  // Clear flags and previous interrupt time, configure mapping for RX done.
  if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2140      	movs	r1, #64	@ 0x40
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff fad7 	bl	8001322 <write_register>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f083 0301 	eor.w	r3, r3, #1
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <rfm95_enter_rx_mode+0x22>
 8001d80:	2300      	movs	r3, #0
 8001d82:	e05b      	b.n	8001e3c <rfm95_enter_rx_mode+0xda>
  if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xFF)) return false;
 8001d84:	22ff      	movs	r2, #255	@ 0xff
 8001d86:	2112      	movs	r1, #18
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff faca 	bl	8001322 <write_register>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f083 0301 	eor.w	r3, r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <rfm95_enter_rx_mode+0x3c>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e04e      	b.n	8001e3c <rfm95_enter_rx_mode+0xda>
  handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	@ 0x30
  handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	635a      	str	r2, [r3, #52]	@ 0x34
  handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	639a      	str	r2, [r3, #56]	@ 0x38

  // Move modem to LoRa standby
  if (handle->rfm_status != STNBY_MODE){
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d01d      	beq.n	8001df8 <rfm95_enter_rx_mode+0x96>
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 8001dbc:	2281      	movs	r2, #129	@ 0x81
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff faae 	bl	8001322 <write_register>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f083 0301 	eor.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <rfm95_enter_rx_mode+0x74>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e032      	b.n	8001e3c <rfm95_enter_rx_mode+0xda>

    // Wait for the modem to be ready.
    if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8001dd6:	220a      	movs	r2, #10
 8001dd8:	2102      	movs	r1, #2
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fc88 	bl	80016f0 <wait_for_irq>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f083 0301 	eor.w	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <rfm95_enter_rx_mode+0x8e>
 8001dec:	2300      	movs	r3, #0
 8001dee:	e025      	b.n	8001e3c <rfm95_enter_rx_mode+0xda>
    handle->rfm_status = STNBY_MODE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  // Enter RX CONT mode
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_RX_CONT)) return false;
 8001df8:	2285      	movs	r2, #133	@ 0x85
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff fa90 	bl	8001322 <write_register>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f083 0301 	eor.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <rfm95_enter_rx_mode+0xb0>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e014      	b.n	8001e3c <rfm95_enter_rx_mode+0xda>

  // Wait for the modem to be ready.
  handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	639a      	str	r2, [r3, #56]	@ 0x38
  if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8001e18:	220a      	movs	r2, #10
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff fc67 	bl	80016f0 <wait_for_irq>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f083 0301 	eor.w	r3, r3, #1
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <rfm95_enter_rx_mode+0xd0>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e004      	b.n	8001e3c <rfm95_enter_rx_mode+0xda>
  handle->rfm_status = RXCONTIN_MODE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	return 1;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <rfm95_receive>:
 * @param *uint8_t rx_buff          will contain the received payload.
 * @param size_t   rx_data_length   will contain the received number of bytes.
 *
 * @return true if no errors occurred.
 */
bool rfm95_receive(rfm95_handle_t *handle, uint8_t *rx_buff, uint8_t *rx_data_length){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]

  // Move modem to LoRa standby.
  if (handle->rfm_status != STNBY_MODE){
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d01d      	beq.n	8001e98 <rfm95_receive+0x54>
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 8001e5c:	2281      	movs	r2, #129	@ 0x81
 8001e5e:	2101      	movs	r1, #1
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f7ff fa5e 	bl	8001322 <write_register>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f083 0301 	eor.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <rfm95_receive+0x32>
 8001e72:	2300      	movs	r3, #0
 8001e74:	e088      	b.n	8001f88 <rfm95_receive+0x144>

    // Wait for the modem to be ready.
    if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8001e76:	220a      	movs	r2, #10
 8001e78:	2102      	movs	r1, #2
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f7ff fc38 	bl	80016f0 <wait_for_irq>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f083 0301 	eor.w	r3, r3, #1
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <rfm95_receive+0x4c>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e07b      	b.n	8001f88 <rfm95_receive+0x144>
    handle->rfm_status = STNBY_MODE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  // proceed with payload extraction:
  uint8_t irq_flags;
  read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 8001e98:	f107 0217 	add.w	r2, r7, #23
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	2112      	movs	r1, #18
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f7ff fa02 	bl	80012aa <read_register>

  // Check if there was a CRC error.
  if (irq_flags & RFM95_PAYLOAD_CRC_ERR_MSK) {
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d012      	beq.n	8001ed6 <rfm95_receive+0x92>
    // Return modem to sleep.
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 8001eb0:	2280      	movs	r2, #128	@ 0x80
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7ff fa34 	bl	8001322 <write_register>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f083 0301 	eor.w	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <rfm95_receive+0x86>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e05e      	b.n	8001f88 <rfm95_receive+0x144>
    handle->rfm_status = SLEEP_MODE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return false;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e058      	b.n	8001f88 <rfm95_receive+0x144>
  }

  // Read received payload length.
  uint8_t rx_bytes;
  if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &rx_bytes, 1)) return false;
 8001ed6:	f107 0216 	add.w	r2, r7, #22
 8001eda:	2301      	movs	r3, #1
 8001edc:	2113      	movs	r1, #19
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f7ff f9e3 	bl	80012aa <read_register>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f083 0301 	eor.w	r3, r3, #1
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <rfm95_receive+0xb0>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e049      	b.n	8001f88 <rfm95_receive+0x144>

  // block here if no bytes were received
  if (rx_bytes == 0) {
 8001ef4:	7dbb      	ldrb	r3, [r7, #22]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <rfm95_receive+0xc4>
    write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP);
 8001efa:	2280      	movs	r2, #128	@ 0x80
 8001efc:	2101      	movs	r1, #1
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7ff fa0f 	bl	8001322 <write_register>
    return false;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e03f      	b.n	8001f88 <rfm95_receive+0x144>
  }

  // Read packet location within the FIFO buffer
  uint8_t fifo_rx_entry;
  if (!read_register(handle, RFM95_REGISTER_FIFO_RX_CURR_ADDR, &fifo_rx_entry, 1)) return false;
 8001f08:	f107 0215 	add.w	r2, r7, #21
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	2110      	movs	r1, #16
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7ff f9ca 	bl	80012aa <read_register>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f083 0301 	eor.w	r3, r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <rfm95_receive+0xe2>
 8001f22:	2300      	movs	r3, #0
 8001f24:	e030      	b.n	8001f88 <rfm95_receive+0x144>

  // Read received payload itself.
  if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, fifo_rx_entry)) return false;
 8001f26:	7d7b      	ldrb	r3, [r7, #21]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	210d      	movs	r1, #13
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f7ff f9f8 	bl	8001322 <write_register>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f083 0301 	eor.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <rfm95_receive+0xfe>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e022      	b.n	8001f88 <rfm95_receive+0x144>
  if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, rx_buff, rx_bytes))return false;
 8001f42:	7dbb      	ldrb	r3, [r7, #22]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	2100      	movs	r1, #0
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f7ff f9ae 	bl	80012aa <read_register>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f083 0301 	eor.w	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <rfm95_receive+0x11a>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e014      	b.n	8001f88 <rfm95_receive+0x144>

  // Return modem to sleep --> needed to clear the FIFO
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 8001f5e:	2280      	movs	r2, #128	@ 0x80
 8001f60:	2101      	movs	r1, #1
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff f9dd 	bl	8001322 <write_register>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f083 0301 	eor.w	r3, r3, #1
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <rfm95_receive+0x134>
 8001f74:	2300      	movs	r3, #0
 8001f76:	e007      	b.n	8001f88 <rfm95_receive+0x144>
  handle->rfm_status = SLEEP_MODE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  *rx_data_length = rx_bytes;
 8001f80:	7dba      	ldrb	r2, [r7, #22]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	701a      	strb	r2, [r3, #0]

	return true;
 8001f86:	2301      	movs	r3, #1
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <rfm95_on_interrupt>:
 * @param *handle   rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param interrupt rfm95_interrupt_t defining which interrupt triggered the IRQ (either DIO0, DIO1 or DIO5).
 *
 * @return void.
 */
void rfm95_on_interrupt(rfm95_handle_t *handle, rfm95_interrupt_t interrupt) {
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]
  if (handle->rfm_timer->Instance->CR & LPTIM_CR_ENABLE) {
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00a      	beq.n	8001fc2 <rfm95_on_interrupt+0x32>
    // get timing if and only if LPTIM is running
    handle->interrupt_times[interrupt] = handle->get_precision_tick();
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	78fc      	ldrb	r4, [r7, #3]
 8001fb2:	4798      	blx	r3
 8001fb4:	4601      	mov	r1, r0
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f104 020c 	add.w	r2, r4, #12
 8001fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return;
 8001fc0:	e005      	b.n	8001fce <rfm95_on_interrupt+0x3e>
  }

  // else, skip...
  handle->interrupt_times[interrupt] = 0;
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	320c      	adds	r2, #12
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd90      	pop	{r4, r7, pc}

08001fd4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db0c      	blt.n	8002000 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	4907      	ldr	r1, [pc, #28]	@ (800200c <__NVIC_ClearPendingIRQ+0x38>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffa:	3360      	adds	r3, #96	@ 0x60
 8001ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100

08002010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002014:	f001 f9b6 	bl	8003384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002018:	f000 f95e 	bl	80022d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800201c:	f000 fad4 	bl	80025c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002020:	f000 faa2 	bl	8002568 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002024:	f000 f9f8 	bl	8002418 <MX_RTC_Init>
  MX_SPI3_Init();
 8002028:	f000 fa56 	bl	80024d8 <MX_SPI3_Init>
  MX_LPTIM1_Init();
 800202c:	f000 f9b4 	bl	8002398 <MX_LPTIM1_Init>
  MX_RNG_Init();
 8002030:	f000 f9de 	bl	80023f0 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  // needed after programming -> avoid conflicts with sleep mode
  HAL_Delay(2000);
 8002034:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002038:	f001 fa20 	bl	800347c <HAL_Delay>

  // init RX and TX handler
  init_buffers(&h_buffs);
 800203c:	4896      	ldr	r0, [pc, #600]	@ (8002298 <main+0x288>)
 800203e:	f7fe ff97 	bl	8000f70 <init_buffers>

  // init RF in RX mode
  if (!init_rfm()) printf("Error during RFM initialization\r\n");
 8002042:	f000 fbb3 	bl	80027ac <init_rfm>
 8002046:	4603      	mov	r3, r0
 8002048:	f083 0301 	eor.w	r3, r3, #1
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <main+0x48>
 8002052:	4892      	ldr	r0, [pc, #584]	@ (800229c <main+0x28c>)
 8002054:	f005 fe9c 	bl	8007d90 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    /* System state machine */
    switch (h_sys.state){
 8002058:	4b91      	ldr	r3, [pc, #580]	@ (80022a0 <main+0x290>)
 800205a:	785b      	ldrb	r3, [r3, #1]
 800205c:	2b04      	cmp	r3, #4
 800205e:	f200 8116 	bhi.w	800228e <main+0x27e>
 8002062:	a201      	add	r2, pc, #4	@ (adr r2, 8002068 <main+0x58>)
 8002064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002068:	0800212b 	.word	0x0800212b
 800206c:	080021bb 	.word	0x080021bb
 8002070:	0800227f 	.word	0x0800227f
 8002074:	08002287 	.word	0x08002287
 8002078:	0800207d 	.word	0x0800207d

      case SYS_RDY:         /* Sys rdy -> submit new task or sleep */

        /* atomicity ensured during task registration */
        HAL_SuspendTick();
 800207c:	f001 fa22 	bl	80034c4 <HAL_SuspendTick>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002080:	b672      	cpsid	i
}
 8002082:	bf00      	nop
        __disable_irq();

        /* check pending flags */
        if (h_sys.evt_flags & SYS_EVT_RX_PENDING){         // RX event is pending
 8002084:	4b86      	ldr	r3, [pc, #536]	@ (80022a0 <main+0x290>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <main+0x9a>

          h_sys.state = SYS_HANDLE_RX;
 8002092:	4b83      	ldr	r3, [pc, #524]	@ (80022a0 <main+0x290>)
 8002094:	2200      	movs	r2, #0
 8002096:	705a      	strb	r2, [r3, #1]
          h_sys.evt_flags &= ~SYS_EVT_RX_PENDING;
 8002098:	4b81      	ldr	r3, [pc, #516]	@ (80022a0 <main+0x290>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f023 0302 	bic.w	r3, r3, #2
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b7e      	ldr	r3, [pc, #504]	@ (80022a0 <main+0x290>)
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e03a      	b.n	8002120 <main+0x110>

        } else if (h_sys.evt_flags & SYS_EVT_TX_PENDING){  // TX event is pending
 80020aa:	4b7d      	ldr	r3, [pc, #500]	@ (80022a0 <main+0x290>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00b      	beq.n	80020d0 <main+0xc0>

          h_sys.state = SYS_HANLDE_TX;
 80020b8:	4b79      	ldr	r3, [pc, #484]	@ (80022a0 <main+0x290>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	705a      	strb	r2, [r3, #1]
          h_sys.evt_flags &= ~SYS_EVT_TX_PENDING;
 80020be:	4b78      	ldr	r3, [pc, #480]	@ (80022a0 <main+0x290>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f023 0304 	bic.w	r3, r3, #4
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b75      	ldr	r3, [pc, #468]	@ (80022a0 <main+0x290>)
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	e027      	b.n	8002120 <main+0x110>

        } else if (h_sys.evt_flags & SYS_EVT_ERROR){       // ERR event is pending
 80020d0:	4b73      	ldr	r3, [pc, #460]	@ (80022a0 <main+0x290>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <main+0xe6>

          // RFU...
          h_sys.state = SYS_HANDLE_ERR;
 80020de:	4b70      	ldr	r3, [pc, #448]	@ (80022a0 <main+0x290>)
 80020e0:	2202      	movs	r2, #2
 80020e2:	705a      	strb	r2, [r3, #1]
          h_sys.evt_flags &= ~SYS_EVT_ERROR;
 80020e4:	4b6e      	ldr	r3, [pc, #440]	@ (80022a0 <main+0x290>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f023 0308 	bic.w	r3, r3, #8
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b6b      	ldr	r3, [pc, #428]	@ (80022a0 <main+0x290>)
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e014      	b.n	8002120 <main+0x110>

        } else if (h_sys.evt_flags & SYS_EVT_TIMEOUT){     // TIMEOUT event is pending
 80020f6:	4b6a      	ldr	r3, [pc, #424]	@ (80022a0 <main+0x290>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00b      	beq.n	800211c <main+0x10c>

          // RFU...
          h_sys.state = SYS_HANDLE_TIMEOUT;
 8002104:	4b66      	ldr	r3, [pc, #408]	@ (80022a0 <main+0x290>)
 8002106:	2203      	movs	r2, #3
 8002108:	705a      	strb	r2, [r3, #1]
          h_sys.evt_flags &= ~SYS_EVT_TIMEOUT;
 800210a:	4b65      	ldr	r3, [pc, #404]	@ (80022a0 <main+0x290>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f023 0310 	bic.w	r3, r3, #16
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b62      	ldr	r3, [pc, #392]	@ (80022a0 <main+0x290>)
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	e001      	b.n	8002120 <main+0x110>

        } else {
          // No events pending -> back to sleep
          enterStopMode();
 800211c:	f000 fd56 	bl	8002bcc <enterStopMode>
        }

        /* end of atomic block */
        HAL_ResumeTick();
 8002120:	f001 f9e0 	bl	80034e4 <HAL_ResumeTick>
  __ASM volatile ("cpsie i" : : : "memory");
 8002124:	b662      	cpsie	i
}
 8002126:	bf00      	nop
        __enable_irq();

        break;
 8002128:	e0b5      	b.n	8002296 <main+0x286>

      case SYS_HANDLE_RX:        /* Sys handle RX event */

        printf("handle RX\r\n");
 800212a:	485e      	ldr	r0, [pc, #376]	@ (80022a4 <main+0x294>)
 800212c:	f005 fe30 	bl	8007d90 <puts>

        debug_pin_set();
 8002130:	f000 fe68 	bl	8002e04 <debug_pin_set>
        app_flags = on_rx_event(&rfm95_handle, &h_buffs);
 8002134:	4958      	ldr	r1, [pc, #352]	@ (8002298 <main+0x288>)
 8002136:	485c      	ldr	r0, [pc, #368]	@ (80022a8 <main+0x298>)
 8002138:	f7fe fb0f 	bl	800075a <on_rx_event>
 800213c:	4603      	mov	r3, r0
 800213e:	4a5b      	ldr	r2, [pc, #364]	@ (80022ac <main+0x29c>)
 8002140:	8013      	strh	r3, [r2, #0]
        debug_pin_rst();
 8002142:	f000 fe6b 	bl	8002e1c <debug_pin_rst>

        if (app_flags.err_flags) {           /* If any error occurred */
 8002146:	4b59      	ldr	r3, [pc, #356]	@ (80022ac <main+0x29c>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d020      	beq.n	8002190 <main+0x180>

          if (app_flags.err_flags & EVT_RFM_SPI_ERR) {
 800214e:	4b57      	ldr	r3, [pc, #348]	@ (80022ac <main+0x29c>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <main+0x15a>
            printf("SPI ERROR\r\n");
 800215a:	4855      	ldr	r0, [pc, #340]	@ (80022b0 <main+0x2a0>)
 800215c:	f005 fe18 	bl	8007d90 <puts>

            // reset RFM and restart in RX mode
            reset_rfm(&rfm95_handle);
 8002160:	4851      	ldr	r0, [pc, #324]	@ (80022a8 <main+0x298>)
 8002162:	f7ff fbda 	bl	800191a <reset_rfm>
            init_rfm();
 8002166:	f000 fb21 	bl	80027ac <init_rfm>
             */

            // PKT dropped, do nothing...

          }
          if (app_flags.err_flags & EVT_RX_FIFO_FULL) {
 800216a:	4b50      	ldr	r3, [pc, #320]	@ (80022ac <main+0x29c>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <main+0x16c>
            // TODO
            printf("RX FIFO Full\r\n");
 8002176:	484f      	ldr	r0, [pc, #316]	@ (80022b4 <main+0x2a4>)
 8002178:	f005 fe0a 	bl	8007d90 <puts>
          }
          if (app_flags.err_flags & EVT_BAD_PKT_FORMAT) {
 800217c:	4b4b      	ldr	r3, [pc, #300]	@ (80022ac <main+0x29c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d014      	beq.n	80021b2 <main+0x1a2>
            // TODO
            printf("BAD PKT Full\r\n");
 8002188:	484b      	ldr	r0, [pc, #300]	@ (80022b8 <main+0x2a8>)
 800218a:	f005 fe01 	bl	8007d90 <puts>
 800218e:	e010      	b.n	80021b2 <main+0x1a2>
          }

        } else if (app_flags.status_flags) {  /* If status flags are present */
 8002190:	4b46      	ldr	r3, [pc, #280]	@ (80022ac <main+0x29c>)
 8002192:	785b      	ldrb	r3, [r3, #1]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00c      	beq.n	80021b2 <main+0x1a2>

          // Process event flags here:
          if (app_flags.status_flags & EVT_SCHEDULE_TX) {
 8002198:	4b44      	ldr	r3, [pc, #272]	@ (80022ac <main+0x29c>)
 800219a:	785b      	ldrb	r3, [r3, #1]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <main+0x1a2>

            printf("NEW PKT\r\n");
 80021a4:	4845      	ldr	r0, [pc, #276]	@ (80022bc <main+0x2ac>)
 80021a6:	f005 fdf3 	bl	8007d90 <puts>
            /*
             *  New PKT pushed in the RX FIFO:
             *  Schedule TX event, and TX
             */
            schedule_tx_evt(MIN_WAIT_TIME_NEW, MAX_WAIT_TIME_NEW);
 80021aa:	2100      	movs	r1, #0
 80021ac:	2000      	movs	r0, #0
 80021ae:	f000 fc8b 	bl	8002ac8 <schedule_tx_evt>
        } else {                              /* No events pending */
          // no events pending -> do nothing
        }

        // make system ready again
        h_sys.state = SYS_RDY;
 80021b2:	4b3b      	ldr	r3, [pc, #236]	@ (80022a0 <main+0x290>)
 80021b4:	2204      	movs	r2, #4
 80021b6:	705a      	strb	r2, [r3, #1]
        break;
 80021b8:	e06d      	b.n	8002296 <main+0x286>

      case SYS_HANLDE_TX:        /* Sys handle TX event */

        printf("handle TX\r\n");
 80021ba:	4841      	ldr	r0, [pc, #260]	@ (80022c0 <main+0x2b0>)
 80021bc:	f005 fde8 	bl	8007d90 <puts>

        HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80021c0:	4840      	ldr	r0, [pc, #256]	@ (80022c4 <main+0x2b4>)
 80021c2:	f003 ff71 	bl	80060a8 <HAL_RTCEx_DeactivateWakeUpTimer>

        debug_pin_set();
 80021c6:	f000 fe1d 	bl	8002e04 <debug_pin_set>
        app_flags = on_tx_event(&rfm95_handle, &h_buffs);
 80021ca:	4933      	ldr	r1, [pc, #204]	@ (8002298 <main+0x288>)
 80021cc:	4836      	ldr	r0, [pc, #216]	@ (80022a8 <main+0x298>)
 80021ce:	f7fe fbbd 	bl	800094c <on_tx_event>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a35      	ldr	r2, [pc, #212]	@ (80022ac <main+0x29c>)
 80021d6:	8013      	strh	r3, [r2, #0]
        debug_pin_rst();
 80021d8:	f000 fe20 	bl	8002e1c <debug_pin_rst>

        if (app_flags.err_flags) {           /* If any error occurred */
 80021dc:	4b33      	ldr	r3, [pc, #204]	@ (80022ac <main+0x29c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00e      	beq.n	8002202 <main+0x1f2>

          if (app_flags.err_flags & EVT_RFM_SPI_ERR) {
 80021e4:	4b31      	ldr	r3, [pc, #196]	@ (80022ac <main+0x29c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d042      	beq.n	8002276 <main+0x266>
            printf("SPI ERROR\r\n");
 80021f0:	482f      	ldr	r0, [pc, #188]	@ (80022b0 <main+0x2a0>)
 80021f2:	f005 fdcd 	bl	8007d90 <puts>

            // reset RFM and restart in RX mode
            reset_rfm(&rfm95_handle);
 80021f6:	482c      	ldr	r0, [pc, #176]	@ (80022a8 <main+0x298>)
 80021f8:	f7ff fb8f 	bl	800191a <reset_rfm>
            init_rfm();
 80021fc:	f000 fad6 	bl	80027ac <init_rfm>
 8002200:	e039      	b.n	8002276 <main+0x266>
          }
          // RFU... add other flags

        } else if (app_flags.status_flags) {  /* If status flags are present */
 8002202:	4b2a      	ldr	r3, [pc, #168]	@ (80022ac <main+0x29c>)
 8002204:	785b      	ldrb	r3, [r3, #1]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d035      	beq.n	8002276 <main+0x266>

          // Process event flags here:
          if(app_flags.status_flags & EVT_RFM_MODEM_RX) {
 800220a:	4b28      	ldr	r3, [pc, #160]	@ (80022ac <main+0x29c>)
 800220c:	785b      	ldrb	r3, [r3, #1]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <main+0x218>

            printf("Modem RX -> reschedule \r\n");
 8002216:	482c      	ldr	r0, [pc, #176]	@ (80022c8 <main+0x2b8>)
 8002218:	f005 fdba 	bl	8007d90 <puts>
            //  RFM is receiving something wait for the end of RX event
            schedule_tx_evt(MIN_WAIT_TIME_SHORT, MAX_WAIT_TIME_SHORT);
 800221c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002220:	20c8      	movs	r0, #200	@ 0xc8
 8002222:	f000 fc51 	bl	8002ac8 <schedule_tx_evt>
 8002226:	e026      	b.n	8002276 <main+0x266>

          } else if (app_flags.status_flags & EVT_TX_FIFO_EMPTY){
 8002228:	4b20      	ldr	r3, [pc, #128]	@ (80022ac <main+0x29c>)
 800222a:	785b      	ldrb	r3, [r3, #1]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <main+0x22c>

            printf("NO TX Events\r\n");
 8002234:	4825      	ldr	r0, [pc, #148]	@ (80022cc <main+0x2bc>)
 8002236:	f005 fdab 	bl	8007d90 <puts>
 800223a:	e01c      	b.n	8002276 <main+0x266>
            // Do nothing...

          } else if (app_flags.status_flags & EVT_SCHEDULE_PRI_TX){
 800223c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ac <main+0x29c>)
 800223e:	785b      	ldrb	r3, [r3, #1]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <main+0x24a>

            printf("PRI TX PKTs\r\n");
 8002248:	4821      	ldr	r0, [pc, #132]	@ (80022d0 <main+0x2c0>)
 800224a:	f005 fda1 	bl	8007d90 <puts>
            // Other new PKTs are waiting for 1st TX
            schedule_tx_evt(MIN_WAIT_TIME_SHORT, MAX_WAIT_TIME_SHORT);
 800224e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002252:	20c8      	movs	r0, #200	@ 0xc8
 8002254:	f000 fc38 	bl	8002ac8 <schedule_tx_evt>
 8002258:	e00d      	b.n	8002276 <main+0x266>

          } else if (app_flags.status_flags & EVT_SCHEDULE_TX){
 800225a:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <main+0x29c>)
 800225c:	785b      	ldrb	r3, [r3, #1]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <main+0x266>

            printf("Normal TX PKTs\r\n");
 8002266:	481b      	ldr	r0, [pc, #108]	@ (80022d4 <main+0x2c4>)
 8002268:	f005 fd92 	bl	8007d90 <puts>
            // Schedule event for PKT retransmission mechanism
            schedule_tx_evt(MIN_WAIT_TIME_LONG, MAX_WAIT_TIME_LONG);
 800226c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002270:	20c8      	movs	r0, #200	@ 0xc8
 8002272:	f000 fc29 	bl	8002ac8 <schedule_tx_evt>
        } else {                              /* No events pending */
          // no events pending -> do nothing
        }

        // make system ready again
        h_sys.state = SYS_RDY;
 8002276:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <main+0x290>)
 8002278:	2204      	movs	r2, #4
 800227a:	705a      	strb	r2, [r3, #1]
        break;
 800227c:	e00b      	b.n	8002296 <main+0x286>
      case SYS_HANDLE_ERR:       /* Sys handle ERR event */

        // RFU...

        // make system ready again
        h_sys.state = SYS_RDY;
 800227e:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <main+0x290>)
 8002280:	2204      	movs	r2, #4
 8002282:	705a      	strb	r2, [r3, #1]
        break;
 8002284:	e007      	b.n	8002296 <main+0x286>
      case SYS_HANDLE_TIMEOUT:   /* Sys handle TIMEOUT event */

        //RFU...

        // make system ready again
        h_sys.state = SYS_RDY;
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <main+0x290>)
 8002288:	2204      	movs	r2, #4
 800228a:	705a      	strb	r2, [r3, #1]
        break;
 800228c:	e003      	b.n	8002296 <main+0x286>

      default:
        h_sys.state = SYS_RDY;
 800228e:	4b04      	ldr	r3, [pc, #16]	@ (80022a0 <main+0x290>)
 8002290:	2204      	movs	r2, #4
 8002292:	705a      	strb	r2, [r3, #1]
        break;
 8002294:	bf00      	nop
    switch (h_sys.state){
 8002296:	e6df      	b.n	8002058 <main+0x48>
 8002298:	20000010 	.word	0x20000010
 800229c:	080084ec 	.word	0x080084ec
 80022a0:	20000018 	.word	0x20000018
 80022a4:	08008510 	.word	0x08008510
 80022a8:	200000a4 	.word	0x200000a4
 80022ac:	20002004 	.word	0x20002004
 80022b0:	0800851c 	.word	0x0800851c
 80022b4:	08008528 	.word	0x08008528
 80022b8:	08008538 	.word	0x08008538
 80022bc:	08008548 	.word	0x08008548
 80022c0:	08008554 	.word	0x08008554
 80022c4:	20001eec 	.word	0x20001eec
 80022c8:	08008560 	.word	0x08008560
 80022cc:	0800857c 	.word	0x0800857c
 80022d0:	0800858c 	.word	0x0800858c
 80022d4:	0800859c 	.word	0x0800859c

080022d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b096      	sub	sp, #88	@ 0x58
 80022dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	2244      	movs	r2, #68	@ 0x44
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f005 fd5a 	bl	8007da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ec:	463b      	mov	r3, r7
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80022fe:	f001 ff85 	bl	800420c <HAL_PWREx_ControlVoltageScaling>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002308:	f000 fd94 	bl	8002e34 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800230c:	f001 ff60 	bl	80041d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002310:	4b20      	ldr	r3, [pc, #128]	@ (8002394 <SystemClock_Config+0xbc>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002316:	4a1f      	ldr	r2, [pc, #124]	@ (8002394 <SystemClock_Config+0xbc>)
 8002318:	f023 0318 	bic.w	r3, r3, #24
 800231c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002320:	2306      	movs	r3, #6
 8002322:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002324:	2301      	movs	r3, #1
 8002326:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002328:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800232c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800232e:	2310      	movs	r3, #16
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002332:	2302      	movs	r3, #2
 8002334:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002336:	2302      	movs	r3, #2
 8002338:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800233a:	2301      	movs	r3, #1
 800233c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800233e:	230a      	movs	r3, #10
 8002340:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002342:	2307      	movs	r3, #7
 8002344:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8002346:	2308      	movs	r3, #8
 8002348:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800234a:	2302      	movs	r3, #2
 800234c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4618      	mov	r0, r3
 8002354:	f001 ffdc 	bl	8004310 <HAL_RCC_OscConfig>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800235e:	f000 fd69 	bl	8002e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002362:	230f      	movs	r3, #15
 8002364:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002366:	2303      	movs	r3, #3
 8002368:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002376:	463b      	mov	r3, r7
 8002378:	2104      	movs	r1, #4
 800237a:	4618      	mov	r0, r3
 800237c:	f002 fba4 	bl	8004ac8 <HAL_RCC_ClockConfig>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002386:	f000 fd55 	bl	8002e34 <Error_Handler>
  }
}
 800238a:	bf00      	nop
 800238c:	3758      	adds	r7, #88	@ 0x58
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000

08002398 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <MX_LPTIM1_Init+0x50>)
 800239e:	4a13      	ldr	r2, [pc, #76]	@ (80023ec <MX_LPTIM1_Init+0x54>)
 80023a0:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <MX_LPTIM1_Init+0x50>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <MX_LPTIM1_Init+0x50>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <MX_LPTIM1_Init+0x50>)
 80023b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023b4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80023b6:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <MX_LPTIM1_Init+0x50>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <MX_LPTIM1_Init+0x50>)
 80023be:	2200      	movs	r2, #0
 80023c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80023c2:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <MX_LPTIM1_Init+0x50>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80023c8:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <MX_LPTIM1_Init+0x50>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <MX_LPTIM1_Init+0x50>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80023d4:	4804      	ldr	r0, [pc, #16]	@ (80023e8 <MX_LPTIM1_Init+0x50>)
 80023d6:	f001 fb81 	bl	8003adc <HAL_LPTIM_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 80023e0:	f000 fd28 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20001ea4 	.word	0x20001ea4
 80023ec:	40007c00 	.word	0x40007c00

080023f0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <MX_RNG_Init+0x20>)
 80023f6:	4a07      	ldr	r2, [pc, #28]	@ (8002414 <MX_RNG_Init+0x24>)
 80023f8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023fa:	4805      	ldr	r0, [pc, #20]	@ (8002410 <MX_RNG_Init+0x20>)
 80023fc:	f003 fa44 	bl	8005888 <HAL_RNG_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002406:	f000 fd15 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20001edc 	.word	0x20001edc
 8002414:	50060800 	.word	0x50060800

08002418 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800242c:	2300      	movs	r3, #0
 800242e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002430:	4b27      	ldr	r3, [pc, #156]	@ (80024d0 <MX_RTC_Init+0xb8>)
 8002432:	4a28      	ldr	r2, [pc, #160]	@ (80024d4 <MX_RTC_Init+0xbc>)
 8002434:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002436:	4b26      	ldr	r3, [pc, #152]	@ (80024d0 <MX_RTC_Init+0xb8>)
 8002438:	2200      	movs	r2, #0
 800243a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800243c:	4b24      	ldr	r3, [pc, #144]	@ (80024d0 <MX_RTC_Init+0xb8>)
 800243e:	227f      	movs	r2, #127	@ 0x7f
 8002440:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002442:	4b23      	ldr	r3, [pc, #140]	@ (80024d0 <MX_RTC_Init+0xb8>)
 8002444:	22ff      	movs	r2, #255	@ 0xff
 8002446:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002448:	4b21      	ldr	r3, [pc, #132]	@ (80024d0 <MX_RTC_Init+0xb8>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800244e:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <MX_RTC_Init+0xb8>)
 8002450:	2200      	movs	r2, #0
 8002452:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002454:	4b1e      	ldr	r3, [pc, #120]	@ (80024d0 <MX_RTC_Init+0xb8>)
 8002456:	2200      	movs	r2, #0
 8002458:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800245a:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <MX_RTC_Init+0xb8>)
 800245c:	2200      	movs	r2, #0
 800245e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002460:	481b      	ldr	r0, [pc, #108]	@ (80024d0 <MX_RTC_Init+0xb8>)
 8002462:	f003 fa68 	bl	8005936 <HAL_RTC_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800246c:	f000 fce2 	bl	8002e34 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002470:	2300      	movs	r3, #0
 8002472:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002474:	2300      	movs	r3, #0
 8002476:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002478:	2300      	movs	r3, #0
 800247a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800247c:	2300      	movs	r3, #0
 800247e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	2201      	movs	r2, #1
 8002488:	4619      	mov	r1, r3
 800248a:	4811      	ldr	r0, [pc, #68]	@ (80024d0 <MX_RTC_Init+0xb8>)
 800248c:	f003 fadb 	bl	8005a46 <HAL_RTC_SetTime>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002496:	f000 fccd 	bl	8002e34 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800249a:	2301      	movs	r3, #1
 800249c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800249e:	2301      	movs	r3, #1
 80024a0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80024aa:	463b      	mov	r3, r7
 80024ac:	2201      	movs	r2, #1
 80024ae:	4619      	mov	r1, r3
 80024b0:	4807      	ldr	r0, [pc, #28]	@ (80024d0 <MX_RTC_Init+0xb8>)
 80024b2:	f003 fbc1 	bl	8005c38 <HAL_RTC_SetDate>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80024bc:	f000 fcba 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // make sure RTC wkup is not running:
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80024c0:	4803      	ldr	r0, [pc, #12]	@ (80024d0 <MX_RTC_Init+0xb8>)
 80024c2:	f003 fdf1 	bl	80060a8 <HAL_RTCEx_DeactivateWakeUpTimer>

  /* USER CODE END RTC_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20001eec 	.word	0x20001eec
 80024d4:	40002800 	.word	0x40002800

080024d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80024de:	4b20      	ldr	r3, [pc, #128]	@ (8002560 <MX_SPI3_Init+0x88>)
 80024e0:	4a20      	ldr	r2, [pc, #128]	@ (8002564 <MX_SPI3_Init+0x8c>)
 80024e2:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80024e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <MX_SPI3_Init+0x88>)
 80024e6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024ea:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80024ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <MX_SPI3_Init+0x88>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80024f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002560 <MX_SPI3_Init+0x88>)
 80024f4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80024f8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024fa:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <MX_SPI3_Init+0x88>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002500:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <MX_SPI3_Init+0x88>)
 8002502:	2200      	movs	r2, #0
 8002504:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002506:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <MX_SPI3_Init+0x88>)
 8002508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800250c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800250e:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <MX_SPI3_Init+0x88>)
 8002510:	2218      	movs	r2, #24
 8002512:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002514:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <MX_SPI3_Init+0x88>)
 8002516:	2200      	movs	r2, #0
 8002518:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800251a:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <MX_SPI3_Init+0x88>)
 800251c:	2200      	movs	r2, #0
 800251e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002520:	4b0f      	ldr	r3, [pc, #60]	@ (8002560 <MX_SPI3_Init+0x88>)
 8002522:	2200      	movs	r2, #0
 8002524:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002526:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <MX_SPI3_Init+0x88>)
 8002528:	2207      	movs	r2, #7
 800252a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800252c:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <MX_SPI3_Init+0x88>)
 800252e:	2200      	movs	r2, #0
 8002530:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002532:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <MX_SPI3_Init+0x88>)
 8002534:	2208      	movs	r2, #8
 8002536:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002538:	4809      	ldr	r0, [pc, #36]	@ (8002560 <MX_SPI3_Init+0x88>)
 800253a:	f003 fe39 	bl	80061b0 <HAL_SPI_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8002544:	f000 fc76 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */
  /*
   * This dummy sequence sets clock LOW when idle, MOSI and MISO to a definite state (either HIGH or LOW)
   */
   uint8_t dummy = 0xFF;
 8002548:	23ff      	movs	r3, #255	@ 0xff
 800254a:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Transmit(&hspi3, &dummy, 1, 10);
 800254c:	1df9      	adds	r1, r7, #7
 800254e:	230a      	movs	r3, #10
 8002550:	2201      	movs	r2, #1
 8002552:	4803      	ldr	r0, [pc, #12]	@ (8002560 <MX_SPI3_Init+0x88>)
 8002554:	f003 fecf 	bl	80062f6 <HAL_SPI_Transmit>

  /* USER CODE END SPI3_Init 2 */

}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20001f10 	.word	0x20001f10
 8002564:	40003c00 	.word	0x40003c00

08002568 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800256c:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <MX_USART2_UART_Init+0x58>)
 800256e:	4a15      	ldr	r2, [pc, #84]	@ (80025c4 <MX_USART2_UART_Init+0x5c>)
 8002570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002572:	4b13      	ldr	r3, [pc, #76]	@ (80025c0 <MX_USART2_UART_Init+0x58>)
 8002574:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800257a:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <MX_USART2_UART_Init+0x58>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002580:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <MX_USART2_UART_Init+0x58>)
 8002582:	2200      	movs	r2, #0
 8002584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002586:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <MX_USART2_UART_Init+0x58>)
 8002588:	2200      	movs	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800258c:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <MX_USART2_UART_Init+0x58>)
 800258e:	220c      	movs	r2, #12
 8002590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002592:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <MX_USART2_UART_Init+0x58>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002598:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <MX_USART2_UART_Init+0x58>)
 800259a:	2200      	movs	r2, #0
 800259c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <MX_USART2_UART_Init+0x58>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <MX_USART2_UART_Init+0x58>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025aa:	4805      	ldr	r0, [pc, #20]	@ (80025c0 <MX_USART2_UART_Init+0x58>)
 80025ac:	f004 fd2c 	bl	8007008 <HAL_UART_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80025b6:	f000 fc3d 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20001f74 	.word	0x20001f74
 80025c4:	40004400 	.word	0x40004400

080025c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	@ 0x28
 80025cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025de:	4b6f      	ldr	r3, [pc, #444]	@ (800279c <MX_GPIO_Init+0x1d4>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e2:	4a6e      	ldr	r2, [pc, #440]	@ (800279c <MX_GPIO_Init+0x1d4>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ea:	4b6c      	ldr	r3, [pc, #432]	@ (800279c <MX_GPIO_Init+0x1d4>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025f6:	4b69      	ldr	r3, [pc, #420]	@ (800279c <MX_GPIO_Init+0x1d4>)
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	4a68      	ldr	r2, [pc, #416]	@ (800279c <MX_GPIO_Init+0x1d4>)
 80025fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002602:	4b66      	ldr	r3, [pc, #408]	@ (800279c <MX_GPIO_Init+0x1d4>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b63      	ldr	r3, [pc, #396]	@ (800279c <MX_GPIO_Init+0x1d4>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	4a62      	ldr	r2, [pc, #392]	@ (800279c <MX_GPIO_Init+0x1d4>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261a:	4b60      	ldr	r3, [pc, #384]	@ (800279c <MX_GPIO_Init+0x1d4>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002626:	4b5d      	ldr	r3, [pc, #372]	@ (800279c <MX_GPIO_Init+0x1d4>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	4a5c      	ldr	r2, [pc, #368]	@ (800279c <MX_GPIO_Init+0x1d4>)
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002632:	4b5a      	ldr	r3, [pc, #360]	@ (800279c <MX_GPIO_Init+0x1d4>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800263e:	4b57      	ldr	r3, [pc, #348]	@ (800279c <MX_GPIO_Init+0x1d4>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002642:	4a56      	ldr	r2, [pc, #344]	@ (800279c <MX_GPIO_Init+0x1d4>)
 8002644:	f043 0308 	orr.w	r3, r3, #8
 8002648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800264a:	4b54      	ldr	r3, [pc, #336]	@ (800279c <MX_GPIO_Init+0x1d4>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002656:	2200      	movs	r2, #0
 8002658:	2120      	movs	r1, #32
 800265a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800265e:	f001 fa0d 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM95_RST_GPIO_Port, RFM95_RST_Pin, GPIO_PIN_SET);
 8002662:	2201      	movs	r2, #1
 8002664:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002668:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800266c:	f001 fa06 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM95_CS_GPIO_Port, RFM95_CS_Pin, GPIO_PIN_SET);
 8002670:	2201      	movs	r2, #1
 8002672:	2104      	movs	r1, #4
 8002674:	484a      	ldr	r0, [pc, #296]	@ (80027a0 <MX_GPIO_Init+0x1d8>)
 8002676:	f001 fa01 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_GPIO_Port, Test_Pin, GPIO_PIN_RESET);
 800267a:	2200      	movs	r2, #0
 800267c:	2120      	movs	r1, #32
 800267e:	4849      	ldr	r0, [pc, #292]	@ (80027a4 <MX_GPIO_Init+0x1dc>)
 8002680:	f001 f9fc 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002684:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800268a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800268e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4619      	mov	r1, r3
 800269a:	4843      	ldr	r0, [pc, #268]	@ (80027a8 <MX_GPIO_Init+0x1e0>)
 800269c:	f001 f844 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80026a0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80026a4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a6:	2303      	movs	r3, #3
 80026a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	483c      	ldr	r0, [pc, #240]	@ (80027a8 <MX_GPIO_Init+0x1e0>)
 80026b6:	f001 f837 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80026ba:	f241 13d3 	movw	r3, #4563	@ 0x11d3
 80026be:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c0:	2303      	movs	r3, #3
 80026c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	4619      	mov	r1, r3
 80026ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026d2:	f001 f829 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80026d6:	2320      	movs	r3, #32
 80026d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026da:	2301      	movs	r3, #1
 80026dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026f0:	f001 f81a 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80026f4:	f64f 73d7 	movw	r3, #65495	@ 0xffd7
 80026f8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026fa:	2303      	movs	r3, #3
 80026fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	4619      	mov	r1, r3
 8002708:	4826      	ldr	r0, [pc, #152]	@ (80027a4 <MX_GPIO_Init+0x1dc>)
 800270a:	f001 f80d 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM95_DIO0_Pin RFM95_DIO1_Pin RFM95_DIO5_Pin */
  GPIO_InitStruct.Pin = RFM95_DIO0_Pin|RFM95_DIO1_Pin|RFM95_DIO5_Pin;
 800270e:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8002712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002714:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	4619      	mov	r1, r3
 8002724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002728:	f000 fffe 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM95_RST_Pin */
  GPIO_InitStruct.Pin = RFM95_RST_Pin;
 800272c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002732:	2311      	movs	r3, #17
 8002734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RFM95_RST_GPIO_Port, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002748:	f000 ffee 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM95_CS_Pin */
  GPIO_InitStruct.Pin = RFM95_CS_Pin;
 800274c:	2304      	movs	r3, #4
 800274e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002750:	2301      	movs	r3, #1
 8002752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002754:	2301      	movs	r3, #1
 8002756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002758:	2301      	movs	r3, #1
 800275a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RFM95_CS_GPIO_Port, &GPIO_InitStruct);
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4619      	mov	r1, r3
 8002762:	480f      	ldr	r0, [pc, #60]	@ (80027a0 <MX_GPIO_Init+0x1d8>)
 8002764:	f000 ffe0 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : Test_Pin */
  GPIO_InitStruct.Pin = Test_Pin;
 8002768:	2320      	movs	r3, #32
 800276a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276c:	2301      	movs	r3, #1
 800276e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Test_GPIO_Port, &GPIO_InitStruct);
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4619      	mov	r1, r3
 800277e:	4809      	ldr	r0, [pc, #36]	@ (80027a4 <MX_GPIO_Init+0x1dc>)
 8002780:	f000 ffd2 	bl	8003728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002784:	2200      	movs	r2, #0
 8002786:	2100      	movs	r1, #0
 8002788:	2017      	movs	r0, #23
 800278a:	f000 ff96 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800278e:	2017      	movs	r0, #23
 8002790:	f000 ffaf 	bl	80036f2 <HAL_NVIC_EnableIRQ>
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002794:	bf00      	nop
 8002796:	3728      	adds	r7, #40	@ 0x28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	48000c00 	.word	0x48000c00
 80027a4:	48000400 	.word	0x48000400
 80027a8:	48000800 	.word	0x48000800

080027ac <init_rfm>:
// -------------- RFM95 user defined functions -------------------

/*
 *
 */
bool init_rfm(){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0

  // Start lptim timer
  HAL_LPTIM_Counter_Start_IT(&hlptim1, 0xFFFF);
 80027b0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80027b4:	482c      	ldr	r0, [pc, #176]	@ (8002868 <init_rfm+0xbc>)
 80027b6:	f001 fa33 	bl	8003c20 <HAL_LPTIM_Counter_Start_IT>

  // config RFM95
  rfm95_handle.rfm_timer  = &hlptim1;
 80027ba:	4b2c      	ldr	r3, [pc, #176]	@ (800286c <init_rfm+0xc0>)
 80027bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002868 <init_rfm+0xbc>)
 80027be:	601a      	str	r2, [r3, #0]
  rfm95_handle.spi_handle = &hspi3;
 80027c0:	4b2a      	ldr	r3, [pc, #168]	@ (800286c <init_rfm+0xc0>)
 80027c2:	4a2b      	ldr	r2, [pc, #172]	@ (8002870 <init_rfm+0xc4>)
 80027c4:	605a      	str	r2, [r3, #4]
  rfm95_handle.nrst_port  = RFM95_RST_GPIO_Port;
 80027c6:	4b29      	ldr	r3, [pc, #164]	@ (800286c <init_rfm+0xc0>)
 80027c8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80027cc:	611a      	str	r2, [r3, #16]
  rfm95_handle.nrst_pin   = RFM95_RST_Pin;
 80027ce:	4b27      	ldr	r3, [pc, #156]	@ (800286c <init_rfm+0xc0>)
 80027d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80027d4:	829a      	strh	r2, [r3, #20]
  rfm95_handle.nss_port   = RFM95_CS_GPIO_Port;
 80027d6:	4b25      	ldr	r3, [pc, #148]	@ (800286c <init_rfm+0xc0>)
 80027d8:	4a26      	ldr	r2, [pc, #152]	@ (8002874 <init_rfm+0xc8>)
 80027da:	609a      	str	r2, [r3, #8]
  rfm95_handle.nss_pin    = RFM95_CS_Pin;
 80027dc:	4b23      	ldr	r3, [pc, #140]	@ (800286c <init_rfm+0xc0>)
 80027de:	2204      	movs	r2, #4
 80027e0:	819a      	strh	r2, [r3, #12]

  rfm95_handle.precision_tick_frequency = LSE_CLK;
 80027e2:	4b22      	ldr	r3, [pc, #136]	@ (800286c <init_rfm+0xc0>)
 80027e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80027e8:	619a      	str	r2, [r3, #24]
  rfm95_handle.precision_tick_drift_ns_per_s = 20000;
 80027ea:	4b20      	ldr	r3, [pc, #128]	@ (800286c <init_rfm+0xc0>)
 80027ec:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80027f0:	61da      	str	r2, [r3, #28]
  rfm95_handle.get_precision_tick = get_precision_tick;
 80027f2:	4b1e      	ldr	r3, [pc, #120]	@ (800286c <init_rfm+0xc0>)
 80027f4:	4a20      	ldr	r2, [pc, #128]	@ (8002878 <init_rfm+0xcc>)
 80027f6:	621a      	str	r2, [r3, #32]
  rfm95_handle.precision_sleep_until = precision_sleep_until;
 80027f8:	4b1c      	ldr	r3, [pc, #112]	@ (800286c <init_rfm+0xc0>)
 80027fa:	4a20      	ldr	r2, [pc, #128]	@ (800287c <init_rfm+0xd0>)
 80027fc:	625a      	str	r2, [r3, #36]	@ 0x24
  rfm95_handle.on_after_interrupts_configured = rfm95_after_interrupts_configured;
 80027fe:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <init_rfm+0xc0>)
 8002800:	4a1f      	ldr	r2, [pc, #124]	@ (8002880 <init_rfm+0xd4>)
 8002802:	62da      	str	r2, [r3, #44]	@ 0x2c
  //rfm95_handle.random_int = random_int;
  rfm95_handle.get_battery_level = get_battery_level;
 8002804:	4b19      	ldr	r3, [pc, #100]	@ (800286c <init_rfm+0xc0>)
 8002806:	4a1f      	ldr	r2, [pc, #124]	@ (8002884 <init_rfm+0xd8>)
 8002808:	629a      	str	r2, [r3, #40]	@ 0x28

  // Modify parameters here:
  rfm95_set_power(&rfm95_handle, LORA_TX_POWER); // power 2 dBm - 17 dBm
 800280a:	2102      	movs	r1, #2
 800280c:	4817      	ldr	r0, [pc, #92]	@ (800286c <init_rfm+0xc0>)
 800280e:	f7ff f8a2 	bl	8001956 <rfm95_set_power>
  rfm95_set_frequency(&rfm95_handle, LORA_CH_FREQ);
 8002812:	491d      	ldr	r1, [pc, #116]	@ (8002888 <init_rfm+0xdc>)
 8002814:	4815      	ldr	r0, [pc, #84]	@ (800286c <init_rfm+0xc0>)
 8002816:	f7ff f8eb 	bl	80019f0 <rfm95_set_frequency>
  rfm95_set_BW(&rfm95_handle, LORA_BW);
 800281a:	2101      	movs	r1, #1
 800281c:	4813      	ldr	r0, [pc, #76]	@ (800286c <init_rfm+0xc0>)
 800281e:	f7ff f8d6 	bl	80019ce <rfm95_set_BW>
  rfm95_set_CR(&rfm95_handle, LORA_CR);
 8002822:	2100      	movs	r1, #0
 8002824:	4811      	ldr	r0, [pc, #68]	@ (800286c <init_rfm+0xc0>)
 8002826:	f7ff f8c2 	bl	80019ae <rfm95_set_CR>
  rfm95_set_SF(&rfm95_handle, LORA_SF);
 800282a:	2100      	movs	r1, #0
 800282c:	480f      	ldr	r0, [pc, #60]	@ (800286c <init_rfm+0xc0>)
 800282e:	f7ff f8ae 	bl	800198e <rfm95_set_SF>
  rfm95_set_syncWord(&rfm95_handle, LORA_SYNC_WORD);
 8002832:	21ba      	movs	r1, #186	@ 0xba
 8002834:	480d      	ldr	r0, [pc, #52]	@ (800286c <init_rfm+0xc0>)
 8002836:	f7ff f8fb 	bl	8001a30 <rfm95_set_syncWord>

  // initialize RFM95
  if(!rfm95_init(&rfm95_handle)) return false;
 800283a:	480c      	ldr	r0, [pc, #48]	@ (800286c <init_rfm+0xc0>)
 800283c:	f7fe ff86 	bl	800174c <rfm95_init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <init_rfm+0x9e>
 8002846:	2300      	movs	r3, #0
 8002848:	e00b      	b.n	8002862 <init_rfm+0xb6>

  // set RFM95 to continuous RX mode
  if(!rfm95_enter_rx_mode(&rfm95_handle)) return false;
 800284a:	4808      	ldr	r0, [pc, #32]	@ (800286c <init_rfm+0xc0>)
 800284c:	f7ff fa89 	bl	8001d62 <rfm95_enter_rx_mode>
 8002850:	4603      	mov	r3, r0
 8002852:	f083 0301 	eor.w	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <init_rfm+0xb4>
 800285c:	2300      	movs	r3, #0
 800285e:	e000      	b.n	8002862 <init_rfm+0xb6>

  return true;
 8002860:	2301      	movs	r3, #1
}
 8002862:	4618      	mov	r0, r3
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20001ea4 	.word	0x20001ea4
 800286c:	200000a4 	.word	0x200000a4
 8002870:	20001f10 	.word	0x20001f10
 8002874:	48000c00 	.word	0x48000c00
 8002878:	0800288d 	.word	0x0800288d
 800287c:	080028bd 	.word	0x080028bd
 8002880:	08002985 	.word	0x08002985
 8002884:	08002975 	.word	0x08002975
 8002888:	33bca100 	.word	0x33bca100

0800288c <get_precision_tick>:

/*
 * return precise timing based on internal LPTIM module
 */
static uint32_t get_precision_tick(){
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002892:	b672      	cpsid	i
}
 8002894:	bf00      	nop
	__disable_irq();
	uint32_t precision_tick = lptim_tick_msb | HAL_LPTIM_ReadCounter(&hlptim1);
 8002896:	4807      	ldr	r0, [pc, #28]	@ (80028b4 <get_precision_tick+0x28>)
 8002898:	f001 fa82 	bl	8003da0 <HAL_LPTIM_ReadCounter>
 800289c:	4602      	mov	r2, r0
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <get_precision_tick+0x2c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80028a6:	b662      	cpsie	i
}
 80028a8:	bf00      	nop
	__enable_irq();
	return precision_tick;
 80028aa:	687b      	ldr	r3, [r7, #4]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20001ea4 	.word	0x20001ea4
 80028b8:	20001ffc 	.word	0x20001ffc

080028bc <precision_sleep_until>:

/*
 * Allows to set the MCU into STOP2 mode with accurate wkup timer
 */
static void precision_sleep_until(uint32_t target_ticks){
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
	while(1){
		uint32_t curr_tick = get_precision_tick();
 80028c4:	f7ff ffe2 	bl	800288c <get_precision_tick>
 80028c8:	6178      	str	r0, [r7, #20]

		// exit condition:
		if(target_ticks < curr_tick) break;
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d33f      	bcc.n	8002952 <precision_sleep_until+0x96>

		uint32_t sleep_ticks = target_ticks - curr_tick;
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	613b      	str	r3, [r7, #16]

		// avoid short sleep intervals:
		if(sleep_ticks < 10) break;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b09      	cmp	r3, #9
 80028de:	d93a      	bls.n	8002956 <precision_sleep_until+0x9a>
		else {
			// overall CMP value - some margin (needed to reset clock configurations after stop mode2)
			uint32_t compare_tick = (curr_tick & 0xFFFF) + sleep_ticks - 10;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	3b0a      	subs	r3, #10
 80028ea:	60fb      	str	r3, [r7, #12]

			if (compare_tick >= 0xFFFF){ // ARR will awake MCU before compare
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d904      	bls.n	8002900 <precision_sleep_until+0x44>
				HAL_SuspendTick();
 80028f6:	f000 fde5 	bl	80034c4 <HAL_SuspendTick>
				enterStopMode();
 80028fa:	f000 f967 	bl	8002bcc <enterStopMode>
 80028fe:	e7e1      	b.n	80028c4 <precision_sleep_until+0x8>
			} else { // otherwise CMP keeps MCU sleep all time
				__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 8002900:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <precision_sleep_until+0xb4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2208      	movs	r2, #8
 8002906:	605a      	str	r2, [r3, #4]
				__HAL_LPTIM_COMPARE_SET(&hlptim1, compare_tick);            // set CMP limit
 8002908:	4b19      	ldr	r3, [pc, #100]	@ (8002970 <precision_sleep_until+0xb4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	615a      	str	r2, [r3, #20]

				while (!__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK));  // wait for effective change
 8002910:	bf00      	nop
 8002912:	4b17      	ldr	r3, [pc, #92]	@ (8002970 <precision_sleep_until+0xb4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b08      	cmp	r3, #8
 800291e:	d1f8      	bne.n	8002912 <precision_sleep_until+0x56>

				__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);          // clear CMP interrupt flag
 8002920:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <precision_sleep_until+0xb4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2201      	movs	r2, #1
 8002926:	605a      	str	r2, [r3, #4]
				__HAL_LPTIM_ENABLE_IT(&hlptim1, LPTIM_IT_CMPM);             // enable CMP interrupt
 8002928:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <precision_sleep_until+0xb4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <precision_sleep_until+0xb4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	609a      	str	r2, [r3, #8]

				HAL_SuspendTick();
 8002938:	f000 fdc4 	bl	80034c4 <HAL_SuspendTick>
				enterStopMode();
 800293c:	f000 f946 	bl	8002bcc <enterStopMode>

				__HAL_LPTIM_DISABLE_IT(&hlptim1, LPTIM_IT_CMPM);            // disable CMP interrupt
 8002940:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <precision_sleep_until+0xb4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <precision_sleep_until+0xb4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	609a      	str	r2, [r3, #8]
	while(1){
 8002950:	e7b8      	b.n	80028c4 <precision_sleep_until+0x8>
		if(target_ticks < curr_tick) break;
 8002952:	bf00      	nop
 8002954:	e000      	b.n	8002958 <precision_sleep_until+0x9c>
		if(sleep_ticks < 10) break;
 8002956:	bf00      	nop
			}
		}
	}

	while(get_precision_tick() < target_ticks);                       // wait residue time here ( < 10 ticks)
 8002958:	bf00      	nop
 800295a:	f7ff ff97 	bl	800288c <get_precision_tick>
 800295e:	4602      	mov	r2, r0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4293      	cmp	r3, r2
 8002964:	d8f9      	bhi.n	800295a <precision_sleep_until+0x9e>
}
 8002966:	bf00      	nop
 8002968:	bf00      	nop
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20001ea4 	.word	0x20001ea4

08002974 <get_battery_level>:


static uint8_t get_battery_level(){
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
	return 0;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <rfm95_after_interrupts_configured>:

/*
 * This function is executed after initializing rfm95 (ready to accept interrupts
 * without hard fault errors)
 */
void rfm95_after_interrupts_configured(){
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002988:	2200      	movs	r2, #0
 800298a:	2100      	movs	r1, #0
 800298c:	2028      	movs	r0, #40	@ 0x28
 800298e:	f000 fe94 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002992:	2028      	movs	r0, #40	@ 0x28
 8002994:	f000 fead 	bl	80036f2 <HAL_NVIC_EnableIRQ>
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}

0800299c <get_random_number>:
 * - 0 = no errors
 * - 1 = timeout
 * - 2 = seed error  -> RNG must be reinitialized (random number must be discarded)
 * - 3 = Clock error -> ensure rng_clk >= ahb_clk/16 (>= 5 MHz)
 */
uint8_t get_random_number(uint32_t *random_number, uint16_t timeout){
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]

  // enable RNG peripheral:
  __HAL_RNG_ENABLE(&hrng);
 80029a8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a5c <get_random_number+0xc0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b2b      	ldr	r3, [pc, #172]	@ (8002a5c <get_random_number+0xc0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0204 	orr.w	r2, r2, #4
 80029b6:	601a      	str	r2, [r3, #0]

  // clear clock error and seed error interrupt flags:
  __HAL_RNG_CLEAR_IT(&hrng, RNG_IT_CEI);
 80029b8:	4b28      	ldr	r3, [pc, #160]	@ (8002a5c <get_random_number+0xc0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0220 	mvn.w	r2, #32
 80029c0:	605a      	str	r2, [r3, #4]
  __HAL_RNG_CLEAR_IT(&hrng, RNG_IT_SEI);
 80029c2:	4b26      	ldr	r3, [pc, #152]	@ (8002a5c <get_random_number+0xc0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029ca:	605a      	str	r2, [r3, #4]

  // wait for data ready bit to be set:
  uint32_t start = HAL_GetTick();
 80029cc:	f000 fd4a 	bl	8003464 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]
  while(!__HAL_RNG_GET_FLAG(&hrng, RNG_FLAG_DRDY)){
 80029d2:	e011      	b.n	80029f8 <get_random_number+0x5c>
    if (HAL_GetTick() - start > timeout) {
 80029d4:	f000 fd46 	bl	8003464 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad2      	subs	r2, r2, r3
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d909      	bls.n	80029f8 <get_random_number+0x5c>
      __HAL_RNG_DISABLE(&hrng);
 80029e4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <get_random_number+0xc0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b1c      	ldr	r3, [pc, #112]	@ (8002a5c <get_random_number+0xc0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0204 	bic.w	r2, r2, #4
 80029f2:	601a      	str	r2, [r3, #0]
      return 1;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e02c      	b.n	8002a52 <get_random_number+0xb6>
  while(!__HAL_RNG_GET_FLAG(&hrng, RNG_FLAG_DRDY)){
 80029f8:	4b18      	ldr	r3, [pc, #96]	@ (8002a5c <get_random_number+0xc0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d1e6      	bne.n	80029d4 <get_random_number+0x38>
    }
  }

  // RNG can be switched off here:
  __HAL_RNG_DISABLE(&hrng);
 8002a06:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <get_random_number+0xc0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b13      	ldr	r3, [pc, #76]	@ (8002a5c <get_random_number+0xc0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0204 	bic.w	r2, r2, #4
 8002a14:	601a      	str	r2, [r3, #0]

  // check seed error:
  if(__HAL_RNG_GET_IT(&hrng, RNG_IT_SEI)) return 2;
 8002a16:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <get_random_number+0xc0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a20:	2b40      	cmp	r3, #64	@ 0x40
 8002a22:	d101      	bne.n	8002a28 <get_random_number+0x8c>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e014      	b.n	8002a52 <get_random_number+0xb6>

  // check clock error:
  if(__HAL_RNG_GET_IT(&hrng, RNG_IT_CEI)) return 3;
 8002a28:	4b0c      	ldr	r3, [pc, #48]	@ (8002a5c <get_random_number+0xc0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d101      	bne.n	8002a3a <get_random_number+0x9e>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e00b      	b.n	8002a52 <get_random_number+0xb6>

  *random_number = hrng.Instance->DR;
 8002a3a:	4b08      	ldr	r3, [pc, #32]	@ (8002a5c <get_random_number+0xc0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	601a      	str	r2, [r3, #0]

  // check event seed error occurred while loading data:
  if(*random_number == 0) return 2;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <get_random_number+0xb4>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e000      	b.n	8002a52 <get_random_number+0xb6>

  return 0;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20001edc 	.word	0x20001edc

08002a60 <random_wait>:
 * @param uint16_t  max represents maximum time (in ms)
 * @param uint16_t  min represents minimum time (in ms)
 *
 * @return uint16_t in range [min, max]
 */
static uint16_t random_wait(uint16_t min, uint16_t max){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	460a      	mov	r2, r1
 8002a6a:	80fb      	strh	r3, [r7, #6]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	80bb      	strh	r3, [r7, #4]
  if ((min >= max) || (max == 0)) return 0;
 8002a70:	88fa      	ldrh	r2, [r7, #6]
 8002a72:	88bb      	ldrh	r3, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d202      	bcs.n	8002a7e <random_wait+0x1e>
 8002a78:	88bb      	ldrh	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <random_wait+0x22>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e01d      	b.n	8002abe <random_wait+0x5e>

  uint32_t num;
  uint8_t rng_err = get_random_number(&num, 1);
 8002a82:	f107 0308 	add.w	r3, r7, #8
 8002a86:	2101      	movs	r1, #1
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff87 	bl	800299c <get_random_number>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	73fb      	strb	r3, [r7, #15]

  if (rng_err){
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <random_wait+0x3c>
    // TODO handle potential rng seed error/clock error here...

    num = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
  }

  uint16_t range = max - min + 1;
 8002a9c:	88ba      	ldrh	r2, [r7, #4]
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	81bb      	strh	r3, [r7, #12]
  return (uint16_t)(min + (num % range));
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	89ba      	ldrh	r2, [r7, #12]
 8002aac:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ab0:	fb01 f202 	mul.w	r2, r1, r2
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	4413      	add	r3, r2
 8002abc:	b29b      	uxth	r3, r3
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <schedule_tx_evt>:
 * @param uint16_t  max represents maximum time (in ms) for the random wait
 * @param uint16_t  min represents minimum time (in ms) for the random wait
 *
 * @return uint16_t in range [min, max]
 */
static void schedule_tx_evt(uint16_t min, uint16_t max){
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08e      	sub	sp, #56	@ 0x38
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	80fb      	strh	r3, [r7, #6]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	80bb      	strh	r3, [r7, #4]
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  // get random time between [min, max] (in milliseconds)
  uint16_t t_rand = random_wait(min, max);
 8002ad8:	88ba      	ldrh	r2, [r7, #4]
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ffbe 	bl	8002a60 <random_wait>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	86fb      	strh	r3, [r7, #54]	@ 0x36

  if (t_rand <= 5) {
 8002ae8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d80b      	bhi.n	8002b06 <schedule_tx_evt+0x3e>
    /*
     * if less than 5 ms (10 RTC ticks) are computed, skip the timer
     * and directly set a TX event
     */
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002aee:	4832      	ldr	r0, [pc, #200]	@ (8002bb8 <schedule_tx_evt+0xf0>)
 8002af0:	f003 fada 	bl	80060a8 <HAL_RTCEx_DeactivateWakeUpTimer>

    h_sys.evt_flags |= SYS_EVT_TX_PENDING;
 8002af4:	4b31      	ldr	r3, [pc, #196]	@ (8002bbc <schedule_tx_evt+0xf4>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f043 0304 	orr.w	r3, r3, #4
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	4b2e      	ldr	r3, [pc, #184]	@ (8002bbc <schedule_tx_evt+0xf4>)
 8002b02:	701a      	strb	r2, [r3, #0]
    return;
 8002b04:	e055      	b.n	8002bb2 <schedule_tx_evt+0xea>
  }

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002b06:	f107 0310 	add.w	r3, r7, #16
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	482a      	ldr	r0, [pc, #168]	@ (8002bb8 <schedule_tx_evt+0xf0>)
 8002b10:	f003 f836 	bl	8005b80 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);  // latch time
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	2200      	movs	r2, #0
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4826      	ldr	r0, [pc, #152]	@ (8002bb8 <schedule_tx_evt+0xf0>)
 8002b1e:	f003 f912 	bl	8005d46 <HAL_RTC_GetDate>

  // new EVT time in milliseconds
  uint32_t now_seconds = sTime.Hours * 3600 + sTime.Minutes * 60 + sTime.Seconds;
 8002b22:	7c3b      	ldrb	r3, [r7, #16]
 8002b24:	461a      	mov	r2, r3
 8002b26:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002b2a:	fb03 f202 	mul.w	r2, r3, r2
 8002b2e:	7c7b      	ldrb	r3, [r7, #17]
 8002b30:	4619      	mov	r1, r3
 8002b32:	460b      	mov	r3, r1
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	1a5b      	subs	r3, r3, r1
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	7cba      	ldrb	r2, [r7, #18]
 8002b3e:	4413      	add	r3, r2
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
  uint16_t milliseconds = (uint16_t)(((sTime.SecondFraction - sTime.SubSeconds) * 1000U) / (sTime.SecondFraction + 1));
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b4c:	fb03 f202 	mul.w	r2, r3, r2
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	3301      	adds	r3, #1
 8002b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b58:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  uint32_t new_evt_time = now_seconds*1000 + milliseconds + t_rand;
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b60:	fb03 f202 	mul.w	r2, r3, r2
 8002b64:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002b66:	441a      	add	r2, r3
 8002b68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b6a:	4413      	add	r3, r2
 8002b6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (RTC->CR & RTC_CR_WUTE) { /* RTC WKUP already running */
 8002b6e:	4b14      	ldr	r3, [pc, #80]	@ (8002bc0 <schedule_tx_evt+0xf8>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <schedule_tx_evt+0xc6>

    // If running timer is close to trigger -> wait for it
    if (tx_evt_time <= new_evt_time + 10) return;
 8002b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7c:	f103 020a 	add.w	r2, r3, #10
 8002b80:	4b10      	ldr	r3, [pc, #64]	@ (8002bc4 <schedule_tx_evt+0xfc>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d213      	bcs.n	8002bb0 <schedule_tx_evt+0xe8>

    // otherwise block previous timer and start a new one with shorter WKUP CNT
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002b88:	480b      	ldr	r0, [pc, #44]	@ (8002bb8 <schedule_tx_evt+0xf0>)
 8002b8a:	f003 fa8d 	bl	80060a8 <HAL_RTCEx_DeactivateWakeUpTimer>

  }

  tx_evt_time = new_evt_time;
 8002b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc4 <schedule_tx_evt+0xfc>)
 8002b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b92:	6013      	str	r3, [r2, #0]

  // compute corresponding RTC corresponding number of ticks
  uint32_t wakeUpCounter = (uint32_t) ((t_rand * LSE_CLK / 16u)/(1000u));
 8002b94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b96:	03db      	lsls	r3, r3, #15
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <schedule_tx_evt+0x100>)
 8002b9c:	fba3 2302 	umull	r2, r3, r3, r2
 8002ba0:	0a9b      	lsrs	r3, r3, #10
 8002ba2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeUpCounter, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ba8:	4803      	ldr	r0, [pc, #12]	@ (8002bb8 <schedule_tx_evt+0xf0>)
 8002baa:	f003 f9e9 	bl	8005f80 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002bae:	e000      	b.n	8002bb2 <schedule_tx_evt+0xea>
    if (tx_evt_time <= new_evt_time + 10) return;
 8002bb0:	bf00      	nop
}
 8002bb2:	3738      	adds	r7, #56	@ 0x38
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20001eec 	.word	0x20001eec
 8002bbc:	20000018 	.word	0x20000018
 8002bc0:	40002800 	.word	0x40002800
 8002bc4:	20002000 	.word	0x20002000
 8002bc8:	10624dd3 	.word	0x10624dd3

08002bcc <enterStopMode>:
// -------------------------- System Power down routines --------------------------------

/*
 * Enter stop mode and resume clock configurations on exit
 */
void enterStopMode(){
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0

  // Stop LPTIM and clear pending bits
  HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 8002bd0:	4812      	ldr	r0, [pc, #72]	@ (8002c1c <enterStopMode+0x50>)
 8002bd2:	f001 f8a3 	bl	8003d1c <HAL_LPTIM_Counter_Stop_IT>
  LPTIM1->ICR |= 0x3F;
 8002bd6:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <enterStopMode+0x54>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4a11      	ldr	r2, [pc, #68]	@ (8002c20 <enterStopMode+0x54>)
 8002bdc:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8002be0:	6053      	str	r3, [r2, #4]

  // CLear LPTIM IRQ at NVIC level
  NVIC_ClearPendingIRQ(LPTIM1_IRQn);
 8002be2:	2041      	movs	r0, #65	@ 0x41
 8002be4:	f7ff f9f6 	bl	8001fd4 <__NVIC_ClearPendingIRQ>

  // wake from HSI --> faster wake up sequence:
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_HSI);
 8002be8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <enterStopMode+0x58>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <enterStopMode+0x58>)
 8002bee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bf2:	6093      	str	r3, [r2, #8]

	// Enter stop mode 2:
	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f001 fb5f 	bl	80042b8 <HAL_PWREx_EnterSTOP2Mode>

	// awake here...

	// resume system clock:
	if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) MySystemClock_Config();
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <enterStopMode+0x58>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <enterStopMode+0x3e>
 8002c06:	f000 f80f 	bl	8002c28 <MySystemClock_Config>

	// resume system tick with correct clock
	HAL_ResumeTick();
 8002c0a:	f000 fc6b 	bl	80034e4 <HAL_ResumeTick>

	// Enable LPTIM again:
	HAL_LPTIM_Counter_Start_IT(&hlptim1, 0xFFFF);
 8002c0e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002c12:	4802      	ldr	r0, [pc, #8]	@ (8002c1c <enterStopMode+0x50>)
 8002c14:	f001 f804 	bl	8003c20 <HAL_LPTIM_Counter_Start_IT>

}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20001ea4 	.word	0x20001ea4
 8002c20:	40007c00 	.word	0x40007c00
 8002c24:	40021000 	.word	0x40021000

08002c28 <MySystemClock_Config>:
/*
 * Modified clock setup function:
 * -> Avoid repeating initialization for the LSE 32 kHz clock if already running.
 *    Doing this every time the MCU exits STOP mode, results in a corrupted timing accuracy.
 */
void MySystemClock_Config(void) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b096      	sub	sp, #88	@ 0x58
 8002c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c2e:	f107 0314 	add.w	r3, r7, #20
 8002c32:	2244      	movs	r2, #68	@ 0x44
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f005 f8b2 	bl	8007da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c3c:	463b      	mov	r3, r7
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	60da      	str	r2, [r3, #12]
 8002c48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002c4a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c4e:	f001 fadd 	bl	800420c <HAL_PWREx_ControlVoltageScaling>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MySystemClock_Config+0x34>
  {
    Error_Handler();
 8002c58:	f000 f8ec 	bl	8002e34 <Error_Handler>
  }

  /** Configure LSE Drive Capability only if it
  */
  if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON) == 0) || (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) != 1){
 8002c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d08 <MySystemClock_Config+0xe0>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d106      	bne.n	8002c78 <MySystemClock_Config+0x50>
 8002c6a:	4b27      	ldr	r3, [pc, #156]	@ (8002d08 <MySystemClock_Config+0xe0>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d00b      	beq.n	8002c90 <MySystemClock_Config+0x68>
  	HAL_PWR_EnableBkUpAccess();
 8002c78:	f001 faaa 	bl	80041d0 <HAL_PWR_EnableBkUpAccess>
		__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c7c:	4b22      	ldr	r3, [pc, #136]	@ (8002d08 <MySystemClock_Config+0xe0>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c82:	4a21      	ldr	r2, [pc, #132]	@ (8002d08 <MySystemClock_Config+0xe0>)
 8002c84:	f023 0318 	bic.w	r3, r3, #24
 8002c88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8002c8c:	2304      	movs	r3, #4
 8002c8e:	617b      	str	r3, [r7, #20]


  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType |= RCC_OSCILLATORTYPE_HSI;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f043 0302 	orr.w	r3, r3, #2
 8002c96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ca0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ca2:	2310      	movs	r3, #16
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002caa:	2302      	movs	r3, #2
 8002cac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002cb2:	230a      	movs	r3, #10
 8002cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002cb6:	2307      	movs	r3, #7
 8002cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc2:	f107 0314 	add.w	r3, r7, #20
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 fb22 	bl	8004310 <HAL_RCC_OscConfig>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MySystemClock_Config+0xae>
  {
    Error_Handler();
 8002cd2:	f000 f8af 	bl	8002e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cd6:	230f      	movs	r3, #15
 8002cd8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002cea:	463b      	mov	r3, r7
 8002cec:	2104      	movs	r1, #4
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 feea 	bl	8004ac8 <HAL_RCC_ClockConfig>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MySystemClock_Config+0xd6>
  {
    Error_Handler();
 8002cfa:	f000 f89b 	bl	8002e34 <Error_Handler>
  }
}
 8002cfe:	bf00      	nop
 8002d00:	3758      	adds	r7, #88	@ 0x58
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000

08002d0c <HAL_LPTIM_AutoReloadMatchCallback>:


// ------------------------------------- Call-backs --------------------------------------

// Auto-reload callback for LPTIM module
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  lptim_tick_msb += 0x10000;
 8002d14:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <HAL_LPTIM_AutoReloadMatchCallback+0x20>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002d1c:	4a03      	ldr	r2, [pc, #12]	@ (8002d2c <HAL_LPTIM_AutoReloadMatchCallback+0x20>)
 8002d1e:	6013      	str	r3, [r2, #0]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	20001ffc 	.word	0x20001ffc

08002d30 <HAL_LPTIM_CompareMatchCallback>:

// Compare match callback for LPTIM module
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  // do nothing...
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_RTCEx_WakeUpTimerEventCallback>:

// RTC wkup timer -> needed to schedule tx events
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  h_sys.evt_flags |= SYS_EVT_TX_PENDING;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8002d5a:	701a      	strb	r2, [r3, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	20000018 	.word	0x20000018

08002d6c <HAL_GPIO_EXTI_Callback>:

// GPIO external interrupts callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	80fb      	strh	r3, [r7, #6]

	// Events on RFM95 interrupt pins
  if (GPIO_Pin == RFM95_DIO0_Pin) {
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d7c:	d112      	bne.n	8002da4 <HAL_GPIO_EXTI_Callback+0x38>
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO0);
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4813      	ldr	r0, [pc, #76]	@ (8002dd0 <HAL_GPIO_EXTI_Callback+0x64>)
 8002d82:	f7ff f905 	bl	8001f90 <rfm95_on_interrupt>

    // something received
    if(rfm95_handle.rfm_status == RXCONTIN_MODE) h_sys.evt_flags |= SYS_EVT_RX_PENDING;
 8002d86:	4b12      	ldr	r3, [pc, #72]	@ (8002dd0 <HAL_GPIO_EXTI_Callback+0x64>)
 8002d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d119      	bne.n	8002dc6 <HAL_GPIO_EXTI_Callback+0x5a>
 8002d92:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <HAL_GPIO_EXTI_Callback+0x68>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd4 <HAL_GPIO_EXTI_Callback+0x68>)
 8002da0:	701a      	strb	r2, [r3, #0]
  } else if (GPIO_Pin == RFM95_DIO1_Pin) {
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
  } else if (GPIO_Pin == RFM95_DIO5_Pin) {
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
  }
}
 8002da2:	e010      	b.n	8002dc6 <HAL_GPIO_EXTI_Callback+0x5a>
  } else if (GPIO_Pin == RFM95_DIO1_Pin) {
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002daa:	d104      	bne.n	8002db6 <HAL_GPIO_EXTI_Callback+0x4a>
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
 8002dac:	2101      	movs	r1, #1
 8002dae:	4808      	ldr	r0, [pc, #32]	@ (8002dd0 <HAL_GPIO_EXTI_Callback+0x64>)
 8002db0:	f7ff f8ee 	bl	8001f90 <rfm95_on_interrupt>
}
 8002db4:	e007      	b.n	8002dc6 <HAL_GPIO_EXTI_Callback+0x5a>
  } else if (GPIO_Pin == RFM95_DIO5_Pin) {
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dbc:	d103      	bne.n	8002dc6 <HAL_GPIO_EXTI_Callback+0x5a>
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	4803      	ldr	r0, [pc, #12]	@ (8002dd0 <HAL_GPIO_EXTI_Callback+0x64>)
 8002dc2:	f7ff f8e5 	bl	8001f90 <rfm95_on_interrupt>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200000a4 	.word	0x200000a4
 8002dd4:	20000018 	.word	0x20000018

08002dd8 <_write>:
}

/*
 * Function used to print on UART serial (DEBUG)
 */
int _write(int file, char *ptr, int len) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	4804      	ldr	r0, [pc, #16]	@ (8002e00 <_write+0x28>)
 8002df0:	f004 f958 	bl	80070a4 <HAL_UART_Transmit>
  return len;
 8002df4:	687b      	ldr	r3, [r7, #4]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20001f74 	.word	0x20001f74

08002e04 <debug_pin_set>:
 *  target_function();
 *  debug_pin_reset();
 *
 * allows to measure time execution of the target_function().
 */
void debug_pin_set(){
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Test_GPIO_Port, Test_Pin, GPIO_PIN_SET);
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2120      	movs	r1, #32
 8002e0c:	4802      	ldr	r0, [pc, #8]	@ (8002e18 <debug_pin_set+0x14>)
 8002e0e:	f000 fe35 	bl	8003a7c <HAL_GPIO_WritePin>
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	48000400 	.word	0x48000400

08002e1c <debug_pin_rst>:

void debug_pin_rst(){
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Test_GPIO_Port, Test_Pin, GPIO_PIN_RESET);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2120      	movs	r1, #32
 8002e24:	4802      	ldr	r0, [pc, #8]	@ (8002e30 <debug_pin_rst+0x14>)
 8002e26:	f000 fe29 	bl	8003a7c <HAL_GPIO_WritePin>
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	48000400 	.word	0x48000400

08002e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e38:	b672      	cpsid	i
}
 8002e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <Error_Handler+0x8>

08002e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e46:	4b0f      	ldr	r3, [pc, #60]	@ (8002e84 <HAL_MspInit+0x44>)
 8002e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002e84 <HAL_MspInit+0x44>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e52:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <HAL_MspInit+0x44>)
 8002e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	607b      	str	r3, [r7, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <HAL_MspInit+0x44>)
 8002e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e62:	4a08      	ldr	r2, [pc, #32]	@ (8002e84 <HAL_MspInit+0x44>)
 8002e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e68:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e6a:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <HAL_MspInit+0x44>)
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000

08002e88 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b0a6      	sub	sp, #152	@ 0x98
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e90:	f107 0310 	add.w	r3, r7, #16
 8002e94:	2288      	movs	r2, #136	@ 0x88
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f004 ff81 	bl	8007da0 <memset>
  if(hlptim->Instance==LPTIM1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a15      	ldr	r2, [pc, #84]	@ (8002ef8 <HAL_LPTIM_MspInit+0x70>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d123      	bne.n	8002ef0 <HAL_LPTIM_MspInit+0x68>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002ea8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002eac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002eae:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002eb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eb4:	f107 0310 	add.w	r3, r7, #16
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f002 f829 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8002ec4:	f7ff ffb6 	bl	8002e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <HAL_LPTIM_MspInit+0x74>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8002efc <HAL_LPTIM_MspInit+0x74>)
 8002ece:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <HAL_LPTIM_MspInit+0x74>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	2041      	movs	r0, #65	@ 0x41
 8002ee6:	f000 fbe8 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002eea:	2041      	movs	r0, #65	@ 0x41
 8002eec:	f000 fc01 	bl	80036f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 8002ef0:	bf00      	nop
 8002ef2:	3798      	adds	r7, #152	@ 0x98
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40007c00 	.word	0x40007c00
 8002efc:	40021000 	.word	0x40021000

08002f00 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b0a6      	sub	sp, #152	@ 0x98
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f08:	f107 0310 	add.w	r3, r7, #16
 8002f0c:	2288      	movs	r2, #136	@ 0x88
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f004 ff45 	bl	8007da0 <memset>
  if(hrng->Instance==RNG)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a12      	ldr	r2, [pc, #72]	@ (8002f64 <HAL_RNG_MspInit+0x64>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d11c      	bne.n	8002f5a <HAL_RNG_MspInit+0x5a>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002f20:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002f24:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8002f26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002f2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f2e:	f107 0310 	add.w	r3, r7, #16
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 ffec 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_RNG_MspInit+0x42>
    {
      Error_Handler();
 8002f3e:	f7ff ff79 	bl	8002e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002f42:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <HAL_RNG_MspInit+0x68>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f46:	4a08      	ldr	r2, [pc, #32]	@ (8002f68 <HAL_RNG_MspInit+0x68>)
 8002f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f4e:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <HAL_RNG_MspInit+0x68>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8002f5a:	bf00      	nop
 8002f5c:	3798      	adds	r7, #152	@ 0x98
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	50060800 	.word	0x50060800
 8002f68:	40021000 	.word	0x40021000

08002f6c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b0a4      	sub	sp, #144	@ 0x90
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f74:	f107 0308 	add.w	r3, r7, #8
 8002f78:	2288      	movs	r2, #136	@ 0x88
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f004 ff0f 	bl	8007da0 <memset>
  if(hrtc->Instance==RTC)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a14      	ldr	r2, [pc, #80]	@ (8002fd8 <HAL_RTC_MspInit+0x6c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d120      	bne.n	8002fce <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f90:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 ffb6 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002faa:	f7ff ff43 	bl	8002e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002fae:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <HAL_RTC_MspInit+0x70>)
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb4:	4a09      	ldr	r2, [pc, #36]	@ (8002fdc <HAL_RTC_MspInit+0x70>)
 8002fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2003      	movs	r0, #3
 8002fc4:	f000 fb79 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002fc8:	2003      	movs	r0, #3
 8002fca:	f000 fb92 	bl	80036f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002fce:	bf00      	nop
 8002fd0:	3790      	adds	r7, #144	@ 0x90
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40002800 	.word	0x40002800
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	@ 0x28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 0314 	add.w	r3, r7, #20
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a20      	ldr	r2, [pc, #128]	@ (8003080 <HAL_SPI_MspInit+0xa0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d139      	bne.n	8003076 <HAL_SPI_MspInit+0x96>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003002:	4b20      	ldr	r3, [pc, #128]	@ (8003084 <HAL_SPI_MspInit+0xa4>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003006:	4a1f      	ldr	r2, [pc, #124]	@ (8003084 <HAL_SPI_MspInit+0xa4>)
 8003008:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800300c:	6593      	str	r3, [r2, #88]	@ 0x58
 800300e:	4b1d      	ldr	r3, [pc, #116]	@ (8003084 <HAL_SPI_MspInit+0xa4>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003012:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800301a:	4b1a      	ldr	r3, [pc, #104]	@ (8003084 <HAL_SPI_MspInit+0xa4>)
 800301c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301e:	4a19      	ldr	r2, [pc, #100]	@ (8003084 <HAL_SPI_MspInit+0xa4>)
 8003020:	f043 0304 	orr.w	r3, r3, #4
 8003024:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003026:	4b17      	ldr	r3, [pc, #92]	@ (8003084 <HAL_SPI_MspInit+0xa4>)
 8003028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003032:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003038:	2302      	movs	r3, #2
 800303a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003040:	2303      	movs	r3, #3
 8003042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003044:	2306      	movs	r3, #6
 8003046:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4619      	mov	r1, r3
 800304e:	480e      	ldr	r0, [pc, #56]	@ (8003088 <HAL_SPI_MspInit+0xa8>)
 8003050:	f000 fb6a 	bl	8003728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003054:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800305e:	2301      	movs	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003062:	2303      	movs	r3, #3
 8003064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003066:	2306      	movs	r3, #6
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800306a:	f107 0314 	add.w	r3, r7, #20
 800306e:	4619      	mov	r1, r3
 8003070:	4805      	ldr	r0, [pc, #20]	@ (8003088 <HAL_SPI_MspInit+0xa8>)
 8003072:	f000 fb59 	bl	8003728 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8003076:	bf00      	nop
 8003078:	3728      	adds	r7, #40	@ 0x28
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40003c00 	.word	0x40003c00
 8003084:	40021000 	.word	0x40021000
 8003088:	48000800 	.word	0x48000800

0800308c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b0ac      	sub	sp, #176	@ 0xb0
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	2288      	movs	r2, #136	@ 0x88
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f004 fe77 	bl	8007da0 <memset>
  if(huart->Instance==USART2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a21      	ldr	r2, [pc, #132]	@ (800313c <HAL_UART_MspInit+0xb0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d13b      	bne.n	8003134 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80030bc:	2302      	movs	r3, #2
 80030be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80030c0:	2300      	movs	r3, #0
 80030c2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	4618      	mov	r0, r3
 80030ca:	f001 ff21 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80030d4:	f7ff feae 	bl	8002e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030d8:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <HAL_UART_MspInit+0xb4>)
 80030da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030dc:	4a18      	ldr	r2, [pc, #96]	@ (8003140 <HAL_UART_MspInit+0xb4>)
 80030de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80030e4:	4b16      	ldr	r3, [pc, #88]	@ (8003140 <HAL_UART_MspInit+0xb4>)
 80030e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f0:	4b13      	ldr	r3, [pc, #76]	@ (8003140 <HAL_UART_MspInit+0xb4>)
 80030f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f4:	4a12      	ldr	r2, [pc, #72]	@ (8003140 <HAL_UART_MspInit+0xb4>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030fc:	4b10      	ldr	r3, [pc, #64]	@ (8003140 <HAL_UART_MspInit+0xb4>)
 80030fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003108:	230c      	movs	r3, #12
 800310a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311a:	2303      	movs	r3, #3
 800311c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003120:	2307      	movs	r3, #7
 8003122:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003126:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800312a:	4619      	mov	r1, r3
 800312c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003130:	f000 fafa 	bl	8003728 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003134:	bf00      	nop
 8003136:	37b0      	adds	r7, #176	@ 0xb0
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40004400 	.word	0x40004400
 8003140:	40021000 	.word	0x40021000

08003144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003148:	bf00      	nop
 800314a:	e7fd      	b.n	8003148 <NMI_Handler+0x4>

0800314c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003150:	bf00      	nop
 8003152:	e7fd      	b.n	8003150 <HardFault_Handler+0x4>

08003154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003158:	bf00      	nop
 800315a:	e7fd      	b.n	8003158 <MemManage_Handler+0x4>

0800315c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003160:	bf00      	nop
 8003162:	e7fd      	b.n	8003160 <BusFault_Handler+0x4>

08003164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003168:	bf00      	nop
 800316a:	e7fd      	b.n	8003168 <UsageFault_Handler+0x4>

0800316c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800319a:	f000 f94f 	bl	800343c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80031a8:	4802      	ldr	r0, [pc, #8]	@ (80031b4 <RTC_WKUP_IRQHandler+0x10>)
 80031aa:	f002 ffdb 	bl	8006164 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20001eec 	.word	0x20001eec

080031b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO0_Pin);
 80031bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80031c0:	f000 fc74 	bl	8003aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031c4:	bf00      	nop
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO1_Pin);
 80031cc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80031d0:	f000 fc6c 	bl	8003aac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO5_Pin);
 80031d4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80031d8:	f000 fc68 	bl	8003aac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80031dc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80031e0:	f000 fc64 	bl	8003aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80031ec:	4802      	ldr	r0, [pc, #8]	@ (80031f8 <LPTIM1_IRQHandler+0x10>)
 80031ee:	f000 fde4 	bl	8003dba <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20001ea4 	.word	0x20001ea4

080031fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	e00a      	b.n	8003224 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800320e:	f3af 8000 	nop.w
 8003212:	4601      	mov	r1, r0
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	60ba      	str	r2, [r7, #8]
 800321a:	b2ca      	uxtb	r2, r1
 800321c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	3301      	adds	r3, #1
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	429a      	cmp	r2, r3
 800322a:	dbf0      	blt.n	800320e <_read+0x12>
  }

  return len;
 800322c:	687b      	ldr	r3, [r7, #4]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800323e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800325e:	605a      	str	r2, [r3, #4]
  return 0;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <_isatty>:

int _isatty(int file)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003276:	2301      	movs	r3, #1
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032a8:	4a14      	ldr	r2, [pc, #80]	@ (80032fc <_sbrk+0x5c>)
 80032aa:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <_sbrk+0x60>)
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032b4:	4b13      	ldr	r3, [pc, #76]	@ (8003304 <_sbrk+0x64>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032bc:	4b11      	ldr	r3, [pc, #68]	@ (8003304 <_sbrk+0x64>)
 80032be:	4a12      	ldr	r2, [pc, #72]	@ (8003308 <_sbrk+0x68>)
 80032c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032c2:	4b10      	ldr	r3, [pc, #64]	@ (8003304 <_sbrk+0x64>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d207      	bcs.n	80032e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032d0:	f004 fd6e 	bl	8007db0 <__errno>
 80032d4:	4603      	mov	r3, r0
 80032d6:	220c      	movs	r2, #12
 80032d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032de:	e009      	b.n	80032f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032e0:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <_sbrk+0x64>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032e6:	4b07      	ldr	r3, [pc, #28]	@ (8003304 <_sbrk+0x64>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4413      	add	r3, r2
 80032ee:	4a05      	ldr	r2, [pc, #20]	@ (8003304 <_sbrk+0x64>)
 80032f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032f2:	68fb      	ldr	r3, [r7, #12]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20018000 	.word	0x20018000
 8003300:	00000400 	.word	0x00000400
 8003304:	20002008 	.word	0x20002008
 8003308:	20002160 	.word	0x20002160

0800330c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003310:	4b06      	ldr	r3, [pc, #24]	@ (800332c <SystemInit+0x20>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003316:	4a05      	ldr	r2, [pc, #20]	@ (800332c <SystemInit+0x20>)
 8003318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800331c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003368 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003334:	f7ff ffea 	bl	800330c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003338:	480c      	ldr	r0, [pc, #48]	@ (800336c <LoopForever+0x6>)
  ldr r1, =_edata
 800333a:	490d      	ldr	r1, [pc, #52]	@ (8003370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800333c:	4a0d      	ldr	r2, [pc, #52]	@ (8003374 <LoopForever+0xe>)
  movs r3, #0
 800333e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003340:	e002      	b.n	8003348 <LoopCopyDataInit>

08003342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003346:	3304      	adds	r3, #4

08003348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800334a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800334c:	d3f9      	bcc.n	8003342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800334e:	4a0a      	ldr	r2, [pc, #40]	@ (8003378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003350:	4c0a      	ldr	r4, [pc, #40]	@ (800337c <LoopForever+0x16>)
  movs r3, #0
 8003352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003354:	e001      	b.n	800335a <LoopFillZerobss>

08003356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003358:	3204      	adds	r2, #4

0800335a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800335a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800335c:	d3fb      	bcc.n	8003356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800335e:	f004 fd2d 	bl	8007dbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003362:	f7fe fe55 	bl	8002010 <main>

08003366 <LoopForever>:

LoopForever:
    b LoopForever
 8003366:	e7fe      	b.n	8003366 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003368:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800336c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003370:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003374:	0800865c 	.word	0x0800865c
  ldr r2, =_sbss
 8003378:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800337c:	2000215c 	.word	0x2000215c

08003380 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003380:	e7fe      	b.n	8003380 <ADC1_2_IRQHandler>
	...

08003384 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800338e:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <HAL_Init+0x3c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a0b      	ldr	r2, [pc, #44]	@ (80033c0 <HAL_Init+0x3c>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003398:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800339a:	2003      	movs	r0, #3
 800339c:	f000 f982 	bl	80036a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033a0:	2000      	movs	r0, #0
 80033a2:	f000 f80f 	bl	80033c4 <HAL_InitTick>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	71fb      	strb	r3, [r7, #7]
 80033b0:	e001      	b.n	80033b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033b2:	f7ff fd45 	bl	8002e40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033b6:	79fb      	ldrb	r3, [r7, #7]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40022000 	.word	0x40022000

080033c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033d0:	4b17      	ldr	r3, [pc, #92]	@ (8003430 <HAL_InitTick+0x6c>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d023      	beq.n	8003420 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033d8:	4b16      	ldr	r3, [pc, #88]	@ (8003434 <HAL_InitTick+0x70>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b14      	ldr	r3, [pc, #80]	@ (8003430 <HAL_InitTick+0x6c>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	4619      	mov	r1, r3
 80033e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f98d 	bl	800370e <HAL_SYSTICK_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10f      	bne.n	800341a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b0f      	cmp	r3, #15
 80033fe:	d809      	bhi.n	8003414 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003400:	2200      	movs	r2, #0
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003408:	f000 f957 	bl	80036ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800340c:	4a0a      	ldr	r2, [pc, #40]	@ (8003438 <HAL_InitTick+0x74>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e007      	b.n	8003424 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	73fb      	strb	r3, [r7, #15]
 8003418:	e004      	b.n	8003424 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
 800341e:	e001      	b.n	8003424 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003424:	7bfb      	ldrb	r3, [r7, #15]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000024 	.word	0x20000024
 8003434:	2000001c 	.word	0x2000001c
 8003438:	20000020 	.word	0x20000020

0800343c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003440:	4b06      	ldr	r3, [pc, #24]	@ (800345c <HAL_IncTick+0x20>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <HAL_IncTick+0x24>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4413      	add	r3, r2
 800344c:	4a04      	ldr	r2, [pc, #16]	@ (8003460 <HAL_IncTick+0x24>)
 800344e:	6013      	str	r3, [r2, #0]
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000024 	.word	0x20000024
 8003460:	2000200c 	.word	0x2000200c

08003464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return uwTick;
 8003468:	4b03      	ldr	r3, [pc, #12]	@ (8003478 <HAL_GetTick+0x14>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	2000200c 	.word	0x2000200c

0800347c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003484:	f7ff ffee 	bl	8003464 <HAL_GetTick>
 8003488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003494:	d005      	beq.n	80034a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003496:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <HAL_Delay+0x44>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034a2:	bf00      	nop
 80034a4:	f7ff ffde 	bl	8003464 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d8f7      	bhi.n	80034a4 <HAL_Delay+0x28>
  {
  }
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000024 	.word	0x20000024

080034c4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80034c8:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <HAL_SuspendTick+0x1c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a04      	ldr	r2, [pc, #16]	@ (80034e0 <HAL_SuspendTick+0x1c>)
 80034ce:	f023 0302 	bic.w	r3, r3, #2
 80034d2:	6013      	str	r3, [r2, #0]
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	e000e010 	.word	0xe000e010

080034e4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80034e8:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <HAL_ResumeTick+0x1c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a04      	ldr	r2, [pc, #16]	@ (8003500 <HAL_ResumeTick+0x1c>)
 80034ee:	f043 0302 	orr.w	r3, r3, #2
 80034f2:	6013      	str	r3, [r2, #0]
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000e010 	.word	0xe000e010

08003504 <__NVIC_SetPriorityGrouping>:
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003514:	4b0c      	ldr	r3, [pc, #48]	@ (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003520:	4013      	ands	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800352c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003536:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	60d3      	str	r3, [r2, #12]
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_GetPriorityGrouping>:
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003550:	4b04      	ldr	r3, [pc, #16]	@ (8003564 <__NVIC_GetPriorityGrouping+0x18>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	0a1b      	lsrs	r3, r3, #8
 8003556:	f003 0307 	and.w	r3, r3, #7
}
 800355a:	4618      	mov	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <__NVIC_EnableIRQ>:
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	2b00      	cmp	r3, #0
 8003578:	db0b      	blt.n	8003592 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	4907      	ldr	r1, [pc, #28]	@ (80035a0 <__NVIC_EnableIRQ+0x38>)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2001      	movs	r0, #1
 800358a:	fa00 f202 	lsl.w	r2, r0, r2
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000e100 	.word	0xe000e100

080035a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db0a      	blt.n	80035ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	490c      	ldr	r1, [pc, #48]	@ (80035f0 <__NVIC_SetPriority+0x4c>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	440b      	add	r3, r1
 80035c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035cc:	e00a      	b.n	80035e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4908      	ldr	r1, [pc, #32]	@ (80035f4 <__NVIC_SetPriority+0x50>)
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3b04      	subs	r3, #4
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	440b      	add	r3, r1
 80035e2:	761a      	strb	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	@ 0x24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f1c3 0307 	rsb	r3, r3, #7
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf28      	it	cs
 8003616:	2304      	movcs	r3, #4
 8003618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3304      	adds	r3, #4
 800361e:	2b06      	cmp	r3, #6
 8003620:	d902      	bls.n	8003628 <NVIC_EncodePriority+0x30>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3b03      	subs	r3, #3
 8003626:	e000      	b.n	800362a <NVIC_EncodePriority+0x32>
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	401a      	ands	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003640:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	43d9      	mvns	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	4313      	orrs	r3, r2
         );
}
 8003652:	4618      	mov	r0, r3
 8003654:	3724      	adds	r7, #36	@ 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003670:	d301      	bcc.n	8003676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003672:	2301      	movs	r3, #1
 8003674:	e00f      	b.n	8003696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003676:	4a0a      	ldr	r2, [pc, #40]	@ (80036a0 <SysTick_Config+0x40>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800367e:	210f      	movs	r1, #15
 8003680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003684:	f7ff ff8e 	bl	80035a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <SysTick_Config+0x40>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368e:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <SysTick_Config+0x40>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010

080036a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff29 	bl	8003504 <__NVIC_SetPriorityGrouping>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036cc:	f7ff ff3e 	bl	800354c <__NVIC_GetPriorityGrouping>
 80036d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	6978      	ldr	r0, [r7, #20]
 80036d8:	f7ff ff8e 	bl	80035f8 <NVIC_EncodePriority>
 80036dc:	4602      	mov	r2, r0
 80036de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff5d 	bl	80035a4 <__NVIC_SetPriority>
}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	4603      	mov	r3, r0
 80036fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff31 	bl	8003568 <__NVIC_EnableIRQ>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ffa2 	bl	8003660 <SysTick_Config>
 800371c:	4603      	mov	r3, r0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003736:	e17f      	b.n	8003a38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2101      	movs	r1, #1
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	4013      	ands	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 8171 	beq.w	8003a32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d005      	beq.n	8003768 <HAL_GPIO_Init+0x40>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d130      	bne.n	80037ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800379e:	2201      	movs	r2, #1
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 0201 	and.w	r2, r3, #1
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d118      	bne.n	8003808 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80037dc:	2201      	movs	r2, #1
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	f003 0201 	and.w	r2, r3, #1
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b03      	cmp	r3, #3
 8003812:	d017      	beq.n	8003844 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d123      	bne.n	8003898 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	08da      	lsrs	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3208      	adds	r2, #8
 8003858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	220f      	movs	r2, #15
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4013      	ands	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	08da      	lsrs	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3208      	adds	r2, #8
 8003892:	6939      	ldr	r1, [r7, #16]
 8003894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0203 	and.w	r2, r3, #3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80ac 	beq.w	8003a32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038da:	4b5f      	ldr	r3, [pc, #380]	@ (8003a58 <HAL_GPIO_Init+0x330>)
 80038dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038de:	4a5e      	ldr	r2, [pc, #376]	@ (8003a58 <HAL_GPIO_Init+0x330>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80038e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003a58 <HAL_GPIO_Init+0x330>)
 80038e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038f2:	4a5a      	ldr	r2, [pc, #360]	@ (8003a5c <HAL_GPIO_Init+0x334>)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	3302      	adds	r3, #2
 80038fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	220f      	movs	r2, #15
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4013      	ands	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800391c:	d025      	beq.n	800396a <HAL_GPIO_Init+0x242>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4f      	ldr	r2, [pc, #316]	@ (8003a60 <HAL_GPIO_Init+0x338>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01f      	beq.n	8003966 <HAL_GPIO_Init+0x23e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a4e      	ldr	r2, [pc, #312]	@ (8003a64 <HAL_GPIO_Init+0x33c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d019      	beq.n	8003962 <HAL_GPIO_Init+0x23a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a4d      	ldr	r2, [pc, #308]	@ (8003a68 <HAL_GPIO_Init+0x340>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_GPIO_Init+0x236>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a4c      	ldr	r2, [pc, #304]	@ (8003a6c <HAL_GPIO_Init+0x344>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00d      	beq.n	800395a <HAL_GPIO_Init+0x232>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a4b      	ldr	r2, [pc, #300]	@ (8003a70 <HAL_GPIO_Init+0x348>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <HAL_GPIO_Init+0x22e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a4a      	ldr	r2, [pc, #296]	@ (8003a74 <HAL_GPIO_Init+0x34c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <HAL_GPIO_Init+0x22a>
 800394e:	2306      	movs	r3, #6
 8003950:	e00c      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003952:	2307      	movs	r3, #7
 8003954:	e00a      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003956:	2305      	movs	r3, #5
 8003958:	e008      	b.n	800396c <HAL_GPIO_Init+0x244>
 800395a:	2304      	movs	r3, #4
 800395c:	e006      	b.n	800396c <HAL_GPIO_Init+0x244>
 800395e:	2303      	movs	r3, #3
 8003960:	e004      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003962:	2302      	movs	r3, #2
 8003964:	e002      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <HAL_GPIO_Init+0x244>
 800396a:	2300      	movs	r3, #0
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	f002 0203 	and.w	r2, r2, #3
 8003972:	0092      	lsls	r2, r2, #2
 8003974:	4093      	lsls	r3, r2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800397c:	4937      	ldr	r1, [pc, #220]	@ (8003a5c <HAL_GPIO_Init+0x334>)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	089b      	lsrs	r3, r3, #2
 8003982:	3302      	adds	r3, #2
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800398a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039ae:	4a32      	ldr	r2, [pc, #200]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039b4:	4b30      	ldr	r3, [pc, #192]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	43db      	mvns	r3, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039d8:	4a27      	ldr	r2, [pc, #156]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039de:	4b26      	ldr	r3, [pc, #152]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a02:	4a1d      	ldr	r2, [pc, #116]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a08:	4b1b      	ldr	r3, [pc, #108]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a2c:	4a12      	ldr	r2, [pc, #72]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	3301      	adds	r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f47f ae78 	bne.w	8003738 <HAL_GPIO_Init+0x10>
  }
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	48000400 	.word	0x48000400
 8003a64:	48000800 	.word	0x48000800
 8003a68:	48000c00 	.word	0x48000c00
 8003a6c:	48001000 	.word	0x48001000
 8003a70:	48001400 	.word	0x48001400
 8003a74:	48001800 	.word	0x48001800
 8003a78:	40010400 	.word	0x40010400

08003a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	807b      	strh	r3, [r7, #2]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a8c:	787b      	ldrb	r3, [r7, #1]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a92:	887a      	ldrh	r2, [r7, #2]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a98:	e002      	b.n	8003aa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a9a:	887a      	ldrh	r2, [r7, #2]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ab6:	4b08      	ldr	r3, [pc, #32]	@ (8003ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ac2:	4a05      	ldr	r2, [pc, #20]	@ (8003ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff f94e 	bl	8002d6c <HAL_GPIO_EXTI_Callback>
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40010400 	.word	0x40010400

08003adc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e08f      	b.n	8003c0e <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff f9bd 	bl	8002e88 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d004      	beq.n	8003b30 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b2e:	d103      	bne.n	8003b38 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 031e 	bic.w	r3, r3, #30
 8003b36:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d005      	beq.n	8003b50 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003b4a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4b31      	ldr	r3, [pc, #196]	@ (8003c18 <HAL_LPTIM_Init+0x13c>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003b60:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003b66:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8003b6c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8003b72:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d107      	bne.n	8003b92 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d004      	beq.n	8003ba4 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ba2:	d107      	bne.n	8003bb4 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003bac:	4313      	orrs	r3, r2
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003bc8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003bce:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a0e      	ldr	r2, [pc, #56]	@ (8003c1c <HAL_LPTIM_Init+0x140>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d108      	bne.n	8003bfa <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	621a      	str	r2, [r3, #32]
 8003bf8:	e004      	b.n	8003c04 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c02:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	ff19f1fe 	.word	0xff19f1fe
 8003c1c:	40007c00 	.word	0x40007c00

08003c20 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a37      	ldr	r2, [pc, #220]	@ (8003d14 <HAL_LPTIM_Counter_Start_IT+0xf4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d106      	bne.n	8003c4a <HAL_LPTIM_Counter_Start_IT+0x2a>
 8003c3c:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	4a35      	ldr	r2, [pc, #212]	@ (8003d18 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6213      	str	r3, [r2, #32]
 8003c48:	e005      	b.n	8003c56 <HAL_LPTIM_Counter_Start_IT+0x36>
 8003c4a:	4b33      	ldr	r3, [pc, #204]	@ (8003d18 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4a32      	ldr	r2, [pc, #200]	@ (8003d18 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8003c50:	f043 0302 	orr.w	r3, r3, #2
 8003c54:	6213      	str	r3, [r2, #32]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d00c      	beq.n	8003c78 <HAL_LPTIM_Counter_Start_IT+0x58>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c66:	d107      	bne.n	8003c78 <HAL_LPTIM_Counter_Start_IT+0x58>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8003c76:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003c98:	2110      	movs	r1, #16
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f968 	bl	8003f70 <LPTIM_WaitForFlag>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d101      	bne.n	8003caa <HAL_LPTIM_Counter_Start_IT+0x8a>
  {
    return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e02f      	b.n	8003d0a <HAL_LPTIM_Counter_Start_IT+0xea>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f990 	bl	8003fd0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f94f 	bl	8003f54 <HAL_LPTIM_GetState>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d101      	bne.n	8003cc0 <HAL_LPTIM_Counter_Start_IT+0xa0>
  {
    return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e024      	b.n	8003d0a <HAL_LPTIM_Counter_Start_IT+0xea>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0210 	orr.w	r2, r2, #16
 8003cce:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0202 	orr.w	r2, r2, #2
 8003cde:	609a      	str	r2, [r3, #8]
  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);

#endif
  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0204 	orr.w	r2, r2, #4
 8003cfe:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40007c00 	.word	0x40007c00
 8003d18:	40010400 	.word	0x40010400

08003d1c <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1b      	ldr	r2, [pc, #108]	@ (8003d98 <HAL_LPTIM_Counter_Stop_IT+0x7c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d106      	bne.n	8003d3c <HAL_LPTIM_Counter_Stop_IT+0x20>
 8003d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003d9c <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	4a1a      	ldr	r2, [pc, #104]	@ (8003d9c <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	6213      	str	r3, [r2, #32]
 8003d3a:	e005      	b.n	8003d48 <HAL_LPTIM_Counter_Stop_IT+0x2c>
 8003d3c:	4b17      	ldr	r3, [pc, #92]	@ (8003d9c <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	4a16      	ldr	r2, [pc, #88]	@ (8003d9c <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8003d42:	f023 0302 	bic.w	r3, r3, #2
 8003d46:	6213      	str	r3, [r2, #32]

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f93d 	bl	8003fd0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f8fc 	bl	8003f54 <HAL_LPTIM_GetState>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d101      	bne.n	8003d66 <HAL_LPTIM_Counter_Stop_IT+0x4a>
  {
    return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e014      	b.n	8003d90 <HAL_LPTIM_Counter_Stop_IT+0x74>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0210 	bic.w	r2, r2, #16
 8003d74:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0202 	bic.w	r2, r2, #2
 8003d84:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
#endif
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40007c00 	.word	0x40007c00
 8003d9c:	40010400 	.word	0x40010400

08003da0 <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69db      	ldr	r3, [r3, #28]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d10d      	bne.n	8003dec <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d106      	bne.n	8003dec <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2201      	movs	r2, #1
 8003de4:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fe ffa2 	bl	8002d30 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d10d      	bne.n	8003e16 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d106      	bne.n	8003e16 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7fe ff7b 	bl	8002d0c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d10d      	bne.n	8003e40 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d106      	bne.n	8003e40 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2204      	movs	r2, #4
 8003e38:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f858 	bl	8003ef0 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d10d      	bne.n	8003e6a <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d106      	bne.n	8003e6a <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2208      	movs	r2, #8
 8003e62:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f84d 	bl	8003f04 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b10      	cmp	r3, #16
 8003e76:	d10d      	bne.n	8003e94 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b10      	cmp	r3, #16
 8003e84:	d106      	bne.n	8003e94 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2210      	movs	r2, #16
 8003e8c:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f842 	bl	8003f18 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d10d      	bne.n	8003ebe <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d106      	bne.n	8003ebe <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f837 	bl	8003f2c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec8:	2b40      	cmp	r3, #64	@ 0x40
 8003eca:	d10d      	bne.n	8003ee8 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed6:	2b40      	cmp	r3, #64	@ 0x40
 8003ed8:	d106      	bne.n	8003ee8 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2240      	movs	r2, #64	@ 0x40
 8003ee0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f82c 	bl	8003f40 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003f62:	b2db      	uxtb	r3, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003f7e:	4b12      	ldr	r3, [pc, #72]	@ (8003fc8 <LPTIM_WaitForFlag+0x58>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a12      	ldr	r2, [pc, #72]	@ (8003fcc <LPTIM_WaitForFlag+0x5c>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	0b9b      	lsrs	r3, r3, #14
 8003f8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f8e:	fb02 f303 	mul.w	r3, r2, r3
 8003f92:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	4013      	ands	r3, r2
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d002      	beq.n	8003fba <LPTIM_WaitForFlag+0x4a>
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1ec      	bne.n	8003f94 <LPTIM_WaitForFlag+0x24>

  return result;
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	2000001c 	.word	0x2000001c
 8003fcc:	d1b71759 	.word	0xd1b71759

08003fd0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08c      	sub	sp, #48	@ 0x30
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f383 8810 	msr	PRIMASK, r3
}
 8003ff0:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a73      	ldr	r2, [pc, #460]	@ (80041c4 <LPTIM_Disable+0x1f4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <LPTIM_Disable+0x34>
 8003ffc:	4a72      	ldr	r2, [pc, #456]	@ (80041c8 <LPTIM_Disable+0x1f8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d007      	beq.n	8004012 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8004002:	e00d      	b.n	8004020 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004004:	4b71      	ldr	r3, [pc, #452]	@ (80041cc <LPTIM_Disable+0x1fc>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800400e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8004010:	e006      	b.n	8004020 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004012:	4b6e      	ldr	r3, [pc, #440]	@ (80041cc <LPTIM_Disable+0x1fc>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004018:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800401c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800401e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a5d      	ldr	r2, [pc, #372]	@ (80041c4 <LPTIM_Disable+0x1f4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d003      	beq.n	800405a <LPTIM_Disable+0x8a>
 8004052:	4a5d      	ldr	r2, [pc, #372]	@ (80041c8 <LPTIM_Disable+0x1f8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00d      	beq.n	8004074 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8004058:	e019      	b.n	800408e <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800405a:	4b5c      	ldr	r3, [pc, #368]	@ (80041cc <LPTIM_Disable+0x1fc>)
 800405c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405e:	4a5b      	ldr	r2, [pc, #364]	@ (80041cc <LPTIM_Disable+0x1fc>)
 8004060:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004064:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004066:	4b59      	ldr	r3, [pc, #356]	@ (80041cc <LPTIM_Disable+0x1fc>)
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	4a58      	ldr	r2, [pc, #352]	@ (80041cc <LPTIM_Disable+0x1fc>)
 800406c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004070:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 8004072:	e00c      	b.n	800408e <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004074:	4b55      	ldr	r3, [pc, #340]	@ (80041cc <LPTIM_Disable+0x1fc>)
 8004076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004078:	4a54      	ldr	r2, [pc, #336]	@ (80041cc <LPTIM_Disable+0x1fc>)
 800407a:	f043 0320 	orr.w	r3, r3, #32
 800407e:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004080:	4b52      	ldr	r3, [pc, #328]	@ (80041cc <LPTIM_Disable+0x1fc>)
 8004082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004084:	4a51      	ldr	r2, [pc, #324]	@ (80041cc <LPTIM_Disable+0x1fc>)
 8004086:	f023 0320 	bic.w	r3, r3, #32
 800408a:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 800408c:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <LPTIM_Disable+0xca>
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d075      	beq.n	8004186 <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a49      	ldr	r2, [pc, #292]	@ (80041c4 <LPTIM_Disable+0x1f4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d003      	beq.n	80040ac <LPTIM_Disable+0xdc>
 80040a4:	4a48      	ldr	r2, [pc, #288]	@ (80041c8 <LPTIM_Disable+0x1f8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d009      	beq.n	80040be <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80040aa:	e011      	b.n	80040d0 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80040ac:	4b47      	ldr	r3, [pc, #284]	@ (80041cc <LPTIM_Disable+0x1fc>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b2:	4a46      	ldr	r2, [pc, #280]	@ (80041cc <LPTIM_Disable+0x1fc>)
 80040b4:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80040b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 80040bc:	e008      	b.n	80040d0 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80040be:	4b43      	ldr	r3, [pc, #268]	@ (80041cc <LPTIM_Disable+0x1fc>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c4:	4a41      	ldr	r2, [pc, #260]	@ (80041cc <LPTIM_Disable+0x1fc>)
 80040c6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80040ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 80040ce:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01a      	beq.n	800410c <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80040ee:	2108      	movs	r1, #8
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff ff3d 	bl	8003f70 <LPTIM_WaitForFlag>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d103      	bne.n	8004104 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2203      	movs	r2, #3
 8004100:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2208      	movs	r2, #8
 800410a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01a      	beq.n	8004148 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0201 	orr.w	r2, r2, #1
 8004120:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800412a:	2110      	movs	r1, #16
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff ff1f 	bl	8003f70 <LPTIM_WaitForFlag>
 8004132:	4603      	mov	r3, r0
 8004134:	2b03      	cmp	r3, #3
 8004136:	d103      	bne.n	8004140 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2203      	movs	r2, #3
 800413c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2210      	movs	r2, #16
 8004146:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1d      	ldr	r2, [pc, #116]	@ (80041c4 <LPTIM_Disable+0x1f4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d003      	beq.n	800415a <LPTIM_Disable+0x18a>
 8004152:	4a1d      	ldr	r2, [pc, #116]	@ (80041c8 <LPTIM_Disable+0x1f8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00b      	beq.n	8004170 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8004158:	e015      	b.n	8004186 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800415a:	4b1c      	ldr	r3, [pc, #112]	@ (80041cc <LPTIM_Disable+0x1fc>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004160:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004164:	4919      	ldr	r1, [pc, #100]	@ (80041cc <LPTIM_Disable+0x1fc>)
 8004166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 800416e:	e00a      	b.n	8004186 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004170:	4b16      	ldr	r3, [pc, #88]	@ (80041cc <LPTIM_Disable+0x1fc>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004176:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800417a:	4914      	ldr	r1, [pc, #80]	@ (80041cc <LPTIM_Disable+0x1fc>)
 800417c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8004184:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0201 	bic.w	r2, r2, #1
 8004194:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419c:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6a3a      	ldr	r2, [r7, #32]
 80041a4:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	621a      	str	r2, [r3, #32]
 80041ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f383 8810 	msr	PRIMASK, r3
}
 80041b8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80041ba:	bf00      	nop
 80041bc:	3730      	adds	r7, #48	@ 0x30
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40007c00 	.word	0x40007c00
 80041c8:	40009400 	.word	0x40009400
 80041cc:	40021000 	.word	0x40021000

080041d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a04      	ldr	r2, [pc, #16]	@ (80041ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041de:	6013      	str	r3, [r2, #0]
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40007000 	.word	0x40007000

080041f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041f4:	4b04      	ldr	r3, [pc, #16]	@ (8004208 <HAL_PWREx_GetVoltageRange+0x18>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40007000 	.word	0x40007000

0800420c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800421a:	d130      	bne.n	800427e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800421c:	4b23      	ldr	r3, [pc, #140]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004228:	d038      	beq.n	800429c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800422a:	4b20      	ldr	r3, [pc, #128]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004232:	4a1e      	ldr	r2, [pc, #120]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004234:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004238:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800423a:	4b1d      	ldr	r3, [pc, #116]	@ (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2232      	movs	r2, #50	@ 0x32
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	4a1b      	ldr	r2, [pc, #108]	@ (80042b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	0c9b      	lsrs	r3, r3, #18
 800424c:	3301      	adds	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004250:	e002      	b.n	8004258 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3b01      	subs	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004258:	4b14      	ldr	r3, [pc, #80]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004264:	d102      	bne.n	800426c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f2      	bne.n	8004252 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800426c:	4b0f      	ldr	r3, [pc, #60]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004278:	d110      	bne.n	800429c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e00f      	b.n	800429e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800427e:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428a:	d007      	beq.n	800429c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800428c:	4b07      	ldr	r3, [pc, #28]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004294:	4a05      	ldr	r2, [pc, #20]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800429a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40007000 	.word	0x40007000
 80042b0:	2000001c 	.word	0x2000001c
 80042b4:	431bde83 	.word	0x431bde83

080042b8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 80042c2:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f023 0307 	bic.w	r3, r3, #7
 80042ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004308 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80042cc:	f043 0302 	orr.w	r3, r3, #2
 80042d0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80042d2:	4b0e      	ldr	r3, [pc, #56]	@ (800430c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	4a0d      	ldr	r2, [pc, #52]	@ (800430c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80042d8:	f043 0304 	orr.w	r3, r3, #4
 80042dc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80042e4:	bf30      	wfi
 80042e6:	e002      	b.n	80042ee <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80042e8:	bf40      	sev
    __WFE();
 80042ea:	bf20      	wfe
    __WFE();
 80042ec:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80042ee:	4b07      	ldr	r3, [pc, #28]	@ (800430c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	4a06      	ldr	r2, [pc, #24]	@ (800430c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80042f4:	f023 0304 	bic.w	r3, r3, #4
 80042f8:	6113      	str	r3, [r2, #16]
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40007000 	.word	0x40007000
 800430c:	e000ed00 	.word	0xe000ed00

08004310 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e3ca      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004322:	4b97      	ldr	r3, [pc, #604]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800432c:	4b94      	ldr	r3, [pc, #592]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 80e4 	beq.w	800450c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d007      	beq.n	800435a <HAL_RCC_OscConfig+0x4a>
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b0c      	cmp	r3, #12
 800434e:	f040 808b 	bne.w	8004468 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b01      	cmp	r3, #1
 8004356:	f040 8087 	bne.w	8004468 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800435a:	4b89      	ldr	r3, [pc, #548]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_RCC_OscConfig+0x62>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e3a2      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	4b82      	ldr	r3, [pc, #520]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d004      	beq.n	800438c <HAL_RCC_OscConfig+0x7c>
 8004382:	4b7f      	ldr	r3, [pc, #508]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800438a:	e005      	b.n	8004398 <HAL_RCC_OscConfig+0x88>
 800438c:	4b7c      	ldr	r3, [pc, #496]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004398:	4293      	cmp	r3, r2
 800439a:	d223      	bcs.n	80043e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fd55 	bl	8004e50 <RCC_SetFlashLatencyFromMSIRange>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e383      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043b0:	4b73      	ldr	r3, [pc, #460]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a72      	ldr	r2, [pc, #456]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043b6:	f043 0308 	orr.w	r3, r3, #8
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b70      	ldr	r3, [pc, #448]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	496d      	ldr	r1, [pc, #436]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	4968      	ldr	r1, [pc, #416]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	604b      	str	r3, [r1, #4]
 80043e2:	e025      	b.n	8004430 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e4:	4b66      	ldr	r3, [pc, #408]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a65      	ldr	r2, [pc, #404]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043ea:	f043 0308 	orr.w	r3, r3, #8
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4b63      	ldr	r3, [pc, #396]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	4960      	ldr	r1, [pc, #384]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004402:	4b5f      	ldr	r3, [pc, #380]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	495b      	ldr	r1, [pc, #364]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004412:	4313      	orrs	r3, r2
 8004414:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d109      	bne.n	8004430 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fd15 	bl	8004e50 <RCC_SetFlashLatencyFromMSIRange>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e343      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004430:	f000 fc4a 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b52      	ldr	r3, [pc, #328]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	4950      	ldr	r1, [pc, #320]	@ (8004584 <HAL_RCC_OscConfig+0x274>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	4a4e      	ldr	r2, [pc, #312]	@ (8004588 <HAL_RCC_OscConfig+0x278>)
 800444e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004450:	4b4e      	ldr	r3, [pc, #312]	@ (800458c <HAL_RCC_OscConfig+0x27c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f7fe ffb5 	bl	80033c4 <HAL_InitTick>
 800445a:	4603      	mov	r3, r0
 800445c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d052      	beq.n	800450a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	e327      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d032      	beq.n	80044d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004470:	4b43      	ldr	r3, [pc, #268]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a42      	ldr	r2, [pc, #264]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800447c:	f7fe fff2 	bl	8003464 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004484:	f7fe ffee 	bl	8003464 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e310      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004496:	4b3a      	ldr	r3, [pc, #232]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044a2:	4b37      	ldr	r3, [pc, #220]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a36      	ldr	r2, [pc, #216]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044a8:	f043 0308 	orr.w	r3, r3, #8
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	4b34      	ldr	r3, [pc, #208]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4931      	ldr	r1, [pc, #196]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	492c      	ldr	r1, [pc, #176]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]
 80044d4:	e01a      	b.n	800450c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a29      	ldr	r2, [pc, #164]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044e2:	f7fe ffbf 	bl	8003464 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ea:	f7fe ffbb 	bl	8003464 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e2dd      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044fc:	4b20      	ldr	r3, [pc, #128]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1f0      	bne.n	80044ea <HAL_RCC_OscConfig+0x1da>
 8004508:	e000      	b.n	800450c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800450a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d074      	beq.n	8004602 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	2b08      	cmp	r3, #8
 800451c:	d005      	beq.n	800452a <HAL_RCC_OscConfig+0x21a>
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b0c      	cmp	r3, #12
 8004522:	d10e      	bne.n	8004542 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d10b      	bne.n	8004542 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452a:	4b15      	ldr	r3, [pc, #84]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d064      	beq.n	8004600 <HAL_RCC_OscConfig+0x2f0>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d160      	bne.n	8004600 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e2ba      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800454a:	d106      	bne.n	800455a <HAL_RCC_OscConfig+0x24a>
 800454c:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a0b      	ldr	r2, [pc, #44]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	e026      	b.n	80045a8 <HAL_RCC_OscConfig+0x298>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004562:	d115      	bne.n	8004590 <HAL_RCC_OscConfig+0x280>
 8004564:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a05      	ldr	r2, [pc, #20]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 800456a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	4b03      	ldr	r3, [pc, #12]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a02      	ldr	r2, [pc, #8]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	e014      	b.n	80045a8 <HAL_RCC_OscConfig+0x298>
 800457e:	bf00      	nop
 8004580:	40021000 	.word	0x40021000
 8004584:	08008604 	.word	0x08008604
 8004588:	2000001c 	.word	0x2000001c
 800458c:	20000020 	.word	0x20000020
 8004590:	4ba0      	ldr	r3, [pc, #640]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a9f      	ldr	r2, [pc, #636]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	4b9d      	ldr	r3, [pc, #628]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a9c      	ldr	r2, [pc, #624]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80045a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d013      	beq.n	80045d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fe ff58 	bl	8003464 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fe ff54 	bl	8003464 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	@ 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e276      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ca:	4b92      	ldr	r3, [pc, #584]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x2a8>
 80045d6:	e014      	b.n	8004602 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fe ff44 	bl	8003464 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e0:	f7fe ff40 	bl	8003464 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b64      	cmp	r3, #100	@ 0x64
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e262      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045f2:	4b88      	ldr	r3, [pc, #544]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x2d0>
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d060      	beq.n	80046d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b04      	cmp	r3, #4
 8004612:	d005      	beq.n	8004620 <HAL_RCC_OscConfig+0x310>
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b0c      	cmp	r3, #12
 8004618:	d119      	bne.n	800464e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d116      	bne.n	800464e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004620:	4b7c      	ldr	r3, [pc, #496]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_OscConfig+0x328>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e23f      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004638:	4b76      	ldr	r3, [pc, #472]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	061b      	lsls	r3, r3, #24
 8004646:	4973      	ldr	r1, [pc, #460]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004648:	4313      	orrs	r3, r2
 800464a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800464c:	e040      	b.n	80046d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d023      	beq.n	800469e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004656:	4b6f      	ldr	r3, [pc, #444]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a6e      	ldr	r2, [pc, #440]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800465c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004662:	f7fe feff 	bl	8003464 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466a:	f7fe fefb 	bl	8003464 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e21d      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800467c:	4b65      	ldr	r3, [pc, #404]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004688:	4b62      	ldr	r3, [pc, #392]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	495f      	ldr	r1, [pc, #380]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
 800469c:	e018      	b.n	80046d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800469e:	4b5d      	ldr	r3, [pc, #372]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a5c      	ldr	r2, [pc, #368]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80046a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046aa:	f7fe fedb 	bl	8003464 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b2:	f7fe fed7 	bl	8003464 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e1f9      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046c4:	4b53      	ldr	r3, [pc, #332]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f0      	bne.n	80046b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d03c      	beq.n	8004756 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01c      	beq.n	800471e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80046e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ea:	4a4a      	ldr	r2, [pc, #296]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f4:	f7fe feb6 	bl	8003464 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046fc:	f7fe feb2 	bl	8003464 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e1d4      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800470e:	4b41      	ldr	r3, [pc, #260]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0ef      	beq.n	80046fc <HAL_RCC_OscConfig+0x3ec>
 800471c:	e01b      	b.n	8004756 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800471e:	4b3d      	ldr	r3, [pc, #244]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004724:	4a3b      	ldr	r2, [pc, #236]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472e:	f7fe fe99 	bl	8003464 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004736:	f7fe fe95 	bl	8003464 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e1b7      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004748:	4b32      	ldr	r3, [pc, #200]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800474a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1ef      	bne.n	8004736 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 80a6 	beq.w	80048b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004764:	2300      	movs	r3, #0
 8004766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004768:	4b2a      	ldr	r3, [pc, #168]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10d      	bne.n	8004790 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004774:	4b27      	ldr	r3, [pc, #156]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004778:	4a26      	ldr	r2, [pc, #152]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800477a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004780:	4b24      	ldr	r3, [pc, #144]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478c:	2301      	movs	r3, #1
 800478e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004790:	4b21      	ldr	r3, [pc, #132]	@ (8004818 <HAL_RCC_OscConfig+0x508>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d118      	bne.n	80047ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800479c:	4b1e      	ldr	r3, [pc, #120]	@ (8004818 <HAL_RCC_OscConfig+0x508>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004818 <HAL_RCC_OscConfig+0x508>)
 80047a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a8:	f7fe fe5c 	bl	8003464 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b0:	f7fe fe58 	bl	8003464 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e17a      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c2:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <HAL_RCC_OscConfig+0x508>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d108      	bne.n	80047e8 <HAL_RCC_OscConfig+0x4d8>
 80047d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047e6:	e029      	b.n	800483c <HAL_RCC_OscConfig+0x52c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b05      	cmp	r3, #5
 80047ee:	d115      	bne.n	800481c <HAL_RCC_OscConfig+0x50c>
 80047f0:	4b08      	ldr	r3, [pc, #32]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f6:	4a07      	ldr	r2, [pc, #28]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80047f8:	f043 0304 	orr.w	r3, r3, #4
 80047fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004800:	4b04      	ldr	r3, [pc, #16]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004806:	4a03      	ldr	r2, [pc, #12]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004810:	e014      	b.n	800483c <HAL_RCC_OscConfig+0x52c>
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000
 8004818:	40007000 	.word	0x40007000
 800481c:	4b9c      	ldr	r3, [pc, #624]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004822:	4a9b      	ldr	r2, [pc, #620]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800482c:	4b98      	ldr	r3, [pc, #608]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	4a97      	ldr	r2, [pc, #604]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004834:	f023 0304 	bic.w	r3, r3, #4
 8004838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d016      	beq.n	8004872 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fe fe0e 	bl	8003464 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800484a:	e00a      	b.n	8004862 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484c:	f7fe fe0a 	bl	8003464 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e12a      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004862:	4b8b      	ldr	r3, [pc, #556]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0ed      	beq.n	800484c <HAL_RCC_OscConfig+0x53c>
 8004870:	e015      	b.n	800489e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004872:	f7fe fdf7 	bl	8003464 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004878:	e00a      	b.n	8004890 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487a:	f7fe fdf3 	bl	8003464 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004888:	4293      	cmp	r3, r2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e113      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004890:	4b7f      	ldr	r3, [pc, #508]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1ed      	bne.n	800487a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800489e:	7ffb      	ldrb	r3, [r7, #31]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d105      	bne.n	80048b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a4:	4b7a      	ldr	r3, [pc, #488]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a8:	4a79      	ldr	r2, [pc, #484]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 80048aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80fe 	beq.w	8004ab6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048be:	2b02      	cmp	r3, #2
 80048c0:	f040 80d0 	bne.w	8004a64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048c4:	4b72      	ldr	r3, [pc, #456]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f003 0203 	and.w	r2, r3, #3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d130      	bne.n	800493a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e2:	3b01      	subs	r3, #1
 80048e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d127      	bne.n	800493a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d11f      	bne.n	800493a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004904:	2a07      	cmp	r2, #7
 8004906:	bf14      	ite	ne
 8004908:	2201      	movne	r2, #1
 800490a:	2200      	moveq	r2, #0
 800490c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800490e:	4293      	cmp	r3, r2
 8004910:	d113      	bne.n	800493a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	3b01      	subs	r3, #1
 8004920:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d109      	bne.n	800493a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	3b01      	subs	r3, #1
 8004934:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d06e      	beq.n	8004a18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b0c      	cmp	r3, #12
 800493e:	d069      	beq.n	8004a14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004940:	4b53      	ldr	r3, [pc, #332]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d105      	bne.n	8004958 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800494c:	4b50      	ldr	r3, [pc, #320]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0ad      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800495c:	4b4c      	ldr	r3, [pc, #304]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a4b      	ldr	r2, [pc, #300]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004966:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004968:	f7fe fd7c 	bl	8003464 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004970:	f7fe fd78 	bl	8003464 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e09a      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004982:	4b43      	ldr	r3, [pc, #268]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800498e:	4b40      	ldr	r3, [pc, #256]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	4b40      	ldr	r3, [pc, #256]	@ (8004a94 <HAL_RCC_OscConfig+0x784>)
 8004994:	4013      	ands	r3, r2
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800499e:	3a01      	subs	r2, #1
 80049a0:	0112      	lsls	r2, r2, #4
 80049a2:	4311      	orrs	r1, r2
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049a8:	0212      	lsls	r2, r2, #8
 80049aa:	4311      	orrs	r1, r2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049b0:	0852      	lsrs	r2, r2, #1
 80049b2:	3a01      	subs	r2, #1
 80049b4:	0552      	lsls	r2, r2, #21
 80049b6:	4311      	orrs	r1, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80049bc:	0852      	lsrs	r2, r2, #1
 80049be:	3a01      	subs	r2, #1
 80049c0:	0652      	lsls	r2, r2, #25
 80049c2:	4311      	orrs	r1, r2
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049c8:	0912      	lsrs	r2, r2, #4
 80049ca:	0452      	lsls	r2, r2, #17
 80049cc:	430a      	orrs	r2, r1
 80049ce:	4930      	ldr	r1, [pc, #192]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049d4:	4b2e      	ldr	r3, [pc, #184]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 80049da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 80049e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049ec:	f7fe fd3a 	bl	8003464 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f4:	f7fe fd36 	bl	8003464 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e058      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a06:	4b22      	ldr	r3, [pc, #136]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a12:	e050      	b.n	8004ab6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e04f      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a18:	4b1d      	ldr	r3, [pc, #116]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d148      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a24:	4b1a      	ldr	r3, [pc, #104]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a19      	ldr	r2, [pc, #100]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a30:	4b17      	ldr	r3, [pc, #92]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a16      	ldr	r2, [pc, #88]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a3c:	f7fe fd12 	bl	8003464 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fe fd0e 	bl	8003464 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e030      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a56:	4b0e      	ldr	r3, [pc, #56]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x734>
 8004a62:	e028      	b.n	8004ab6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	2b0c      	cmp	r3, #12
 8004a68:	d023      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6a:	4b09      	ldr	r3, [pc, #36]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a08      	ldr	r2, [pc, #32]	@ (8004a90 <HAL_RCC_OscConfig+0x780>)
 8004a70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a76:	f7fe fcf5 	bl	8003464 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a7c:	e00c      	b.n	8004a98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7e:	f7fe fcf1 	bl	8003464 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d905      	bls.n	8004a98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e013      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
 8004a90:	40021000 	.word	0x40021000
 8004a94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a98:	4b09      	ldr	r3, [pc, #36]	@ (8004ac0 <HAL_RCC_OscConfig+0x7b0>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ec      	bne.n	8004a7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004aa4:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <HAL_RCC_OscConfig+0x7b0>)
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	4905      	ldr	r1, [pc, #20]	@ (8004ac0 <HAL_RCC_OscConfig+0x7b0>)
 8004aaa:	4b06      	ldr	r3, [pc, #24]	@ (8004ac4 <HAL_RCC_OscConfig+0x7b4>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	60cb      	str	r3, [r1, #12]
 8004ab0:	e001      	b.n	8004ab6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3720      	adds	r7, #32
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	feeefffc 	.word	0xfeeefffc

08004ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0e7      	b.n	8004cac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004adc:	4b75      	ldr	r3, [pc, #468]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d910      	bls.n	8004b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aea:	4b72      	ldr	r3, [pc, #456]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f023 0207 	bic.w	r2, r3, #7
 8004af2:	4970      	ldr	r1, [pc, #448]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afa:	4b6e      	ldr	r3, [pc, #440]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0cf      	b.n	8004cac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d010      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	4b66      	ldr	r3, [pc, #408]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d908      	bls.n	8004b3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b28:	4b63      	ldr	r3, [pc, #396]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	4960      	ldr	r1, [pc, #384]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d04c      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b4e:	4b5a      	ldr	r3, [pc, #360]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d121      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e0a6      	b.n	8004cac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b66:	4b54      	ldr	r3, [pc, #336]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d115      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e09a      	b.n	8004cac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e08e      	b.n	8004cac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e086      	b.n	8004cac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b9e:	4b46      	ldr	r3, [pc, #280]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f023 0203 	bic.w	r2, r3, #3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	4943      	ldr	r1, [pc, #268]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb0:	f7fe fc58 	bl	8003464 <HAL_GetTick>
 8004bb4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb6:	e00a      	b.n	8004bce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb8:	f7fe fc54 	bl	8003464 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e06e      	b.n	8004cac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bce:	4b3a      	ldr	r3, [pc, #232]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 020c 	and.w	r2, r3, #12
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d1eb      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d010      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	4b31      	ldr	r3, [pc, #196]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d208      	bcs.n	8004c0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	492b      	ldr	r1, [pc, #172]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c0e:	4b29      	ldr	r3, [pc, #164]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d210      	bcs.n	8004c3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1c:	4b25      	ldr	r3, [pc, #148]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f023 0207 	bic.w	r2, r3, #7
 8004c24:	4923      	ldr	r1, [pc, #140]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2c:	4b21      	ldr	r3, [pc, #132]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d001      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e036      	b.n	8004cac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d008      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	4918      	ldr	r1, [pc, #96]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d009      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c68:	4b13      	ldr	r3, [pc, #76]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4910      	ldr	r1, [pc, #64]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c7c:	f000 f824 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004c80:	4602      	mov	r2, r0
 8004c82:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	091b      	lsrs	r3, r3, #4
 8004c88:	f003 030f 	and.w	r3, r3, #15
 8004c8c:	490b      	ldr	r1, [pc, #44]	@ (8004cbc <HAL_RCC_ClockConfig+0x1f4>)
 8004c8e:	5ccb      	ldrb	r3, [r1, r3]
 8004c90:	f003 031f 	and.w	r3, r3, #31
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
 8004c98:	4a09      	ldr	r2, [pc, #36]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8004c9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c9c:	4b09      	ldr	r3, [pc, #36]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1fc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fe fb8f 	bl	80033c4 <HAL_InitTick>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004caa:	7afb      	ldrb	r3, [r7, #11]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40022000 	.word	0x40022000
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	08008604 	.word	0x08008604
 8004cc0:	2000001c 	.word	0x2000001c
 8004cc4:	20000020 	.word	0x20000020

08004cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b089      	sub	sp, #36	@ 0x24
 8004ccc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 030c 	and.w	r3, r3, #12
 8004cde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_GetSysClockFreq+0x34>
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b0c      	cmp	r3, #12
 8004cf4:	d121      	bne.n	8004d3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d11e      	bne.n	8004d3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cfc:	4b34      	ldr	r3, [pc, #208]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d08:	4b31      	ldr	r3, [pc, #196]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	e005      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d18:	4b2d      	ldr	r3, [pc, #180]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d24:	4a2b      	ldr	r2, [pc, #172]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10d      	bne.n	8004d50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d38:	e00a      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d102      	bne.n	8004d46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d40:	4b25      	ldr	r3, [pc, #148]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	e004      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d101      	bne.n	8004d50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d4c:	4b23      	ldr	r3, [pc, #140]	@ (8004ddc <HAL_RCC_GetSysClockFreq+0x114>)
 8004d4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b0c      	cmp	r3, #12
 8004d54:	d134      	bne.n	8004dc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d56:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d003      	beq.n	8004d6e <HAL_RCC_GetSysClockFreq+0xa6>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d003      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0xac>
 8004d6c:	e005      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d70:	617b      	str	r3, [r7, #20]
      break;
 8004d72:	e005      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d74:	4b19      	ldr	r3, [pc, #100]	@ (8004ddc <HAL_RCC_GetSysClockFreq+0x114>)
 8004d76:	617b      	str	r3, [r7, #20]
      break;
 8004d78:	e002      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	617b      	str	r3, [r7, #20]
      break;
 8004d7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d80:	4b13      	ldr	r3, [pc, #76]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d8e:	4b10      	ldr	r3, [pc, #64]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	fb03 f202 	mul.w	r2, r3, r2
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004da6:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	0e5b      	lsrs	r3, r3, #25
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	3301      	adds	r3, #1
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3724      	adds	r7, #36	@ 0x24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	0800861c 	.word	0x0800861c
 8004dd8:	00f42400 	.word	0x00f42400
 8004ddc:	007a1200 	.word	0x007a1200

08004de0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de4:	4b03      	ldr	r3, [pc, #12]	@ (8004df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de6:	681b      	ldr	r3, [r3, #0]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	2000001c 	.word	0x2000001c

08004df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004dfc:	f7ff fff0 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	4904      	ldr	r1, [pc, #16]	@ (8004e20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	08008614 	.word	0x08008614

08004e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e28:	f7ff ffda 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b06      	ldr	r3, [pc, #24]	@ (8004e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	0adb      	lsrs	r3, r3, #11
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	4904      	ldr	r1, [pc, #16]	@ (8004e4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	08008614 	.word	0x08008614

08004e50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e58:	2300      	movs	r3, #0
 8004e5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e68:	f7ff f9c2 	bl	80041f0 <HAL_PWREx_GetVoltageRange>
 8004e6c:	6178      	str	r0, [r7, #20]
 8004e6e:	e014      	b.n	8004e9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e70:	4b25      	ldr	r3, [pc, #148]	@ (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e74:	4a24      	ldr	r2, [pc, #144]	@ (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e7c:	4b22      	ldr	r3, [pc, #136]	@ (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e88:	f7ff f9b2 	bl	80041f0 <HAL_PWREx_GetVoltageRange>
 8004e8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e92:	4a1d      	ldr	r2, [pc, #116]	@ (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e98:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ea0:	d10b      	bne.n	8004eba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b80      	cmp	r3, #128	@ 0x80
 8004ea6:	d919      	bls.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2ba0      	cmp	r3, #160	@ 0xa0
 8004eac:	d902      	bls.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004eae:	2302      	movs	r3, #2
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	e013      	b.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	e010      	b.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b80      	cmp	r3, #128	@ 0x80
 8004ebe:	d902      	bls.n	8004ec6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	613b      	str	r3, [r7, #16]
 8004ec4:	e00a      	b.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b80      	cmp	r3, #128	@ 0x80
 8004eca:	d102      	bne.n	8004ed2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ecc:	2302      	movs	r3, #2
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	e004      	b.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b70      	cmp	r3, #112	@ 0x70
 8004ed6:	d101      	bne.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ed8:	2301      	movs	r3, #1
 8004eda:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004edc:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f023 0207 	bic.w	r2, r3, #7
 8004ee4:	4909      	ldr	r1, [pc, #36]	@ (8004f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004eec:	4b07      	ldr	r3, [pc, #28]	@ (8004f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d001      	beq.n	8004efe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40022000 	.word	0x40022000

08004f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f18:	2300      	movs	r3, #0
 8004f1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d041      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f30:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f34:	d02a      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f36:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f3a:	d824      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f40:	d008      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f46:	d81e      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f50:	d010      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f52:	e018      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f54:	4b86      	ldr	r3, [pc, #536]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4a85      	ldr	r2, [pc, #532]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f60:	e015      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3304      	adds	r3, #4
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fabb 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f72:	e00c      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3320      	adds	r3, #32
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fba6 	bl	80056cc <RCCEx_PLLSAI2_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f84:	e003      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	74fb      	strb	r3, [r7, #19]
      break;
 8004f8a:	e000      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f8e:	7cfb      	ldrb	r3, [r7, #19]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10b      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f94:	4b76      	ldr	r3, [pc, #472]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fa2:	4973      	ldr	r1, [pc, #460]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004faa:	e001      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d041      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004fc4:	d02a      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004fc6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004fca:	d824      	bhi.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004fcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fd0:	d008      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004fd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fd6:	d81e      	bhi.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fe0:	d010      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fe2:	e018      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fe4:	4b62      	ldr	r3, [pc, #392]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4a61      	ldr	r2, [pc, #388]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ff0:	e015      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fa73 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 8004ffe:	4603      	mov	r3, r0
 8005000:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005002:	e00c      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3320      	adds	r3, #32
 8005008:	2100      	movs	r1, #0
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fb5e 	bl	80056cc <RCCEx_PLLSAI2_Config>
 8005010:	4603      	mov	r3, r0
 8005012:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005014:	e003      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	74fb      	strb	r3, [r7, #19]
      break;
 800501a:	e000      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800501c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800501e:	7cfb      	ldrb	r3, [r7, #19]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10b      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005024:	4b52      	ldr	r3, [pc, #328]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005032:	494f      	ldr	r1, [pc, #316]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800503a:	e001      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503c:	7cfb      	ldrb	r3, [r7, #19]
 800503e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 80a0 	beq.w	800518e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800504e:	2300      	movs	r3, #0
 8005050:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005052:	4b47      	ldr	r3, [pc, #284]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005062:	2300      	movs	r3, #0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00d      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005068:	4b41      	ldr	r3, [pc, #260]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506c:	4a40      	ldr	r2, [pc, #256]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005072:	6593      	str	r3, [r2, #88]	@ 0x58
 8005074:	4b3e      	ldr	r3, [pc, #248]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005080:	2301      	movs	r3, #1
 8005082:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005084:	4b3b      	ldr	r3, [pc, #236]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a3a      	ldr	r2, [pc, #232]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800508a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800508e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005090:	f7fe f9e8 	bl	8003464 <HAL_GetTick>
 8005094:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005096:	e009      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005098:	f7fe f9e4 	bl	8003464 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d902      	bls.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	74fb      	strb	r3, [r7, #19]
        break;
 80050aa:	e005      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050ac:	4b31      	ldr	r3, [pc, #196]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ef      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80050b8:	7cfb      	ldrb	r3, [r7, #19]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d15c      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050be:	4b2c      	ldr	r3, [pc, #176]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01f      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d019      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050dc:	4b24      	ldr	r3, [pc, #144]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050e8:	4b21      	ldr	r3, [pc, #132]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ee:	4a20      	ldr	r2, [pc, #128]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005108:	4a19      	ldr	r2, [pc, #100]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d016      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511a:	f7fe f9a3 	bl	8003464 <HAL_GetTick>
 800511e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005120:	e00b      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005122:	f7fe f99f 	bl	8003464 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005130:	4293      	cmp	r3, r2
 8005132:	d902      	bls.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	74fb      	strb	r3, [r7, #19]
            break;
 8005138:	e006      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800513a:	4b0d      	ldr	r3, [pc, #52]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0ec      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005148:	7cfb      	ldrb	r3, [r7, #19]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10c      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800514e:	4b08      	ldr	r3, [pc, #32]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005154:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800515e:	4904      	ldr	r1, [pc, #16]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005166:	e009      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005168:	7cfb      	ldrb	r3, [r7, #19]
 800516a:	74bb      	strb	r3, [r7, #18]
 800516c:	e006      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000
 8005174:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005178:	7cfb      	ldrb	r3, [r7, #19]
 800517a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800517c:	7c7b      	ldrb	r3, [r7, #17]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d105      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005182:	4b9e      	ldr	r3, [pc, #632]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005186:	4a9d      	ldr	r2, [pc, #628]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005188:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800518c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800519a:	4b98      	ldr	r3, [pc, #608]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a0:	f023 0203 	bic.w	r2, r3, #3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	4994      	ldr	r1, [pc, #592]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051bc:	4b8f      	ldr	r3, [pc, #572]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c2:	f023 020c 	bic.w	r2, r3, #12
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ca:	498c      	ldr	r1, [pc, #560]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051de:	4b87      	ldr	r3, [pc, #540]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ec:	4983      	ldr	r1, [pc, #524]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00a      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005200:	4b7e      	ldr	r3, [pc, #504]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005206:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520e:	497b      	ldr	r1, [pc, #492]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005222:	4b76      	ldr	r3, [pc, #472]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005228:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005230:	4972      	ldr	r1, [pc, #456]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005244:	4b6d      	ldr	r3, [pc, #436]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005252:	496a      	ldr	r1, [pc, #424]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005266:	4b65      	ldr	r3, [pc, #404]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005274:	4961      	ldr	r1, [pc, #388]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005288:	4b5c      	ldr	r3, [pc, #368]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005296:	4959      	ldr	r1, [pc, #356]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052aa:	4b54      	ldr	r3, [pc, #336]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052b8:	4950      	ldr	r1, [pc, #320]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052cc:	4b4b      	ldr	r3, [pc, #300]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052da:	4948      	ldr	r1, [pc, #288]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052ee:	4b43      	ldr	r3, [pc, #268]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fc:	493f      	ldr	r1, [pc, #252]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d028      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005310:	4b3a      	ldr	r3, [pc, #232]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005316:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800531e:	4937      	ldr	r1, [pc, #220]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800532a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800532e:	d106      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005330:	4b32      	ldr	r3, [pc, #200]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	4a31      	ldr	r2, [pc, #196]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800533a:	60d3      	str	r3, [r2, #12]
 800533c:	e011      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005342:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005346:	d10c      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3304      	adds	r3, #4
 800534c:	2101      	movs	r1, #1
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f8c8 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005358:	7cfb      	ldrb	r3, [r7, #19]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800535e:	7cfb      	ldrb	r3, [r7, #19]
 8005360:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d028      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800536e:	4b23      	ldr	r3, [pc, #140]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005374:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537c:	491f      	ldr	r1, [pc, #124]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005388:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800538c:	d106      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800538e:	4b1b      	ldr	r3, [pc, #108]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	4a1a      	ldr	r2, [pc, #104]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005394:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005398:	60d3      	str	r3, [r2, #12]
 800539a:	e011      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053a4:	d10c      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3304      	adds	r3, #4
 80053aa:	2101      	movs	r1, #1
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 f899 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053b6:	7cfb      	ldrb	r3, [r7, #19]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80053bc:	7cfb      	ldrb	r3, [r7, #19]
 80053be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d02b      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053cc:	4b0b      	ldr	r3, [pc, #44]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053da:	4908      	ldr	r1, [pc, #32]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053ea:	d109      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ec:	4b03      	ldr	r3, [pc, #12]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4a02      	ldr	r2, [pc, #8]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053f6:	60d3      	str	r3, [r2, #12]
 80053f8:	e014      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80053fa:	bf00      	nop
 80053fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005404:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005408:	d10c      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3304      	adds	r3, #4
 800540e:	2101      	movs	r1, #1
 8005410:	4618      	mov	r0, r3
 8005412:	f000 f867 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 8005416:	4603      	mov	r3, r0
 8005418:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800541a:	7cfb      	ldrb	r3, [r7, #19]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005420:	7cfb      	ldrb	r3, [r7, #19]
 8005422:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d02f      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005430:	4b2b      	ldr	r3, [pc, #172]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005436:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800543e:	4928      	ldr	r1, [pc, #160]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800544a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800544e:	d10d      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3304      	adds	r3, #4
 8005454:	2102      	movs	r1, #2
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f844 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 800545c:	4603      	mov	r3, r0
 800545e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005460:	7cfb      	ldrb	r3, [r7, #19]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d014      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005466:	7cfb      	ldrb	r3, [r7, #19]
 8005468:	74bb      	strb	r3, [r7, #18]
 800546a:	e011      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005474:	d10c      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3320      	adds	r3, #32
 800547a:	2102      	movs	r1, #2
 800547c:	4618      	mov	r0, r3
 800547e:	f000 f925 	bl	80056cc <RCCEx_PLLSAI2_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005486:	7cfb      	ldrb	r3, [r7, #19]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800548c:	7cfb      	ldrb	r3, [r7, #19]
 800548e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800549c:	4b10      	ldr	r3, [pc, #64]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800549e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054aa:	490d      	ldr	r1, [pc, #52]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054be:	4b08      	ldr	r3, [pc, #32]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ce:	4904      	ldr	r1, [pc, #16]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40021000 	.word	0x40021000

080054e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054f2:	4b75      	ldr	r3, [pc, #468]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d018      	beq.n	8005530 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054fe:	4b72      	ldr	r3, [pc, #456]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 0203 	and.w	r2, r3, #3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d10d      	bne.n	800552a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
       ||
 8005512:	2b00      	cmp	r3, #0
 8005514:	d009      	beq.n	800552a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005516:	4b6c      	ldr	r3, [pc, #432]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	091b      	lsrs	r3, r3, #4
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
       ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d047      	beq.n	80055ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
 800552e:	e044      	b.n	80055ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d018      	beq.n	800556a <RCCEx_PLLSAI1_Config+0x86>
 8005538:	2b03      	cmp	r3, #3
 800553a:	d825      	bhi.n	8005588 <RCCEx_PLLSAI1_Config+0xa4>
 800553c:	2b01      	cmp	r3, #1
 800553e:	d002      	beq.n	8005546 <RCCEx_PLLSAI1_Config+0x62>
 8005540:	2b02      	cmp	r3, #2
 8005542:	d009      	beq.n	8005558 <RCCEx_PLLSAI1_Config+0x74>
 8005544:	e020      	b.n	8005588 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005546:	4b60      	ldr	r3, [pc, #384]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d11d      	bne.n	800558e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005556:	e01a      	b.n	800558e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005558:	4b5b      	ldr	r3, [pc, #364]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005560:	2b00      	cmp	r3, #0
 8005562:	d116      	bne.n	8005592 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005568:	e013      	b.n	8005592 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800556a:	4b57      	ldr	r3, [pc, #348]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10f      	bne.n	8005596 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005576:	4b54      	ldr	r3, [pc, #336]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005586:	e006      	b.n	8005596 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	73fb      	strb	r3, [r7, #15]
      break;
 800558c:	e004      	b.n	8005598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800558e:	bf00      	nop
 8005590:	e002      	b.n	8005598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005592:	bf00      	nop
 8005594:	e000      	b.n	8005598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005596:	bf00      	nop
    }

    if(status == HAL_OK)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10d      	bne.n	80055ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800559e:	4b4a      	ldr	r3, [pc, #296]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6819      	ldr	r1, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	430b      	orrs	r3, r1
 80055b4:	4944      	ldr	r1, [pc, #272]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d17d      	bne.n	80056bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055c0:	4b41      	ldr	r3, [pc, #260]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a40      	ldr	r2, [pc, #256]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055cc:	f7fd ff4a 	bl	8003464 <HAL_GetTick>
 80055d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055d2:	e009      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055d4:	f7fd ff46 	bl	8003464 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d902      	bls.n	80055e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	73fb      	strb	r3, [r7, #15]
        break;
 80055e6:	e005      	b.n	80055f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055e8:	4b37      	ldr	r3, [pc, #220]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1ef      	bne.n	80055d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d160      	bne.n	80056bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d111      	bne.n	8005624 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005600:	4b31      	ldr	r3, [pc, #196]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6892      	ldr	r2, [r2, #8]
 8005610:	0211      	lsls	r1, r2, #8
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	68d2      	ldr	r2, [r2, #12]
 8005616:	0912      	lsrs	r2, r2, #4
 8005618:	0452      	lsls	r2, r2, #17
 800561a:	430a      	orrs	r2, r1
 800561c:	492a      	ldr	r1, [pc, #168]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800561e:	4313      	orrs	r3, r2
 8005620:	610b      	str	r3, [r1, #16]
 8005622:	e027      	b.n	8005674 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d112      	bne.n	8005650 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800562a:	4b27      	ldr	r3, [pc, #156]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005632:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6892      	ldr	r2, [r2, #8]
 800563a:	0211      	lsls	r1, r2, #8
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6912      	ldr	r2, [r2, #16]
 8005640:	0852      	lsrs	r2, r2, #1
 8005642:	3a01      	subs	r2, #1
 8005644:	0552      	lsls	r2, r2, #21
 8005646:	430a      	orrs	r2, r1
 8005648:	491f      	ldr	r1, [pc, #124]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564a:	4313      	orrs	r3, r2
 800564c:	610b      	str	r3, [r1, #16]
 800564e:	e011      	b.n	8005674 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005650:	4b1d      	ldr	r3, [pc, #116]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005658:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6892      	ldr	r2, [r2, #8]
 8005660:	0211      	lsls	r1, r2, #8
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6952      	ldr	r2, [r2, #20]
 8005666:	0852      	lsrs	r2, r2, #1
 8005668:	3a01      	subs	r2, #1
 800566a:	0652      	lsls	r2, r2, #25
 800566c:	430a      	orrs	r2, r1
 800566e:	4916      	ldr	r1, [pc, #88]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005670:	4313      	orrs	r3, r2
 8005672:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005674:	4b14      	ldr	r3, [pc, #80]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a13      	ldr	r2, [pc, #76]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800567a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800567e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005680:	f7fd fef0 	bl	8003464 <HAL_GetTick>
 8005684:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005686:	e009      	b.n	800569c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005688:	f7fd feec 	bl	8003464 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d902      	bls.n	800569c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	73fb      	strb	r3, [r7, #15]
          break;
 800569a:	e005      	b.n	80056a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800569c:	4b0a      	ldr	r3, [pc, #40]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0ef      	beq.n	8005688 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056ae:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	4904      	ldr	r1, [pc, #16]	@ (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40021000 	.word	0x40021000

080056cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056da:	4b6a      	ldr	r3, [pc, #424]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d018      	beq.n	8005718 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056e6:	4b67      	ldr	r3, [pc, #412]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0203 	and.w	r2, r3, #3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d10d      	bne.n	8005712 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
       ||
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056fe:	4b61      	ldr	r3, [pc, #388]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	091b      	lsrs	r3, r3, #4
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
       ||
 800570e:	429a      	cmp	r2, r3
 8005710:	d047      	beq.n	80057a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
 8005716:	e044      	b.n	80057a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b03      	cmp	r3, #3
 800571e:	d018      	beq.n	8005752 <RCCEx_PLLSAI2_Config+0x86>
 8005720:	2b03      	cmp	r3, #3
 8005722:	d825      	bhi.n	8005770 <RCCEx_PLLSAI2_Config+0xa4>
 8005724:	2b01      	cmp	r3, #1
 8005726:	d002      	beq.n	800572e <RCCEx_PLLSAI2_Config+0x62>
 8005728:	2b02      	cmp	r3, #2
 800572a:	d009      	beq.n	8005740 <RCCEx_PLLSAI2_Config+0x74>
 800572c:	e020      	b.n	8005770 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800572e:	4b55      	ldr	r3, [pc, #340]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d11d      	bne.n	8005776 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800573e:	e01a      	b.n	8005776 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005740:	4b50      	ldr	r3, [pc, #320]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005748:	2b00      	cmp	r3, #0
 800574a:	d116      	bne.n	800577a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005750:	e013      	b.n	800577a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005752:	4b4c      	ldr	r3, [pc, #304]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10f      	bne.n	800577e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800575e:	4b49      	ldr	r3, [pc, #292]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800576e:	e006      	b.n	800577e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	73fb      	strb	r3, [r7, #15]
      break;
 8005774:	e004      	b.n	8005780 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005776:	bf00      	nop
 8005778:	e002      	b.n	8005780 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800577a:	bf00      	nop
 800577c:	e000      	b.n	8005780 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800577e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10d      	bne.n	80057a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005786:	4b3f      	ldr	r3, [pc, #252]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6819      	ldr	r1, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	3b01      	subs	r3, #1
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	430b      	orrs	r3, r1
 800579c:	4939      	ldr	r1, [pc, #228]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d167      	bne.n	8005878 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057a8:	4b36      	ldr	r3, [pc, #216]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a35      	ldr	r2, [pc, #212]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057b4:	f7fd fe56 	bl	8003464 <HAL_GetTick>
 80057b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057ba:	e009      	b.n	80057d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057bc:	f7fd fe52 	bl	8003464 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d902      	bls.n	80057d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	73fb      	strb	r3, [r7, #15]
        break;
 80057ce:	e005      	b.n	80057dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1ef      	bne.n	80057bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d14a      	bne.n	8005878 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d111      	bne.n	800580c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057e8:	4b26      	ldr	r3, [pc, #152]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80057f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6892      	ldr	r2, [r2, #8]
 80057f8:	0211      	lsls	r1, r2, #8
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	68d2      	ldr	r2, [r2, #12]
 80057fe:	0912      	lsrs	r2, r2, #4
 8005800:	0452      	lsls	r2, r2, #17
 8005802:	430a      	orrs	r2, r1
 8005804:	491f      	ldr	r1, [pc, #124]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005806:	4313      	orrs	r3, r2
 8005808:	614b      	str	r3, [r1, #20]
 800580a:	e011      	b.n	8005830 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800580c:	4b1d      	ldr	r3, [pc, #116]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005814:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6892      	ldr	r2, [r2, #8]
 800581c:	0211      	lsls	r1, r2, #8
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6912      	ldr	r2, [r2, #16]
 8005822:	0852      	lsrs	r2, r2, #1
 8005824:	3a01      	subs	r2, #1
 8005826:	0652      	lsls	r2, r2, #25
 8005828:	430a      	orrs	r2, r1
 800582a:	4916      	ldr	r1, [pc, #88]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582c:	4313      	orrs	r3, r2
 800582e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005830:	4b14      	ldr	r3, [pc, #80]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a13      	ldr	r2, [pc, #76]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800583a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583c:	f7fd fe12 	bl	8003464 <HAL_GetTick>
 8005840:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005842:	e009      	b.n	8005858 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005844:	f7fd fe0e 	bl	8003464 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d902      	bls.n	8005858 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	73fb      	strb	r3, [r7, #15]
          break;
 8005856:	e005      	b.n	8005864 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005858:	4b0a      	ldr	r3, [pc, #40]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0ef      	beq.n	8005844 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800586a:	4b06      	ldr	r3, [pc, #24]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	4904      	ldr	r1, [pc, #16]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005874:	4313      	orrs	r3, r2
 8005876:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40021000 	.word	0x40021000

08005888 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e049      	b.n	800592e <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	795b      	ldrb	r3, [r3, #5]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d105      	bne.n	80058b0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fd fb28 	bl	8002f00 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0204 	orr.w	r2, r2, #4
 80058c4:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d0:	2b40      	cmp	r3, #64	@ 0x40
 80058d2:	d104      	bne.n	80058de <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2204      	movs	r2, #4
 80058d8:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e027      	b.n	800592e <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80058de:	f7fd fdc1 	bl	8003464 <HAL_GetTick>
 80058e2:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80058e4:	e015      	b.n	8005912 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80058e6:	f7fd fdbd 	bl	8003464 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d90e      	bls.n	8005912 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d007      	beq.n	8005912 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2204      	movs	r2, #4
 8005906:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e00d      	b.n	800592e <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	d1e2      	bne.n	80058e6 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d079      	beq.n	8005a3c <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7fd fb05 	bl	8002f6c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0310 	and.w	r3, r3, #16
 8005974:	2b10      	cmp	r3, #16
 8005976:	d058      	beq.n	8005a2a <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	22ca      	movs	r2, #202	@ 0xca
 800597e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2253      	movs	r2, #83	@ 0x53
 8005986:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fa4d 	bl	8005e28 <RTC_EnterInitMode>
 800598e:	4603      	mov	r3, r0
 8005990:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005992:	7bfb      	ldrb	r3, [r7, #15]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d127      	bne.n	80059e8 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6812      	ldr	r2, [r2, #0]
 80059a2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80059a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059aa:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6899      	ldr	r1, [r3, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	68d2      	ldr	r2, [r2, #12]
 80059d2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6919      	ldr	r1, [r3, #16]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	041a      	lsls	r2, r3, #16
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fa51 	bl	8005e90 <RTC_ExitInitMode>
 80059ee:	4603      	mov	r3, r0
 80059f0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d113      	bne.n	8005a20 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0203 	bic.w	r2, r2, #3
 8005a06:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	22ff      	movs	r2, #255	@ 0xff
 8005a26:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a28:	e001      	b.n	8005a2e <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d103      	bne.n	8005a3c <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a46:	b590      	push	{r4, r7, lr}
 8005a48:	b087      	sub	sp, #28
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_RTC_SetTime+0x1a>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e08b      	b.n	8005b78 <HAL_RTC_SetTime+0x132>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	22ca      	movs	r2, #202	@ 0xca
 8005a76:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2253      	movs	r2, #83	@ 0x53
 8005a7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f9d1 	bl	8005e28 <RTC_EnterInitMode>
 8005a86:	4603      	mov	r3, r0
 8005a88:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005a8a:	7cfb      	ldrb	r3, [r7, #19]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d163      	bne.n	8005b58 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d126      	bne.n	8005ae4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fa2c 	bl	8005f0c <RTC_ByteToBcd2>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fa25 	bl	8005f0c <RTC_ByteToBcd2>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ac6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	789b      	ldrb	r3, [r3, #2]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fa1d 	bl	8005f0c <RTC_ByteToBcd2>
 8005ad2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ad4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	78db      	ldrb	r3, [r3, #3]
 8005adc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	e018      	b.n	8005b16 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d102      	bne.n	8005af8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2200      	movs	r2, #0
 8005af6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	785b      	ldrb	r3, [r3, #1]
 8005b02:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b04:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b0a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	78db      	ldrb	r3, [r3, #3]
 8005b10:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005b20:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005b24:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b34:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6899      	ldr	r1, [r3, #8]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	431a      	orrs	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f99e 	bl	8005e90 <RTC_ExitInitMode>
 8005b54:	4603      	mov	r3, r0
 8005b56:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	22ff      	movs	r2, #255	@ 0xff
 8005b5e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005b60:	7cfb      	ldrb	r3, [r7, #19]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d103      	bne.n	8005b6e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005b76:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd90      	pop	{r4, r7, pc}

08005b80 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005bae:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	0c1b      	lsrs	r3, r3, #16
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	0a1b      	lsrs	r3, r3, #8
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	0d9b      	lsrs	r3, r3, #22
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11a      	bne.n	8005c2e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 f9a5 	bl	8005f4c <RTC_Bcd2ToByte>
 8005c02:	4603      	mov	r3, r0
 8005c04:	461a      	mov	r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	785b      	ldrb	r3, [r3, #1]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f99c 	bl	8005f4c <RTC_Bcd2ToByte>
 8005c14:	4603      	mov	r3, r0
 8005c16:	461a      	mov	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	789b      	ldrb	r3, [r3, #2]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 f993 	bl	8005f4c <RTC_Bcd2ToByte>
 8005c26:	4603      	mov	r3, r0
 8005c28:	461a      	mov	r2, r3
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c38:	b590      	push	{r4, r7, lr}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d101      	bne.n	8005c52 <HAL_RTC_SetDate+0x1a>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	e075      	b.n	8005d3e <HAL_RTC_SetDate+0x106>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10e      	bne.n	8005c86 <HAL_RTC_SetDate+0x4e>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	f023 0310 	bic.w	r3, r3, #16
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	330a      	adds	r3, #10
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d11c      	bne.n	8005cc6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	78db      	ldrb	r3, [r3, #3]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 f93b 	bl	8005f0c <RTC_ByteToBcd2>
 8005c96:	4603      	mov	r3, r0
 8005c98:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	785b      	ldrb	r3, [r3, #1]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 f934 	bl	8005f0c <RTC_ByteToBcd2>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005ca8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	789b      	ldrb	r3, [r3, #2]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 f92c 	bl	8005f0c <RTC_ByteToBcd2>
 8005cb4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005cb6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e00e      	b.n	8005ce4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	78db      	ldrb	r3, [r3, #3]
 8005cca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	785b      	ldrb	r3, [r3, #1]
 8005cd0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005cd2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005cd8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	22ca      	movs	r2, #202	@ 0xca
 8005cea:	625a      	str	r2, [r3, #36]	@ 0x24
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2253      	movs	r2, #83	@ 0x53
 8005cf2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f897 	bl	8005e28 <RTC_EnterInitMode>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005cfe:	7cfb      	ldrb	r3, [r7, #19]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10c      	bne.n	8005d1e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005d0e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005d12:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 f8bb 	bl	8005e90 <RTC_ExitInitMode>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	22ff      	movs	r2, #255	@ 0xff
 8005d24:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005d26:	7cfb      	ldrb	r3, [r7, #19]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d103      	bne.n	8005d34 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005d3c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd90      	pop	{r4, r7, pc}

08005d46 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b086      	sub	sp, #24
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005d5c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005d60:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	0c1b      	lsrs	r3, r3, #16
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	0a1b      	lsrs	r3, r3, #8
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	0b5b      	lsrs	r3, r3, #13
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d11a      	bne.n	8005dd6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	78db      	ldrb	r3, [r3, #3]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 f8d1 	bl	8005f4c <RTC_Bcd2ToByte>
 8005daa:	4603      	mov	r3, r0
 8005dac:	461a      	mov	r2, r3
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	785b      	ldrb	r3, [r3, #1]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 f8c8 	bl	8005f4c <RTC_Bcd2ToByte>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	789b      	ldrb	r3, [r3, #2]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 f8bf 	bl	8005f4c <RTC_Bcd2ToByte>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a0d      	ldr	r2, [pc, #52]	@ (8005e24 <HAL_RTC_WaitForSynchro+0x44>)
 8005dee:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005df0:	f7fd fb38 	bl	8003464 <HAL_GetTick>
 8005df4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005df6:	e009      	b.n	8005e0c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005df8:	f7fd fb34 	bl	8003464 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e06:	d901      	bls.n	8005e0c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e007      	b.n	8005e1c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0ee      	beq.n	8005df8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	0003ff5f 	.word	0x0003ff5f

08005e28 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d120      	bne.n	8005e84 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e4a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e4c:	f7fd fb0a 	bl	8003464 <HAL_GetTick>
 8005e50:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e52:	e00d      	b.n	8005e70 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005e54:	f7fd fb06 	bl	8003464 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e62:	d905      	bls.n	8005e70 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d102      	bne.n	8005e84 <RTC_EnterInitMode+0x5c>
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d1e7      	bne.n	8005e54 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005f08 <RTC_ExitInitMode+0x78>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	4a19      	ldr	r2, [pc, #100]	@ (8005f08 <RTC_ExitInitMode+0x78>)
 8005ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ea6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005ea8:	4b17      	ldr	r3, [pc, #92]	@ (8005f08 <RTC_ExitInitMode+0x78>)
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10c      	bne.n	8005ece <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff ff93 	bl	8005de0 <HAL_RTC_WaitForSynchro>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01e      	beq.n	8005efe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2203      	movs	r2, #3
 8005ec4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	73fb      	strb	r3, [r7, #15]
 8005ecc:	e017      	b.n	8005efe <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005ece:	4b0e      	ldr	r3, [pc, #56]	@ (8005f08 <RTC_ExitInitMode+0x78>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8005f08 <RTC_ExitInitMode+0x78>)
 8005ed4:	f023 0320 	bic.w	r3, r3, #32
 8005ed8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff ff80 	bl	8005de0 <HAL_RTC_WaitForSynchro>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2203      	movs	r2, #3
 8005eea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005ef2:	4b05      	ldr	r3, [pc, #20]	@ (8005f08 <RTC_ExitInitMode+0x78>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	4a04      	ldr	r2, [pc, #16]	@ (8005f08 <RTC_ExitInitMode+0x78>)
 8005ef8:	f043 0320 	orr.w	r3, r3, #32
 8005efc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40002800 	.word	0x40002800

08005f0c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	4603      	mov	r3, r0
 8005f14:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005f1a:	79fb      	ldrb	r3, [r7, #7]
 8005f1c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005f1e:	e005      	b.n	8005f2c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3301      	adds	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005f26:	7afb      	ldrb	r3, [r7, #11]
 8005f28:	3b0a      	subs	r3, #10
 8005f2a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005f2c:	7afb      	ldrb	r3, [r7, #11]
 8005f2e:	2b09      	cmp	r3, #9
 8005f30:	d8f6      	bhi.n	8005f20 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	7afb      	ldrb	r3, [r7, #11]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	b2db      	uxtb	r3, r3
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	091b      	lsrs	r3, r3, #4
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	0092      	lsls	r2, r2, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	4413      	add	r3, r2
 8005f72:	b2db      	uxtb	r3, r3
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e07f      	b.n	800609a <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	22ca      	movs	r2, #202	@ 0xca
 8005fb0:	625a      	str	r2, [r3, #36]	@ 0x24
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2253      	movs	r2, #83	@ 0x53
 8005fb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fc8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005fda:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d120      	bne.n	800602c <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8005fea:	f7fd fa3b 	bl	8003464 <HAL_GetTick>
 8005fee:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005ff0:	e015      	b.n	800601e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ff2:	f7fd fa37 	bl	8003464 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006000:	d90d      	bls.n	800601e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	22ff      	movs	r2, #255	@ 0xff
 8006008:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2203      	movs	r2, #3
 800600e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e03d      	b.n	800609a <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0e2      	beq.n	8005ff2 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f023 0107 	bic.w	r1, r3, #7
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	430a      	orrs	r2, r1
 8006046:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006048:	4b16      	ldr	r3, [pc, #88]	@ (80060a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a15      	ldr	r2, [pc, #84]	@ (80060a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800604e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006052:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006054:	4b13      	ldr	r3, [pc, #76]	@ (80060a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4a12      	ldr	r2, [pc, #72]	@ (80060a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800605a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800605e:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800606e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800607e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	22ff      	movs	r2, #255	@ 0xff
 8006086:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40010400 	.word	0x40010400

080060a8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e04d      	b.n	800615a <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2202      	movs	r2, #2
 80060ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	22ca      	movs	r2, #202	@ 0xca
 80060d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2253      	movs	r2, #83	@ 0x53
 80060dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060ec:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80060fc:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80060fe:	f7fd f9b1 	bl	8003464 <HAL_GetTick>
 8006102:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006104:	e015      	b.n	8006132 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006106:	f7fd f9ad 	bl	8003464 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006114:	d90d      	bls.n	8006132 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	22ff      	movs	r2, #255	@ 0xff
 800611c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2203      	movs	r2, #3
 8006122:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e013      	b.n	800615a <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0e2      	beq.n	8006106 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	22ff      	movs	r2, #255	@ 0xff
 8006146:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800616c:	4b0f      	ldr	r3, [pc, #60]	@ (80061ac <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800616e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006172:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8006192:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7fc fdd5 	bl	8002d44 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80061a2:	bf00      	nop
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	40010400 	.word	0x40010400

080061b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e095      	b.n	80062ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d108      	bne.n	80061dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061d2:	d009      	beq.n	80061e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	61da      	str	r2, [r3, #28]
 80061da:	e005      	b.n	80061e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fc feec 	bl	8002fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800621e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006228:	d902      	bls.n	8006230 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	e002      	b.n	8006236 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006234:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800623e:	d007      	beq.n	8006250 <HAL_SPI_Init+0xa0>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006248:	d002      	beq.n	8006250 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	431a      	orrs	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800627e:	431a      	orrs	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006292:	ea42 0103 	orr.w	r1, r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	0c1b      	lsrs	r3, r3, #16
 80062ac:	f003 0204 	and.w	r2, r3, #4
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80062cc:	ea42 0103 	orr.w	r1, r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b088      	sub	sp, #32
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	603b      	str	r3, [r7, #0]
 8006302:	4613      	mov	r3, r2
 8006304:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006306:	f7fd f8ad 	bl	8003464 <HAL_GetTick>
 800630a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	d001      	beq.n	8006320 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800631c:	2302      	movs	r3, #2
 800631e:	e15c      	b.n	80065da <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <HAL_SPI_Transmit+0x36>
 8006326:	88fb      	ldrh	r3, [r7, #6]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e154      	b.n	80065da <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <HAL_SPI_Transmit+0x48>
 800633a:	2302      	movs	r3, #2
 800633c:	e14d      	b.n	80065da <HAL_SPI_Transmit+0x2e4>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2203      	movs	r2, #3
 800634a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	88fa      	ldrh	r2, [r7, #6]
 8006364:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006390:	d10f      	bne.n	80063b2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063bc:	2b40      	cmp	r3, #64	@ 0x40
 80063be:	d007      	beq.n	80063d0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80063d8:	d952      	bls.n	8006480 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <HAL_SPI_Transmit+0xf2>
 80063e2:	8b7b      	ldrh	r3, [r7, #26]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d145      	bne.n	8006474 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	881a      	ldrh	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f8:	1c9a      	adds	r2, r3, #2
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800640c:	e032      	b.n	8006474 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b02      	cmp	r3, #2
 800641a:	d112      	bne.n	8006442 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006420:	881a      	ldrh	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642c:	1c9a      	adds	r2, r3, #2
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006436:	b29b      	uxth	r3, r3
 8006438:	3b01      	subs	r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006440:	e018      	b.n	8006474 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006442:	f7fd f80f 	bl	8003464 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d803      	bhi.n	800645a <HAL_SPI_Transmit+0x164>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006458:	d102      	bne.n	8006460 <HAL_SPI_Transmit+0x16a>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d109      	bne.n	8006474 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e0b2      	b.n	80065da <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1c7      	bne.n	800640e <HAL_SPI_Transmit+0x118>
 800647e:	e083      	b.n	8006588 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <HAL_SPI_Transmit+0x198>
 8006488:	8b7b      	ldrh	r3, [r7, #26]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d177      	bne.n	800657e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	d912      	bls.n	80064be <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649c:	881a      	ldrh	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a8:	1c9a      	adds	r2, r3, #2
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	3b02      	subs	r3, #2
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064bc:	e05f      	b.n	800657e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	7812      	ldrb	r2, [r2, #0]
 80064ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80064e4:	e04b      	b.n	800657e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d12b      	bne.n	800654c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d912      	bls.n	8006524 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006502:	881a      	ldrh	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650e:	1c9a      	adds	r2, r3, #2
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b02      	subs	r3, #2
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006522:	e02c      	b.n	800657e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	7812      	ldrb	r2, [r2, #0]
 8006530:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006540:	b29b      	uxth	r3, r3
 8006542:	3b01      	subs	r3, #1
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800654a:	e018      	b.n	800657e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800654c:	f7fc ff8a 	bl	8003464 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	429a      	cmp	r2, r3
 800655a:	d803      	bhi.n	8006564 <HAL_SPI_Transmit+0x26e>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006562:	d102      	bne.n	800656a <HAL_SPI_Transmit+0x274>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d109      	bne.n	800657e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e02d      	b.n	80065da <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006582:	b29b      	uxth	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1ae      	bne.n	80064e6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006588:	69fa      	ldr	r2, [r7, #28]
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 fcf5 	bl	8006f7c <SPI_EndRxTxTransaction>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80065d8:	2300      	movs	r3, #0
  }
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3720      	adds	r7, #32
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b088      	sub	sp, #32
 80065e6:	af02      	add	r7, sp, #8
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	603b      	str	r3, [r7, #0]
 80065ee:	4613      	mov	r3, r2
 80065f0:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d001      	beq.n	8006602 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80065fe:	2302      	movs	r3, #2
 8006600:	e123      	b.n	800684a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800660a:	d112      	bne.n	8006632 <HAL_SPI_Receive+0x50>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10e      	bne.n	8006632 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2204      	movs	r2, #4
 8006618:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800661c:	88fa      	ldrh	r2, [r7, #6]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	4613      	mov	r3, r2
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f912 	bl	8006852 <HAL_SPI_TransmitReceive>
 800662e:	4603      	mov	r3, r0
 8006630:	e10b      	b.n	800684a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006632:	f7fc ff17 	bl	8003464 <HAL_GetTick>
 8006636:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <HAL_SPI_Receive+0x62>
 800663e:	88fb      	ldrh	r3, [r7, #6]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e100      	b.n	800684a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800664e:	2b01      	cmp	r3, #1
 8006650:	d101      	bne.n	8006656 <HAL_SPI_Receive+0x74>
 8006652:	2302      	movs	r3, #2
 8006654:	e0f9      	b.n	800684a <HAL_SPI_Receive+0x268>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2204      	movs	r2, #4
 8006662:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	88fa      	ldrh	r2, [r7, #6]
 8006676:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	88fa      	ldrh	r2, [r7, #6]
 800667e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066a8:	d908      	bls.n	80066bc <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066b8:	605a      	str	r2, [r3, #4]
 80066ba:	e007      	b.n	80066cc <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80066ca:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066d4:	d10f      	bne.n	80066f6 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006700:	2b40      	cmp	r3, #64	@ 0x40
 8006702:	d007      	beq.n	8006714 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006712:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800671c:	d875      	bhi.n	800680a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800671e:	e037      	b.n	8006790 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b01      	cmp	r3, #1
 800672c:	d117      	bne.n	800675e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f103 020c 	add.w	r2, r3, #12
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673a:	7812      	ldrb	r2, [r2, #0]
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800675c:	e018      	b.n	8006790 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800675e:	f7fc fe81 	bl	8003464 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d803      	bhi.n	8006776 <HAL_SPI_Receive+0x194>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006774:	d102      	bne.n	800677c <HAL_SPI_Receive+0x19a>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d109      	bne.n	8006790 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e05c      	b.n	800684a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1c1      	bne.n	8006720 <HAL_SPI_Receive+0x13e>
 800679c:	e03b      	b.n	8006816 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d115      	bne.n	80067d8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b6:	b292      	uxth	r2, r2
 80067b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067be:	1c9a      	adds	r2, r3, #2
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	3b01      	subs	r3, #1
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80067d6:	e018      	b.n	800680a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067d8:	f7fc fe44 	bl	8003464 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d803      	bhi.n	80067f0 <HAL_SPI_Receive+0x20e>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067ee:	d102      	bne.n	80067f6 <HAL_SPI_Receive+0x214>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d109      	bne.n	800680a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e01f      	b.n	800684a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1c3      	bne.n	800679e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 fb56 	bl	8006ecc <SPI_EndRxTransaction>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8006848:	2300      	movs	r3, #0
  }
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b08a      	sub	sp, #40	@ 0x28
 8006856:	af00      	add	r7, sp, #0
 8006858:	60f8      	str	r0, [r7, #12]
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	607a      	str	r2, [r7, #4]
 800685e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006860:	2301      	movs	r3, #1
 8006862:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006864:	f7fc fdfe 	bl	8003464 <HAL_GetTick>
 8006868:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006870:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006878:	887b      	ldrh	r3, [r7, #2]
 800687a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800687c:	887b      	ldrh	r3, [r7, #2]
 800687e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006880:	7ffb      	ldrb	r3, [r7, #31]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d00c      	beq.n	80068a0 <HAL_SPI_TransmitReceive+0x4e>
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800688c:	d106      	bne.n	800689c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d102      	bne.n	800689c <HAL_SPI_TransmitReceive+0x4a>
 8006896:	7ffb      	ldrb	r3, [r7, #31]
 8006898:	2b04      	cmp	r3, #4
 800689a:	d001      	beq.n	80068a0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800689c:	2302      	movs	r3, #2
 800689e:	e1f3      	b.n	8006c88 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d005      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x60>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x60>
 80068ac:	887b      	ldrh	r3, [r7, #2]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e1e8      	b.n	8006c88 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <HAL_SPI_TransmitReceive+0x72>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e1e1      	b.n	8006c88 <HAL_SPI_TransmitReceive+0x436>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d003      	beq.n	80068e0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2205      	movs	r2, #5
 80068dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	887a      	ldrh	r2, [r7, #2]
 80068f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	887a      	ldrh	r2, [r7, #2]
 80068f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	887a      	ldrh	r2, [r7, #2]
 8006906:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	887a      	ldrh	r2, [r7, #2]
 800690c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006922:	d802      	bhi.n	800692a <HAL_SPI_TransmitReceive+0xd8>
 8006924:	8abb      	ldrh	r3, [r7, #20]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d908      	bls.n	800693c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006938:	605a      	str	r2, [r3, #4]
 800693a:	e007      	b.n	800694c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800694a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006956:	2b40      	cmp	r3, #64	@ 0x40
 8006958:	d007      	beq.n	800696a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006968:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006972:	f240 8083 	bls.w	8006a7c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <HAL_SPI_TransmitReceive+0x132>
 800697e:	8afb      	ldrh	r3, [r7, #22]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d16f      	bne.n	8006a64 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006988:	881a      	ldrh	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006994:	1c9a      	adds	r2, r3, #2
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069a8:	e05c      	b.n	8006a64 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d11b      	bne.n	80069f0 <HAL_SPI_TransmitReceive+0x19e>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d016      	beq.n	80069f0 <HAL_SPI_TransmitReceive+0x19e>
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d113      	bne.n	80069f0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069cc:	881a      	ldrh	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d8:	1c9a      	adds	r2, r3, #2
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d11c      	bne.n	8006a38 <HAL_SPI_TransmitReceive+0x1e6>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d016      	beq.n	8006a38 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a14:	b292      	uxth	r2, r2
 8006a16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1c:	1c9a      	adds	r2, r3, #2
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a34:	2301      	movs	r3, #1
 8006a36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a38:	f7fc fd14 	bl	8003464 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d80d      	bhi.n	8006a64 <HAL_SPI_TransmitReceive+0x212>
 8006a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a4e:	d009      	beq.n	8006a64 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e111      	b.n	8006c88 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d19d      	bne.n	80069aa <HAL_SPI_TransmitReceive+0x158>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d197      	bne.n	80069aa <HAL_SPI_TransmitReceive+0x158>
 8006a7a:	e0e5      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_SPI_TransmitReceive+0x23a>
 8006a84:	8afb      	ldrh	r3, [r7, #22]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	f040 80d1 	bne.w	8006c2e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d912      	bls.n	8006abc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9a:	881a      	ldrh	r2, [r3, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa6:	1c9a      	adds	r2, r3, #2
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b02      	subs	r3, #2
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006aba:	e0b8      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	7812      	ldrb	r2, [r2, #0]
 8006ac8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ae2:	e0a4      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d134      	bne.n	8006b5c <HAL_SPI_TransmitReceive+0x30a>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d02f      	beq.n	8006b5c <HAL_SPI_TransmitReceive+0x30a>
 8006afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d12c      	bne.n	8006b5c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d912      	bls.n	8006b32 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b10:	881a      	ldrh	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1c:	1c9a      	adds	r2, r3, #2
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	3b02      	subs	r3, #2
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b30:	e012      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	330c      	adds	r3, #12
 8006b3c:	7812      	ldrb	r2, [r2, #0]
 8006b3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d148      	bne.n	8006bfc <HAL_SPI_TransmitReceive+0x3aa>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d042      	beq.n	8006bfc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d923      	bls.n	8006bca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68da      	ldr	r2, [r3, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8c:	b292      	uxth	r2, r2
 8006b8e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b94:	1c9a      	adds	r2, r3, #2
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b02      	subs	r3, #2
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d81f      	bhi.n	8006bf8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006bc6:	605a      	str	r2, [r3, #4]
 8006bc8:	e016      	b.n	8006bf8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f103 020c 	add.w	r2, r3, #12
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd6:	7812      	ldrb	r2, [r2, #0]
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bfc:	f7fc fc32 	bl	8003464 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d803      	bhi.n	8006c14 <HAL_SPI_TransmitReceive+0x3c2>
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c12:	d102      	bne.n	8006c1a <HAL_SPI_TransmitReceive+0x3c8>
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d109      	bne.n	8006c2e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e02c      	b.n	8006c88 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f47f af55 	bne.w	8006ae4 <HAL_SPI_TransmitReceive+0x292>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f47f af4e 	bne.w	8006ae4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c48:	6a3a      	ldr	r2, [r7, #32]
 8006c4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f995 	bl	8006f7c <SPI_EndRxTxTransaction>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d008      	beq.n	8006c6a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e00e      	b.n	8006c88 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006c86:	2300      	movs	r3, #0
  }
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3728      	adds	r7, #40	@ 0x28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ca0:	f7fc fbe0 	bl	8003464 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca8:	1a9b      	subs	r3, r3, r2
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	4413      	add	r3, r2
 8006cae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006cb0:	f7fc fbd8 	bl	8003464 <HAL_GetTick>
 8006cb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006cb6:	4b39      	ldr	r3, [pc, #228]	@ (8006d9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	015b      	lsls	r3, r3, #5
 8006cbc:	0d1b      	lsrs	r3, r3, #20
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	fb02 f303 	mul.w	r3, r2, r3
 8006cc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cc6:	e054      	b.n	8006d72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cce:	d050      	beq.n	8006d72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cd0:	f7fc fbc8 	bl	8003464 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d902      	bls.n	8006ce6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d13d      	bne.n	8006d62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006cf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cfe:	d111      	bne.n	8006d24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d08:	d004      	beq.n	8006d14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d12:	d107      	bne.n	8006d24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d2c:	d10f      	bne.n	8006d4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e017      	b.n	8006d92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	bf0c      	ite	eq
 8006d82:	2301      	moveq	r3, #1
 8006d84:	2300      	movne	r3, #0
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	79fb      	ldrb	r3, [r7, #7]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d19b      	bne.n	8006cc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3720      	adds	r7, #32
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	2000001c 	.word	0x2000001c

08006da0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08a      	sub	sp, #40	@ 0x28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006db2:	f7fc fb57 	bl	8003464 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dba:	1a9b      	subs	r3, r3, r2
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006dc2:	f7fc fb4f 	bl	8003464 <HAL_GetTick>
 8006dc6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006dd0:	4b3d      	ldr	r3, [pc, #244]	@ (8006ec8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	00da      	lsls	r2, r3, #3
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	0d1b      	lsrs	r3, r3, #20
 8006de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006de2:	fb02 f303 	mul.w	r3, r2, r3
 8006de6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006de8:	e060      	b.n	8006eac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006df0:	d107      	bne.n	8006e02 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e08:	d050      	beq.n	8006eac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e0a:	f7fc fb2b 	bl	8003464 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d902      	bls.n	8006e20 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d13d      	bne.n	8006e9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e38:	d111      	bne.n	8006e5e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e42:	d004      	beq.n	8006e4e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e4c:	d107      	bne.n	8006e5e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e66:	d10f      	bne.n	8006e88 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e010      	b.n	8006ebe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d196      	bne.n	8006dea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3728      	adds	r7, #40	@ 0x28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	2000001c 	.word	0x2000001c

08006ecc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af02      	add	r7, sp, #8
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ee0:	d111      	bne.n	8006f06 <SPI_EndRxTransaction+0x3a>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eea:	d004      	beq.n	8006ef6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef4:	d107      	bne.n	8006f06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f04:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2180      	movs	r1, #128	@ 0x80
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7ff febd 	bl	8006c90 <SPI_WaitFlagStateUntilTimeout>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d007      	beq.n	8006f2c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f20:	f043 0220 	orr.w	r2, r3, #32
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e023      	b.n	8006f74 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f34:	d11d      	bne.n	8006f72 <SPI_EndRxTransaction+0xa6>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f3e:	d004      	beq.n	8006f4a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f48:	d113      	bne.n	8006f72 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f7ff ff22 	bl	8006da0 <SPI_WaitFifoStateUntilTimeout>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d007      	beq.n	8006f72 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f66:	f043 0220 	orr.w	r2, r3, #32
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e000      	b.n	8006f74 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7ff ff03 	bl	8006da0 <SPI_WaitFifoStateUntilTimeout>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d007      	beq.n	8006fb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fa4:	f043 0220 	orr.w	r2, r3, #32
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e027      	b.n	8007000 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2180      	movs	r1, #128	@ 0x80
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f7ff fe68 	bl	8006c90 <SPI_WaitFlagStateUntilTimeout>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d007      	beq.n	8006fd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fca:	f043 0220 	orr.w	r2, r3, #32
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e014      	b.n	8007000 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7ff fedc 	bl	8006da0 <SPI_WaitFifoStateUntilTimeout>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d007      	beq.n	8006ffe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ff2:	f043 0220 	orr.w	r2, r3, #32
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e000      	b.n	8007000 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e040      	b.n	800709c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fc f82e 	bl	800308c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2224      	movs	r2, #36	@ 0x24
 8007034:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0201 	bic.w	r2, r2, #1
 8007044:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fb6a 	bl	8007728 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f8af 	bl	80071b8 <UART_SetConfig>
 800705a:	4603      	mov	r3, r0
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e01b      	b.n	800709c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007082:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0201 	orr.w	r2, r2, #1
 8007092:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fbe9 	bl	800786c <UART_CheckIdleState>
 800709a:	4603      	mov	r3, r0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08a      	sub	sp, #40	@ 0x28
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	603b      	str	r3, [r7, #0]
 80070b0:	4613      	mov	r3, r2
 80070b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	d177      	bne.n	80071ac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <HAL_UART_Transmit+0x24>
 80070c2:	88fb      	ldrh	r3, [r7, #6]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e070      	b.n	80071ae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2221      	movs	r2, #33	@ 0x21
 80070d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070da:	f7fc f9c3 	bl	8003464 <HAL_GetTick>
 80070de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	88fa      	ldrh	r2, [r7, #6]
 80070e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	88fa      	ldrh	r2, [r7, #6]
 80070ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070f8:	d108      	bne.n	800710c <HAL_UART_Transmit+0x68>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d104      	bne.n	800710c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	61bb      	str	r3, [r7, #24]
 800710a:	e003      	b.n	8007114 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007110:	2300      	movs	r3, #0
 8007112:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007114:	e02f      	b.n	8007176 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2200      	movs	r2, #0
 800711e:	2180      	movs	r1, #128	@ 0x80
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 fc4b 	bl	80079bc <UART_WaitOnFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2220      	movs	r2, #32
 8007130:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e03b      	b.n	80071ae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10b      	bne.n	8007154 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	881a      	ldrh	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007148:	b292      	uxth	r2, r2
 800714a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	3302      	adds	r3, #2
 8007150:	61bb      	str	r3, [r7, #24]
 8007152:	e007      	b.n	8007164 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	781a      	ldrb	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	3301      	adds	r3, #1
 8007162:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800716a:	b29b      	uxth	r3, r3
 800716c:	3b01      	subs	r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800717c:	b29b      	uxth	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1c9      	bne.n	8007116 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2200      	movs	r2, #0
 800718a:	2140      	movs	r1, #64	@ 0x40
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 fc15 	bl	80079bc <UART_WaitOnFlagUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d004      	beq.n	80071a2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2220      	movs	r2, #32
 800719c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e005      	b.n	80071ae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	e000      	b.n	80071ae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80071ac:	2302      	movs	r3, #2
  }
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3720      	adds	r7, #32
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071bc:	b08a      	sub	sp, #40	@ 0x28
 80071be:	af00      	add	r7, sp, #0
 80071c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	431a      	orrs	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	431a      	orrs	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	4313      	orrs	r3, r2
 80071de:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4ba4      	ldr	r3, [pc, #656]	@ (8007478 <UART_SetConfig+0x2c0>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071f0:	430b      	orrs	r3, r1
 80071f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a99      	ldr	r2, [pc, #612]	@ (800747c <UART_SetConfig+0x2c4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d004      	beq.n	8007224 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007220:	4313      	orrs	r3, r2
 8007222:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007234:	430a      	orrs	r2, r1
 8007236:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a90      	ldr	r2, [pc, #576]	@ (8007480 <UART_SetConfig+0x2c8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d126      	bne.n	8007290 <UART_SetConfig+0xd8>
 8007242:	4b90      	ldr	r3, [pc, #576]	@ (8007484 <UART_SetConfig+0x2cc>)
 8007244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007248:	f003 0303 	and.w	r3, r3, #3
 800724c:	2b03      	cmp	r3, #3
 800724e:	d81b      	bhi.n	8007288 <UART_SetConfig+0xd0>
 8007250:	a201      	add	r2, pc, #4	@ (adr r2, 8007258 <UART_SetConfig+0xa0>)
 8007252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007256:	bf00      	nop
 8007258:	08007269 	.word	0x08007269
 800725c:	08007279 	.word	0x08007279
 8007260:	08007271 	.word	0x08007271
 8007264:	08007281 	.word	0x08007281
 8007268:	2301      	movs	r3, #1
 800726a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800726e:	e116      	b.n	800749e <UART_SetConfig+0x2e6>
 8007270:	2302      	movs	r3, #2
 8007272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007276:	e112      	b.n	800749e <UART_SetConfig+0x2e6>
 8007278:	2304      	movs	r3, #4
 800727a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800727e:	e10e      	b.n	800749e <UART_SetConfig+0x2e6>
 8007280:	2308      	movs	r3, #8
 8007282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007286:	e10a      	b.n	800749e <UART_SetConfig+0x2e6>
 8007288:	2310      	movs	r3, #16
 800728a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800728e:	e106      	b.n	800749e <UART_SetConfig+0x2e6>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a7c      	ldr	r2, [pc, #496]	@ (8007488 <UART_SetConfig+0x2d0>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d138      	bne.n	800730c <UART_SetConfig+0x154>
 800729a:	4b7a      	ldr	r3, [pc, #488]	@ (8007484 <UART_SetConfig+0x2cc>)
 800729c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a0:	f003 030c 	and.w	r3, r3, #12
 80072a4:	2b0c      	cmp	r3, #12
 80072a6:	d82d      	bhi.n	8007304 <UART_SetConfig+0x14c>
 80072a8:	a201      	add	r2, pc, #4	@ (adr r2, 80072b0 <UART_SetConfig+0xf8>)
 80072aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ae:	bf00      	nop
 80072b0:	080072e5 	.word	0x080072e5
 80072b4:	08007305 	.word	0x08007305
 80072b8:	08007305 	.word	0x08007305
 80072bc:	08007305 	.word	0x08007305
 80072c0:	080072f5 	.word	0x080072f5
 80072c4:	08007305 	.word	0x08007305
 80072c8:	08007305 	.word	0x08007305
 80072cc:	08007305 	.word	0x08007305
 80072d0:	080072ed 	.word	0x080072ed
 80072d4:	08007305 	.word	0x08007305
 80072d8:	08007305 	.word	0x08007305
 80072dc:	08007305 	.word	0x08007305
 80072e0:	080072fd 	.word	0x080072fd
 80072e4:	2300      	movs	r3, #0
 80072e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ea:	e0d8      	b.n	800749e <UART_SetConfig+0x2e6>
 80072ec:	2302      	movs	r3, #2
 80072ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072f2:	e0d4      	b.n	800749e <UART_SetConfig+0x2e6>
 80072f4:	2304      	movs	r3, #4
 80072f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072fa:	e0d0      	b.n	800749e <UART_SetConfig+0x2e6>
 80072fc:	2308      	movs	r3, #8
 80072fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007302:	e0cc      	b.n	800749e <UART_SetConfig+0x2e6>
 8007304:	2310      	movs	r3, #16
 8007306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800730a:	e0c8      	b.n	800749e <UART_SetConfig+0x2e6>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a5e      	ldr	r2, [pc, #376]	@ (800748c <UART_SetConfig+0x2d4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d125      	bne.n	8007362 <UART_SetConfig+0x1aa>
 8007316:	4b5b      	ldr	r3, [pc, #364]	@ (8007484 <UART_SetConfig+0x2cc>)
 8007318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800731c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007320:	2b30      	cmp	r3, #48	@ 0x30
 8007322:	d016      	beq.n	8007352 <UART_SetConfig+0x19a>
 8007324:	2b30      	cmp	r3, #48	@ 0x30
 8007326:	d818      	bhi.n	800735a <UART_SetConfig+0x1a2>
 8007328:	2b20      	cmp	r3, #32
 800732a:	d00a      	beq.n	8007342 <UART_SetConfig+0x18a>
 800732c:	2b20      	cmp	r3, #32
 800732e:	d814      	bhi.n	800735a <UART_SetConfig+0x1a2>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <UART_SetConfig+0x182>
 8007334:	2b10      	cmp	r3, #16
 8007336:	d008      	beq.n	800734a <UART_SetConfig+0x192>
 8007338:	e00f      	b.n	800735a <UART_SetConfig+0x1a2>
 800733a:	2300      	movs	r3, #0
 800733c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007340:	e0ad      	b.n	800749e <UART_SetConfig+0x2e6>
 8007342:	2302      	movs	r3, #2
 8007344:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007348:	e0a9      	b.n	800749e <UART_SetConfig+0x2e6>
 800734a:	2304      	movs	r3, #4
 800734c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007350:	e0a5      	b.n	800749e <UART_SetConfig+0x2e6>
 8007352:	2308      	movs	r3, #8
 8007354:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007358:	e0a1      	b.n	800749e <UART_SetConfig+0x2e6>
 800735a:	2310      	movs	r3, #16
 800735c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007360:	e09d      	b.n	800749e <UART_SetConfig+0x2e6>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a4a      	ldr	r2, [pc, #296]	@ (8007490 <UART_SetConfig+0x2d8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d125      	bne.n	80073b8 <UART_SetConfig+0x200>
 800736c:	4b45      	ldr	r3, [pc, #276]	@ (8007484 <UART_SetConfig+0x2cc>)
 800736e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007372:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007376:	2bc0      	cmp	r3, #192	@ 0xc0
 8007378:	d016      	beq.n	80073a8 <UART_SetConfig+0x1f0>
 800737a:	2bc0      	cmp	r3, #192	@ 0xc0
 800737c:	d818      	bhi.n	80073b0 <UART_SetConfig+0x1f8>
 800737e:	2b80      	cmp	r3, #128	@ 0x80
 8007380:	d00a      	beq.n	8007398 <UART_SetConfig+0x1e0>
 8007382:	2b80      	cmp	r3, #128	@ 0x80
 8007384:	d814      	bhi.n	80073b0 <UART_SetConfig+0x1f8>
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <UART_SetConfig+0x1d8>
 800738a:	2b40      	cmp	r3, #64	@ 0x40
 800738c:	d008      	beq.n	80073a0 <UART_SetConfig+0x1e8>
 800738e:	e00f      	b.n	80073b0 <UART_SetConfig+0x1f8>
 8007390:	2300      	movs	r3, #0
 8007392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007396:	e082      	b.n	800749e <UART_SetConfig+0x2e6>
 8007398:	2302      	movs	r3, #2
 800739a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800739e:	e07e      	b.n	800749e <UART_SetConfig+0x2e6>
 80073a0:	2304      	movs	r3, #4
 80073a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073a6:	e07a      	b.n	800749e <UART_SetConfig+0x2e6>
 80073a8:	2308      	movs	r3, #8
 80073aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073ae:	e076      	b.n	800749e <UART_SetConfig+0x2e6>
 80073b0:	2310      	movs	r3, #16
 80073b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073b6:	e072      	b.n	800749e <UART_SetConfig+0x2e6>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a35      	ldr	r2, [pc, #212]	@ (8007494 <UART_SetConfig+0x2dc>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d12a      	bne.n	8007418 <UART_SetConfig+0x260>
 80073c2:	4b30      	ldr	r3, [pc, #192]	@ (8007484 <UART_SetConfig+0x2cc>)
 80073c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073d0:	d01a      	beq.n	8007408 <UART_SetConfig+0x250>
 80073d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073d6:	d81b      	bhi.n	8007410 <UART_SetConfig+0x258>
 80073d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073dc:	d00c      	beq.n	80073f8 <UART_SetConfig+0x240>
 80073de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073e2:	d815      	bhi.n	8007410 <UART_SetConfig+0x258>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <UART_SetConfig+0x238>
 80073e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ec:	d008      	beq.n	8007400 <UART_SetConfig+0x248>
 80073ee:	e00f      	b.n	8007410 <UART_SetConfig+0x258>
 80073f0:	2300      	movs	r3, #0
 80073f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073f6:	e052      	b.n	800749e <UART_SetConfig+0x2e6>
 80073f8:	2302      	movs	r3, #2
 80073fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073fe:	e04e      	b.n	800749e <UART_SetConfig+0x2e6>
 8007400:	2304      	movs	r3, #4
 8007402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007406:	e04a      	b.n	800749e <UART_SetConfig+0x2e6>
 8007408:	2308      	movs	r3, #8
 800740a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800740e:	e046      	b.n	800749e <UART_SetConfig+0x2e6>
 8007410:	2310      	movs	r3, #16
 8007412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007416:	e042      	b.n	800749e <UART_SetConfig+0x2e6>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a17      	ldr	r2, [pc, #92]	@ (800747c <UART_SetConfig+0x2c4>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d13a      	bne.n	8007498 <UART_SetConfig+0x2e0>
 8007422:	4b18      	ldr	r3, [pc, #96]	@ (8007484 <UART_SetConfig+0x2cc>)
 8007424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007428:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800742c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007430:	d01a      	beq.n	8007468 <UART_SetConfig+0x2b0>
 8007432:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007436:	d81b      	bhi.n	8007470 <UART_SetConfig+0x2b8>
 8007438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800743c:	d00c      	beq.n	8007458 <UART_SetConfig+0x2a0>
 800743e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007442:	d815      	bhi.n	8007470 <UART_SetConfig+0x2b8>
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <UART_SetConfig+0x298>
 8007448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800744c:	d008      	beq.n	8007460 <UART_SetConfig+0x2a8>
 800744e:	e00f      	b.n	8007470 <UART_SetConfig+0x2b8>
 8007450:	2300      	movs	r3, #0
 8007452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007456:	e022      	b.n	800749e <UART_SetConfig+0x2e6>
 8007458:	2302      	movs	r3, #2
 800745a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800745e:	e01e      	b.n	800749e <UART_SetConfig+0x2e6>
 8007460:	2304      	movs	r3, #4
 8007462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007466:	e01a      	b.n	800749e <UART_SetConfig+0x2e6>
 8007468:	2308      	movs	r3, #8
 800746a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800746e:	e016      	b.n	800749e <UART_SetConfig+0x2e6>
 8007470:	2310      	movs	r3, #16
 8007472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007476:	e012      	b.n	800749e <UART_SetConfig+0x2e6>
 8007478:	efff69f3 	.word	0xefff69f3
 800747c:	40008000 	.word	0x40008000
 8007480:	40013800 	.word	0x40013800
 8007484:	40021000 	.word	0x40021000
 8007488:	40004400 	.word	0x40004400
 800748c:	40004800 	.word	0x40004800
 8007490:	40004c00 	.word	0x40004c00
 8007494:	40005000 	.word	0x40005000
 8007498:	2310      	movs	r3, #16
 800749a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a9f      	ldr	r2, [pc, #636]	@ (8007720 <UART_SetConfig+0x568>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d17a      	bne.n	800759e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d824      	bhi.n	80074fa <UART_SetConfig+0x342>
 80074b0:	a201      	add	r2, pc, #4	@ (adr r2, 80074b8 <UART_SetConfig+0x300>)
 80074b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b6:	bf00      	nop
 80074b8:	080074dd 	.word	0x080074dd
 80074bc:	080074fb 	.word	0x080074fb
 80074c0:	080074e5 	.word	0x080074e5
 80074c4:	080074fb 	.word	0x080074fb
 80074c8:	080074eb 	.word	0x080074eb
 80074cc:	080074fb 	.word	0x080074fb
 80074d0:	080074fb 	.word	0x080074fb
 80074d4:	080074fb 	.word	0x080074fb
 80074d8:	080074f3 	.word	0x080074f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074dc:	f7fd fc8c 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 80074e0:	61f8      	str	r0, [r7, #28]
        break;
 80074e2:	e010      	b.n	8007506 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074e4:	4b8f      	ldr	r3, [pc, #572]	@ (8007724 <UART_SetConfig+0x56c>)
 80074e6:	61fb      	str	r3, [r7, #28]
        break;
 80074e8:	e00d      	b.n	8007506 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074ea:	f7fd fbed 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 80074ee:	61f8      	str	r0, [r7, #28]
        break;
 80074f0:	e009      	b.n	8007506 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074f6:	61fb      	str	r3, [r7, #28]
        break;
 80074f8:	e005      	b.n	8007506 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80074fa:	2300      	movs	r3, #0
 80074fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007504:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 80fb 	beq.w	8007704 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	4613      	mov	r3, r2
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	4413      	add	r3, r2
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	429a      	cmp	r2, r3
 800751c:	d305      	bcc.n	800752a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007524:	69fa      	ldr	r2, [r7, #28]
 8007526:	429a      	cmp	r2, r3
 8007528:	d903      	bls.n	8007532 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007530:	e0e8      	b.n	8007704 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	2200      	movs	r2, #0
 8007536:	461c      	mov	r4, r3
 8007538:	4615      	mov	r5, r2
 800753a:	f04f 0200 	mov.w	r2, #0
 800753e:	f04f 0300 	mov.w	r3, #0
 8007542:	022b      	lsls	r3, r5, #8
 8007544:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007548:	0222      	lsls	r2, r4, #8
 800754a:	68f9      	ldr	r1, [r7, #12]
 800754c:	6849      	ldr	r1, [r1, #4]
 800754e:	0849      	lsrs	r1, r1, #1
 8007550:	2000      	movs	r0, #0
 8007552:	4688      	mov	r8, r1
 8007554:	4681      	mov	r9, r0
 8007556:	eb12 0a08 	adds.w	sl, r2, r8
 800755a:	eb43 0b09 	adc.w	fp, r3, r9
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	603b      	str	r3, [r7, #0]
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800756c:	4650      	mov	r0, sl
 800756e:	4659      	mov	r1, fp
 8007570:	f7f8 fe2a 	bl	80001c8 <__aeabi_uldivmod>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4613      	mov	r3, r2
 800757a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007582:	d308      	bcc.n	8007596 <UART_SetConfig+0x3de>
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800758a:	d204      	bcs.n	8007596 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	60da      	str	r2, [r3, #12]
 8007594:	e0b6      	b.n	8007704 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800759c:	e0b2      	b.n	8007704 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075a6:	d15e      	bne.n	8007666 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80075a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d828      	bhi.n	8007602 <UART_SetConfig+0x44a>
 80075b0:	a201      	add	r2, pc, #4	@ (adr r2, 80075b8 <UART_SetConfig+0x400>)
 80075b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b6:	bf00      	nop
 80075b8:	080075dd 	.word	0x080075dd
 80075bc:	080075e5 	.word	0x080075e5
 80075c0:	080075ed 	.word	0x080075ed
 80075c4:	08007603 	.word	0x08007603
 80075c8:	080075f3 	.word	0x080075f3
 80075cc:	08007603 	.word	0x08007603
 80075d0:	08007603 	.word	0x08007603
 80075d4:	08007603 	.word	0x08007603
 80075d8:	080075fb 	.word	0x080075fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075dc:	f7fd fc0c 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 80075e0:	61f8      	str	r0, [r7, #28]
        break;
 80075e2:	e014      	b.n	800760e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075e4:	f7fd fc1e 	bl	8004e24 <HAL_RCC_GetPCLK2Freq>
 80075e8:	61f8      	str	r0, [r7, #28]
        break;
 80075ea:	e010      	b.n	800760e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075ec:	4b4d      	ldr	r3, [pc, #308]	@ (8007724 <UART_SetConfig+0x56c>)
 80075ee:	61fb      	str	r3, [r7, #28]
        break;
 80075f0:	e00d      	b.n	800760e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075f2:	f7fd fb69 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 80075f6:	61f8      	str	r0, [r7, #28]
        break;
 80075f8:	e009      	b.n	800760e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075fe:	61fb      	str	r3, [r7, #28]
        break;
 8007600:	e005      	b.n	800760e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800760c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d077      	beq.n	8007704 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	005a      	lsls	r2, r3, #1
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	085b      	lsrs	r3, r3, #1
 800761e:	441a      	add	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	fbb2 f3f3 	udiv	r3, r2, r3
 8007628:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	2b0f      	cmp	r3, #15
 800762e:	d916      	bls.n	800765e <UART_SetConfig+0x4a6>
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007636:	d212      	bcs.n	800765e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	b29b      	uxth	r3, r3
 800763c:	f023 030f 	bic.w	r3, r3, #15
 8007640:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	085b      	lsrs	r3, r3, #1
 8007646:	b29b      	uxth	r3, r3
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	b29a      	uxth	r2, r3
 800764e:	8afb      	ldrh	r3, [r7, #22]
 8007650:	4313      	orrs	r3, r2
 8007652:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	8afa      	ldrh	r2, [r7, #22]
 800765a:	60da      	str	r2, [r3, #12]
 800765c:	e052      	b.n	8007704 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007664:	e04e      	b.n	8007704 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007666:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800766a:	2b08      	cmp	r3, #8
 800766c:	d827      	bhi.n	80076be <UART_SetConfig+0x506>
 800766e:	a201      	add	r2, pc, #4	@ (adr r2, 8007674 <UART_SetConfig+0x4bc>)
 8007670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007674:	08007699 	.word	0x08007699
 8007678:	080076a1 	.word	0x080076a1
 800767c:	080076a9 	.word	0x080076a9
 8007680:	080076bf 	.word	0x080076bf
 8007684:	080076af 	.word	0x080076af
 8007688:	080076bf 	.word	0x080076bf
 800768c:	080076bf 	.word	0x080076bf
 8007690:	080076bf 	.word	0x080076bf
 8007694:	080076b7 	.word	0x080076b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007698:	f7fd fbae 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 800769c:	61f8      	str	r0, [r7, #28]
        break;
 800769e:	e014      	b.n	80076ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076a0:	f7fd fbc0 	bl	8004e24 <HAL_RCC_GetPCLK2Freq>
 80076a4:	61f8      	str	r0, [r7, #28]
        break;
 80076a6:	e010      	b.n	80076ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076a8:	4b1e      	ldr	r3, [pc, #120]	@ (8007724 <UART_SetConfig+0x56c>)
 80076aa:	61fb      	str	r3, [r7, #28]
        break;
 80076ac:	e00d      	b.n	80076ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ae:	f7fd fb0b 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 80076b2:	61f8      	str	r0, [r7, #28]
        break;
 80076b4:	e009      	b.n	80076ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076ba:	61fb      	str	r3, [r7, #28]
        break;
 80076bc:	e005      	b.n	80076ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80076c8:	bf00      	nop
    }

    if (pclk != 0U)
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d019      	beq.n	8007704 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	085a      	lsrs	r2, r3, #1
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	441a      	add	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	2b0f      	cmp	r3, #15
 80076e8:	d909      	bls.n	80076fe <UART_SetConfig+0x546>
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076f0:	d205      	bcs.n	80076fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60da      	str	r2, [r3, #12]
 80076fc:	e002      	b.n	8007704 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007710:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007714:	4618      	mov	r0, r3
 8007716:	3728      	adds	r7, #40	@ 0x28
 8007718:	46bd      	mov	sp, r7
 800771a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800771e:	bf00      	nop
 8007720:	40008000 	.word	0x40008000
 8007724:	00f42400 	.word	0x00f42400

08007728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007734:	f003 0308 	and.w	r3, r3, #8
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00a      	beq.n	8007796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779a:	f003 0304 	and.w	r3, r3, #4
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077bc:	f003 0310 	and.w	r3, r3, #16
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00a      	beq.n	80077da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01a      	beq.n	800783e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007826:	d10a      	bne.n	800783e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	605a      	str	r2, [r3, #4]
  }
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b098      	sub	sp, #96	@ 0x60
 8007870:	af02      	add	r7, sp, #8
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800787c:	f7fb fdf2 	bl	8003464 <HAL_GetTick>
 8007880:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b08      	cmp	r3, #8
 800788e:	d12e      	bne.n	80078ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007890:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007898:	2200      	movs	r2, #0
 800789a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f88c 	bl	80079bc <UART_WaitOnFlagUntilTimeout>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d021      	beq.n	80078ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078be:	653b      	str	r3, [r7, #80]	@ 0x50
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e6      	bne.n	80078aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e062      	b.n	80079b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d149      	bne.n	8007990 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007904:	2200      	movs	r2, #0
 8007906:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f856 	bl	80079bc <UART_WaitOnFlagUntilTimeout>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d03c      	beq.n	8007990 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	623b      	str	r3, [r7, #32]
   return(result);
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800792a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	461a      	mov	r2, r3
 8007932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007934:	633b      	str	r3, [r7, #48]	@ 0x30
 8007936:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800793a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800793c:	e841 2300 	strex	r3, r2, [r1]
 8007940:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e6      	bne.n	8007916 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3308      	adds	r3, #8
 800794e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	60fb      	str	r3, [r7, #12]
   return(result);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0301 	bic.w	r3, r3, #1
 800795e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3308      	adds	r3, #8
 8007966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007968:	61fa      	str	r2, [r7, #28]
 800796a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796c:	69b9      	ldr	r1, [r7, #24]
 800796e:	69fa      	ldr	r2, [r7, #28]
 8007970:	e841 2300 	strex	r3, r2, [r1]
 8007974:	617b      	str	r3, [r7, #20]
   return(result);
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1e5      	bne.n	8007948 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e011      	b.n	80079b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3758      	adds	r7, #88	@ 0x58
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	4613      	mov	r3, r2
 80079ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079cc:	e04f      	b.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079d4:	d04b      	beq.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079d6:	f7fb fd45 	bl	8003464 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d302      	bcc.n	80079ec <UART_WaitOnFlagUntilTimeout+0x30>
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e04e      	b.n	8007a8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0304 	and.w	r3, r3, #4
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d037      	beq.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xb2>
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b80      	cmp	r3, #128	@ 0x80
 8007a02:	d034      	beq.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2b40      	cmp	r3, #64	@ 0x40
 8007a08:	d031      	beq.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	f003 0308 	and.w	r3, r3, #8
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d110      	bne.n	8007a3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2208      	movs	r2, #8
 8007a1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 f838 	bl	8007a96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2208      	movs	r2, #8
 8007a2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e029      	b.n	8007a8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a48:	d111      	bne.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 f81e 	bl	8007a96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e00f      	b.n	8007a8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69da      	ldr	r2, [r3, #28]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4013      	ands	r3, r2
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	bf0c      	ite	eq
 8007a7e:	2301      	moveq	r3, #1
 8007a80:	2300      	movne	r3, #0
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	79fb      	ldrb	r3, [r7, #7]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d0a0      	beq.n	80079ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b095      	sub	sp, #84	@ 0x54
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007abe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ac2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ac4:	e841 2300 	strex	r3, r2, [r1]
 8007ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e6      	bne.n	8007a9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	f023 0301 	bic.w	r3, r3, #1
 8007ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e5      	bne.n	8007ad0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d118      	bne.n	8007b3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f023 0310 	bic.w	r3, r3, #16
 8007b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b2a:	61bb      	str	r3, [r7, #24]
 8007b2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6979      	ldr	r1, [r7, #20]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	613b      	str	r3, [r7, #16]
   return(result);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e6      	bne.n	8007b0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007b52:	bf00      	nop
 8007b54:	3754      	adds	r7, #84	@ 0x54
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
	...

08007b60 <std>:
 8007b60:	2300      	movs	r3, #0
 8007b62:	b510      	push	{r4, lr}
 8007b64:	4604      	mov	r4, r0
 8007b66:	e9c0 3300 	strd	r3, r3, [r0]
 8007b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b6e:	6083      	str	r3, [r0, #8]
 8007b70:	8181      	strh	r1, [r0, #12]
 8007b72:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b74:	81c2      	strh	r2, [r0, #14]
 8007b76:	6183      	str	r3, [r0, #24]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	2208      	movs	r2, #8
 8007b7c:	305c      	adds	r0, #92	@ 0x5c
 8007b7e:	f000 f90f 	bl	8007da0 <memset>
 8007b82:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb8 <std+0x58>)
 8007b84:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b86:	4b0d      	ldr	r3, [pc, #52]	@ (8007bbc <std+0x5c>)
 8007b88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc0 <std+0x60>)
 8007b8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc4 <std+0x64>)
 8007b90:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b92:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc8 <std+0x68>)
 8007b94:	6224      	str	r4, [r4, #32]
 8007b96:	429c      	cmp	r4, r3
 8007b98:	d006      	beq.n	8007ba8 <std+0x48>
 8007b9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b9e:	4294      	cmp	r4, r2
 8007ba0:	d002      	beq.n	8007ba8 <std+0x48>
 8007ba2:	33d0      	adds	r3, #208	@ 0xd0
 8007ba4:	429c      	cmp	r4, r3
 8007ba6:	d105      	bne.n	8007bb4 <std+0x54>
 8007ba8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb0:	f000 b928 	b.w	8007e04 <__retarget_lock_init_recursive>
 8007bb4:	bd10      	pop	{r4, pc}
 8007bb6:	bf00      	nop
 8007bb8:	080080dd 	.word	0x080080dd
 8007bbc:	080080ff 	.word	0x080080ff
 8007bc0:	08008137 	.word	0x08008137
 8007bc4:	0800815b 	.word	0x0800815b
 8007bc8:	20002010 	.word	0x20002010

08007bcc <stdio_exit_handler>:
 8007bcc:	4a02      	ldr	r2, [pc, #8]	@ (8007bd8 <stdio_exit_handler+0xc>)
 8007bce:	4903      	ldr	r1, [pc, #12]	@ (8007bdc <stdio_exit_handler+0x10>)
 8007bd0:	4803      	ldr	r0, [pc, #12]	@ (8007be0 <stdio_exit_handler+0x14>)
 8007bd2:	f000 b869 	b.w	8007ca8 <_fwalk_sglue>
 8007bd6:	bf00      	nop
 8007bd8:	20000028 	.word	0x20000028
 8007bdc:	08008075 	.word	0x08008075
 8007be0:	20000038 	.word	0x20000038

08007be4 <cleanup_stdio>:
 8007be4:	6841      	ldr	r1, [r0, #4]
 8007be6:	4b0c      	ldr	r3, [pc, #48]	@ (8007c18 <cleanup_stdio+0x34>)
 8007be8:	4299      	cmp	r1, r3
 8007bea:	b510      	push	{r4, lr}
 8007bec:	4604      	mov	r4, r0
 8007bee:	d001      	beq.n	8007bf4 <cleanup_stdio+0x10>
 8007bf0:	f000 fa40 	bl	8008074 <_fflush_r>
 8007bf4:	68a1      	ldr	r1, [r4, #8]
 8007bf6:	4b09      	ldr	r3, [pc, #36]	@ (8007c1c <cleanup_stdio+0x38>)
 8007bf8:	4299      	cmp	r1, r3
 8007bfa:	d002      	beq.n	8007c02 <cleanup_stdio+0x1e>
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f000 fa39 	bl	8008074 <_fflush_r>
 8007c02:	68e1      	ldr	r1, [r4, #12]
 8007c04:	4b06      	ldr	r3, [pc, #24]	@ (8007c20 <cleanup_stdio+0x3c>)
 8007c06:	4299      	cmp	r1, r3
 8007c08:	d004      	beq.n	8007c14 <cleanup_stdio+0x30>
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c10:	f000 ba30 	b.w	8008074 <_fflush_r>
 8007c14:	bd10      	pop	{r4, pc}
 8007c16:	bf00      	nop
 8007c18:	20002010 	.word	0x20002010
 8007c1c:	20002078 	.word	0x20002078
 8007c20:	200020e0 	.word	0x200020e0

08007c24 <global_stdio_init.part.0>:
 8007c24:	b510      	push	{r4, lr}
 8007c26:	4b0b      	ldr	r3, [pc, #44]	@ (8007c54 <global_stdio_init.part.0+0x30>)
 8007c28:	4c0b      	ldr	r4, [pc, #44]	@ (8007c58 <global_stdio_init.part.0+0x34>)
 8007c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8007c5c <global_stdio_init.part.0+0x38>)
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	4620      	mov	r0, r4
 8007c30:	2200      	movs	r2, #0
 8007c32:	2104      	movs	r1, #4
 8007c34:	f7ff ff94 	bl	8007b60 <std>
 8007c38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	2109      	movs	r1, #9
 8007c40:	f7ff ff8e 	bl	8007b60 <std>
 8007c44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c48:	2202      	movs	r2, #2
 8007c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c4e:	2112      	movs	r1, #18
 8007c50:	f7ff bf86 	b.w	8007b60 <std>
 8007c54:	20002148 	.word	0x20002148
 8007c58:	20002010 	.word	0x20002010
 8007c5c:	08007bcd 	.word	0x08007bcd

08007c60 <__sfp_lock_acquire>:
 8007c60:	4801      	ldr	r0, [pc, #4]	@ (8007c68 <__sfp_lock_acquire+0x8>)
 8007c62:	f000 b8d0 	b.w	8007e06 <__retarget_lock_acquire_recursive>
 8007c66:	bf00      	nop
 8007c68:	2000214d 	.word	0x2000214d

08007c6c <__sfp_lock_release>:
 8007c6c:	4801      	ldr	r0, [pc, #4]	@ (8007c74 <__sfp_lock_release+0x8>)
 8007c6e:	f000 b8cb 	b.w	8007e08 <__retarget_lock_release_recursive>
 8007c72:	bf00      	nop
 8007c74:	2000214d 	.word	0x2000214d

08007c78 <__sinit>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	f7ff fff0 	bl	8007c60 <__sfp_lock_acquire>
 8007c80:	6a23      	ldr	r3, [r4, #32]
 8007c82:	b11b      	cbz	r3, 8007c8c <__sinit+0x14>
 8007c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c88:	f7ff bff0 	b.w	8007c6c <__sfp_lock_release>
 8007c8c:	4b04      	ldr	r3, [pc, #16]	@ (8007ca0 <__sinit+0x28>)
 8007c8e:	6223      	str	r3, [r4, #32]
 8007c90:	4b04      	ldr	r3, [pc, #16]	@ (8007ca4 <__sinit+0x2c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1f5      	bne.n	8007c84 <__sinit+0xc>
 8007c98:	f7ff ffc4 	bl	8007c24 <global_stdio_init.part.0>
 8007c9c:	e7f2      	b.n	8007c84 <__sinit+0xc>
 8007c9e:	bf00      	nop
 8007ca0:	08007be5 	.word	0x08007be5
 8007ca4:	20002148 	.word	0x20002148

08007ca8 <_fwalk_sglue>:
 8007ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cac:	4607      	mov	r7, r0
 8007cae:	4688      	mov	r8, r1
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	2600      	movs	r6, #0
 8007cb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cb8:	f1b9 0901 	subs.w	r9, r9, #1
 8007cbc:	d505      	bpl.n	8007cca <_fwalk_sglue+0x22>
 8007cbe:	6824      	ldr	r4, [r4, #0]
 8007cc0:	2c00      	cmp	r4, #0
 8007cc2:	d1f7      	bne.n	8007cb4 <_fwalk_sglue+0xc>
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cca:	89ab      	ldrh	r3, [r5, #12]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d907      	bls.n	8007ce0 <_fwalk_sglue+0x38>
 8007cd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	d003      	beq.n	8007ce0 <_fwalk_sglue+0x38>
 8007cd8:	4629      	mov	r1, r5
 8007cda:	4638      	mov	r0, r7
 8007cdc:	47c0      	blx	r8
 8007cde:	4306      	orrs	r6, r0
 8007ce0:	3568      	adds	r5, #104	@ 0x68
 8007ce2:	e7e9      	b.n	8007cb8 <_fwalk_sglue+0x10>

08007ce4 <_puts_r>:
 8007ce4:	6a03      	ldr	r3, [r0, #32]
 8007ce6:	b570      	push	{r4, r5, r6, lr}
 8007ce8:	6884      	ldr	r4, [r0, #8]
 8007cea:	4605      	mov	r5, r0
 8007cec:	460e      	mov	r6, r1
 8007cee:	b90b      	cbnz	r3, 8007cf4 <_puts_r+0x10>
 8007cf0:	f7ff ffc2 	bl	8007c78 <__sinit>
 8007cf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cf6:	07db      	lsls	r3, r3, #31
 8007cf8:	d405      	bmi.n	8007d06 <_puts_r+0x22>
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	0598      	lsls	r0, r3, #22
 8007cfe:	d402      	bmi.n	8007d06 <_puts_r+0x22>
 8007d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d02:	f000 f880 	bl	8007e06 <__retarget_lock_acquire_recursive>
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	0719      	lsls	r1, r3, #28
 8007d0a:	d502      	bpl.n	8007d12 <_puts_r+0x2e>
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d135      	bne.n	8007d7e <_puts_r+0x9a>
 8007d12:	4621      	mov	r1, r4
 8007d14:	4628      	mov	r0, r5
 8007d16:	f000 fa63 	bl	80081e0 <__swsetup_r>
 8007d1a:	b380      	cbz	r0, 8007d7e <_puts_r+0x9a>
 8007d1c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007d20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d22:	07da      	lsls	r2, r3, #31
 8007d24:	d405      	bmi.n	8007d32 <_puts_r+0x4e>
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	059b      	lsls	r3, r3, #22
 8007d2a:	d402      	bmi.n	8007d32 <_puts_r+0x4e>
 8007d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d2e:	f000 f86b 	bl	8007e08 <__retarget_lock_release_recursive>
 8007d32:	4628      	mov	r0, r5
 8007d34:	bd70      	pop	{r4, r5, r6, pc}
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	da04      	bge.n	8007d44 <_puts_r+0x60>
 8007d3a:	69a2      	ldr	r2, [r4, #24]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	dc17      	bgt.n	8007d70 <_puts_r+0x8c>
 8007d40:	290a      	cmp	r1, #10
 8007d42:	d015      	beq.n	8007d70 <_puts_r+0x8c>
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	6022      	str	r2, [r4, #0]
 8007d4a:	7019      	strb	r1, [r3, #0]
 8007d4c:	68a3      	ldr	r3, [r4, #8]
 8007d4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d52:	3b01      	subs	r3, #1
 8007d54:	60a3      	str	r3, [r4, #8]
 8007d56:	2900      	cmp	r1, #0
 8007d58:	d1ed      	bne.n	8007d36 <_puts_r+0x52>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	da11      	bge.n	8007d82 <_puts_r+0x9e>
 8007d5e:	4622      	mov	r2, r4
 8007d60:	210a      	movs	r1, #10
 8007d62:	4628      	mov	r0, r5
 8007d64:	f000 f9fd 	bl	8008162 <__swbuf_r>
 8007d68:	3001      	adds	r0, #1
 8007d6a:	d0d7      	beq.n	8007d1c <_puts_r+0x38>
 8007d6c:	250a      	movs	r5, #10
 8007d6e:	e7d7      	b.n	8007d20 <_puts_r+0x3c>
 8007d70:	4622      	mov	r2, r4
 8007d72:	4628      	mov	r0, r5
 8007d74:	f000 f9f5 	bl	8008162 <__swbuf_r>
 8007d78:	3001      	adds	r0, #1
 8007d7a:	d1e7      	bne.n	8007d4c <_puts_r+0x68>
 8007d7c:	e7ce      	b.n	8007d1c <_puts_r+0x38>
 8007d7e:	3e01      	subs	r6, #1
 8007d80:	e7e4      	b.n	8007d4c <_puts_r+0x68>
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	6022      	str	r2, [r4, #0]
 8007d88:	220a      	movs	r2, #10
 8007d8a:	701a      	strb	r2, [r3, #0]
 8007d8c:	e7ee      	b.n	8007d6c <_puts_r+0x88>
	...

08007d90 <puts>:
 8007d90:	4b02      	ldr	r3, [pc, #8]	@ (8007d9c <puts+0xc>)
 8007d92:	4601      	mov	r1, r0
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	f7ff bfa5 	b.w	8007ce4 <_puts_r>
 8007d9a:	bf00      	nop
 8007d9c:	20000034 	.word	0x20000034

08007da0 <memset>:
 8007da0:	4402      	add	r2, r0
 8007da2:	4603      	mov	r3, r0
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d100      	bne.n	8007daa <memset+0xa>
 8007da8:	4770      	bx	lr
 8007daa:	f803 1b01 	strb.w	r1, [r3], #1
 8007dae:	e7f9      	b.n	8007da4 <memset+0x4>

08007db0 <__errno>:
 8007db0:	4b01      	ldr	r3, [pc, #4]	@ (8007db8 <__errno+0x8>)
 8007db2:	6818      	ldr	r0, [r3, #0]
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	20000034 	.word	0x20000034

08007dbc <__libc_init_array>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	4d0d      	ldr	r5, [pc, #52]	@ (8007df4 <__libc_init_array+0x38>)
 8007dc0:	4c0d      	ldr	r4, [pc, #52]	@ (8007df8 <__libc_init_array+0x3c>)
 8007dc2:	1b64      	subs	r4, r4, r5
 8007dc4:	10a4      	asrs	r4, r4, #2
 8007dc6:	2600      	movs	r6, #0
 8007dc8:	42a6      	cmp	r6, r4
 8007dca:	d109      	bne.n	8007de0 <__libc_init_array+0x24>
 8007dcc:	4d0b      	ldr	r5, [pc, #44]	@ (8007dfc <__libc_init_array+0x40>)
 8007dce:	4c0c      	ldr	r4, [pc, #48]	@ (8007e00 <__libc_init_array+0x44>)
 8007dd0:	f000 fb80 	bl	80084d4 <_init>
 8007dd4:	1b64      	subs	r4, r4, r5
 8007dd6:	10a4      	asrs	r4, r4, #2
 8007dd8:	2600      	movs	r6, #0
 8007dda:	42a6      	cmp	r6, r4
 8007ddc:	d105      	bne.n	8007dea <__libc_init_array+0x2e>
 8007dde:	bd70      	pop	{r4, r5, r6, pc}
 8007de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007de4:	4798      	blx	r3
 8007de6:	3601      	adds	r6, #1
 8007de8:	e7ee      	b.n	8007dc8 <__libc_init_array+0xc>
 8007dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dee:	4798      	blx	r3
 8007df0:	3601      	adds	r6, #1
 8007df2:	e7f2      	b.n	8007dda <__libc_init_array+0x1e>
 8007df4:	08008654 	.word	0x08008654
 8007df8:	08008654 	.word	0x08008654
 8007dfc:	08008654 	.word	0x08008654
 8007e00:	08008658 	.word	0x08008658

08007e04 <__retarget_lock_init_recursive>:
 8007e04:	4770      	bx	lr

08007e06 <__retarget_lock_acquire_recursive>:
 8007e06:	4770      	bx	lr

08007e08 <__retarget_lock_release_recursive>:
 8007e08:	4770      	bx	lr

08007e0a <memcpy>:
 8007e0a:	440a      	add	r2, r1
 8007e0c:	4291      	cmp	r1, r2
 8007e0e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007e12:	d100      	bne.n	8007e16 <memcpy+0xc>
 8007e14:	4770      	bx	lr
 8007e16:	b510      	push	{r4, lr}
 8007e18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e20:	4291      	cmp	r1, r2
 8007e22:	d1f9      	bne.n	8007e18 <memcpy+0xe>
 8007e24:	bd10      	pop	{r4, pc}
	...

08007e28 <sbrk_aligned>:
 8007e28:	b570      	push	{r4, r5, r6, lr}
 8007e2a:	4e0f      	ldr	r6, [pc, #60]	@ (8007e68 <sbrk_aligned+0x40>)
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	6831      	ldr	r1, [r6, #0]
 8007e30:	4605      	mov	r5, r0
 8007e32:	b911      	cbnz	r1, 8007e3a <sbrk_aligned+0x12>
 8007e34:	f000 fac0 	bl	80083b8 <_sbrk_r>
 8007e38:	6030      	str	r0, [r6, #0]
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f000 fabb 	bl	80083b8 <_sbrk_r>
 8007e42:	1c43      	adds	r3, r0, #1
 8007e44:	d103      	bne.n	8007e4e <sbrk_aligned+0x26>
 8007e46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	bd70      	pop	{r4, r5, r6, pc}
 8007e4e:	1cc4      	adds	r4, r0, #3
 8007e50:	f024 0403 	bic.w	r4, r4, #3
 8007e54:	42a0      	cmp	r0, r4
 8007e56:	d0f8      	beq.n	8007e4a <sbrk_aligned+0x22>
 8007e58:	1a21      	subs	r1, r4, r0
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	f000 faac 	bl	80083b8 <_sbrk_r>
 8007e60:	3001      	adds	r0, #1
 8007e62:	d1f2      	bne.n	8007e4a <sbrk_aligned+0x22>
 8007e64:	e7ef      	b.n	8007e46 <sbrk_aligned+0x1e>
 8007e66:	bf00      	nop
 8007e68:	20002150 	.word	0x20002150

08007e6c <_malloc_r>:
 8007e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e70:	1ccd      	adds	r5, r1, #3
 8007e72:	f025 0503 	bic.w	r5, r5, #3
 8007e76:	3508      	adds	r5, #8
 8007e78:	2d0c      	cmp	r5, #12
 8007e7a:	bf38      	it	cc
 8007e7c:	250c      	movcc	r5, #12
 8007e7e:	2d00      	cmp	r5, #0
 8007e80:	4606      	mov	r6, r0
 8007e82:	db01      	blt.n	8007e88 <_malloc_r+0x1c>
 8007e84:	42a9      	cmp	r1, r5
 8007e86:	d904      	bls.n	8007e92 <_malloc_r+0x26>
 8007e88:	230c      	movs	r3, #12
 8007e8a:	6033      	str	r3, [r6, #0]
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f68 <_malloc_r+0xfc>
 8007e96:	f000 f915 	bl	80080c4 <__malloc_lock>
 8007e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e9e:	461c      	mov	r4, r3
 8007ea0:	bb44      	cbnz	r4, 8007ef4 <_malloc_r+0x88>
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f7ff ffbf 	bl	8007e28 <sbrk_aligned>
 8007eaa:	1c43      	adds	r3, r0, #1
 8007eac:	4604      	mov	r4, r0
 8007eae:	d158      	bne.n	8007f62 <_malloc_r+0xf6>
 8007eb0:	f8d8 4000 	ldr.w	r4, [r8]
 8007eb4:	4627      	mov	r7, r4
 8007eb6:	2f00      	cmp	r7, #0
 8007eb8:	d143      	bne.n	8007f42 <_malloc_r+0xd6>
 8007eba:	2c00      	cmp	r4, #0
 8007ebc:	d04b      	beq.n	8007f56 <_malloc_r+0xea>
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	4639      	mov	r1, r7
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	eb04 0903 	add.w	r9, r4, r3
 8007ec8:	f000 fa76 	bl	80083b8 <_sbrk_r>
 8007ecc:	4581      	cmp	r9, r0
 8007ece:	d142      	bne.n	8007f56 <_malloc_r+0xea>
 8007ed0:	6821      	ldr	r1, [r4, #0]
 8007ed2:	1a6d      	subs	r5, r5, r1
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f7ff ffa6 	bl	8007e28 <sbrk_aligned>
 8007edc:	3001      	adds	r0, #1
 8007ede:	d03a      	beq.n	8007f56 <_malloc_r+0xea>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	442b      	add	r3, r5
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	bb62      	cbnz	r2, 8007f48 <_malloc_r+0xdc>
 8007eee:	f8c8 7000 	str.w	r7, [r8]
 8007ef2:	e00f      	b.n	8007f14 <_malloc_r+0xa8>
 8007ef4:	6822      	ldr	r2, [r4, #0]
 8007ef6:	1b52      	subs	r2, r2, r5
 8007ef8:	d420      	bmi.n	8007f3c <_malloc_r+0xd0>
 8007efa:	2a0b      	cmp	r2, #11
 8007efc:	d917      	bls.n	8007f2e <_malloc_r+0xc2>
 8007efe:	1961      	adds	r1, r4, r5
 8007f00:	42a3      	cmp	r3, r4
 8007f02:	6025      	str	r5, [r4, #0]
 8007f04:	bf18      	it	ne
 8007f06:	6059      	strne	r1, [r3, #4]
 8007f08:	6863      	ldr	r3, [r4, #4]
 8007f0a:	bf08      	it	eq
 8007f0c:	f8c8 1000 	streq.w	r1, [r8]
 8007f10:	5162      	str	r2, [r4, r5]
 8007f12:	604b      	str	r3, [r1, #4]
 8007f14:	4630      	mov	r0, r6
 8007f16:	f000 f8db 	bl	80080d0 <__malloc_unlock>
 8007f1a:	f104 000b 	add.w	r0, r4, #11
 8007f1e:	1d23      	adds	r3, r4, #4
 8007f20:	f020 0007 	bic.w	r0, r0, #7
 8007f24:	1ac2      	subs	r2, r0, r3
 8007f26:	bf1c      	itt	ne
 8007f28:	1a1b      	subne	r3, r3, r0
 8007f2a:	50a3      	strne	r3, [r4, r2]
 8007f2c:	e7af      	b.n	8007e8e <_malloc_r+0x22>
 8007f2e:	6862      	ldr	r2, [r4, #4]
 8007f30:	42a3      	cmp	r3, r4
 8007f32:	bf0c      	ite	eq
 8007f34:	f8c8 2000 	streq.w	r2, [r8]
 8007f38:	605a      	strne	r2, [r3, #4]
 8007f3a:	e7eb      	b.n	8007f14 <_malloc_r+0xa8>
 8007f3c:	4623      	mov	r3, r4
 8007f3e:	6864      	ldr	r4, [r4, #4]
 8007f40:	e7ae      	b.n	8007ea0 <_malloc_r+0x34>
 8007f42:	463c      	mov	r4, r7
 8007f44:	687f      	ldr	r7, [r7, #4]
 8007f46:	e7b6      	b.n	8007eb6 <_malloc_r+0x4a>
 8007f48:	461a      	mov	r2, r3
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	d1fb      	bne.n	8007f48 <_malloc_r+0xdc>
 8007f50:	2300      	movs	r3, #0
 8007f52:	6053      	str	r3, [r2, #4]
 8007f54:	e7de      	b.n	8007f14 <_malloc_r+0xa8>
 8007f56:	230c      	movs	r3, #12
 8007f58:	6033      	str	r3, [r6, #0]
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f000 f8b8 	bl	80080d0 <__malloc_unlock>
 8007f60:	e794      	b.n	8007e8c <_malloc_r+0x20>
 8007f62:	6005      	str	r5, [r0, #0]
 8007f64:	e7d6      	b.n	8007f14 <_malloc_r+0xa8>
 8007f66:	bf00      	nop
 8007f68:	20002154 	.word	0x20002154

08007f6c <__sflush_r>:
 8007f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f74:	0716      	lsls	r6, r2, #28
 8007f76:	4605      	mov	r5, r0
 8007f78:	460c      	mov	r4, r1
 8007f7a:	d454      	bmi.n	8008026 <__sflush_r+0xba>
 8007f7c:	684b      	ldr	r3, [r1, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	dc02      	bgt.n	8007f88 <__sflush_r+0x1c>
 8007f82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	dd48      	ble.n	800801a <__sflush_r+0xae>
 8007f88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f8a:	2e00      	cmp	r6, #0
 8007f8c:	d045      	beq.n	800801a <__sflush_r+0xae>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f94:	682f      	ldr	r7, [r5, #0]
 8007f96:	6a21      	ldr	r1, [r4, #32]
 8007f98:	602b      	str	r3, [r5, #0]
 8007f9a:	d030      	beq.n	8007ffe <__sflush_r+0x92>
 8007f9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	0759      	lsls	r1, r3, #29
 8007fa2:	d505      	bpl.n	8007fb0 <__sflush_r+0x44>
 8007fa4:	6863      	ldr	r3, [r4, #4]
 8007fa6:	1ad2      	subs	r2, r2, r3
 8007fa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007faa:	b10b      	cbz	r3, 8007fb0 <__sflush_r+0x44>
 8007fac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fae:	1ad2      	subs	r2, r2, r3
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fb4:	6a21      	ldr	r1, [r4, #32]
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	47b0      	blx	r6
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	89a3      	ldrh	r3, [r4, #12]
 8007fbe:	d106      	bne.n	8007fce <__sflush_r+0x62>
 8007fc0:	6829      	ldr	r1, [r5, #0]
 8007fc2:	291d      	cmp	r1, #29
 8007fc4:	d82b      	bhi.n	800801e <__sflush_r+0xb2>
 8007fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8008070 <__sflush_r+0x104>)
 8007fc8:	40ca      	lsrs	r2, r1
 8007fca:	07d6      	lsls	r6, r2, #31
 8007fcc:	d527      	bpl.n	800801e <__sflush_r+0xb2>
 8007fce:	2200      	movs	r2, #0
 8007fd0:	6062      	str	r2, [r4, #4]
 8007fd2:	04d9      	lsls	r1, r3, #19
 8007fd4:	6922      	ldr	r2, [r4, #16]
 8007fd6:	6022      	str	r2, [r4, #0]
 8007fd8:	d504      	bpl.n	8007fe4 <__sflush_r+0x78>
 8007fda:	1c42      	adds	r2, r0, #1
 8007fdc:	d101      	bne.n	8007fe2 <__sflush_r+0x76>
 8007fde:	682b      	ldr	r3, [r5, #0]
 8007fe0:	b903      	cbnz	r3, 8007fe4 <__sflush_r+0x78>
 8007fe2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007fe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fe6:	602f      	str	r7, [r5, #0]
 8007fe8:	b1b9      	cbz	r1, 800801a <__sflush_r+0xae>
 8007fea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fee:	4299      	cmp	r1, r3
 8007ff0:	d002      	beq.n	8007ff8 <__sflush_r+0x8c>
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f000 fa24 	bl	8008440 <_free_r>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ffc:	e00d      	b.n	800801a <__sflush_r+0xae>
 8007ffe:	2301      	movs	r3, #1
 8008000:	4628      	mov	r0, r5
 8008002:	47b0      	blx	r6
 8008004:	4602      	mov	r2, r0
 8008006:	1c50      	adds	r0, r2, #1
 8008008:	d1c9      	bne.n	8007f9e <__sflush_r+0x32>
 800800a:	682b      	ldr	r3, [r5, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d0c6      	beq.n	8007f9e <__sflush_r+0x32>
 8008010:	2b1d      	cmp	r3, #29
 8008012:	d001      	beq.n	8008018 <__sflush_r+0xac>
 8008014:	2b16      	cmp	r3, #22
 8008016:	d11e      	bne.n	8008056 <__sflush_r+0xea>
 8008018:	602f      	str	r7, [r5, #0]
 800801a:	2000      	movs	r0, #0
 800801c:	e022      	b.n	8008064 <__sflush_r+0xf8>
 800801e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008022:	b21b      	sxth	r3, r3
 8008024:	e01b      	b.n	800805e <__sflush_r+0xf2>
 8008026:	690f      	ldr	r7, [r1, #16]
 8008028:	2f00      	cmp	r7, #0
 800802a:	d0f6      	beq.n	800801a <__sflush_r+0xae>
 800802c:	0793      	lsls	r3, r2, #30
 800802e:	680e      	ldr	r6, [r1, #0]
 8008030:	bf08      	it	eq
 8008032:	694b      	ldreq	r3, [r1, #20]
 8008034:	600f      	str	r7, [r1, #0]
 8008036:	bf18      	it	ne
 8008038:	2300      	movne	r3, #0
 800803a:	eba6 0807 	sub.w	r8, r6, r7
 800803e:	608b      	str	r3, [r1, #8]
 8008040:	f1b8 0f00 	cmp.w	r8, #0
 8008044:	dde9      	ble.n	800801a <__sflush_r+0xae>
 8008046:	6a21      	ldr	r1, [r4, #32]
 8008048:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800804a:	4643      	mov	r3, r8
 800804c:	463a      	mov	r2, r7
 800804e:	4628      	mov	r0, r5
 8008050:	47b0      	blx	r6
 8008052:	2800      	cmp	r0, #0
 8008054:	dc08      	bgt.n	8008068 <__sflush_r+0xfc>
 8008056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800805a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800805e:	81a3      	strh	r3, [r4, #12]
 8008060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008068:	4407      	add	r7, r0
 800806a:	eba8 0800 	sub.w	r8, r8, r0
 800806e:	e7e7      	b.n	8008040 <__sflush_r+0xd4>
 8008070:	20400001 	.word	0x20400001

08008074 <_fflush_r>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	690b      	ldr	r3, [r1, #16]
 8008078:	4605      	mov	r5, r0
 800807a:	460c      	mov	r4, r1
 800807c:	b913      	cbnz	r3, 8008084 <_fflush_r+0x10>
 800807e:	2500      	movs	r5, #0
 8008080:	4628      	mov	r0, r5
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	b118      	cbz	r0, 800808e <_fflush_r+0x1a>
 8008086:	6a03      	ldr	r3, [r0, #32]
 8008088:	b90b      	cbnz	r3, 800808e <_fflush_r+0x1a>
 800808a:	f7ff fdf5 	bl	8007c78 <__sinit>
 800808e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0f3      	beq.n	800807e <_fflush_r+0xa>
 8008096:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008098:	07d0      	lsls	r0, r2, #31
 800809a:	d404      	bmi.n	80080a6 <_fflush_r+0x32>
 800809c:	0599      	lsls	r1, r3, #22
 800809e:	d402      	bmi.n	80080a6 <_fflush_r+0x32>
 80080a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080a2:	f7ff feb0 	bl	8007e06 <__retarget_lock_acquire_recursive>
 80080a6:	4628      	mov	r0, r5
 80080a8:	4621      	mov	r1, r4
 80080aa:	f7ff ff5f 	bl	8007f6c <__sflush_r>
 80080ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080b0:	07da      	lsls	r2, r3, #31
 80080b2:	4605      	mov	r5, r0
 80080b4:	d4e4      	bmi.n	8008080 <_fflush_r+0xc>
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	059b      	lsls	r3, r3, #22
 80080ba:	d4e1      	bmi.n	8008080 <_fflush_r+0xc>
 80080bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080be:	f7ff fea3 	bl	8007e08 <__retarget_lock_release_recursive>
 80080c2:	e7dd      	b.n	8008080 <_fflush_r+0xc>

080080c4 <__malloc_lock>:
 80080c4:	4801      	ldr	r0, [pc, #4]	@ (80080cc <__malloc_lock+0x8>)
 80080c6:	f7ff be9e 	b.w	8007e06 <__retarget_lock_acquire_recursive>
 80080ca:	bf00      	nop
 80080cc:	2000214c 	.word	0x2000214c

080080d0 <__malloc_unlock>:
 80080d0:	4801      	ldr	r0, [pc, #4]	@ (80080d8 <__malloc_unlock+0x8>)
 80080d2:	f7ff be99 	b.w	8007e08 <__retarget_lock_release_recursive>
 80080d6:	bf00      	nop
 80080d8:	2000214c 	.word	0x2000214c

080080dc <__sread>:
 80080dc:	b510      	push	{r4, lr}
 80080de:	460c      	mov	r4, r1
 80080e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e4:	f000 f956 	bl	8008394 <_read_r>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	bfab      	itete	ge
 80080ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80080ee:	89a3      	ldrhlt	r3, [r4, #12]
 80080f0:	181b      	addge	r3, r3, r0
 80080f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80080f6:	bfac      	ite	ge
 80080f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80080fa:	81a3      	strhlt	r3, [r4, #12]
 80080fc:	bd10      	pop	{r4, pc}

080080fe <__swrite>:
 80080fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008102:	461f      	mov	r7, r3
 8008104:	898b      	ldrh	r3, [r1, #12]
 8008106:	05db      	lsls	r3, r3, #23
 8008108:	4605      	mov	r5, r0
 800810a:	460c      	mov	r4, r1
 800810c:	4616      	mov	r6, r2
 800810e:	d505      	bpl.n	800811c <__swrite+0x1e>
 8008110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008114:	2302      	movs	r3, #2
 8008116:	2200      	movs	r2, #0
 8008118:	f000 f92a 	bl	8008370 <_lseek_r>
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008122:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	4632      	mov	r2, r6
 800812a:	463b      	mov	r3, r7
 800812c:	4628      	mov	r0, r5
 800812e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008132:	f000 b951 	b.w	80083d8 <_write_r>

08008136 <__sseek>:
 8008136:	b510      	push	{r4, lr}
 8008138:	460c      	mov	r4, r1
 800813a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800813e:	f000 f917 	bl	8008370 <_lseek_r>
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	89a3      	ldrh	r3, [r4, #12]
 8008146:	bf15      	itete	ne
 8008148:	6560      	strne	r0, [r4, #84]	@ 0x54
 800814a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800814e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008152:	81a3      	strheq	r3, [r4, #12]
 8008154:	bf18      	it	ne
 8008156:	81a3      	strhne	r3, [r4, #12]
 8008158:	bd10      	pop	{r4, pc}

0800815a <__sclose>:
 800815a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815e:	f000 b94d 	b.w	80083fc <_close_r>

08008162 <__swbuf_r>:
 8008162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008164:	460e      	mov	r6, r1
 8008166:	4614      	mov	r4, r2
 8008168:	4605      	mov	r5, r0
 800816a:	b118      	cbz	r0, 8008174 <__swbuf_r+0x12>
 800816c:	6a03      	ldr	r3, [r0, #32]
 800816e:	b90b      	cbnz	r3, 8008174 <__swbuf_r+0x12>
 8008170:	f7ff fd82 	bl	8007c78 <__sinit>
 8008174:	69a3      	ldr	r3, [r4, #24]
 8008176:	60a3      	str	r3, [r4, #8]
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	071a      	lsls	r2, r3, #28
 800817c:	d501      	bpl.n	8008182 <__swbuf_r+0x20>
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	b943      	cbnz	r3, 8008194 <__swbuf_r+0x32>
 8008182:	4621      	mov	r1, r4
 8008184:	4628      	mov	r0, r5
 8008186:	f000 f82b 	bl	80081e0 <__swsetup_r>
 800818a:	b118      	cbz	r0, 8008194 <__swbuf_r+0x32>
 800818c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008190:	4638      	mov	r0, r7
 8008192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	6922      	ldr	r2, [r4, #16]
 8008198:	1a98      	subs	r0, r3, r2
 800819a:	6963      	ldr	r3, [r4, #20]
 800819c:	b2f6      	uxtb	r6, r6
 800819e:	4283      	cmp	r3, r0
 80081a0:	4637      	mov	r7, r6
 80081a2:	dc05      	bgt.n	80081b0 <__swbuf_r+0x4e>
 80081a4:	4621      	mov	r1, r4
 80081a6:	4628      	mov	r0, r5
 80081a8:	f7ff ff64 	bl	8008074 <_fflush_r>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d1ed      	bne.n	800818c <__swbuf_r+0x2a>
 80081b0:	68a3      	ldr	r3, [r4, #8]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	60a3      	str	r3, [r4, #8]
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	6022      	str	r2, [r4, #0]
 80081bc:	701e      	strb	r6, [r3, #0]
 80081be:	6962      	ldr	r2, [r4, #20]
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d004      	beq.n	80081d0 <__swbuf_r+0x6e>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	07db      	lsls	r3, r3, #31
 80081ca:	d5e1      	bpl.n	8008190 <__swbuf_r+0x2e>
 80081cc:	2e0a      	cmp	r6, #10
 80081ce:	d1df      	bne.n	8008190 <__swbuf_r+0x2e>
 80081d0:	4621      	mov	r1, r4
 80081d2:	4628      	mov	r0, r5
 80081d4:	f7ff ff4e 	bl	8008074 <_fflush_r>
 80081d8:	2800      	cmp	r0, #0
 80081da:	d0d9      	beq.n	8008190 <__swbuf_r+0x2e>
 80081dc:	e7d6      	b.n	800818c <__swbuf_r+0x2a>
	...

080081e0 <__swsetup_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4b29      	ldr	r3, [pc, #164]	@ (8008288 <__swsetup_r+0xa8>)
 80081e4:	4605      	mov	r5, r0
 80081e6:	6818      	ldr	r0, [r3, #0]
 80081e8:	460c      	mov	r4, r1
 80081ea:	b118      	cbz	r0, 80081f4 <__swsetup_r+0x14>
 80081ec:	6a03      	ldr	r3, [r0, #32]
 80081ee:	b90b      	cbnz	r3, 80081f4 <__swsetup_r+0x14>
 80081f0:	f7ff fd42 	bl	8007c78 <__sinit>
 80081f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f8:	0719      	lsls	r1, r3, #28
 80081fa:	d422      	bmi.n	8008242 <__swsetup_r+0x62>
 80081fc:	06da      	lsls	r2, r3, #27
 80081fe:	d407      	bmi.n	8008210 <__swsetup_r+0x30>
 8008200:	2209      	movs	r2, #9
 8008202:	602a      	str	r2, [r5, #0]
 8008204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008208:	81a3      	strh	r3, [r4, #12]
 800820a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800820e:	e033      	b.n	8008278 <__swsetup_r+0x98>
 8008210:	0758      	lsls	r0, r3, #29
 8008212:	d512      	bpl.n	800823a <__swsetup_r+0x5a>
 8008214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008216:	b141      	cbz	r1, 800822a <__swsetup_r+0x4a>
 8008218:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800821c:	4299      	cmp	r1, r3
 800821e:	d002      	beq.n	8008226 <__swsetup_r+0x46>
 8008220:	4628      	mov	r0, r5
 8008222:	f000 f90d 	bl	8008440 <_free_r>
 8008226:	2300      	movs	r3, #0
 8008228:	6363      	str	r3, [r4, #52]	@ 0x34
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008230:	81a3      	strh	r3, [r4, #12]
 8008232:	2300      	movs	r3, #0
 8008234:	6063      	str	r3, [r4, #4]
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	f043 0308 	orr.w	r3, r3, #8
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	6923      	ldr	r3, [r4, #16]
 8008244:	b94b      	cbnz	r3, 800825a <__swsetup_r+0x7a>
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800824c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008250:	d003      	beq.n	800825a <__swsetup_r+0x7a>
 8008252:	4621      	mov	r1, r4
 8008254:	4628      	mov	r0, r5
 8008256:	f000 f83f 	bl	80082d8 <__smakebuf_r>
 800825a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825e:	f013 0201 	ands.w	r2, r3, #1
 8008262:	d00a      	beq.n	800827a <__swsetup_r+0x9a>
 8008264:	2200      	movs	r2, #0
 8008266:	60a2      	str	r2, [r4, #8]
 8008268:	6962      	ldr	r2, [r4, #20]
 800826a:	4252      	negs	r2, r2
 800826c:	61a2      	str	r2, [r4, #24]
 800826e:	6922      	ldr	r2, [r4, #16]
 8008270:	b942      	cbnz	r2, 8008284 <__swsetup_r+0xa4>
 8008272:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008276:	d1c5      	bne.n	8008204 <__swsetup_r+0x24>
 8008278:	bd38      	pop	{r3, r4, r5, pc}
 800827a:	0799      	lsls	r1, r3, #30
 800827c:	bf58      	it	pl
 800827e:	6962      	ldrpl	r2, [r4, #20]
 8008280:	60a2      	str	r2, [r4, #8]
 8008282:	e7f4      	b.n	800826e <__swsetup_r+0x8e>
 8008284:	2000      	movs	r0, #0
 8008286:	e7f7      	b.n	8008278 <__swsetup_r+0x98>
 8008288:	20000034 	.word	0x20000034

0800828c <__swhatbuf_r>:
 800828c:	b570      	push	{r4, r5, r6, lr}
 800828e:	460c      	mov	r4, r1
 8008290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008294:	2900      	cmp	r1, #0
 8008296:	b096      	sub	sp, #88	@ 0x58
 8008298:	4615      	mov	r5, r2
 800829a:	461e      	mov	r6, r3
 800829c:	da0d      	bge.n	80082ba <__swhatbuf_r+0x2e>
 800829e:	89a3      	ldrh	r3, [r4, #12]
 80082a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082a4:	f04f 0100 	mov.w	r1, #0
 80082a8:	bf14      	ite	ne
 80082aa:	2340      	movne	r3, #64	@ 0x40
 80082ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082b0:	2000      	movs	r0, #0
 80082b2:	6031      	str	r1, [r6, #0]
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	b016      	add	sp, #88	@ 0x58
 80082b8:	bd70      	pop	{r4, r5, r6, pc}
 80082ba:	466a      	mov	r2, sp
 80082bc:	f000 f8ae 	bl	800841c <_fstat_r>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	dbec      	blt.n	800829e <__swhatbuf_r+0x12>
 80082c4:	9901      	ldr	r1, [sp, #4]
 80082c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082ce:	4259      	negs	r1, r3
 80082d0:	4159      	adcs	r1, r3
 80082d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082d6:	e7eb      	b.n	80082b0 <__swhatbuf_r+0x24>

080082d8 <__smakebuf_r>:
 80082d8:	898b      	ldrh	r3, [r1, #12]
 80082da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082dc:	079d      	lsls	r5, r3, #30
 80082de:	4606      	mov	r6, r0
 80082e0:	460c      	mov	r4, r1
 80082e2:	d507      	bpl.n	80082f4 <__smakebuf_r+0x1c>
 80082e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	6123      	str	r3, [r4, #16]
 80082ec:	2301      	movs	r3, #1
 80082ee:	6163      	str	r3, [r4, #20]
 80082f0:	b003      	add	sp, #12
 80082f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f4:	ab01      	add	r3, sp, #4
 80082f6:	466a      	mov	r2, sp
 80082f8:	f7ff ffc8 	bl	800828c <__swhatbuf_r>
 80082fc:	9f00      	ldr	r7, [sp, #0]
 80082fe:	4605      	mov	r5, r0
 8008300:	4639      	mov	r1, r7
 8008302:	4630      	mov	r0, r6
 8008304:	f7ff fdb2 	bl	8007e6c <_malloc_r>
 8008308:	b948      	cbnz	r0, 800831e <__smakebuf_r+0x46>
 800830a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800830e:	059a      	lsls	r2, r3, #22
 8008310:	d4ee      	bmi.n	80082f0 <__smakebuf_r+0x18>
 8008312:	f023 0303 	bic.w	r3, r3, #3
 8008316:	f043 0302 	orr.w	r3, r3, #2
 800831a:	81a3      	strh	r3, [r4, #12]
 800831c:	e7e2      	b.n	80082e4 <__smakebuf_r+0xc>
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	6020      	str	r0, [r4, #0]
 8008322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008326:	81a3      	strh	r3, [r4, #12]
 8008328:	9b01      	ldr	r3, [sp, #4]
 800832a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800832e:	b15b      	cbz	r3, 8008348 <__smakebuf_r+0x70>
 8008330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008334:	4630      	mov	r0, r6
 8008336:	f000 f80b 	bl	8008350 <_isatty_r>
 800833a:	b128      	cbz	r0, 8008348 <__smakebuf_r+0x70>
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	f023 0303 	bic.w	r3, r3, #3
 8008342:	f043 0301 	orr.w	r3, r3, #1
 8008346:	81a3      	strh	r3, [r4, #12]
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	431d      	orrs	r5, r3
 800834c:	81a5      	strh	r5, [r4, #12]
 800834e:	e7cf      	b.n	80082f0 <__smakebuf_r+0x18>

08008350 <_isatty_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	4d06      	ldr	r5, [pc, #24]	@ (800836c <_isatty_r+0x1c>)
 8008354:	2300      	movs	r3, #0
 8008356:	4604      	mov	r4, r0
 8008358:	4608      	mov	r0, r1
 800835a:	602b      	str	r3, [r5, #0]
 800835c:	f7fa ff87 	bl	800326e <_isatty>
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	d102      	bne.n	800836a <_isatty_r+0x1a>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	b103      	cbz	r3, 800836a <_isatty_r+0x1a>
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	20002158 	.word	0x20002158

08008370 <_lseek_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4d07      	ldr	r5, [pc, #28]	@ (8008390 <_lseek_r+0x20>)
 8008374:	4604      	mov	r4, r0
 8008376:	4608      	mov	r0, r1
 8008378:	4611      	mov	r1, r2
 800837a:	2200      	movs	r2, #0
 800837c:	602a      	str	r2, [r5, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	f7fa ff80 	bl	8003284 <_lseek>
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	d102      	bne.n	800838e <_lseek_r+0x1e>
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	b103      	cbz	r3, 800838e <_lseek_r+0x1e>
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	bd38      	pop	{r3, r4, r5, pc}
 8008390:	20002158 	.word	0x20002158

08008394 <_read_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4d07      	ldr	r5, [pc, #28]	@ (80083b4 <_read_r+0x20>)
 8008398:	4604      	mov	r4, r0
 800839a:	4608      	mov	r0, r1
 800839c:	4611      	mov	r1, r2
 800839e:	2200      	movs	r2, #0
 80083a0:	602a      	str	r2, [r5, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	f7fa ff2a 	bl	80031fc <_read>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_read_r+0x1e>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_read_r+0x1e>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	20002158 	.word	0x20002158

080083b8 <_sbrk_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d06      	ldr	r5, [pc, #24]	@ (80083d4 <_sbrk_r+0x1c>)
 80083bc:	2300      	movs	r3, #0
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	f7fa ff6c 	bl	80032a0 <_sbrk>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_sbrk_r+0x1a>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_sbrk_r+0x1a>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	20002158 	.word	0x20002158

080083d8 <_write_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4d07      	ldr	r5, [pc, #28]	@ (80083f8 <_write_r+0x20>)
 80083dc:	4604      	mov	r4, r0
 80083de:	4608      	mov	r0, r1
 80083e0:	4611      	mov	r1, r2
 80083e2:	2200      	movs	r2, #0
 80083e4:	602a      	str	r2, [r5, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	f7fa fcf6 	bl	8002dd8 <_write>
 80083ec:	1c43      	adds	r3, r0, #1
 80083ee:	d102      	bne.n	80083f6 <_write_r+0x1e>
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	b103      	cbz	r3, 80083f6 <_write_r+0x1e>
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	bd38      	pop	{r3, r4, r5, pc}
 80083f8:	20002158 	.word	0x20002158

080083fc <_close_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4d06      	ldr	r5, [pc, #24]	@ (8008418 <_close_r+0x1c>)
 8008400:	2300      	movs	r3, #0
 8008402:	4604      	mov	r4, r0
 8008404:	4608      	mov	r0, r1
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	f7fa ff15 	bl	8003236 <_close>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_close_r+0x1a>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_close_r+0x1a>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	20002158 	.word	0x20002158

0800841c <_fstat_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d07      	ldr	r5, [pc, #28]	@ (800843c <_fstat_r+0x20>)
 8008420:	2300      	movs	r3, #0
 8008422:	4604      	mov	r4, r0
 8008424:	4608      	mov	r0, r1
 8008426:	4611      	mov	r1, r2
 8008428:	602b      	str	r3, [r5, #0]
 800842a:	f7fa ff10 	bl	800324e <_fstat>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	d102      	bne.n	8008438 <_fstat_r+0x1c>
 8008432:	682b      	ldr	r3, [r5, #0]
 8008434:	b103      	cbz	r3, 8008438 <_fstat_r+0x1c>
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	bd38      	pop	{r3, r4, r5, pc}
 800843a:	bf00      	nop
 800843c:	20002158 	.word	0x20002158

08008440 <_free_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4605      	mov	r5, r0
 8008444:	2900      	cmp	r1, #0
 8008446:	d041      	beq.n	80084cc <_free_r+0x8c>
 8008448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844c:	1f0c      	subs	r4, r1, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	bfb8      	it	lt
 8008452:	18e4      	addlt	r4, r4, r3
 8008454:	f7ff fe36 	bl	80080c4 <__malloc_lock>
 8008458:	4a1d      	ldr	r2, [pc, #116]	@ (80084d0 <_free_r+0x90>)
 800845a:	6813      	ldr	r3, [r2, #0]
 800845c:	b933      	cbnz	r3, 800846c <_free_r+0x2c>
 800845e:	6063      	str	r3, [r4, #4]
 8008460:	6014      	str	r4, [r2, #0]
 8008462:	4628      	mov	r0, r5
 8008464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008468:	f7ff be32 	b.w	80080d0 <__malloc_unlock>
 800846c:	42a3      	cmp	r3, r4
 800846e:	d908      	bls.n	8008482 <_free_r+0x42>
 8008470:	6820      	ldr	r0, [r4, #0]
 8008472:	1821      	adds	r1, r4, r0
 8008474:	428b      	cmp	r3, r1
 8008476:	bf01      	itttt	eq
 8008478:	6819      	ldreq	r1, [r3, #0]
 800847a:	685b      	ldreq	r3, [r3, #4]
 800847c:	1809      	addeq	r1, r1, r0
 800847e:	6021      	streq	r1, [r4, #0]
 8008480:	e7ed      	b.n	800845e <_free_r+0x1e>
 8008482:	461a      	mov	r2, r3
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	b10b      	cbz	r3, 800848c <_free_r+0x4c>
 8008488:	42a3      	cmp	r3, r4
 800848a:	d9fa      	bls.n	8008482 <_free_r+0x42>
 800848c:	6811      	ldr	r1, [r2, #0]
 800848e:	1850      	adds	r0, r2, r1
 8008490:	42a0      	cmp	r0, r4
 8008492:	d10b      	bne.n	80084ac <_free_r+0x6c>
 8008494:	6820      	ldr	r0, [r4, #0]
 8008496:	4401      	add	r1, r0
 8008498:	1850      	adds	r0, r2, r1
 800849a:	4283      	cmp	r3, r0
 800849c:	6011      	str	r1, [r2, #0]
 800849e:	d1e0      	bne.n	8008462 <_free_r+0x22>
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	6053      	str	r3, [r2, #4]
 80084a6:	4408      	add	r0, r1
 80084a8:	6010      	str	r0, [r2, #0]
 80084aa:	e7da      	b.n	8008462 <_free_r+0x22>
 80084ac:	d902      	bls.n	80084b4 <_free_r+0x74>
 80084ae:	230c      	movs	r3, #12
 80084b0:	602b      	str	r3, [r5, #0]
 80084b2:	e7d6      	b.n	8008462 <_free_r+0x22>
 80084b4:	6820      	ldr	r0, [r4, #0]
 80084b6:	1821      	adds	r1, r4, r0
 80084b8:	428b      	cmp	r3, r1
 80084ba:	bf04      	itt	eq
 80084bc:	6819      	ldreq	r1, [r3, #0]
 80084be:	685b      	ldreq	r3, [r3, #4]
 80084c0:	6063      	str	r3, [r4, #4]
 80084c2:	bf04      	itt	eq
 80084c4:	1809      	addeq	r1, r1, r0
 80084c6:	6021      	streq	r1, [r4, #0]
 80084c8:	6054      	str	r4, [r2, #4]
 80084ca:	e7ca      	b.n	8008462 <_free_r+0x22>
 80084cc:	bd38      	pop	{r3, r4, r5, pc}
 80084ce:	bf00      	nop
 80084d0:	20002154 	.word	0x20002154

080084d4 <_init>:
 80084d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d6:	bf00      	nop
 80084d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084da:	bc08      	pop	{r3}
 80084dc:	469e      	mov	lr, r3
 80084de:	4770      	bx	lr

080084e0 <_fini>:
 80084e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e2:	bf00      	nop
 80084e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e6:	bc08      	pop	{r3}
 80084e8:	469e      	mov	lr, r3
 80084ea:	4770      	bx	lr
