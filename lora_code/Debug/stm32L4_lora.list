
stm32L4_lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08007040  08007040  00008040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071b4  080071b4  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080071b4  080071b4  000081b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071bc  080071bc  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071bc  080071bc  000081bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071c0  080071c0  000081c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080071c4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  2000006c  08007230  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08007230  0000947c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d70  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bd  00000000  00000000  0001be0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0001e7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d28  00000000  00000000  0001f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028692  00000000  00000000  00020600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012abf  00000000  00000000  00048c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5622  00000000  00000000  0005b751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150d73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e30  00000000  00000000  00150db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00155be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007028 	.word	0x08007028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007028 	.word	0x08007028

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <read_register>:
 * @param *buffer pointer to data buffer to be written into the register
 * @param length  size_t specifying amount of bytes to be written
 *
 * @return: false if an SPI error occurred, true otherwise
 */
static bool read_register(rfm95_handle_t *handle, uint8_t reg, uint8_t *buffer, size_t length) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	607a      	str	r2, [r7, #4]
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	460b      	mov	r3, r1
 80005aa:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	6858      	ldr	r0, [r3, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	891b      	ldrh	r3, [r3, #8]
 80005b4:	2200      	movs	r2, #0
 80005b6:	4619      	mov	r1, r3
 80005b8:	f002 f8c2 	bl	8002740 <HAL_GPIO_WritePin>

  uint8_t transmit_buffer = reg & 0x7fu;
 80005bc:	7afb      	ldrb	r3, [r7, #11]
 80005be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	6818      	ldr	r0, [r3, #0]
 80005ca:	f107 0117 	add.w	r1, r7, #23
 80005ce:	230a      	movs	r3, #10
 80005d0:	2201      	movs	r2, #1
 80005d2:	f004 f96a 	bl	80048aa <HAL_SPI_Transmit>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <read_register+0x44>
    return false;
 80005dc:	2300      	movs	r3, #0
 80005de:	e015      	b.n	800060c <read_register+0x70>
  }

  if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	230a      	movs	r3, #10
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f004 fad3 	bl	8004b96 <HAL_SPI_Receive>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <read_register+0x5e>
    return false;
 80005f6:	2300      	movs	r3, #0
 80005f8:	e008      	b.n	800060c <read_register+0x70>
  }

  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	6858      	ldr	r0, [r3, #4]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	891b      	ldrh	r3, [r3, #8]
 8000602:	2201      	movs	r2, #1
 8000604:	4619      	mov	r1, r3
 8000606:	f002 f89b 	bl	8002740 <HAL_GPIO_WritePin>

  return true;
 800060a:	2301      	movs	r3, #1
}
 800060c:	4618      	mov	r0, r3
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <write_register>:
 * @param value   uint8_t specifying byte to be written into the register
 *
 *
 * @return: false if an SPI error occurred, true otherwise
 */
static bool write_register(rfm95_handle_t *handle, uint8_t reg, uint8_t value) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
 8000620:	4613      	mov	r3, r2
 8000622:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6858      	ldr	r0, [r3, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	891b      	ldrh	r3, [r3, #8]
 800062c:	2200      	movs	r2, #0
 800062e:	4619      	mov	r1, r3
 8000630:	f002 f886 	bl	8002740 <HAL_GPIO_WritePin>

  uint8_t transmit_buffer[2] = {(reg | 0x80u), value};
 8000634:	78fb      	ldrb	r3, [r7, #3]
 8000636:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800063a:	b2db      	uxtb	r3, r3
 800063c:	733b      	strb	r3, [r7, #12]
 800063e:	78bb      	ldrb	r3, [r7, #2]
 8000640:	737b      	strb	r3, [r7, #13]

  if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6818      	ldr	r0, [r3, #0]
 8000646:	f107 010c 	add.w	r1, r7, #12
 800064a:	230a      	movs	r3, #10
 800064c:	2202      	movs	r2, #2
 800064e:	f004 f92c 	bl	80048aa <HAL_SPI_Transmit>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <write_register+0x48>
    return false;
 8000658:	2300      	movs	r3, #0
 800065a:	e008      	b.n	800066e <write_register+0x5a>
  }

  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6858      	ldr	r0, [r3, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	891b      	ldrh	r3, [r3, #8]
 8000664:	2201      	movs	r2, #1
 8000666:	4619      	mov	r1, r3
 8000668:	f002 f86a 	bl	8002740 <HAL_GPIO_WritePin>

  return true;
 800066c:	2301      	movs	r3, #1
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <rfm95_modify_power>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_power(rfm95_handle_t *handle){
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	memset(&pa_config, 0, sizeof(pa_config));
 8000680:	2201      	movs	r2, #1
 8000682:	2100      	movs	r1, #0
 8000684:	482e      	ldr	r0, [pc, #184]	@ (8000740 <rfm95_modify_power+0xc8>)
 8000686:	f005 fe77 	bl	8006378 <memset>
	uint8_t pa_dac_config = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]

	uint8_t power = handle->config.tx_power;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000694:	73bb      	strb	r3, [r7, #14]

	if (power >= 2 && power <= 17) {
 8000696:	7bbb      	ldrb	r3, [r7, #14]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d91a      	bls.n	80006d2 <rfm95_modify_power+0x5a>
 800069c:	7bbb      	ldrb	r3, [r7, #14]
 800069e:	2b11      	cmp	r3, #17
 80006a0:	d817      	bhi.n	80006d2 <rfm95_modify_power+0x5a>
		pa_config.max_power = 7;
 80006a2:	4a27      	ldr	r2, [pc, #156]	@ (8000740 <rfm95_modify_power+0xc8>)
 80006a4:	7813      	ldrb	r3, [r2, #0]
 80006a6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80006aa:	7013      	strb	r3, [r2, #0]
		pa_config.pa_select = 1;
 80006ac:	4a24      	ldr	r2, [pc, #144]	@ (8000740 <rfm95_modify_power+0xc8>)
 80006ae:	7813      	ldrb	r3, [r2, #0]
 80006b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b4:	7013      	strb	r3, [r2, #0]
		pa_config.output_power = (power - 2);
 80006b6:	7bbb      	ldrb	r3, [r7, #14]
 80006b8:	3b02      	subs	r3, #2
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	f003 030f 	and.w	r3, r3, #15
 80006c0:	b2d9      	uxtb	r1, r3
 80006c2:	4a1f      	ldr	r2, [pc, #124]	@ (8000740 <rfm95_modify_power+0xc8>)
 80006c4:	7813      	ldrb	r3, [r2, #0]
 80006c6:	f361 0303 	bfi	r3, r1, #0, #4
 80006ca:	7013      	strb	r3, [r2, #0]
		pa_dac_config = RFM95_PA_DAC_LOW_POWER;
 80006cc:	2384      	movs	r3, #132	@ 0x84
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	e013      	b.n	80006fa <rfm95_modify_power+0x82>

	} else if (power == 20) {
 80006d2:	7bbb      	ldrb	r3, [r7, #14]
 80006d4:	2b14      	cmp	r3, #20
 80006d6:	d110      	bne.n	80006fa <rfm95_modify_power+0x82>
		pa_config.max_power = 7;
 80006d8:	4a19      	ldr	r2, [pc, #100]	@ (8000740 <rfm95_modify_power+0xc8>)
 80006da:	7813      	ldrb	r3, [r2, #0]
 80006dc:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80006e0:	7013      	strb	r3, [r2, #0]
		pa_config.pa_select = 1;
 80006e2:	4a17      	ldr	r2, [pc, #92]	@ (8000740 <rfm95_modify_power+0xc8>)
 80006e4:	7813      	ldrb	r3, [r2, #0]
 80006e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ea:	7013      	strb	r3, [r2, #0]
		pa_config.output_power = 15;
 80006ec:	4a14      	ldr	r2, [pc, #80]	@ (8000740 <rfm95_modify_power+0xc8>)
 80006ee:	7813      	ldrb	r3, [r2, #0]
 80006f0:	f043 030f 	orr.w	r3, r3, #15
 80006f4:	7013      	strb	r3, [r2, #0]
		pa_dac_config = RFM95_PA_DAC_HIGH_POWER;
 80006f6:	2387      	movs	r3, #135	@ 0x87
 80006f8:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <rfm95_modify_power+0xc8>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	461a      	mov	r2, r3
 8000700:	2109      	movs	r1, #9
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ff86 	bl	8000614 <write_register>
 8000708:	4603      	mov	r3, r0
 800070a:	f083 0301 	eor.w	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <rfm95_modify_power+0xa0>
 8000714:	2300      	movs	r3, #0
 8000716:	e00e      	b.n	8000736 <rfm95_modify_power+0xbe>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	461a      	mov	r2, r3
 800071c:	214d      	movs	r1, #77	@ 0x4d
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff ff78 	bl	8000614 <write_register>
 8000724:	4603      	mov	r3, r0
 8000726:	f083 0301 	eor.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <rfm95_modify_power+0xbc>
 8000730:	2300      	movs	r3, #0
 8000732:	e000      	b.n	8000736 <rfm95_modify_power+0xbe>

	return true;
 8000734:	2301      	movs	r3, #1
}
 8000736:	4618      	mov	r0, r3
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000088 	.word	0x20000088

08000744 <rfm95_modify_SF>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_SF(rfm95_handle_t *handle){
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	uint8_t  sf = RFM95_SF[handle->config.sf];
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000752:	461a      	mov	r2, r3
 8000754:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <rfm95_modify_SF+0xbc>)
 8000756:	5c9b      	ldrb	r3, [r3, r2]
 8000758:	75fb      	strb	r3, [r7, #23]

	// Configure modem SF (depends on user configuration + DR offset):
	uint8_t sf_bits = (sf << 4) | 0x04; // set SF + CRC enable
 800075a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	b25b      	sxtb	r3, r3
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	b25b      	sxtb	r3, r3
 8000768:	75bb      	strb	r3, [r7, #22]
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, sf_bits)) return false;
 800076a:	7dbb      	ldrb	r3, [r7, #22]
 800076c:	461a      	mov	r2, r3
 800076e:	211e      	movs	r1, #30
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ff4f 	bl	8000614 <write_register>
 8000776:	4603      	mov	r3, r0
 8000778:	f083 0301 	eor.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <rfm95_modify_SF+0x42>
 8000782:	2300      	movs	r3, #0
 8000784:	e038      	b.n	80007f8 <rfm95_modify_SF+0xb4>

	// AGC on (suggested in application note), LDR optimization only for Ts > 16 ms
	uint32_t bw = RFM95_BW_HZ[handle->config.bandwidth];
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800078c:	461a      	mov	r2, r3
 800078e:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <rfm95_modify_SF+0xc0>)
 8000790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000794:	613b      	str	r3, [r7, #16]

	// compute symbol time (in ms) based on current settings:
	float curr_ts = 1e3*(((float) (1<<sf)) / bw);
 8000796:	7dfb      	ldrb	r3, [r7, #23]
 8000798:	2201      	movs	r2, #1
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	ee07 3a90 	vmov	s15, r3
 80007a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	ee07 3a90 	vmov	s15, r3
 80007ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007b4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000808 <rfm95_modify_SF+0xc4>
 80007b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007bc:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t LDRoptimize = curr_ts >= 16 ? 0x0C : 0x04;
 80007c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80007c4:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80007c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d0:	db01      	blt.n	80007d6 <rfm95_modify_SF+0x92>
 80007d2:	230c      	movs	r3, #12
 80007d4:	e000      	b.n	80007d8 <rfm95_modify_SF+0x94>
 80007d6:	2304      	movs	r3, #4
 80007d8:	72fb      	strb	r3, [r7, #11]
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, LDRoptimize)) return false;
 80007da:	7afb      	ldrb	r3, [r7, #11]
 80007dc:	461a      	mov	r2, r3
 80007de:	2126      	movs	r1, #38	@ 0x26
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff17 	bl	8000614 <write_register>
 80007e6:	4603      	mov	r3, r0
 80007e8:	f083 0301 	eor.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <rfm95_modify_SF+0xb2>
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <rfm95_modify_SF+0xb4>

	return true;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	0800712c 	.word	0x0800712c
 8000804:	0800710c 	.word	0x0800710c
 8000808:	447a0000 	.word	0x447a0000

0800080c <rfm95_modify_CR_BW>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_CR_BW(rfm95_handle_t *handle){
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	uint8_t  cr = RFM95_CR[handle->config.cr];
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800081a:	461a      	mov	r2, r3
 800081c:	4b13      	ldr	r3, [pc, #76]	@ (800086c <rfm95_modify_CR_BW+0x60>)
 800081e:	5c9b      	ldrb	r3, [r3, r2]
 8000820:	75fb      	strb	r3, [r7, #23]
	uint32_t bw = RFM95_BW_BIN[handle->config.bandwidth];
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000828:	461a      	mov	r2, r3
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <rfm95_modify_CR_BW+0x64>)
 800082c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000830:	613b      	str	r3, [r7, #16]

	uint8_t data = (bw << 4) | (cr << 1);
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	011b      	lsls	r3, r3, #4
 8000838:	b2da      	uxtb	r2, r3
 800083a:	7dfb      	ldrb	r3, [r7, #23]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4313      	orrs	r3, r2
 8000842:	73fb      	strb	r3, [r7, #15]
	if(!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, data)) return false;
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	461a      	mov	r2, r3
 8000848:	211d      	movs	r1, #29
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff fee2 	bl	8000614 <write_register>
 8000850:	4603      	mov	r3, r0
 8000852:	f083 0301 	eor.w	r3, r3, #1
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <rfm95_modify_CR_BW+0x54>
 800085c:	2300      	movs	r3, #0
 800085e:	e000      	b.n	8000862 <rfm95_modify_CR_BW+0x56>

	return true;
 8000860:	2301      	movs	r3, #1
}
 8000862:	4618      	mov	r0, r3
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	08007134 	.word	0x08007134
 8000870:	0800711c 	.word	0x0800711c

08000874 <rfm95_modify_frequency>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_frequency(rfm95_handle_t *handle){
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = handle->config.channel_freq;
 800087c:	6879      	ldr	r1, [r7, #4]
 800087e:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8000880:	6179      	str	r1, [r7, #20]

  // FQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = ((uint64_t)frequency << 19) / RFM95_TCXO_FREQ;
 8000882:	6979      	ldr	r1, [r7, #20]
 8000884:	2000      	movs	r0, #0
 8000886:	460a      	mov	r2, r1
 8000888:	4603      	mov	r3, r0
 800088a:	0b55      	lsrs	r5, r2, #13
 800088c:	04d4      	lsls	r4, r2, #19
 800088e:	4a27      	ldr	r2, [pc, #156]	@ (800092c <rfm95_modify_frequency+0xb8>)
 8000890:	f04f 0300 	mov.w	r3, #0
 8000894:	4620      	mov	r0, r4
 8000896:	4629      	mov	r1, r5
 8000898:	f7ff fcea 	bl	8000270 <__aeabi_uldivmod>
 800089c:	4602      	mov	r2, r0
 800089e:	460b      	mov	r3, r1
 80008a0:	e9c7 2302 	strd	r2, r3, [r7, #8]

  if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 80008a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80008a8:	f04f 0200 	mov.w	r2, #0
 80008ac:	f04f 0300 	mov.w	r3, #0
 80008b0:	0c02      	lsrs	r2, r0, #16
 80008b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008b6:	0c0b      	lsrs	r3, r1, #16
 80008b8:	b2d3      	uxtb	r3, r2
 80008ba:	461a      	mov	r2, r3
 80008bc:	2106      	movs	r1, #6
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff fea8 	bl	8000614 <write_register>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f083 0301 	eor.w	r3, r3, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <rfm95_modify_frequency+0x60>
 80008d0:	2300      	movs	r3, #0
 80008d2:	e026      	b.n	8000922 <rfm95_modify_frequency+0xae>
  if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 80008d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80008d8:	f04f 0200 	mov.w	r2, #0
 80008dc:	f04f 0300 	mov.w	r3, #0
 80008e0:	0a02      	lsrs	r2, r0, #8
 80008e2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80008e6:	0a0b      	lsrs	r3, r1, #8
 80008e8:	b2d3      	uxtb	r3, r2
 80008ea:	461a      	mov	r2, r3
 80008ec:	2107      	movs	r1, #7
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fe90 	bl	8000614 <write_register>
 80008f4:	4603      	mov	r3, r0
 80008f6:	f083 0301 	eor.w	r3, r3, #1
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <rfm95_modify_frequency+0x90>
 8000900:	2300      	movs	r3, #0
 8000902:	e00e      	b.n	8000922 <rfm95_modify_frequency+0xae>
  if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 8000904:	7a3b      	ldrb	r3, [r7, #8]
 8000906:	461a      	mov	r2, r3
 8000908:	2108      	movs	r1, #8
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fe82 	bl	8000614 <write_register>
 8000910:	4603      	mov	r3, r0
 8000912:	f083 0301 	eor.w	r3, r3, #1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <rfm95_modify_frequency+0xac>
 800091c:	2300      	movs	r3, #0
 800091e:	e000      	b.n	8000922 <rfm95_modify_frequency+0xae>

	return true;
 8000920:	2301      	movs	r3, #1
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bdb0      	pop	{r4, r5, r7, pc}
 800092a:	bf00      	nop
 800092c:	01e84800 	.word	0x01e84800

08000930 <rfm95_modify_syncWord>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_syncWord(rfm95_handle_t *handle){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, handle->config.sync_word)) return false;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800093e:	461a      	mov	r2, r3
 8000940:	2139      	movs	r1, #57	@ 0x39
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fe66 	bl	8000614 <write_register>
 8000948:	4603      	mov	r3, r0
 800094a:	f083 0301 	eor.w	r3, r3, #1
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <rfm95_modify_syncWord+0x28>
 8000954:	2300      	movs	r3, #0
 8000956:	e000      	b.n	800095a <rfm95_modify_syncWord+0x2a>

	return true;
 8000958:	2301      	movs	r3, #1
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <config_load_default>:
 *
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers.
 *
 * @return void.
 */
static void config_load_default(rfm95_handle_t *handle){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if (handle->config.sf == 0) 					rfm95_set_SF(handle, RFM95_SF7);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000972:	2b00      	cmp	r3, #0
 8000974:	d103      	bne.n	800097e <config_load_default+0x1a>
 8000976:	2100      	movs	r1, #0
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 f984 	bl	8000c86 <rfm95_set_SF>
  if (handle->config.cr == 0) 					rfm95_set_CR(handle, RFM95_CR4_5);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8000984:	2b00      	cmp	r3, #0
 8000986:	d103      	bne.n	8000990 <config_load_default+0x2c>
 8000988:	2100      	movs	r1, #0
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f000 f98b 	bl	8000ca6 <rfm95_set_CR>
  if (handle->config.tx_power == 0)  		rfm95_set_power(handle, 14);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000996:	2b00      	cmp	r3, #0
 8000998:	d103      	bne.n	80009a2 <config_load_default+0x3e>
 800099a:	210e      	movs	r1, #14
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f000 f956 	bl	8000c4e <rfm95_set_power>
  if (handle->config.bandwidth == 0) 		rfm95_set_BW(handle, RFM95_BW125);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d103      	bne.n	80009b4 <config_load_default+0x50>
 80009ac:	2101      	movs	r1, #1
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 f989 	bl	8000cc6 <rfm95_set_BW>
  if (handle->config.sync_word == 0) 		rfm95_set_syncWord(handle, LORA_DEF_SYNC_WORD);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <config_load_default+0x62>
 80009be:	2112      	movs	r1, #18
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 f9b1 	bl	8000d28 <rfm95_set_syncWord>
  if (handle->config.channel_freq == 0) rfm95_set_frequency(handle, 868000000);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d104      	bne.n	80009d8 <config_load_default+0x74>
 80009ce:	4904      	ldr	r1, [pc, #16]	@ (80009e0 <config_load_default+0x7c>)
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 f989 	bl	8000ce8 <rfm95_set_frequency>

  return;
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
}
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	33bca100 	.word	0x33bca100

080009e4 <wait_for_irq>:
 * @param interrupt  rfm95_interrupt_t defining the interrupt event to wait for (DIO0, DIO1, DIO5 supported in this version)
 * @param timeout_ms uint32_t defining the maximum timeout in ms.
 *
 * @return true if an interrupt is received within the specified timeout, false otherwise
 */
static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	460b      	mov	r3, r1
 80009ee:	607a      	str	r2, [r7, #4]
 80009f0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	4798      	blx	r3
 80009f8:	4601      	mov	r1, r0
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	fb02 f303 	mul.w	r3, r2, r3
 8000a04:	4a0e      	ldr	r2, [pc, #56]	@ (8000a40 <wait_for_irq+0x5c>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	099b      	lsrs	r3, r3, #6
 8000a0c:	440b      	add	r3, r1
 8000a0e:	617b      	str	r3, [r7, #20]

  while (handle->interrupt_times[interrupt] == 0) {
 8000a10:	e008      	b.n	8000a24 <wait_for_irq+0x40>
    if (handle->get_precision_tick() >= timeout_tick) {
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4798      	blx	r3
 8000a18:	4602      	mov	r2, r0
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d801      	bhi.n	8000a24 <wait_for_irq+0x40>
      return false;
 8000a20:	2300      	movs	r3, #0
 8000a22:	e008      	b.n	8000a36 <wait_for_irq+0x52>
  while (handle->interrupt_times[interrupt] == 0) {
 8000a24:	7afb      	ldrb	r3, [r7, #11]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	330a      	adds	r3, #10
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0ee      	beq.n	8000a12 <wait_for_irq+0x2e>
    }
  }

  return true;
 8000a34:	2301      	movs	r3, #1
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	10624dd3 	.word	0x10624dd3

08000a44 <rfm95_init>:



// -------------------------------- USER PUBLIC FUNCTIONS -------------------------------

uint16_t rfm95_init(rfm95_handle_t *handle){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]


  reset(handle);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f000 f8e0 	bl	8000c12 <reset>

  // setup default configurations:
  config_load_default(handle);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ff86 	bl	8000964 <config_load_default>

  // Check for correct version.
  uint8_t version;
  if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8000a58:	f107 020f 	add.w	r2, r7, #15
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	2142      	movs	r1, #66	@ 0x42
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff fd9b 	bl	800059c <read_register>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f083 0301 	eor.w	r3, r3, #1
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <rfm95_init+0x32>
 8000a72:	2300      	movs	r3, #0
 8000a74:	e0c9      	b.n	8000c0a <rfm95_init+0x1c6>
  if (version != RFM9x_VER) return false;
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	2b12      	cmp	r3, #18
 8000a7a:	d001      	beq.n	8000a80 <rfm95_init+0x3c>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e0c4      	b.n	8000c0a <rfm95_init+0x1c6>

  // Module must be placed in sleep mode before switching to LoRa.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_SLEEP)) return false;
 8000a80:	2200      	movs	r2, #0
 8000a82:	2101      	movs	r1, #1
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff fdc5 	bl	8000614 <write_register>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f083 0301 	eor.w	r3, r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <rfm95_init+0x56>
 8000a96:	2300      	movs	r3, #0
 8000a98:	e0b7      	b.n	8000c0a <rfm95_init+0x1c6>
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 8000a9a:	2280      	movs	r2, #128	@ 0x80
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff fdb8 	bl	8000614 <write_register>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	f083 0301 	eor.w	r3, r3, #1
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <rfm95_init+0x70>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e0aa      	b.n	8000c0a <rfm95_init+0x1c6>

  // Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
  if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2140      	movs	r1, #64	@ 0x40
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fdab 	bl	8000614 <write_register>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f083 0301 	eor.w	r3, r3, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <rfm95_init+0x8a>
 8000aca:	2300      	movs	r3, #0
 8000acc:	e09d      	b.n	8000c0a <rfm95_init+0x1c6>

  if (handle->on_after_interrupts_configured != NULL) {
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d002      	beq.n	8000adc <rfm95_init+0x98>
    handle->on_after_interrupts_configured();
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ada:	4798      	blx	r3
  }

  // Set LNA to the highest gain with 150% boost (suggested in AN)
  if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 8000adc:	2223      	movs	r2, #35	@ 0x23
 8000ade:	210c      	movs	r1, #12
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff fd97 	bl	8000614 <write_register>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	f083 0301 	eor.w	r3, r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <rfm95_init+0xb2>
 8000af2:	2300      	movs	r3, #0
 8000af4:	e089      	b.n	8000c0a <rfm95_init+0x1c6>

  // Preamble set to 10 + 4.25 = 14.25 symbols
  if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 8000af6:	2200      	movs	r2, #0
 8000af8:	2120      	movs	r1, #32
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff fd8a 	bl	8000614 <write_register>
 8000b00:	4603      	mov	r3, r0
 8000b02:	f083 0301 	eor.w	r3, r3, #1
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <rfm95_init+0xcc>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e07c      	b.n	8000c0a <rfm95_init+0x1c6>
  if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x0A)) return false;
 8000b10:	220a      	movs	r2, #10
 8000b12:	2121      	movs	r1, #33	@ 0x21
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fd7d 	bl	8000614 <write_register>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f083 0301 	eor.w	r3, r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <rfm95_init+0xe6>
 8000b26:	2300      	movs	r3, #0
 8000b28:	e06f      	b.n	8000c0a <rfm95_init+0x1c6>

  // Set up TX and RX FIFO base addresses.
  if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, RFM95_FIFO_TX_BASE_ADDRESS)) return false;
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	210e      	movs	r1, #14
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fd70 	bl	8000614 <write_register>
 8000b34:	4603      	mov	r3, r0
 8000b36:	f083 0301 	eor.w	r3, r3, #1
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <rfm95_init+0x100>
 8000b40:	2300      	movs	r3, #0
 8000b42:	e062      	b.n	8000c0a <rfm95_init+0x1c6>
  if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, RFM95_FIFO_RX_BASE_ADDRESS)) return false;
 8000b44:	2200      	movs	r2, #0
 8000b46:	210f      	movs	r1, #15
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fd63 	bl	8000614 <write_register>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f083 0301 	eor.w	r3, r3, #1
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <rfm95_init+0x11a>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e055      	b.n	8000c0a <rfm95_init+0x1c6>

  // Maximum payload length of the RFM95 is 0xFF.
  if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 0xFF)) return false;
 8000b5e:	22ff      	movs	r2, #255	@ 0xff
 8000b60:	2123      	movs	r1, #35	@ 0x23
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff fd56 	bl	8000614 <write_register>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f083 0301 	eor.w	r3, r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <rfm95_init+0x134>
 8000b74:	2300      	movs	r3, #0
 8000b76:	e048      	b.n	8000c0a <rfm95_init+0x1c6>

  // make changes effective
  if (!rfm95_modify_power(handle))     return false;
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff fd7d 	bl	8000678 <rfm95_modify_power>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	f083 0301 	eor.w	r3, r3, #1
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <rfm95_init+0x14a>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e03d      	b.n	8000c0a <rfm95_init+0x1c6>
  if (!rfm95_modify_SF(handle))        return false;
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff fdd8 	bl	8000744 <rfm95_modify_SF>
 8000b94:	4603      	mov	r3, r0
 8000b96:	f083 0301 	eor.w	r3, r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <rfm95_init+0x160>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e032      	b.n	8000c0a <rfm95_init+0x1c6>
  if (!rfm95_modify_frequency(handle)) return false;
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff fe65 	bl	8000874 <rfm95_modify_frequency>
 8000baa:	4603      	mov	r3, r0
 8000bac:	f083 0301 	eor.w	r3, r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <rfm95_init+0x176>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e027      	b.n	8000c0a <rfm95_init+0x1c6>
  if (!rfm95_modify_CR_BW(handle))     return false;
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fe26 	bl	800080c <rfm95_modify_CR_BW>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f083 0301 	eor.w	r3, r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <rfm95_init+0x18c>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e01c      	b.n	8000c0a <rfm95_init+0x1c6>
  if (!rfm95_modify_syncWord(handle))  return false;
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff fead 	bl	8000930 <rfm95_modify_syncWord>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f083 0301 	eor.w	r3, r3, #1
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <rfm95_init+0x1a2>
 8000be2:	2300      	movs	r3, #0
 8000be4:	e011      	b.n	8000c0a <rfm95_init+0x1c6>

  // Let module sleep after initialization.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 8000be6:	2280      	movs	r2, #128	@ 0x80
 8000be8:	2101      	movs	r1, #1
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fd12 	bl	8000614 <write_register>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f083 0301 	eor.w	r3, r3, #1
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <rfm95_init+0x1bc>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e004      	b.n	8000c0a <rfm95_init+0x1c6>
  handle->rfm_status = SLEEP_MODE;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return true;
 8000c08:	2301      	movs	r3, #1
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <reset>:
 *
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers.
 *
 * @return void.
 */
void reset(rfm95_handle_t *handle){
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68d8      	ldr	r0, [r3, #12]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	8a1b      	ldrh	r3, [r3, #16]
 8000c22:	2200      	movs	r2, #0
 8000c24:	4619      	mov	r1, r3
 8000c26:	f001 fd8b 	bl	8002740 <HAL_GPIO_WritePin>
  HAL_Delay(1); // 0.1ms would theoretically be enough
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f001 fa88 	bl	8002140 <HAL_Delay>
  HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68d8      	ldr	r0, [r3, #12]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	8a1b      	ldrh	r3, [r3, #16]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f001 fd80 	bl	8002740 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000c40:	2005      	movs	r0, #5
 8000c42:	f001 fa7d 	bl	8002140 <HAL_Delay>

  return;
 8000c46:	bf00      	nop
}
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <rfm95_set_power>:
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param uint8_t power          must be wihin the range 2 dbm - 17 dBm.
 *
 * @return void.
 */
void rfm95_set_power(rfm95_handle_t *handle, uint8_t power){
 8000c4e:	b480      	push	{r7}
 8000c50:	b085      	sub	sp, #20
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	460b      	mov	r3, r1
 8000c58:	70fb      	strb	r3, [r7, #3]
	uint8_t pw = power;
 8000c5a:	78fb      	ldrb	r3, [r7, #3]
 8000c5c:	73fb      	strb	r3, [r7, #15]
	if (power < 2)  pw = 2;
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d801      	bhi.n	8000c68 <rfm95_set_power+0x1a>
 8000c64:	2302      	movs	r3, #2
 8000c66:	73fb      	strb	r3, [r7, #15]
	if (power > 17) pw = 17;
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	2b11      	cmp	r3, #17
 8000c6c:	d901      	bls.n	8000c72 <rfm95_set_power+0x24>
 8000c6e:	2311      	movs	r3, #17
 8000c70:	73fb      	strb	r3, [r7, #15]

	handle->config.tx_power = pw;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	7bfa      	ldrb	r2, [r7, #15]
 8000c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	return;
 8000c7a:	bf00      	nop
}
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <rfm95_set_SF>:
 * @param *handle    rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param rfm95_sf_t sf             must be within 7 - 12 (rely on the dedicated rfm95_sf_t structure, do not manually write).
 *
 * @return void.
 */
void rfm95_set_SF(rfm95_handle_t *handle, rfm95_sf_t sf){
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	70fb      	strb	r3, [r7, #3]
	handle->config.sf = sf;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	78fa      	ldrb	r2, [r7, #3]
 8000c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	return;
 8000c9a:	bf00      	nop
}
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <rfm95_set_CR>:
 * @param *handle    rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param rfm95_cr_t cr             must be within 4/5 - 4/8 (rely on the dedicated rfm95_cr_t structure, do not manually write).
 *
 * @return void.
 */
void rfm95_set_CR(rfm95_handle_t *handle, rfm95_cr_t cr){
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	70fb      	strb	r3, [r7, #3]
	handle->config.cr = cr;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	78fa      	ldrb	r2, [r7, #3]
 8000cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	return;
 8000cba:	bf00      	nop
}
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <rfm95_set_BW>:
 * @param *handle    rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param rfm95_bw_t bw             must be within 62.5 - 500 kHz (rely on the dedicated rfm95_cr_t structure, do not manually write).
 *
 * @return void.
 */
void rfm95_set_BW(rfm95_handle_t *handle, rfm95_bw_t bw){
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	70fb      	strb	r3, [r7, #3]
	handle->config.bandwidth = bw;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	78fa      	ldrb	r2, [r7, #3]
 8000cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	return;
 8000cda:	bf00      	nop
}
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <rfm95_set_frequency>:
 * @param *handle  rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param uint32_t freq           must be within 863 - 870 MHz.
 *
 * @return void.
 */
void rfm95_set_frequency(rfm95_handle_t *handle, uint32_t freq){
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	uint32_t f = freq;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
	if (f < LOW_FREQ_BAND_EU868)  f = LOW_FREQ_BAND_EU868;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4a09      	ldr	r2, [pc, #36]	@ (8000d20 <rfm95_set_frequency+0x38>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d201      	bcs.n	8000d02 <rfm95_set_frequency+0x1a>
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <rfm95_set_frequency+0x38>)
 8000d00:	60fb      	str	r3, [r7, #12]
	if (f > HIGH_FREQ_BAND_EU868) f = HIGH_FREQ_BAND_EU868;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4a07      	ldr	r2, [pc, #28]	@ (8000d24 <rfm95_set_frequency+0x3c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d901      	bls.n	8000d0e <rfm95_set_frequency+0x26>
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <rfm95_set_frequency+0x3c>)
 8000d0c:	60fb      	str	r3, [r7, #12]

	handle->config.channel_freq = f;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	645a      	str	r2, [r3, #68]	@ 0x44
	return;
 8000d14:	bf00      	nop
}
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	337055c0 	.word	0x337055c0
 8000d24:	33db2580 	.word	0x33db2580

08000d28 <rfm95_set_syncWord>:
 * @param *handle  rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param uint8_t syncWord        any value (0x12 suggested, avoid 0x34 reserved for LoRaWAN).
 *
 * @return void.
 */
void rfm95_set_syncWord(rfm95_handle_t *handle, uint8_t syncWord){
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
	uint8_t sync = syncWord;
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	73fb      	strb	r3, [r7, #15]

	if(sync == 0x34) sync = LORA_DEF_SYNC_WORD;
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	2b34      	cmp	r3, #52	@ 0x34
 8000d3c:	d101      	bne.n	8000d42 <rfm95_set_syncWord+0x1a>
 8000d3e:	2312      	movs	r3, #18
 8000d40:	73fb      	strb	r3, [r7, #15]
	handle->config.sync_word = sync;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	return;
 8000d4a:	bf00      	nop
}
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <rfm95_getRSSI>:
 * @param *handle  rfm95_handle_t   structure containing RFM95 configurations and function pointers.
 * @param *int16_t rssi             this variable will store the actual rssi value.
 *
 * @return true if no errors occurred.
 */
bool rfm95_getRSSI(rfm95_handle_t *handle, int16_t *rssi){
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b084      	sub	sp, #16
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  uint8_t read;
  if(!read_register(handle, RFM95_REGISTER_PKT_RSSI, &read, 1)) return false;
 8000d60:	f107 020f 	add.w	r2, r7, #15
 8000d64:	2301      	movs	r3, #1
 8000d66:	211a      	movs	r1, #26
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fc17 	bl	800059c <read_register>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	f083 0301 	eor.w	r3, r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <rfm95_getRSSI+0x28>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e006      	b.n	8000d8c <rfm95_getRSSI+0x36>

  *rssi = -157 + read;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	3b9d      	subs	r3, #157	@ 0x9d
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	b21a      	sxth	r2, r3
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	801a      	strh	r2, [r3, #0]
  return true;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <rfm95_getSNR>:
 * @param *handle  rfm95_handle_t   structure containing RFM95 configurations and function pointers.
 * @param *int16_t snr              this variable will store the actual snr value.
 *
 * @return true if no errors occurred.
 */
bool rfm95_getSNR(rfm95_handle_t *handle, int8_t *snr){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  uint8_t read;
  if(!read_register(handle, RFM95_REGISTER_PACKET_SNR, &read, 1)) return false;
 8000d9e:	f107 020f 	add.w	r2, r7, #15
 8000da2:	2301      	movs	r3, #1
 8000da4:	2119      	movs	r1, #25
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fbf8 	bl	800059c <read_register>
 8000dac:	4603      	mov	r3, r0
 8000dae:	f083 0301 	eor.w	r3, r3, #1
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <rfm95_getSNR+0x28>
 8000db8:	2300      	movs	r3, #0
 8000dba:	e009      	b.n	8000dd0 <rfm95_getSNR+0x3c>

  *snr =  (((int8_t)read)/4);
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	da00      	bge.n	8000dc6 <rfm95_getSNR+0x32>
 8000dc4:	3303      	adds	r3, #3
 8000dc6:	109b      	asrs	r3, r3, #2
 8000dc8:	b25a      	sxtb	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	701a      	strb	r2, [r3, #0]
  return true;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <rfm95_getModemStatus>:
 * @param *handle  rfm95_handle_t   structure containing RFM95 configurations and function pointers.
 * @param *uint8_t status           this variable will store only the 5 LSBs of the modem status register (1st 3 bits ignored).
 *
 * @return true if no errors occurred.
 */
bool rfm95_getModemStatus(rfm95_handle_t *handle, uint8_t *status){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint8_t read;
  if(!read_register(handle, RFM95_REGISTER_MODEM_STATUS, &read, 1)) return false;
 8000de2:	f107 020f 	add.w	r2, r7, #15
 8000de6:	2301      	movs	r3, #1
 8000de8:	2118      	movs	r1, #24
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fbd6 	bl	800059c <read_register>
 8000df0:	4603      	mov	r3, r0
 8000df2:	f083 0301 	eor.w	r3, r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <rfm95_getModemStatus+0x28>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	e006      	b.n	8000e0e <rfm95_getModemStatus+0x36>

  *status = read & 0x1F;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	f003 031f 	and.w	r3, r3, #31
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	701a      	strb	r2, [r3, #0]
  return true;
 8000e0c:	2301      	movs	r3, #1
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <rfm95_send>:
 * @param *uint8_t senda_daya       pointer to data buffer to be transmitted.
 * @param size_t   send_data_length size for the TX buffer
 *
 * @return true if no errors occurred.
 */
bool rfm95_send(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length){
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]

  // make changes effective
  if (!rfm95_modify_power(handle))     return false;
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f7ff fc28 	bl	8000678 <rfm95_modify_power>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f083 0301 	eor.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <rfm95_send+0x22>
 8000e34:	2300      	movs	r3, #0
 8000e36:	e0d8      	b.n	8000fea <rfm95_send+0x1d4>
  if (!rfm95_modify_SF(handle))        return false;
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f7ff fc83 	bl	8000744 <rfm95_modify_SF>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f083 0301 	eor.w	r3, r3, #1
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <rfm95_send+0x38>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e0cd      	b.n	8000fea <rfm95_send+0x1d4>
  if (!rfm95_modify_frequency(handle)) return false;
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f7ff fd10 	bl	8000874 <rfm95_modify_frequency>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f083 0301 	eor.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <rfm95_send+0x4e>
 8000e60:	2300      	movs	r3, #0
 8000e62:	e0c2      	b.n	8000fea <rfm95_send+0x1d4>
  if (!rfm95_modify_CR_BW(handle))     return false;
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f7ff fcd1 	bl	800080c <rfm95_modify_CR_BW>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f083 0301 	eor.w	r3, r3, #1
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <rfm95_send+0x64>
 8000e76:	2300      	movs	r3, #0
 8000e78:	e0b7      	b.n	8000fea <rfm95_send+0x1d4>
  if (!rfm95_modify_syncWord(handle))  return false;
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	f7ff fd58 	bl	8000930 <rfm95_modify_syncWord>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f083 0301 	eor.w	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <rfm95_send+0x7a>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e0ac      	b.n	8000fea <rfm95_send+0x1d4>

  // Set the payload length.
  if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, send_data_length)) return false;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	461a      	mov	r2, r3
 8000e96:	2122      	movs	r1, #34	@ 0x22
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f7ff fbbb 	bl	8000614 <write_register>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f083 0301 	eor.w	r3, r3, #1
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <rfm95_send+0x98>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e09d      	b.n	8000fea <rfm95_send+0x1d4>

  // Enable tx-done interrupt, clear flags and previous interrupt time
  if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8000eae:	2240      	movs	r2, #64	@ 0x40
 8000eb0:	2140      	movs	r1, #64	@ 0x40
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f7ff fbae 	bl	8000614 <write_register>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	f083 0301 	eor.w	r3, r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <rfm95_send+0xb2>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e090      	b.n	8000fea <rfm95_send+0x1d4>
  if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xFF)) return false;
 8000ec8:	22ff      	movs	r2, #255	@ 0xff
 8000eca:	2112      	movs	r1, #18
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f7ff fba1 	bl	8000614 <write_register>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f083 0301 	eor.w	r3, r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <rfm95_send+0xcc>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e083      	b.n	8000fea <rfm95_send+0x1d4>
  handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2200      	movs	r2, #0
 8000eec:	631a      	str	r2, [r3, #48]	@ 0x30
  handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	635a      	str	r2, [r3, #52]	@ 0x34

  // Move modem to LoRa standby
  if (handle->rfm_status != STNBY_MODE){
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d01d      	beq.n	8000f3c <rfm95_send+0x126>
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 8000f00:	2281      	movs	r2, #129	@ 0x81
 8000f02:	2101      	movs	r1, #1
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f7ff fb85 	bl	8000614 <write_register>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f083 0301 	eor.w	r3, r3, #1
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <rfm95_send+0x104>
 8000f16:	2300      	movs	r3, #0
 8000f18:	e067      	b.n	8000fea <rfm95_send+0x1d4>

    // Wait for the modem to be ready
    if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8000f1a:	220a      	movs	r2, #10
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f7ff fd60 	bl	80009e4 <wait_for_irq>
 8000f24:	4603      	mov	r3, r0
 8000f26:	f083 0301 	eor.w	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <rfm95_send+0x11e>
 8000f30:	2300      	movs	r3, #0
 8000f32:	e05a      	b.n	8000fea <rfm95_send+0x1d4>
    handle->rfm_status = STNBY_MODE;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  }

  // Set pointer to start of TX section in FIFO
  if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, RFM95_FIFO_TX_BASE_ADDRESS)) return false;
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	210d      	movs	r1, #13
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f7ff fb67 	bl	8000614 <write_register>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f083 0301 	eor.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <rfm95_send+0x140>
 8000f52:	2300      	movs	r3, #0
 8000f54:	e049      	b.n	8000fea <rfm95_send+0x1d4>

  // Write payload to FIFO.
  for (size_t i = 0; i < send_data_length; i++) {
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e00b      	b.n	8000f74 <rfm95_send+0x15e>
    write_register(handle, RFM95_REGISTER_FIFO_ACCESS, send_data[i]);
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	4413      	add	r3, r2
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	2100      	movs	r1, #0
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f7ff fb53 	bl	8000614 <write_register>
  for (size_t i = 0; i < send_data_length; i++) {
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d3ef      	bcc.n	8000f5c <rfm95_send+0x146>
  }

  // Set modem to tx mode.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_TX)) return false;
 8000f7c:	2283      	movs	r2, #131	@ 0x83
 8000f7e:	2101      	movs	r1, #1
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff fb47 	bl	8000614 <write_register>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f083 0301 	eor.w	r3, r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <rfm95_send+0x180>
 8000f92:	2300      	movs	r3, #0
 8000f94:	e029      	b.n	8000fea <rfm95_send+0x1d4>

  // Wait for the transfer complete interrupt.
  if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 8000f96:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f7ff fd21 	bl	80009e4 <wait_for_irq>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f083 0301 	eor.w	r3, r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <rfm95_send+0x19c>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e01b      	b.n	8000fea <rfm95_send+0x1d4>
  handle->rfm_status = TRANSMIT_MODE;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  // LSE Tick corresponding to the end of TX --> not needed here
  uint32_t tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fbe:	613b      	str	r3, [r7, #16]
  handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Return modem to sleep.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 8000fc6:	2280      	movs	r2, #128	@ 0x80
 8000fc8:	2101      	movs	r1, #1
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f7ff fb22 	bl	8000614 <write_register>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f083 0301 	eor.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <rfm95_send+0x1ca>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e004      	b.n	8000fea <rfm95_send+0x1d4>
  handle->rfm_status = SLEEP_MODE;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return 1;
 8000fe8:	2301      	movs	r3, #1
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <rfm95_enter_rx_mode>:
 *
 * @param *handle  rfm95_handle_t   structure containing RFM95 configurations and function pointers.
 *
 * @return true if no errors occurred.
 */
bool rfm95_enter_rx_mode(rfm95_handle_t *handle){
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]

  // Clear flags and previous interrupt time, configure mapping for RX done.
  if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2140      	movs	r1, #64	@ 0x40
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fb08 	bl	8000614 <write_register>
 8001004:	4603      	mov	r3, r0
 8001006:	f083 0301 	eor.w	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <rfm95_enter_rx_mode+0x22>
 8001010:	2300      	movs	r3, #0
 8001012:	e04b      	b.n	80010ac <rfm95_enter_rx_mode+0xba>
  if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xFF)) return false;
 8001014:	22ff      	movs	r2, #255	@ 0xff
 8001016:	2112      	movs	r1, #18
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff fafb 	bl	8000614 <write_register>
 800101e:	4603      	mov	r3, r0
 8001020:	f083 0301 	eor.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <rfm95_enter_rx_mode+0x3c>
 800102a:	2300      	movs	r3, #0
 800102c:	e03e      	b.n	80010ac <rfm95_enter_rx_mode+0xba>
  handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	631a      	str	r2, [r3, #48]	@ 0x30
  handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	635a      	str	r2, [r3, #52]	@ 0x34

  // Move modem to LoRa standby
  if (handle->rfm_status != STNBY_MODE){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d01d      	beq.n	8001088 <rfm95_enter_rx_mode+0x96>
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 800104c:	2281      	movs	r2, #129	@ 0x81
 800104e:	2101      	movs	r1, #1
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff fadf 	bl	8000614 <write_register>
 8001056:	4603      	mov	r3, r0
 8001058:	f083 0301 	eor.w	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <rfm95_enter_rx_mode+0x74>
 8001062:	2300      	movs	r3, #0
 8001064:	e022      	b.n	80010ac <rfm95_enter_rx_mode+0xba>

    // Wait for the modem to be ready.
    if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8001066:	220a      	movs	r2, #10
 8001068:	2102      	movs	r1, #2
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff fcba 	bl	80009e4 <wait_for_irq>
 8001070:	4603      	mov	r3, r0
 8001072:	f083 0301 	eor.w	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <rfm95_enter_rx_mode+0x8e>
 800107c:	2300      	movs	r3, #0
 800107e:	e015      	b.n	80010ac <rfm95_enter_rx_mode+0xba>
    handle->rfm_status = STNBY_MODE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  }

  // Enter RX CONT mode
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_RX_CONT)) return false;
 8001088:	2285      	movs	r2, #133	@ 0x85
 800108a:	2101      	movs	r1, #1
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fac1 	bl	8000614 <write_register>
 8001092:	4603      	mov	r3, r0
 8001094:	f083 0301 	eor.w	r3, r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <rfm95_enter_rx_mode+0xb0>
 800109e:	2300      	movs	r3, #0
 80010a0:	e004      	b.n	80010ac <rfm95_enter_rx_mode+0xba>
  handle->rfm_status = RXCONTIN_MODE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2203      	movs	r2, #3
 80010a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

	return 1;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <rfm95_receive>:
 * @param *uint8_t rx_buff          will contain the received payload.
 * @param size_t   rx_data_length   will contain the received number of bytes.
 *
 * @return true if no errors occurred.
 */
bool rfm95_receive(rfm95_handle_t *handle, uint8_t *rx_buff, uint8_t *rx_data_length){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]

  // Move modem to LoRa standby.
  if (handle->rfm_status != STNBY_MODE){
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d01d      	beq.n	8001108 <rfm95_receive+0x54>
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 80010cc:	2281      	movs	r2, #129	@ 0x81
 80010ce:	2101      	movs	r1, #1
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f7ff fa9f 	bl	8000614 <write_register>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f083 0301 	eor.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <rfm95_receive+0x32>
 80010e2:	2300      	movs	r3, #0
 80010e4:	e07e      	b.n	80011e4 <rfm95_receive+0x130>

    // Wait for the modem to be ready.
    if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 80010e6:	220a      	movs	r2, #10
 80010e8:	2102      	movs	r1, #2
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f7ff fc7a 	bl	80009e4 <wait_for_irq>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <rfm95_receive+0x4c>
 80010fc:	2300      	movs	r3, #0
 80010fe:	e071      	b.n	80011e4 <rfm95_receive+0x130>
    handle->rfm_status = STNBY_MODE;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  }

  // proceed with payload extraction:
  uint8_t irq_flags;
  read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 8001108:	f107 0217 	add.w	r2, r7, #23
 800110c:	2301      	movs	r3, #1
 800110e:	2112      	movs	r1, #18
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff fa43 	bl	800059c <read_register>

  // Check if there was a CRC error.
  if (irq_flags & RFM95_PAYLOAD_CRC_ERR_MSK) {
 8001116:	7dfb      	ldrb	r3, [r7, #23]
 8001118:	f003 0320 	and.w	r3, r3, #32
 800111c:	2b00      	cmp	r3, #0
 800111e:	d012      	beq.n	8001146 <rfm95_receive+0x92>
   // Return modem to sleep.
   if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 8001120:	2280      	movs	r2, #128	@ 0x80
 8001122:	2101      	movs	r1, #1
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff fa75 	bl	8000614 <write_register>
 800112a:	4603      	mov	r3, r0
 800112c:	f083 0301 	eor.w	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <rfm95_receive+0x86>
 8001136:	2300      	movs	r3, #0
 8001138:	e054      	b.n	80011e4 <rfm95_receive+0x130>
   handle->rfm_status = SLEEP_MODE;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
   return false;
 8001142:	2300      	movs	r3, #0
 8001144:	e04e      	b.n	80011e4 <rfm95_receive+0x130>
  }

  // Read received payload length.
  uint8_t rx_bytes;
  if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &rx_bytes, 1)) return false;
 8001146:	f107 0216 	add.w	r2, r7, #22
 800114a:	2301      	movs	r3, #1
 800114c:	2113      	movs	r1, #19
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f7ff fa24 	bl	800059c <read_register>
 8001154:	4603      	mov	r3, r0
 8001156:	f083 0301 	eor.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <rfm95_receive+0xb0>
 8001160:	2300      	movs	r3, #0
 8001162:	e03f      	b.n	80011e4 <rfm95_receive+0x130>

  // Read packet location within the FIFO buffer
  uint8_t fifo_rx_entry;
  if (!read_register(handle, RFM95_REGISTER_FIFO_RX_CURR_ADDR, &fifo_rx_entry, 1)) return false;
 8001164:	f107 0215 	add.w	r2, r7, #21
 8001168:	2301      	movs	r3, #1
 800116a:	2110      	movs	r1, #16
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f7ff fa15 	bl	800059c <read_register>
 8001172:	4603      	mov	r3, r0
 8001174:	f083 0301 	eor.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <rfm95_receive+0xce>
 800117e:	2300      	movs	r3, #0
 8001180:	e030      	b.n	80011e4 <rfm95_receive+0x130>

  // Read received payload itself.
  if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, fifo_rx_entry)) return false;
 8001182:	7d7b      	ldrb	r3, [r7, #21]
 8001184:	461a      	mov	r2, r3
 8001186:	210d      	movs	r1, #13
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f7ff fa43 	bl	8000614 <write_register>
 800118e:	4603      	mov	r3, r0
 8001190:	f083 0301 	eor.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <rfm95_receive+0xea>
 800119a:	2300      	movs	r3, #0
 800119c:	e022      	b.n	80011e4 <rfm95_receive+0x130>
  if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, rx_buff, rx_bytes)) return false;
 800119e:	7dbb      	ldrb	r3, [r7, #22]
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	2100      	movs	r1, #0
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f7ff f9f9 	bl	800059c <read_register>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f083 0301 	eor.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <rfm95_receive+0x106>
 80011b6:	2300      	movs	r3, #0
 80011b8:	e014      	b.n	80011e4 <rfm95_receive+0x130>

  // Return modem to sleep --> needed to clear the FIFO
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 80011ba:	2280      	movs	r2, #128	@ 0x80
 80011bc:	2101      	movs	r1, #1
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f7ff fa28 	bl	8000614 <write_register>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f083 0301 	eor.w	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <rfm95_receive+0x120>
 80011d0:	2300      	movs	r3, #0
 80011d2:	e007      	b.n	80011e4 <rfm95_receive+0x130>
  handle->rfm_status = SLEEP_MODE;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  *rx_data_length = rx_bytes;
 80011dc:	7dba      	ldrb	r2, [r7, #22]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	701a      	strb	r2, [r3, #0]

	return true;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <rfm95_on_interrupt>:
 * @param *handle   rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param interrupt rfm95_interrupt_t defining which interrupt triggered the IRQ (either DIO0, DIO1 or DIO5).
 *
 * @return void.
 */
void rfm95_on_interrupt(rfm95_handle_t *handle, rfm95_interrupt_t interrupt) {
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
  handle->interrupt_times[interrupt] = handle->get_precision_tick();
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	78fc      	ldrb	r4, [r7, #3]
 80011fe:	4798      	blx	r3
 8001200:	4601      	mov	r1, r0
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	f104 030a 	add.w	r3, r4, #10
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	6059      	str	r1, [r3, #4]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bd90      	pop	{r4, r7, pc}
	...

08001218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121e:	f000 ff13 	bl	8002048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001222:	f000 f951 	bl	80014c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001226:	f000 fa71 	bl	800170c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800122a:	f000 fa3f 	bl	80016ac <MX_USART2_UART_Init>
  MX_RTC_Init();
 800122e:	f000 f9d7 	bl	80015e0 <MX_RTC_Init>
  MX_SPI3_Init();
 8001232:	f000 f9fd 	bl	8001630 <MX_SPI3_Init>
  MX_LPTIM1_Init();
 8001236:	f000 f9a7 	bl	8001588 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_LPTIM_Counter_Start_IT(&hlptim1, 0xFFFF);
 800123a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800123e:	4887      	ldr	r0, [pc, #540]	@ (800145c <main+0x244>)
 8001240:	f001 fb50 	bl	80028e4 <HAL_LPTIM_Counter_Start_IT>

  // config RFM95
  rfm95_handle.spi_handle = &hspi3;
 8001244:	4b86      	ldr	r3, [pc, #536]	@ (8001460 <main+0x248>)
 8001246:	4a87      	ldr	r2, [pc, #540]	@ (8001464 <main+0x24c>)
 8001248:	601a      	str	r2, [r3, #0]
  rfm95_handle.nrst_port  = RFM95_RST_GPIO_Port;
 800124a:	4b85      	ldr	r3, [pc, #532]	@ (8001460 <main+0x248>)
 800124c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001250:	60da      	str	r2, [r3, #12]
  rfm95_handle.nrst_pin   = RFM95_RST_Pin;
 8001252:	4b83      	ldr	r3, [pc, #524]	@ (8001460 <main+0x248>)
 8001254:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001258:	821a      	strh	r2, [r3, #16]
  rfm95_handle.nss_port   = RFM95_CS_GPIO_Port;
 800125a:	4b81      	ldr	r3, [pc, #516]	@ (8001460 <main+0x248>)
 800125c:	4a82      	ldr	r2, [pc, #520]	@ (8001468 <main+0x250>)
 800125e:	605a      	str	r2, [r3, #4]
  rfm95_handle.nss_pin    = RFM95_CS_Pin;
 8001260:	4b7f      	ldr	r3, [pc, #508]	@ (8001460 <main+0x248>)
 8001262:	2204      	movs	r2, #4
 8001264:	811a      	strh	r2, [r3, #8]

  rfm95_handle.precision_tick_frequency = lse_clk;
 8001266:	4b81      	ldr	r3, [pc, #516]	@ (800146c <main+0x254>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a7d      	ldr	r2, [pc, #500]	@ (8001460 <main+0x248>)
 800126c:	6153      	str	r3, [r2, #20]
  rfm95_handle.precision_tick_drift_ns_per_s = 20000;
 800126e:	4b7c      	ldr	r3, [pc, #496]	@ (8001460 <main+0x248>)
 8001270:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001274:	619a      	str	r2, [r3, #24]
  rfm95_handle.get_precision_tick = get_precision_tick;
 8001276:	4b7a      	ldr	r3, [pc, #488]	@ (8001460 <main+0x248>)
 8001278:	4a7d      	ldr	r2, [pc, #500]	@ (8001470 <main+0x258>)
 800127a:	61da      	str	r2, [r3, #28]
  rfm95_handle.precision_sleep_until = precision_sleep_until;
 800127c:	4b78      	ldr	r3, [pc, #480]	@ (8001460 <main+0x248>)
 800127e:	4a7d      	ldr	r2, [pc, #500]	@ (8001474 <main+0x25c>)
 8001280:	621a      	str	r2, [r3, #32]
  rfm95_handle.on_after_interrupts_configured = rfm95_after_interrupts_configured;
 8001282:	4b77      	ldr	r3, [pc, #476]	@ (8001460 <main+0x248>)
 8001284:	4a7c      	ldr	r2, [pc, #496]	@ (8001478 <main+0x260>)
 8001286:	629a      	str	r2, [r3, #40]	@ 0x28
  //rfm95_handle.random_int = random_int;
  rfm95_handle.get_battery_level = get_battery_level;
 8001288:	4b75      	ldr	r3, [pc, #468]	@ (8001460 <main+0x248>)
 800128a:	4a7c      	ldr	r2, [pc, #496]	@ (800147c <main+0x264>)
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24

  // Modify parameters here:
  rfm95_set_power(&rfm95_handle, 2); // power 2 dBm - 17 dBm
 800128e:	2102      	movs	r1, #2
 8001290:	4873      	ldr	r0, [pc, #460]	@ (8001460 <main+0x248>)
 8001292:	f7ff fcdc 	bl	8000c4e <rfm95_set_power>
  rfm95_set_frequency(&rfm95_handle, 868000000);
 8001296:	497a      	ldr	r1, [pc, #488]	@ (8001480 <main+0x268>)
 8001298:	4871      	ldr	r0, [pc, #452]	@ (8001460 <main+0x248>)
 800129a:	f7ff fd25 	bl	8000ce8 <rfm95_set_frequency>
  rfm95_set_BW(&rfm95_handle, RFM95_BW125);
 800129e:	2101      	movs	r1, #1
 80012a0:	486f      	ldr	r0, [pc, #444]	@ (8001460 <main+0x248>)
 80012a2:	f7ff fd10 	bl	8000cc6 <rfm95_set_BW>
  rfm95_set_CR(&rfm95_handle, RFM95_CR4_5);
 80012a6:	2100      	movs	r1, #0
 80012a8:	486d      	ldr	r0, [pc, #436]	@ (8001460 <main+0x248>)
 80012aa:	f7ff fcfc 	bl	8000ca6 <rfm95_set_CR>
  rfm95_set_SF(&rfm95_handle, RFM95_SF7);
 80012ae:	2100      	movs	r1, #0
 80012b0:	486b      	ldr	r0, [pc, #428]	@ (8001460 <main+0x248>)
 80012b2:	f7ff fce8 	bl	8000c86 <rfm95_set_SF>
  rfm95_set_syncWord(&rfm95_handle, 0xBA);
 80012b6:	21ba      	movs	r1, #186	@ 0xba
 80012b8:	4869      	ldr	r0, [pc, #420]	@ (8001460 <main+0x248>)
 80012ba:	f7ff fd35 	bl	8000d28 <rfm95_set_syncWord>

  // initialize RFM95
  if(!rfm95_init(&rfm95_handle)) printf("Err init\r\n");
 80012be:	4868      	ldr	r0, [pc, #416]	@ (8001460 <main+0x248>)
 80012c0:	f7ff fbc0 	bl	8000a44 <rfm95_init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <main+0xb8>
 80012ca:	486e      	ldr	r0, [pc, #440]	@ (8001484 <main+0x26c>)
 80012cc:	f005 f84c 	bl	8006368 <puts>

  if(!rfm95_enter_rx_mode(&rfm95_handle)) printf("Err entering RX\r\n");
 80012d0:	4863      	ldr	r0, [pc, #396]	@ (8001460 <main+0x248>)
 80012d2:	f7ff fe8e 	bl	8000ff2 <rfm95_enter_rx_mode>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f083 0301 	eor.w	r3, r3, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <main+0xd0>
 80012e2:	4869      	ldr	r0, [pc, #420]	@ (8001488 <main+0x270>)
 80012e4:	f005 f840 	bl	8006368 <puts>

  uint8_t buff[1] = {0x01};
 80012e8:	2301      	movs	r3, #1
 80012ea:	723b      	strb	r3, [r7, #8]
  uint32_t next_tick = 10*lse_clk;
 80012ec:	4b5f      	ldr	r3, [pc, #380]	@ (800146c <main+0x254>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(get_precision_tick() > next_tick){
 80012fa:	f000 fabd 	bl	8001878 <get_precision_tick>
 80012fe:	4602      	mov	r2, r0
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4293      	cmp	r3, r2
 8001304:	d21c      	bcs.n	8001340 <main+0x128>
      printf("transmitting\r\n");
 8001306:	4861      	ldr	r0, [pc, #388]	@ (800148c <main+0x274>)
 8001308:	f005 f82e 	bl	8006368 <puts>
      if(!rfm95_send(&rfm95_handle, buff, 1)) printf("Error sending\r\n");
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	2201      	movs	r2, #1
 8001312:	4619      	mov	r1, r3
 8001314:	4852      	ldr	r0, [pc, #328]	@ (8001460 <main+0x248>)
 8001316:	f7ff fd7e 	bl	8000e16 <rfm95_send>
 800131a:	4603      	mov	r3, r0
 800131c:	f083 0301 	eor.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <main+0x114>
 8001326:	485a      	ldr	r0, [pc, #360]	@ (8001490 <main+0x278>)
 8001328:	f005 f81e 	bl	8006368 <puts>

      next_tick = get_precision_tick() + 5*lse_clk;
 800132c:	f000 faa4 	bl	8001878 <get_precision_tick>
 8001330:	4601      	mov	r1, r0
 8001332:	4b4e      	ldr	r3, [pc, #312]	@ (800146c <main+0x254>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	440b      	add	r3, r1
 800133e:	60fb      	str	r3, [r7, #12]
    }

    if(!rfm95_enter_rx_mode(&rfm95_handle)) printf("Err entering RX\r\n");
 8001340:	4847      	ldr	r0, [pc, #284]	@ (8001460 <main+0x248>)
 8001342:	f7ff fe56 	bl	8000ff2 <rfm95_enter_rx_mode>
 8001346:	4603      	mov	r3, r0
 8001348:	f083 0301 	eor.w	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <main+0x140>
 8001352:	484d      	ldr	r0, [pc, #308]	@ (8001488 <main+0x270>)
 8001354:	f005 f808 	bl	8006368 <puts>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    while(!pkt_received & (get_precision_tick() < next_tick));
 8001358:	bf00      	nop
 800135a:	4b4e      	ldr	r3, [pc, #312]	@ (8001494 <main+0x27c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f083 0301 	eor.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	461c      	mov	r4, r3
 8001368:	f000 fa86 	bl	8001878 <get_precision_tick>
 800136c:	4602      	mov	r2, r0
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4293      	cmp	r3, r2
 8001372:	bf8c      	ite	hi
 8001374:	2301      	movhi	r3, #1
 8001376:	2300      	movls	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4023      	ands	r3, r4
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1ec      	bne.n	800135a <main+0x142>

    int8_t  snr;
    int16_t rssi;
    if(!rfm95_getSNR(&rfm95_handle, &snr))   printf("Err reading snr\r\n");
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	4619      	mov	r1, r3
 8001384:	4836      	ldr	r0, [pc, #216]	@ (8001460 <main+0x248>)
 8001386:	f7ff fd05 	bl	8000d94 <rfm95_getSNR>
 800138a:	4603      	mov	r3, r0
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <main+0x184>
 8001396:	4840      	ldr	r0, [pc, #256]	@ (8001498 <main+0x280>)
 8001398:	f004 ffe6 	bl	8006368 <puts>
    if(!rfm95_getRSSI(&rfm95_handle, &rssi)) printf("Err reading rssi\r\n");
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	482f      	ldr	r0, [pc, #188]	@ (8001460 <main+0x248>)
 80013a2:	f7ff fcd8 	bl	8000d56 <rfm95_getRSSI>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <main+0x1a0>
 80013b2:	483a      	ldr	r0, [pc, #232]	@ (800149c <main+0x284>)
 80013b4:	f004 ffd8 	bl	8006368 <puts>

    //if(!rfm95_stdby(&rfm95_handle)) printf("Err entering standby\r\n");

    if (pkt_received){
 80013b8:	4b36      	ldr	r3, [pc, #216]	@ (8001494 <main+0x27c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d09b      	beq.n	80012fa <main+0xe2>

      uint8_t status;
      if(!rfm95_getModemStatus(&rfm95_handle, &status))printf("Err reading status\r\n");
 80013c2:	1cfb      	adds	r3, r7, #3
 80013c4:	4619      	mov	r1, r3
 80013c6:	4826      	ldr	r0, [pc, #152]	@ (8001460 <main+0x248>)
 80013c8:	f7ff fd06 	bl	8000dd8 <rfm95_getModemStatus>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f083 0301 	eor.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <main+0x1c6>
 80013d8:	4831      	ldr	r0, [pc, #196]	@ (80014a0 <main+0x288>)
 80013da:	f004 ffc5 	bl	8006368 <puts>
      printf("Modem stat %d\r\n", status);
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4830      	ldr	r0, [pc, #192]	@ (80014a4 <main+0x28c>)
 80013e4:	f004 ff58 	bl	8006298 <iprintf>

      pkt_received = false;
 80013e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001494 <main+0x27c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
      if(!rfm95_receive(&rfm95_handle, &rx_buff[0], &rx_data_length)) printf("Err Rx\r\n");
 80013ee:	4a2e      	ldr	r2, [pc, #184]	@ (80014a8 <main+0x290>)
 80013f0:	492e      	ldr	r1, [pc, #184]	@ (80014ac <main+0x294>)
 80013f2:	481b      	ldr	r0, [pc, #108]	@ (8001460 <main+0x248>)
 80013f4:	f7ff fe5e 	bl	80010b4 <rfm95_receive>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f083 0301 	eor.w	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <main+0x1f4>
 8001404:	482a      	ldr	r0, [pc, #168]	@ (80014b0 <main+0x298>)
 8001406:	f004 ffaf 	bl	8006368 <puts>
 800140a:	e005      	b.n	8001418 <main+0x200>
      else printf("pkt received: %d\r\n", rx_data_length);
 800140c:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <main+0x290>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	4828      	ldr	r0, [pc, #160]	@ (80014b4 <main+0x29c>)
 8001414:	f004 ff40 	bl	8006298 <iprintf>

      for(uint8_t i = 0; i < rx_data_length; i++)printf("0x%X ", rx_buff[i]);
 8001418:	2300      	movs	r3, #0
 800141a:	72fb      	strb	r3, [r7, #11]
 800141c:	e009      	b.n	8001432 <main+0x21a>
 800141e:	7afb      	ldrb	r3, [r7, #11]
 8001420:	4a22      	ldr	r2, [pc, #136]	@ (80014ac <main+0x294>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	4619      	mov	r1, r3
 8001426:	4824      	ldr	r0, [pc, #144]	@ (80014b8 <main+0x2a0>)
 8001428:	f004 ff36 	bl	8006298 <iprintf>
 800142c:	7afb      	ldrb	r3, [r7, #11]
 800142e:	3301      	adds	r3, #1
 8001430:	72fb      	strb	r3, [r7, #11]
 8001432:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <main+0x290>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	7afa      	ldrb	r2, [r7, #11]
 8001438:	429a      	cmp	r2, r3
 800143a:	d3f0      	bcc.n	800141e <main+0x206>
      printf("\r\n");
 800143c:	481f      	ldr	r0, [pc, #124]	@ (80014bc <main+0x2a4>)
 800143e:	f004 ff93 	bl	8006368 <puts>

      printf("SNR:  %i\r\n", snr);
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	4619      	mov	r1, r3
 8001448:	481d      	ldr	r0, [pc, #116]	@ (80014c0 <main+0x2a8>)
 800144a:	f004 ff25 	bl	8006298 <iprintf>
      printf("RSSI: %i\r\n", rssi);
 800144e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001452:	4619      	mov	r1, r3
 8001454:	481b      	ldr	r0, [pc, #108]	@ (80014c4 <main+0x2ac>)
 8001456:	f004 ff1f 	bl	8006298 <iprintf>
  {
 800145a:	e74e      	b.n	80012fa <main+0xe2>
 800145c:	200000d8 	.word	0x200000d8
 8001460:	2000008c 	.word	0x2000008c
 8001464:	20000134 	.word	0x20000134
 8001468:	48000c00 	.word	0x48000c00
 800146c:	20000000 	.word	0x20000000
 8001470:	08001879 	.word	0x08001879
 8001474:	080018a9 	.word	0x080018a9
 8001478:	08001971 	.word	0x08001971
 800147c:	08001961 	.word	0x08001961
 8001480:	33bca100 	.word	0x33bca100
 8001484:	08007040 	.word	0x08007040
 8001488:	0800704c 	.word	0x0800704c
 800148c:	08007060 	.word	0x08007060
 8001490:	08007070 	.word	0x08007070
 8001494:	20000224 	.word	0x20000224
 8001498:	08007080 	.word	0x08007080
 800149c:	08007094 	.word	0x08007094
 80014a0:	080070a8 	.word	0x080070a8
 80014a4:	080070bc 	.word	0x080070bc
 80014a8:	20000327 	.word	0x20000327
 80014ac:	20000228 	.word	0x20000228
 80014b0:	080070cc 	.word	0x080070cc
 80014b4:	080070d4 	.word	0x080070d4
 80014b8:	080070e8 	.word	0x080070e8
 80014bc:	080070f0 	.word	0x080070f0
 80014c0:	080070f4 	.word	0x080070f4
 80014c4:	08007100 	.word	0x08007100

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b096      	sub	sp, #88	@ 0x58
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2244      	movs	r2, #68	@ 0x44
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f004 ff4e 	bl	8006378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	463b      	mov	r3, r7
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014ee:	f001 fcad 	bl	8002e4c <HAL_PWREx_ControlVoltageScaling>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014f8:	f000 fb34 	bl	8001b64 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014fc:	f001 fc88 	bl	8002e10 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001500:	4b20      	ldr	r3, [pc, #128]	@ (8001584 <SystemClock_Config+0xbc>)
 8001502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001506:	4a1f      	ldr	r2, [pc, #124]	@ (8001584 <SystemClock_Config+0xbc>)
 8001508:	f023 0318 	bic.w	r3, r3, #24
 800150c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001510:	2306      	movs	r3, #6
 8001512:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001514:	2301      	movs	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001518:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800151c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800151e:	2310      	movs	r3, #16
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001522:	2302      	movs	r3, #2
 8001524:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001526:	2302      	movs	r3, #2
 8001528:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800152a:	2301      	movs	r3, #1
 800152c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800152e:	230a      	movs	r3, #10
 8001530:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001532:	2307      	movs	r3, #7
 8001534:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001536:	2302      	movs	r3, #2
 8001538:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800153a:	2302      	movs	r3, #2
 800153c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4618      	mov	r0, r3
 8001544:	f001 fd04 	bl	8002f50 <HAL_RCC_OscConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800154e:	f000 fb09 	bl	8001b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001552:	230f      	movs	r3, #15
 8001554:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001556:	2303      	movs	r3, #3
 8001558:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001566:	463b      	mov	r3, r7
 8001568:	2104      	movs	r1, #4
 800156a:	4618      	mov	r0, r3
 800156c:	f002 f8cc 	bl	8003708 <HAL_RCC_ClockConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001576:	f000 faf5 	bl	8001b64 <Error_Handler>
  }
}
 800157a:	bf00      	nop
 800157c:	3758      	adds	r7, #88	@ 0x58
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <MX_LPTIM1_Init+0x50>)
 800158e:	4a13      	ldr	r2, [pc, #76]	@ (80015dc <MX_LPTIM1_Init+0x54>)
 8001590:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_LPTIM1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MX_LPTIM1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_LPTIM1_Init+0x50>)
 80015a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015a4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_LPTIM1_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <MX_LPTIM1_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_LPTIM1_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80015b8:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <MX_LPTIM1_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_LPTIM1_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	@ (80015d8 <MX_LPTIM1_Init+0x50>)
 80015c6:	f001 f8eb 	bl	80027a0 <HAL_LPTIM_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 80015d0:	f000 fac8 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200000d8 	.word	0x200000d8
 80015dc:	40007c00 	.word	0x40007c00

080015e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015e4:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <MX_RTC_Init+0x48>)
 80015e6:	4a11      	ldr	r2, [pc, #68]	@ (800162c <MX_RTC_Init+0x4c>)
 80015e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_RTC_Init+0x48>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <MX_RTC_Init+0x48>)
 80015f2:	227f      	movs	r2, #127	@ 0x7f
 80015f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_RTC_Init+0x48>)
 80015f8:	22ff      	movs	r2, #255	@ 0xff
 80015fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <MX_RTC_Init+0x48>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_RTC_Init+0x48>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001608:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <MX_RTC_Init+0x48>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_RTC_Init+0x48>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_RTC_Init+0x48>)
 8001616:	f002 ff57 	bl	80044c8 <HAL_RTC_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001620:	f000 faa0 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000110 	.word	0x20000110
 800162c:	40002800 	.word	0x40002800

08001630 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <MX_SPI3_Init+0x74>)
 8001636:	4a1c      	ldr	r2, [pc, #112]	@ (80016a8 <MX_SPI3_Init+0x78>)
 8001638:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <MX_SPI3_Init+0x74>)
 800163c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001640:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001642:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <MX_SPI3_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001648:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <MX_SPI3_Init+0x74>)
 800164a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800164e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001650:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <MX_SPI3_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001656:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <MX_SPI3_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <MX_SPI3_Init+0x74>)
 800165e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001662:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <MX_SPI3_Init+0x74>)
 8001666:	2218      	movs	r2, #24
 8001668:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <MX_SPI3_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MX_SPI3_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <MX_SPI3_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800167c:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <MX_SPI3_Init+0x74>)
 800167e:	2207      	movs	r2, #7
 8001680:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <MX_SPI3_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <MX_SPI3_Init+0x74>)
 800168a:	2208      	movs	r2, #8
 800168c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <MX_SPI3_Init+0x74>)
 8001690:	f003 f868 	bl	8004764 <HAL_SPI_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800169a:	f000 fa63 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000134 	.word	0x20000134
 80016a8:	40003c00 	.word	0x40003c00

080016ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b0:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016b2:	4a15      	ldr	r2, [pc, #84]	@ (8001708 <MX_USART2_UART_Init+0x5c>)
 80016b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016be:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016d2:	220c      	movs	r2, #12
 80016d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016dc:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016f0:	f003 ff64 	bl	80055bc <HAL_UART_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016fa:	f000 fa33 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000198 	.word	0x20000198
 8001708:	40004400 	.word	0x40004400

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	@ 0x28
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	4b52      	ldr	r3, [pc, #328]	@ (800186c <MX_GPIO_Init+0x160>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	4a51      	ldr	r2, [pc, #324]	@ (800186c <MX_GPIO_Init+0x160>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800172e:	4b4f      	ldr	r3, [pc, #316]	@ (800186c <MX_GPIO_Init+0x160>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	4b4c      	ldr	r3, [pc, #304]	@ (800186c <MX_GPIO_Init+0x160>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173e:	4a4b      	ldr	r2, [pc, #300]	@ (800186c <MX_GPIO_Init+0x160>)
 8001740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001746:	4b49      	ldr	r3, [pc, #292]	@ (800186c <MX_GPIO_Init+0x160>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b46      	ldr	r3, [pc, #280]	@ (800186c <MX_GPIO_Init+0x160>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	4a45      	ldr	r2, [pc, #276]	@ (800186c <MX_GPIO_Init+0x160>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175e:	4b43      	ldr	r3, [pc, #268]	@ (800186c <MX_GPIO_Init+0x160>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800176a:	4b40      	ldr	r3, [pc, #256]	@ (800186c <MX_GPIO_Init+0x160>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176e:	4a3f      	ldr	r2, [pc, #252]	@ (800186c <MX_GPIO_Init+0x160>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001776:	4b3d      	ldr	r3, [pc, #244]	@ (800186c <MX_GPIO_Init+0x160>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	4b3a      	ldr	r3, [pc, #232]	@ (800186c <MX_GPIO_Init+0x160>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001786:	4a39      	ldr	r2, [pc, #228]	@ (800186c <MX_GPIO_Init+0x160>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178e:	4b37      	ldr	r3, [pc, #220]	@ (800186c <MX_GPIO_Init+0x160>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2120      	movs	r1, #32
 800179e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017a2:	f000 ffcd 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM95_RST_GPIO_Port, RFM95_RST_Pin, GPIO_PIN_SET);
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b0:	f000 ffc6 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM95_CS_GPIO_Port, RFM95_CS_Pin, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	2104      	movs	r1, #4
 80017b8:	482d      	ldr	r0, [pc, #180]	@ (8001870 <MX_GPIO_Init+0x164>)
 80017ba:	f000 ffc1 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4827      	ldr	r0, [pc, #156]	@ (8001874 <MX_GPIO_Init+0x168>)
 80017d6:	f000 fe09 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017da:	2320      	movs	r3, #32
 80017dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f4:	f000 fdfa 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM95_DIO0_Pin RFM95_DIO1_Pin RFM95_DIO5_Pin */
  GPIO_InitStruct.Pin = RFM95_DIO0_Pin|RFM95_DIO1_Pin|RFM95_DIO5_Pin;
 80017f8:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80017fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001812:	f000 fdeb 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM95_RST_Pin */
  GPIO_InitStruct.Pin = RFM95_RST_Pin;
 8001816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800181a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800181c:	2311      	movs	r3, #17
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RFM95_RST_GPIO_Port, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001832:	f000 fddb 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM95_CS_Pin */
  GPIO_InitStruct.Pin = RFM95_CS_Pin;
 8001836:	2304      	movs	r3, #4
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183e:	2301      	movs	r3, #1
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001842:	2301      	movs	r3, #1
 8001844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RFM95_CS_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4808      	ldr	r0, [pc, #32]	@ (8001870 <MX_GPIO_Init+0x164>)
 800184e:	f000 fdcd 	bl	80023ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	2017      	movs	r0, #23
 8001858:	f000 fd91 	bl	800237e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800185c:	2017      	movs	r0, #23
 800185e:	f000 fdaa 	bl	80023b6 <HAL_NVIC_EnableIRQ>
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	@ 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	48000c00 	.word	0x48000c00
 8001874:	48000800 	.word	0x48000800

08001878 <get_precision_tick>:
// -------------- RFM95 user defined functions -------------------

/*
 * return precise timing based on internal LPTIM module
 */
static uint32_t get_precision_tick(){
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187e:	b672      	cpsid	i
}
 8001880:	bf00      	nop
	__disable_irq();
	uint32_t precision_tick = lptim_tick_msb | HAL_LPTIM_ReadCounter(&hlptim1);
 8001882:	4807      	ldr	r0, [pc, #28]	@ (80018a0 <get_precision_tick+0x28>)
 8001884:	f001 f8ac 	bl	80029e0 <HAL_LPTIM_ReadCounter>
 8001888:	4602      	mov	r2, r0
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <get_precision_tick+0x2c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001892:	b662      	cpsie	i
}
 8001894:	bf00      	nop
	__enable_irq();
	return precision_tick;
 8001896:	687b      	ldr	r3, [r7, #4]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200000d8 	.word	0x200000d8
 80018a4:	20000220 	.word	0x20000220

080018a8 <precision_sleep_until>:

/*
 * Allows to set the MCU into STOP2 mode
 */
static void precision_sleep_until(uint32_t target_ticks){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	while(1){
		uint32_t curr_tick = get_precision_tick();
 80018b0:	f7ff ffe2 	bl	8001878 <get_precision_tick>
 80018b4:	6178      	str	r0, [r7, #20]

		// exit condition:
		if(target_ticks < curr_tick) break;
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d33f      	bcc.n	800193e <precision_sleep_until+0x96>

		uint32_t sleep_ticks = target_ticks - curr_tick;
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	613b      	str	r3, [r7, #16]

		// avoid short sleep intervals:
		if(sleep_ticks < 10) break;
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	2b09      	cmp	r3, #9
 80018ca:	d93a      	bls.n	8001942 <precision_sleep_until+0x9a>
		else {
			// overall CMP value - some margin (needed to reset clock configurations after stop mode2)
			uint32_t compare_tick = (curr_tick & 0xFFFF) + sleep_ticks - 10;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4413      	add	r3, r2
 80018d4:	3b0a      	subs	r3, #10
 80018d6:	60fb      	str	r3, [r7, #12]

			if (compare_tick >= 0xFFFF){ // ARR will awake MCU before compare
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80018de:	4293      	cmp	r3, r2
 80018e0:	d904      	bls.n	80018ec <precision_sleep_until+0x44>
				HAL_SuspendTick();
 80018e2:	f000 fc51 	bl	8002188 <HAL_SuspendTick>
				enterStopMode();
 80018e6:	f000 f84f 	bl	8001988 <enterStopMode>
 80018ea:	e7e1      	b.n	80018b0 <precision_sleep_until+0x8>
			} else { // otherwise CMP keeps MCU sleep all time
				__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <precision_sleep_until+0xb4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2208      	movs	r2, #8
 80018f2:	605a      	str	r2, [r3, #4]
				__HAL_LPTIM_COMPARE_SET(&hlptim1, compare_tick);            // set CMP limit
 80018f4:	4b19      	ldr	r3, [pc, #100]	@ (800195c <precision_sleep_until+0xb4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	615a      	str	r2, [r3, #20]

				while (!__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK));  // wait for effective change
 80018fc:	bf00      	nop
 80018fe:	4b17      	ldr	r3, [pc, #92]	@ (800195c <precision_sleep_until+0xb4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b08      	cmp	r3, #8
 800190a:	d1f8      	bne.n	80018fe <precision_sleep_until+0x56>

				__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);          // clear CMP interrupt flag
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <precision_sleep_until+0xb4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	605a      	str	r2, [r3, #4]
				__HAL_LPTIM_ENABLE_IT(&hlptim1, LPTIM_IT_CMPM);             // enable CMP interrupt
 8001914:	4b11      	ldr	r3, [pc, #68]	@ (800195c <precision_sleep_until+0xb4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	4b10      	ldr	r3, [pc, #64]	@ (800195c <precision_sleep_until+0xb4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	609a      	str	r2, [r3, #8]

				HAL_SuspendTick();
 8001924:	f000 fc30 	bl	8002188 <HAL_SuspendTick>
				enterStopMode();
 8001928:	f000 f82e 	bl	8001988 <enterStopMode>

				__HAL_LPTIM_DISABLE_IT(&hlptim1, LPTIM_IT_CMPM);            // disable CMP interrupt
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <precision_sleep_until+0xb4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <precision_sleep_until+0xb4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	609a      	str	r2, [r3, #8]
	while(1){
 800193c:	e7b8      	b.n	80018b0 <precision_sleep_until+0x8>
		if(target_ticks < curr_tick) break;
 800193e:	bf00      	nop
 8001940:	e000      	b.n	8001944 <precision_sleep_until+0x9c>
		if(sleep_ticks < 10) break;
 8001942:	bf00      	nop
			}
		}
	}

	while(get_precision_tick() < target_ticks);                       // wait residue time here ( < 10 ticks)
 8001944:	bf00      	nop
 8001946:	f7ff ff97 	bl	8001878 <get_precision_tick>
 800194a:	4602      	mov	r2, r0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4293      	cmp	r3, r2
 8001950:	d8f9      	bhi.n	8001946 <precision_sleep_until+0x9e>
}
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200000d8 	.word	0x200000d8

08001960 <get_battery_level>:


static uint8_t get_battery_level(){
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
	return 0;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <rfm95_after_interrupts_configured>:

/*
 * This function is executed after initializing rfm95 (ready to accept interrupts
 * without hard fault errors)
 */
void rfm95_after_interrupts_configured(){
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	2028      	movs	r0, #40	@ 0x28
 800197a:	f000 fd00 	bl	800237e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800197e:	2028      	movs	r0, #40	@ 0x28
 8001980:	f000 fd19 	bl	80023b6 <HAL_NVIC_EnableIRQ>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <enterStopMode>:
// -------------------------- System Power down routines --------------------------------

/*
 * Enter stop mode and resume clock configurations on exit
 */
void enterStopMode(){
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	// wake from HSI --> faster wake up sequence:
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_HSI);
 800198c:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <enterStopMode+0x30>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <enterStopMode+0x30>)
 8001992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001996:	6093      	str	r3, [r2, #8]

	// Enter stop mode 2:
	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001998:	2001      	movs	r0, #1
 800199a:	f001 faad 	bl	8002ef8 <HAL_PWREx_EnterSTOP2Mode>

	// awake here...

	// resume system clock:
	if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) MySystemClock_Config();
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <enterStopMode+0x30>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <enterStopMode+0x26>
 80019aa:	f000 f807 	bl	80019bc <MySystemClock_Config>

	// resume system tick with correct clock
	HAL_ResumeTick();
 80019ae:	f000 fbfb 	bl	80021a8 <HAL_ResumeTick>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000

080019bc <MySystemClock_Config>:
/*
 * Modified clock setup function:
 * -> Avoid repeating initialization for the LSE 32 kHz clock if already running.
 *    Doing this every time the MCU exits STOP mode, results in a corrupted timing accuracy.
 */
void MySystemClock_Config(void) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b096      	sub	sp, #88	@ 0x58
 80019c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	2244      	movs	r2, #68	@ 0x44
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f004 fcd4 	bl	8006378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d0:	463b      	mov	r3, r7
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80019e2:	f001 fa33 	bl	8002e4c <HAL_PWREx_ControlVoltageScaling>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MySystemClock_Config+0x34>
  {
    Error_Handler();
 80019ec:	f000 f8ba 	bl	8001b64 <Error_Handler>
  }

  /** Configure LSE Drive Capability only if it
  */
  if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON) == 0) || (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) != 1){
 80019f0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a9c <MySystemClock_Config+0xe0>)
 80019f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d106      	bne.n	8001a0c <MySystemClock_Config+0x50>
 80019fe:	4b27      	ldr	r3, [pc, #156]	@ (8001a9c <MySystemClock_Config+0xe0>)
 8001a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d00b      	beq.n	8001a24 <MySystemClock_Config+0x68>
  	HAL_PWR_EnableBkUpAccess();
 8001a0c:	f001 fa00 	bl	8002e10 <HAL_PWR_EnableBkUpAccess>
		__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a10:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <MySystemClock_Config+0xe0>)
 8001a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a16:	4a21      	ldr	r2, [pc, #132]	@ (8001a9c <MySystemClock_Config+0xe0>)
 8001a18:	f023 0318 	bic.w	r3, r3, #24
 8001a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8001a20:	2304      	movs	r3, #4
 8001a22:	617b      	str	r3, [r7, #20]


  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType |= RCC_OSCILLATORTYPE_HSI;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a34:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a36:	2310      	movs	r3, #16
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a46:	230a      	movs	r3, #10
 8001a48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a52:	2302      	movs	r3, #2
 8001a54:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 fa78 	bl	8002f50 <HAL_RCC_OscConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MySystemClock_Config+0xae>
  {
    Error_Handler();
 8001a66:	f000 f87d 	bl	8001b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a6a:	230f      	movs	r3, #15
 8001a6c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a7e:	463b      	mov	r3, r7
 8001a80:	2104      	movs	r1, #4
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 fe40 	bl	8003708 <HAL_RCC_ClockConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MySystemClock_Config+0xd6>
  {
    Error_Handler();
 8001a8e:	f000 f869 	bl	8001b64 <Error_Handler>
  }
}
 8001a92:	bf00      	nop
 8001a94:	3758      	adds	r7, #88	@ 0x58
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <HAL_LPTIM_AutoReloadMatchCallback>:


// ------------------------------------- Call-backs --------------------------------------

// Auto-reload callback for LPTIM module
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  lptim_tick_msb += 0x10000;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <HAL_LPTIM_AutoReloadMatchCallback+0x20>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001ab0:	4a03      	ldr	r2, [pc, #12]	@ (8001ac0 <HAL_LPTIM_AutoReloadMatchCallback+0x20>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	20000220 	.word	0x20000220

08001ac4 <HAL_LPTIM_CompareMatchCallback>:

// Compare match callback for LPTIM module
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_GPIO_EXTI_Callback>:

// GPIO external interrupts callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]

	// Events on RFM95 interrupt pins
  if (GPIO_Pin == RFM95_DIO0_Pin) {
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ae8:	d10d      	bne.n	8001b06 <HAL_GPIO_EXTI_Callback+0x2e>
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO0);
 8001aea:	2100      	movs	r1, #0
 8001aec:	4810      	ldr	r0, [pc, #64]	@ (8001b30 <HAL_GPIO_EXTI_Callback+0x58>)
 8001aee:	f7ff fb7d 	bl	80011ec <rfm95_on_interrupt>

    // something received
    if(rfm95_handle.rfm_status == RXCONTIN_MODE) pkt_received = true;
 8001af2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <HAL_GPIO_EXTI_Callback+0x58>)
 8001af4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d114      	bne.n	8001b28 <HAL_GPIO_EXTI_Callback+0x50>
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
  } else if (GPIO_Pin == RFM95_DIO1_Pin) {
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
  } else if (GPIO_Pin == RFM95_DIO5_Pin) {
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
  }
}
 8001b04:	e010      	b.n	8001b28 <HAL_GPIO_EXTI_Callback+0x50>
  } else if (GPIO_Pin == RFM95_DIO1_Pin) {
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b0c:	d104      	bne.n	8001b18 <HAL_GPIO_EXTI_Callback+0x40>
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
 8001b0e:	2101      	movs	r1, #1
 8001b10:	4807      	ldr	r0, [pc, #28]	@ (8001b30 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b12:	f7ff fb6b 	bl	80011ec <rfm95_on_interrupt>
}
 8001b16:	e007      	b.n	8001b28 <HAL_GPIO_EXTI_Callback+0x50>
  } else if (GPIO_Pin == RFM95_DIO5_Pin) {
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b1e:	d103      	bne.n	8001b28 <HAL_GPIO_EXTI_Callback+0x50>
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
 8001b20:	2102      	movs	r1, #2
 8001b22:	4803      	ldr	r0, [pc, #12]	@ (8001b30 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b24:	f7ff fb62 	bl	80011ec <rfm95_on_interrupt>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	2000008c 	.word	0x2000008c
 8001b34:	20000224 	.word	0x20000224

08001b38 <_write>:
// ----------------------------------------------------------------------------------------



int _write(int file, char *ptr, int len)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	4804      	ldr	r0, [pc, #16]	@ (8001b60 <_write+0x28>)
 8001b50:	f003 fd82 	bl	8005658 <HAL_UART_Transmit>
  return len;
 8001b54:	687b      	ldr	r3, [r7, #4]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000198 	.word	0x20000198

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <Error_Handler+0x8>

08001b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <HAL_MspInit+0x44>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb4 <HAL_MspInit+0x44>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <HAL_MspInit+0x44>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_MspInit+0x44>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b92:	4a08      	ldr	r2, [pc, #32]	@ (8001bb4 <HAL_MspInit+0x44>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_MspInit+0x44>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0a6      	sub	sp, #152	@ 0x98
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	2288      	movs	r2, #136	@ 0x88
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f004 fbd5 	bl	8006378 <memset>
  if(hlptim->Instance==LPTIM1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a15      	ldr	r2, [pc, #84]	@ (8001c28 <HAL_LPTIM_MspInit+0x70>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d123      	bne.n	8001c20 <HAL_LPTIM_MspInit+0x68>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001bd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bdc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001bde:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8001be2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 ffb1 	bl	8003b50 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8001bf4:	f7ff ffb6 	bl	8001b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <HAL_LPTIM_MspInit+0x74>)
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001c2c <HAL_LPTIM_MspInit+0x74>)
 8001bfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c02:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c04:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <HAL_LPTIM_MspInit+0x74>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	2041      	movs	r0, #65	@ 0x41
 8001c16:	f000 fbb2 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001c1a:	2041      	movs	r0, #65	@ 0x41
 8001c1c:	f000 fbcb 	bl	80023b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 8001c20:	bf00      	nop
 8001c22:	3798      	adds	r7, #152	@ 0x98
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40007c00 	.word	0x40007c00
 8001c2c:	40021000 	.word	0x40021000

08001c30 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0a4      	sub	sp, #144	@ 0x90
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	2288      	movs	r2, #136	@ 0x88
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f004 fb99 	bl	8006378 <memset>
  if(hrtc->Instance==RTC)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a14      	ldr	r2, [pc, #80]	@ (8001c9c <HAL_RTC_MspInit+0x6c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d120      	bne.n	8001c92 <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c54:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 ff74 	bl	8003b50 <HAL_RCCEx_PeriphCLKConfig>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001c6e:	f7ff ff79 	bl	8001b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <HAL_RTC_MspInit+0x70>)
 8001c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c78:	4a09      	ldr	r2, [pc, #36]	@ (8001ca0 <HAL_RTC_MspInit+0x70>)
 8001c7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	2003      	movs	r0, #3
 8001c88:	f000 fb79 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 fb92 	bl	80023b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001c92:	bf00      	nop
 8001c94:	3790      	adds	r7, #144	@ 0x90
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40002800 	.word	0x40002800
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	@ 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a20      	ldr	r2, [pc, #128]	@ (8001d44 <HAL_SPI_MspInit+0xa0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d139      	bne.n	8001d3a <HAL_SPI_MspInit+0x96>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cc6:	4b20      	ldr	r3, [pc, #128]	@ (8001d48 <HAL_SPI_MspInit+0xa4>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cca:	4a1f      	ldr	r2, [pc, #124]	@ (8001d48 <HAL_SPI_MspInit+0xa4>)
 8001ccc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <HAL_SPI_MspInit+0xa4>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cde:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <HAL_SPI_MspInit+0xa4>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <HAL_SPI_MspInit+0xa4>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cea:	4b17      	ldr	r3, [pc, #92]	@ (8001d48 <HAL_SPI_MspInit+0xa4>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001cf6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d08:	2306      	movs	r3, #6
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	480e      	ldr	r0, [pc, #56]	@ (8001d4c <HAL_SPI_MspInit+0xa8>)
 8001d14:	f000 fb6a 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d22:	2301      	movs	r3, #1
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d2a:	2306      	movs	r3, #6
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <HAL_SPI_MspInit+0xa8>)
 8001d36:	f000 fb59 	bl	80023ec <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	@ 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40003c00 	.word	0x40003c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	48000800 	.word	0x48000800

08001d50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0ac      	sub	sp, #176	@ 0xb0
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2288      	movs	r2, #136	@ 0x88
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 fb01 	bl	8006378 <memset>
  if(huart->Instance==USART2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a21      	ldr	r2, [pc, #132]	@ (8001e00 <HAL_UART_MspInit+0xb0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d13b      	bne.n	8001df8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d80:	2302      	movs	r3, #2
 8001d82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f001 fedf 	bl	8003b50 <HAL_RCCEx_PeriphCLKConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d98:	f7ff fee4 	bl	8001b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d9c:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da0:	4a18      	ldr	r2, [pc, #96]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001da8:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db8:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc0:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dcc:	230c      	movs	r3, #12
 8001dce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de4:	2307      	movs	r3, #7
 8001de6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001dee:	4619      	mov	r1, r3
 8001df0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001df4:	f000 fafa 	bl	80023ec <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001df8:	bf00      	nop
 8001dfa:	37b0      	adds	r7, #176	@ 0xb0
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40004400 	.word	0x40004400
 8001e04:	40021000 	.word	0x40021000

08001e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <NMI_Handler+0x4>

08001e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <MemManage_Handler+0x4>

08001e20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <BusFault_Handler+0x4>

08001e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <UsageFault_Handler+0x4>

08001e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5e:	f000 f94f 	bl	8002100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <RTC_WKUP_IRQHandler+0x10>)
 8001e6e:	f002 fc49 	bl	8004704 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000110 	.word	0x20000110

08001e7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO0_Pin);
 8001e80:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001e84:	f000 fc74 	bl	8002770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO1_Pin);
 8001e90:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001e94:	f000 fc6c 	bl	8002770 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO5_Pin);
 8001e98:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001e9c:	f000 fc68 	bl	8002770 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ea0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ea4:	f000 fc64 	bl	8002770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001eb0:	4802      	ldr	r0, [pc, #8]	@ (8001ebc <LPTIM1_IRQHandler+0x10>)
 8001eb2:	f000 fda2 	bl	80029fa <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200000d8 	.word	0x200000d8

08001ec0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	e00a      	b.n	8001ee8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ed2:	f3af 8000 	nop.w
 8001ed6:	4601      	mov	r1, r0
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	60ba      	str	r2, [r7, #8]
 8001ede:	b2ca      	uxtb	r2, r1
 8001ee0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dbf0      	blt.n	8001ed2 <_read+0x12>
  }

  return len;
 8001ef0:	687b      	ldr	r3, [r7, #4]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_close>:
  }
  return len;
}

int _close(int file)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f22:	605a      	str	r2, [r3, #4]
  return 0;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_isatty>:

int _isatty(int file)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f3a:	2301      	movs	r3, #1
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	@ (8001fc0 <_sbrk+0x5c>)
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <_sbrk+0x60>)
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f78:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <_sbrk+0x64>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <_sbrk+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d207      	bcs.n	8001fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f94:	f004 f9f8 	bl	8006388 <__errno>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fa2:	e009      	b.n	8001fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001faa:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a05      	ldr	r2, [pc, #20]	@ (8001fc8 <_sbrk+0x64>)
 8001fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20018000 	.word	0x20018000
 8001fc4:	00000400 	.word	0x00000400
 8001fc8:	20000328 	.word	0x20000328
 8001fcc:	20000480 	.word	0x20000480

08001fd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <SystemInit+0x20>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fda:	4a05      	ldr	r2, [pc, #20]	@ (8001ff0 <SystemInit+0x20>)
 8001fdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fe0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ff4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800202c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ff8:	f7ff ffea 	bl	8001fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ffc:	480c      	ldr	r0, [pc, #48]	@ (8002030 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ffe:	490d      	ldr	r1, [pc, #52]	@ (8002034 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002000:	4a0d      	ldr	r2, [pc, #52]	@ (8002038 <LoopForever+0xe>)
  movs r3, #0
 8002002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002004:	e002      	b.n	800200c <LoopCopyDataInit>

08002006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200a:	3304      	adds	r3, #4

0800200c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800200c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002010:	d3f9      	bcc.n	8002006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002014:	4c0a      	ldr	r4, [pc, #40]	@ (8002040 <LoopForever+0x16>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002018:	e001      	b.n	800201e <LoopFillZerobss>

0800201a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800201c:	3204      	adds	r2, #4

0800201e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002020:	d3fb      	bcc.n	800201a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002022:	f004 f9b7 	bl	8006394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002026:	f7ff f8f7 	bl	8001218 <main>

0800202a <LoopForever>:

LoopForever:
    b LoopForever
 800202a:	e7fe      	b.n	800202a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800202c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002034:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002038:	080071c4 	.word	0x080071c4
  ldr r2, =_sbss
 800203c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002040:	2000047c 	.word	0x2000047c

08002044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002044:	e7fe      	b.n	8002044 <ADC1_2_IRQHandler>
	...

08002048 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002052:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <HAL_Init+0x3c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a0b      	ldr	r2, [pc, #44]	@ (8002084 <HAL_Init+0x3c>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800205c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205e:	2003      	movs	r0, #3
 8002060:	f000 f982 	bl	8002368 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002064:	2000      	movs	r0, #0
 8002066:	f000 f80f 	bl	8002088 <HAL_InitTick>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	71fb      	strb	r3, [r7, #7]
 8002074:	e001      	b.n	800207a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002076:	f7ff fd7b 	bl	8001b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800207a:	79fb      	ldrb	r3, [r7, #7]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40022000 	.word	0x40022000

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002094:	4b17      	ldr	r3, [pc, #92]	@ (80020f4 <HAL_InitTick+0x6c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d023      	beq.n	80020e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800209c:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <HAL_InitTick+0x70>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <HAL_InitTick+0x6c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f98d 	bl	80023d2 <HAL_SYSTICK_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10f      	bne.n	80020de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d809      	bhi.n	80020d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020cc:	f000 f957 	bl	800237e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020d0:	4a0a      	ldr	r2, [pc, #40]	@ (80020fc <HAL_InitTick+0x74>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e007      	b.n	80020e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e004      	b.n	80020e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e001      	b.n	80020e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000000c 	.word	0x2000000c
 80020f8:	20000004 	.word	0x20000004
 80020fc:	20000008 	.word	0x20000008

08002100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_IncTick+0x20>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_IncTick+0x24>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4413      	add	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <HAL_IncTick+0x24>)
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	2000000c 	.word	0x2000000c
 8002124:	2000032c 	.word	0x2000032c

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	@ (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	2000032c 	.word	0x2000032c

08002140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff ffee 	bl	8002128 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002158:	d005      	beq.n	8002166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800215a:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <HAL_Delay+0x44>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002166:	bf00      	nop
 8002168:	f7ff ffde 	bl	8002128 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	429a      	cmp	r2, r3
 8002176:	d8f7      	bhi.n	8002168 <HAL_Delay+0x28>
  {
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2000000c 	.word	0x2000000c

08002188 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800218c:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <HAL_SuspendTick+0x1c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a04      	ldr	r2, [pc, #16]	@ (80021a4 <HAL_SuspendTick+0x1c>)
 8002192:	f023 0302 	bic.w	r3, r3, #2
 8002196:	6013      	str	r3, [r2, #0]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_ResumeTick+0x1c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a04      	ldr	r2, [pc, #16]	@ (80021c4 <HAL_ResumeTick+0x1c>)
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d8:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021e4:	4013      	ands	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fa:	4a04      	ldr	r2, [pc, #16]	@ (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	60d3      	str	r3, [r2, #12]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002214:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <__NVIC_GetPriorityGrouping+0x18>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0307 	and.w	r3, r3, #7
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	2b00      	cmp	r3, #0
 800223c:	db0b      	blt.n	8002256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4907      	ldr	r1, [pc, #28]	@ (8002264 <__NVIC_EnableIRQ+0x38>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	2001      	movs	r0, #1
 800224e:	fa00 f202 	lsl.w	r2, r0, r2
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000e100 	.word	0xe000e100

08002268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	6039      	str	r1, [r7, #0]
 8002272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	db0a      	blt.n	8002292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	490c      	ldr	r1, [pc, #48]	@ (80022b4 <__NVIC_SetPriority+0x4c>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	440b      	add	r3, r1
 800228c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002290:	e00a      	b.n	80022a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4908      	ldr	r1, [pc, #32]	@ (80022b8 <__NVIC_SetPriority+0x50>)
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3b04      	subs	r3, #4
 80022a0:	0112      	lsls	r2, r2, #4
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	440b      	add	r3, r1
 80022a6:	761a      	strb	r2, [r3, #24]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000e100 	.word	0xe000e100
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	@ 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f1c3 0307 	rsb	r3, r3, #7
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	bf28      	it	cs
 80022da:	2304      	movcs	r3, #4
 80022dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d902      	bls.n	80022ec <NVIC_EncodePriority+0x30>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3b03      	subs	r3, #3
 80022ea:	e000      	b.n	80022ee <NVIC_EncodePriority+0x32>
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	401a      	ands	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002304:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43d9      	mvns	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	4313      	orrs	r3, r2
         );
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	@ 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002334:	d301      	bcc.n	800233a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002336:	2301      	movs	r3, #1
 8002338:	e00f      	b.n	800235a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233a:	4a0a      	ldr	r2, [pc, #40]	@ (8002364 <SysTick_Config+0x40>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002342:	210f      	movs	r1, #15
 8002344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002348:	f7ff ff8e 	bl	8002268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <SysTick_Config+0x40>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002352:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <SysTick_Config+0x40>)
 8002354:	2207      	movs	r2, #7
 8002356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	e000e010 	.word	0xe000e010

08002368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ff29 	bl	80021c8 <__NVIC_SetPriorityGrouping>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002390:	f7ff ff3e 	bl	8002210 <__NVIC_GetPriorityGrouping>
 8002394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7ff ff8e 	bl	80022bc <NVIC_EncodePriority>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff5d 	bl	8002268 <__NVIC_SetPriority>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff31 	bl	800222c <__NVIC_EnableIRQ>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffa2 	bl	8002324 <SysTick_Config>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fa:	e17f      	b.n	80026fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	4013      	ands	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8171 	beq.w	80026f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d005      	beq.n	800242c <HAL_GPIO_Init+0x40>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d130      	bne.n	800248e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002462:	2201      	movs	r2, #1
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	f003 0201 	and.w	r2, r3, #1
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b03      	cmp	r3, #3
 8002498:	d118      	bne.n	80024cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024a0:	2201      	movs	r2, #1
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	08db      	lsrs	r3, r3, #3
 80024b6:	f003 0201 	and.w	r2, r3, #1
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d017      	beq.n	8002508 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d123      	bne.n	800255c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	220f      	movs	r2, #15
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	08da      	lsrs	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3208      	adds	r2, #8
 8002556:	6939      	ldr	r1, [r7, #16]
 8002558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0203 	and.w	r2, r3, #3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80ac 	beq.w	80026f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259e:	4b5f      	ldr	r3, [pc, #380]	@ (800271c <HAL_GPIO_Init+0x330>)
 80025a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a2:	4a5e      	ldr	r2, [pc, #376]	@ (800271c <HAL_GPIO_Init+0x330>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80025aa:	4b5c      	ldr	r3, [pc, #368]	@ (800271c <HAL_GPIO_Init+0x330>)
 80025ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025b6:	4a5a      	ldr	r2, [pc, #360]	@ (8002720 <HAL_GPIO_Init+0x334>)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025e0:	d025      	beq.n	800262e <HAL_GPIO_Init+0x242>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002724 <HAL_GPIO_Init+0x338>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d01f      	beq.n	800262a <HAL_GPIO_Init+0x23e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002728 <HAL_GPIO_Init+0x33c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d019      	beq.n	8002626 <HAL_GPIO_Init+0x23a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4d      	ldr	r2, [pc, #308]	@ (800272c <HAL_GPIO_Init+0x340>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_GPIO_Init+0x236>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002730 <HAL_GPIO_Init+0x344>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00d      	beq.n	800261e <HAL_GPIO_Init+0x232>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4b      	ldr	r2, [pc, #300]	@ (8002734 <HAL_GPIO_Init+0x348>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d007      	beq.n	800261a <HAL_GPIO_Init+0x22e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4a      	ldr	r2, [pc, #296]	@ (8002738 <HAL_GPIO_Init+0x34c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <HAL_GPIO_Init+0x22a>
 8002612:	2306      	movs	r3, #6
 8002614:	e00c      	b.n	8002630 <HAL_GPIO_Init+0x244>
 8002616:	2307      	movs	r3, #7
 8002618:	e00a      	b.n	8002630 <HAL_GPIO_Init+0x244>
 800261a:	2305      	movs	r3, #5
 800261c:	e008      	b.n	8002630 <HAL_GPIO_Init+0x244>
 800261e:	2304      	movs	r3, #4
 8002620:	e006      	b.n	8002630 <HAL_GPIO_Init+0x244>
 8002622:	2303      	movs	r3, #3
 8002624:	e004      	b.n	8002630 <HAL_GPIO_Init+0x244>
 8002626:	2302      	movs	r3, #2
 8002628:	e002      	b.n	8002630 <HAL_GPIO_Init+0x244>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_GPIO_Init+0x244>
 800262e:	2300      	movs	r3, #0
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	f002 0203 	and.w	r2, r2, #3
 8002636:	0092      	lsls	r2, r2, #2
 8002638:	4093      	lsls	r3, r2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002640:	4937      	ldr	r1, [pc, #220]	@ (8002720 <HAL_GPIO_Init+0x334>)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	3302      	adds	r3, #2
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800264e:	4b3b      	ldr	r3, [pc, #236]	@ (800273c <HAL_GPIO_Init+0x350>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002672:	4a32      	ldr	r2, [pc, #200]	@ (800273c <HAL_GPIO_Init+0x350>)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002678:	4b30      	ldr	r3, [pc, #192]	@ (800273c <HAL_GPIO_Init+0x350>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	43db      	mvns	r3, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800269c:	4a27      	ldr	r2, [pc, #156]	@ (800273c <HAL_GPIO_Init+0x350>)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026a2:	4b26      	ldr	r3, [pc, #152]	@ (800273c <HAL_GPIO_Init+0x350>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026c6:	4a1d      	ldr	r2, [pc, #116]	@ (800273c <HAL_GPIO_Init+0x350>)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <HAL_GPIO_Init+0x350>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026f0:	4a12      	ldr	r2, [pc, #72]	@ (800273c <HAL_GPIO_Init+0x350>)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3301      	adds	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa22 f303 	lsr.w	r3, r2, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	f47f ae78 	bne.w	80023fc <HAL_GPIO_Init+0x10>
  }
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	40010000 	.word	0x40010000
 8002724:	48000400 	.word	0x48000400
 8002728:	48000800 	.word	0x48000800
 800272c:	48000c00 	.word	0x48000c00
 8002730:	48001000 	.word	0x48001000
 8002734:	48001400 	.word	0x48001400
 8002738:	48001800 	.word	0x48001800
 800273c:	40010400 	.word	0x40010400

08002740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
 800274c:	4613      	mov	r3, r2
 800274e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002750:	787b      	ldrb	r3, [r7, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800275c:	e002      	b.n	8002764 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800277a:	4b08      	ldr	r3, [pc, #32]	@ (800279c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002786:	4a05      	ldr	r2, [pc, #20]	@ (800279c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff f9a2 	bl	8001ad8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e08f      	b.n	80028d2 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d106      	bne.n	80027d2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff f9f3 	bl	8001bb8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2202      	movs	r2, #2
 80027d6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d004      	beq.n	80027f4 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027f2:	d103      	bne.n	80027fc <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 031e 	bic.w	r3, r3, #30
 80027fa:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002804:	4293      	cmp	r3, r2
 8002806:	d005      	beq.n	8002814 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800280e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002812:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4b31      	ldr	r3, [pc, #196]	@ (80028dc <HAL_LPTIM_Init+0x13c>)
 8002818:	4013      	ands	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002824:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800282a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8002830:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8002836:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d107      	bne.n	8002856 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800284e:	4313      	orrs	r3, r2
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d004      	beq.n	8002868 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002862:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002866:	d107      	bne.n	8002878 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002870:	4313      	orrs	r3, r2
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002880:	4293      	cmp	r3, r2
 8002882:	d00a      	beq.n	800289a <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800288c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002892:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a0e      	ldr	r2, [pc, #56]	@ (80028e0 <HAL_LPTIM_Init+0x140>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d108      	bne.n	80028be <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	621a      	str	r2, [r3, #32]
 80028bc:	e004      	b.n	80028c8 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028c6:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	ff19f1fe 	.word	0xff19f1fe
 80028e0:	40007c00 	.word	0x40007c00

080028e4 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2202      	movs	r2, #2
 80028f2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a37      	ldr	r2, [pc, #220]	@ (80029d8 <HAL_LPTIM_Counter_Start_IT+0xf4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d106      	bne.n	800290e <HAL_LPTIM_Counter_Start_IT+0x2a>
 8002900:	4b36      	ldr	r3, [pc, #216]	@ (80029dc <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	4a35      	ldr	r2, [pc, #212]	@ (80029dc <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6213      	str	r3, [r2, #32]
 800290c:	e005      	b.n	800291a <HAL_LPTIM_Counter_Start_IT+0x36>
 800290e:	4b33      	ldr	r3, [pc, #204]	@ (80029dc <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a32      	ldr	r2, [pc, #200]	@ (80029dc <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6213      	str	r3, [r2, #32]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d00c      	beq.n	800293c <HAL_LPTIM_Counter_Start_IT+0x58>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800292a:	d107      	bne.n	800293c <HAL_LPTIM_Counter_Start_IT+0x58>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 800293a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2210      	movs	r2, #16
 8002952:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800295c:	2110      	movs	r1, #16
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f926 	bl	8002bb0 <LPTIM_WaitForFlag>
 8002964:	4603      	mov	r3, r0
 8002966:	2b03      	cmp	r3, #3
 8002968:	d101      	bne.n	800296e <HAL_LPTIM_Counter_Start_IT+0x8a>
  {
    return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e02f      	b.n	80029ce <HAL_LPTIM_Counter_Start_IT+0xea>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f94e 	bl	8002c10 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f90d 	bl	8002b94 <HAL_LPTIM_GetState>
 800297a:	4603      	mov	r3, r0
 800297c:	2b03      	cmp	r3, #3
 800297e:	d101      	bne.n	8002984 <HAL_LPTIM_Counter_Start_IT+0xa0>
  {
    return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e024      	b.n	80029ce <HAL_LPTIM_Counter_Start_IT+0xea>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0210 	orr.w	r2, r2, #16
 8002992:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0202 	orr.w	r2, r2, #2
 80029a2:	609a      	str	r2, [r3, #8]
  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);

#endif
  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0204 	orr.w	r2, r2, #4
 80029c2:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40007c00 	.word	0x40007c00
 80029dc:	40010400 	.word	0x40010400

080029e0 <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	69db      	ldr	r3, [r3, #28]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d10d      	bne.n	8002a2c <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d106      	bne.n	8002a2c <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2201      	movs	r2, #1
 8002a24:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff f84c 	bl	8001ac4 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d10d      	bne.n	8002a56 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d106      	bne.n	8002a56 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff f825 	bl	8001aa0 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d10d      	bne.n	8002a80 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d106      	bne.n	8002a80 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2204      	movs	r2, #4
 8002a78:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f858 	bl	8002b30 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d10d      	bne.n	8002aaa <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d106      	bne.n	8002aaa <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f84d 	bl	8002b44 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d10d      	bne.n	8002ad4 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d106      	bne.n	8002ad4 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2210      	movs	r2, #16
 8002acc:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f842 	bl	8002b58 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d10d      	bne.n	8002afe <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d106      	bne.n	8002afe <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2220      	movs	r2, #32
 8002af6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f837 	bl	8002b6c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b08:	2b40      	cmp	r3, #64	@ 0x40
 8002b0a:	d10d      	bne.n	8002b28 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b16:	2b40      	cmp	r3, #64	@ 0x40
 8002b18:	d106      	bne.n	8002b28 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2240      	movs	r2, #64	@ 0x40
 8002b20:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f82c 	bl	8002b80 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002ba2:	b2db      	uxtb	r3, r3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8002bbe:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <LPTIM_WaitForFlag+0x58>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a12      	ldr	r2, [pc, #72]	@ (8002c0c <LPTIM_WaitForFlag+0x5c>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	0b9b      	lsrs	r3, r3, #14
 8002bca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	4013      	ands	r3, r2
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d002      	beq.n	8002bfa <LPTIM_WaitForFlag+0x4a>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ec      	bne.n	8002bd4 <LPTIM_WaitForFlag+0x24>

  return result;
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	20000004 	.word	0x20000004
 8002c0c:	d1b71759 	.word	0xd1b71759

08002c10 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	@ 0x30
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c20:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c22:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002c24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c26:	2301      	movs	r3, #1
 8002c28:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f383 8810 	msr	PRIMASK, r3
}
 8002c30:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a73      	ldr	r2, [pc, #460]	@ (8002e04 <LPTIM_Disable+0x1f4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <LPTIM_Disable+0x34>
 8002c3c:	4a72      	ldr	r2, [pc, #456]	@ (8002e08 <LPTIM_Disable+0x1f8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8002c42:	e00d      	b.n	8002c60 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002c44:	4b71      	ldr	r3, [pc, #452]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8002c50:	e006      	b.n	8002c60 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002c52:	4b6e      	ldr	r3, [pc, #440]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c58:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8002c5e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5d      	ldr	r2, [pc, #372]	@ (8002e04 <LPTIM_Disable+0x1f4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d003      	beq.n	8002c9a <LPTIM_Disable+0x8a>
 8002c92:	4a5d      	ldr	r2, [pc, #372]	@ (8002e08 <LPTIM_Disable+0x1f8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00d      	beq.n	8002cb4 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8002c98:	e019      	b.n	8002cce <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8002c9a:	4b5c      	ldr	r3, [pc, #368]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9e:	4a5b      	ldr	r2, [pc, #364]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002ca0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ca4:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8002ca6:	4b59      	ldr	r3, [pc, #356]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002caa:	4a58      	ldr	r2, [pc, #352]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002cac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cb0:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 8002cb2:	e00c      	b.n	8002cce <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8002cb4:	4b55      	ldr	r3, [pc, #340]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb8:	4a54      	ldr	r2, [pc, #336]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002cba:	f043 0320 	orr.w	r3, r3, #32
 8002cbe:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8002cc0:	4b52      	ldr	r3, [pc, #328]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc4:	4a51      	ldr	r2, [pc, #324]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002cc6:	f023 0320 	bic.w	r3, r3, #32
 8002cca:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 8002ccc:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <LPTIM_Disable+0xca>
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d075      	beq.n	8002dc6 <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a49      	ldr	r2, [pc, #292]	@ (8002e04 <LPTIM_Disable+0x1f4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d003      	beq.n	8002cec <LPTIM_Disable+0xdc>
 8002ce4:	4a48      	ldr	r2, [pc, #288]	@ (8002e08 <LPTIM_Disable+0x1f8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d009      	beq.n	8002cfe <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8002cea:	e011      	b.n	8002d10 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8002cec:	4b47      	ldr	r3, [pc, #284]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf2:	4a46      	ldr	r2, [pc, #280]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002cf4:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8002cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8002cfc:	e008      	b.n	8002d10 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8002cfe:	4b43      	ldr	r3, [pc, #268]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d04:	4a41      	ldr	r2, [pc, #260]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002d06:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002d0a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8002d0e:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01a      	beq.n	8002d4c <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8002d2e:	2108      	movs	r1, #8
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ff3d 	bl	8002bb0 <LPTIM_WaitForFlag>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d103      	bne.n	8002d44 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2203      	movs	r2, #3
 8002d40:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2208      	movs	r2, #8
 8002d4a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01a      	beq.n	8002d88 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002d6a:	2110      	movs	r1, #16
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff1f 	bl	8002bb0 <LPTIM_WaitForFlag>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d103      	bne.n	8002d80 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2210      	movs	r2, #16
 8002d86:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002e04 <LPTIM_Disable+0x1f4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d003      	beq.n	8002d9a <LPTIM_Disable+0x18a>
 8002d92:	4a1d      	ldr	r2, [pc, #116]	@ (8002e08 <LPTIM_Disable+0x1f8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00b      	beq.n	8002db0 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8002d98:	e015      	b.n	8002dc6 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8002d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002da4:	4919      	ldr	r1, [pc, #100]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8002dae:	e00a      	b.n	8002dc6 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8002db0:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dba:	4914      	ldr	r1, [pc, #80]	@ (8002e0c <LPTIM_Disable+0x1fc>)
 8002dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8002dc4:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ddc:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	621a      	str	r2, [r3, #32]
 8002dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f383 8810 	msr	PRIMASK, r3
}
 8002df8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002dfa:	bf00      	nop
 8002dfc:	3730      	adds	r7, #48	@ 0x30
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40007c00 	.word	0x40007c00
 8002e08:	40009400 	.word	0x40009400
 8002e0c:	40021000 	.word	0x40021000

08002e10 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e14:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a04      	ldr	r2, [pc, #16]	@ (8002e2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e1e:	6013      	str	r3, [r2, #0]
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40007000 	.word	0x40007000

08002e30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e34:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40007000 	.word	0x40007000

08002e4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e5a:	d130      	bne.n	8002ebe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e5c:	4b23      	ldr	r3, [pc, #140]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e68:	d038      	beq.n	8002edc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e6a:	4b20      	ldr	r3, [pc, #128]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e72:	4a1e      	ldr	r2, [pc, #120]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2232      	movs	r2, #50	@ 0x32
 8002e80:	fb02 f303 	mul.w	r3, r2, r3
 8002e84:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	0c9b      	lsrs	r3, r3, #18
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e90:	e002      	b.n	8002e98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e98:	4b14      	ldr	r3, [pc, #80]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea4:	d102      	bne.n	8002eac <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f2      	bne.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eac:	4b0f      	ldr	r3, [pc, #60]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb8:	d110      	bne.n	8002edc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e00f      	b.n	8002ede <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eca:	d007      	beq.n	8002edc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ecc:	4b07      	ldr	r3, [pc, #28]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ed4:	4a05      	ldr	r2, [pc, #20]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	20000004 	.word	0x20000004
 8002ef4:	431bde83 	.word	0x431bde83

08002ef8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8002f02:	4b11      	ldr	r3, [pc, #68]	@ (8002f48 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 0307 	bic.w	r3, r3, #7
 8002f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8002f48 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002f12:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	4a0d      	ldr	r2, [pc, #52]	@ (8002f4c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002f18:	f043 0304 	orr.w	r3, r3, #4
 8002f1c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002f24:	bf30      	wfi
 8002f26:	e002      	b.n	8002f2e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002f28:	bf40      	sev
    __WFE();
 8002f2a:	bf20      	wfe
    __WFE();
 8002f2c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002f2e:	4b07      	ldr	r3, [pc, #28]	@ (8002f4c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	4a06      	ldr	r2, [pc, #24]	@ (8002f4c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	6113      	str	r3, [r2, #16]
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e3ca      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f62:	4b97      	ldr	r3, [pc, #604]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f6c:	4b94      	ldr	r3, [pc, #592]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80e4 	beq.w	800314c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <HAL_RCC_OscConfig+0x4a>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2b0c      	cmp	r3, #12
 8002f8e:	f040 808b 	bne.w	80030a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	f040 8087 	bne.w	80030a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f9a:	4b89      	ldr	r3, [pc, #548]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x62>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e3a2      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	4b82      	ldr	r3, [pc, #520]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <HAL_RCC_OscConfig+0x7c>
 8002fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fca:	e005      	b.n	8002fd8 <HAL_RCC_OscConfig+0x88>
 8002fcc:	4b7c      	ldr	r3, [pc, #496]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d223      	bcs.n	8003024 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fd55 	bl	8003a90 <RCC_SetFlashLatencyFromMSIRange>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e383      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff0:	4b73      	ldr	r3, [pc, #460]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a72      	ldr	r2, [pc, #456]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	f043 0308 	orr.w	r3, r3, #8
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b70      	ldr	r3, [pc, #448]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	496d      	ldr	r1, [pc, #436]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800300e:	4b6c      	ldr	r3, [pc, #432]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	4968      	ldr	r1, [pc, #416]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
 8003022:	e025      	b.n	8003070 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003024:	4b66      	ldr	r3, [pc, #408]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a65      	ldr	r2, [pc, #404]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800302a:	f043 0308 	orr.w	r3, r3, #8
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b63      	ldr	r3, [pc, #396]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4960      	ldr	r1, [pc, #384]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003042:	4b5f      	ldr	r3, [pc, #380]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	495b      	ldr	r1, [pc, #364]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fd15 	bl	8003a90 <RCC_SetFlashLatencyFromMSIRange>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e343      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003070:	f000 fc4a 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b52      	ldr	r3, [pc, #328]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	4950      	ldr	r1, [pc, #320]	@ (80031c4 <HAL_RCC_OscConfig+0x274>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
 800308c:	4a4e      	ldr	r2, [pc, #312]	@ (80031c8 <HAL_RCC_OscConfig+0x278>)
 800308e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003090:	4b4e      	ldr	r3, [pc, #312]	@ (80031cc <HAL_RCC_OscConfig+0x27c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7fe fff7 	bl	8002088 <HAL_InitTick>
 800309a:	4603      	mov	r3, r0
 800309c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d052      	beq.n	800314a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	e327      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d032      	beq.n	8003116 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030b0:	4b43      	ldr	r3, [pc, #268]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a42      	ldr	r2, [pc, #264]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030bc:	f7ff f834 	bl	8002128 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c4:	f7ff f830 	bl	8002128 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e310      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030d6:	4b3a      	ldr	r3, [pc, #232]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e2:	4b37      	ldr	r3, [pc, #220]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a36      	ldr	r2, [pc, #216]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030e8:	f043 0308 	orr.w	r3, r3, #8
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b34      	ldr	r3, [pc, #208]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4931      	ldr	r1, [pc, #196]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003100:	4b2f      	ldr	r3, [pc, #188]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	492c      	ldr	r1, [pc, #176]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003110:	4313      	orrs	r3, r2
 8003112:	604b      	str	r3, [r1, #4]
 8003114:	e01a      	b.n	800314c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003116:	4b2a      	ldr	r3, [pc, #168]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a29      	ldr	r2, [pc, #164]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003122:	f7ff f801 	bl	8002128 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800312a:	f7fe fffd 	bl	8002128 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e2dd      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800313c:	4b20      	ldr	r3, [pc, #128]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f0      	bne.n	800312a <HAL_RCC_OscConfig+0x1da>
 8003148:	e000      	b.n	800314c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800314a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d074      	beq.n	8003242 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b08      	cmp	r3, #8
 800315c:	d005      	beq.n	800316a <HAL_RCC_OscConfig+0x21a>
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2b0c      	cmp	r3, #12
 8003162:	d10e      	bne.n	8003182 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d10b      	bne.n	8003182 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316a:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d064      	beq.n	8003240 <HAL_RCC_OscConfig+0x2f0>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d160      	bne.n	8003240 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e2ba      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800318a:	d106      	bne.n	800319a <HAL_RCC_OscConfig+0x24a>
 800318c:	4b0c      	ldr	r3, [pc, #48]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0b      	ldr	r2, [pc, #44]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	e026      	b.n	80031e8 <HAL_RCC_OscConfig+0x298>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031a2:	d115      	bne.n	80031d0 <HAL_RCC_OscConfig+0x280>
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a05      	ldr	r2, [pc, #20]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b03      	ldr	r3, [pc, #12]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a02      	ldr	r2, [pc, #8]	@ (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	e014      	b.n	80031e8 <HAL_RCC_OscConfig+0x298>
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	08007138 	.word	0x08007138
 80031c8:	20000004 	.word	0x20000004
 80031cc:	20000008 	.word	0x20000008
 80031d0:	4ba0      	ldr	r3, [pc, #640]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a9f      	ldr	r2, [pc, #636]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b9d      	ldr	r3, [pc, #628]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a9c      	ldr	r2, [pc, #624]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80031e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe ff9a 	bl	8002128 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f8:	f7fe ff96 	bl	8002128 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	@ 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e276      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320a:	4b92      	ldr	r3, [pc, #584]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x2a8>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe ff86 	bl	8002128 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003220:	f7fe ff82 	bl	8002128 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	@ 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e262      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003232:	4b88      	ldr	r3, [pc, #544]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x2d0>
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d060      	beq.n	8003310 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	2b04      	cmp	r3, #4
 8003252:	d005      	beq.n	8003260 <HAL_RCC_OscConfig+0x310>
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d119      	bne.n	800328e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d116      	bne.n	800328e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003260:	4b7c      	ldr	r3, [pc, #496]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x328>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e23f      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b76      	ldr	r3, [pc, #472]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	4973      	ldr	r1, [pc, #460]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800328c:	e040      	b.n	8003310 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d023      	beq.n	80032de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003296:	4b6f      	ldr	r3, [pc, #444]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6e      	ldr	r2, [pc, #440]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fe ff41 	bl	8002128 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fe ff3d 	bl	8002128 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e21d      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032bc:	4b65      	ldr	r3, [pc, #404]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b62      	ldr	r3, [pc, #392]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	061b      	lsls	r3, r3, #24
 80032d6:	495f      	ldr	r1, [pc, #380]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
 80032dc:	e018      	b.n	8003310 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032de:	4b5d      	ldr	r3, [pc, #372]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80032e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fe ff1d 	bl	8002128 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f2:	f7fe ff19 	bl	8002128 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e1f9      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003304:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d03c      	beq.n	8003396 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01c      	beq.n	800335e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003324:	4b4b      	ldr	r3, [pc, #300]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800332a:	4a4a      	ldr	r2, [pc, #296]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fe fef8 	bl	8002128 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333c:	f7fe fef4 	bl	8002128 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e1d4      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800334e:	4b41      	ldr	r3, [pc, #260]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003350:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ef      	beq.n	800333c <HAL_RCC_OscConfig+0x3ec>
 800335c:	e01b      	b.n	8003396 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335e:	4b3d      	ldr	r3, [pc, #244]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003364:	4a3b      	ldr	r2, [pc, #236]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003366:	f023 0301 	bic.w	r3, r3, #1
 800336a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7fe fedb 	bl	8002128 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003376:	f7fe fed7 	bl	8002128 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e1b7      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003388:	4b32      	ldr	r3, [pc, #200]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 800338a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1ef      	bne.n	8003376 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80a6 	beq.w	80034f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a4:	2300      	movs	r3, #0
 80033a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10d      	bne.n	80033d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b4:	4b27      	ldr	r3, [pc, #156]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b8:	4a26      	ldr	r2, [pc, #152]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80033ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033be:	6593      	str	r3, [r2, #88]	@ 0x58
 80033c0:	4b24      	ldr	r3, [pc, #144]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 80033c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033cc:	2301      	movs	r3, #1
 80033ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d0:	4b21      	ldr	r3, [pc, #132]	@ (8003458 <HAL_RCC_OscConfig+0x508>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d118      	bne.n	800340e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003458 <HAL_RCC_OscConfig+0x508>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003458 <HAL_RCC_OscConfig+0x508>)
 80033e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e8:	f7fe fe9e 	bl	8002128 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f0:	f7fe fe9a 	bl	8002128 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e17a      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003402:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <HAL_RCC_OscConfig+0x508>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d108      	bne.n	8003428 <HAL_RCC_OscConfig+0x4d8>
 8003416:	4b0f      	ldr	r3, [pc, #60]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341c:	4a0d      	ldr	r2, [pc, #52]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003426:	e029      	b.n	800347c <HAL_RCC_OscConfig+0x52c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b05      	cmp	r3, #5
 800342e:	d115      	bne.n	800345c <HAL_RCC_OscConfig+0x50c>
 8003430:	4b08      	ldr	r3, [pc, #32]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003436:	4a07      	ldr	r2, [pc, #28]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003440:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003446:	4a03      	ldr	r2, [pc, #12]	@ (8003454 <HAL_RCC_OscConfig+0x504>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003450:	e014      	b.n	800347c <HAL_RCC_OscConfig+0x52c>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	40007000 	.word	0x40007000
 800345c:	4b9c      	ldr	r3, [pc, #624]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003462:	4a9b      	ldr	r2, [pc, #620]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800346c:	4b98      	ldr	r3, [pc, #608]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003472:	4a97      	ldr	r2, [pc, #604]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d016      	beq.n	80034b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fe fe50 	bl	8002128 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348c:	f7fe fe4c 	bl	8002128 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e12a      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a2:	4b8b      	ldr	r3, [pc, #556]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ed      	beq.n	800348c <HAL_RCC_OscConfig+0x53c>
 80034b0:	e015      	b.n	80034de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b2:	f7fe fe39 	bl	8002128 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fe fe35 	bl	8002128 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e113      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d0:	4b7f      	ldr	r3, [pc, #508]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ed      	bne.n	80034ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034de:	7ffb      	ldrb	r3, [r7, #31]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e4:	4b7a      	ldr	r3, [pc, #488]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e8:	4a79      	ldr	r2, [pc, #484]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80034ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80fe 	beq.w	80036f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fe:	2b02      	cmp	r3, #2
 8003500:	f040 80d0 	bne.w	80036a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003504:	4b72      	ldr	r3, [pc, #456]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 0203 	and.w	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	429a      	cmp	r2, r3
 8003516:	d130      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	3b01      	subs	r3, #1
 8003524:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d127      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003534:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d11f      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003544:	2a07      	cmp	r2, #7
 8003546:	bf14      	ite	ne
 8003548:	2201      	movne	r2, #1
 800354a:	2200      	moveq	r2, #0
 800354c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800354e:	4293      	cmp	r3, r2
 8003550:	d113      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	3b01      	subs	r3, #1
 8003560:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d109      	bne.n	800357a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	3b01      	subs	r3, #1
 8003574:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d06e      	beq.n	8003658 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b0c      	cmp	r3, #12
 800357e:	d069      	beq.n	8003654 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003580:	4b53      	ldr	r3, [pc, #332]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800358c:	4b50      	ldr	r3, [pc, #320]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0ad      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800359c:	4b4c      	ldr	r3, [pc, #304]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a4b      	ldr	r2, [pc, #300]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80035a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035a8:	f7fe fdbe 	bl	8002128 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe fdba 	bl	8002128 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e09a      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c2:	4b43      	ldr	r3, [pc, #268]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ce:	4b40      	ldr	r3, [pc, #256]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	4b40      	ldr	r3, [pc, #256]	@ (80036d4 <HAL_RCC_OscConfig+0x784>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035de:	3a01      	subs	r2, #1
 80035e0:	0112      	lsls	r2, r2, #4
 80035e2:	4311      	orrs	r1, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035e8:	0212      	lsls	r2, r2, #8
 80035ea:	4311      	orrs	r1, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035f0:	0852      	lsrs	r2, r2, #1
 80035f2:	3a01      	subs	r2, #1
 80035f4:	0552      	lsls	r2, r2, #21
 80035f6:	4311      	orrs	r1, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035fc:	0852      	lsrs	r2, r2, #1
 80035fe:	3a01      	subs	r2, #1
 8003600:	0652      	lsls	r2, r2, #25
 8003602:	4311      	orrs	r1, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003608:	0912      	lsrs	r2, r2, #4
 800360a:	0452      	lsls	r2, r2, #17
 800360c:	430a      	orrs	r2, r1
 800360e:	4930      	ldr	r1, [pc, #192]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003610:	4313      	orrs	r3, r2
 8003612:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003614:	4b2e      	ldr	r3, [pc, #184]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a2d      	ldr	r2, [pc, #180]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 800361a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800361e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003620:	4b2b      	ldr	r3, [pc, #172]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4a2a      	ldr	r2, [pc, #168]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800362a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800362c:	f7fe fd7c 	bl	8002128 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003634:	f7fe fd78 	bl	8002128 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e058      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003646:	4b22      	ldr	r3, [pc, #136]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003652:	e050      	b.n	80036f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e04f      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003658:	4b1d      	ldr	r3, [pc, #116]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d148      	bne.n	80036f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003664:	4b1a      	ldr	r3, [pc, #104]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a19      	ldr	r2, [pc, #100]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 800366a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800366e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003670:	4b17      	ldr	r3, [pc, #92]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a16      	ldr	r2, [pc, #88]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003676:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800367a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800367c:	f7fe fd54 	bl	8002128 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe fd50 	bl	8002128 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e030      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003696:	4b0e      	ldr	r3, [pc, #56]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x734>
 80036a2:	e028      	b.n	80036f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d023      	beq.n	80036f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036aa:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a08      	ldr	r2, [pc, #32]	@ (80036d0 <HAL_RCC_OscConfig+0x780>)
 80036b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b6:	f7fe fd37 	bl	8002128 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036bc:	e00c      	b.n	80036d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036be:	f7fe fd33 	bl	8002128 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d905      	bls.n	80036d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e013      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
 80036d0:	40021000 	.word	0x40021000
 80036d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d8:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_RCC_OscConfig+0x7b0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ec      	bne.n	80036be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036e4:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <HAL_RCC_OscConfig+0x7b0>)
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	4905      	ldr	r1, [pc, #20]	@ (8003700 <HAL_RCC_OscConfig+0x7b0>)
 80036ea:	4b06      	ldr	r3, [pc, #24]	@ (8003704 <HAL_RCC_OscConfig+0x7b4>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	60cb      	str	r3, [r1, #12]
 80036f0:	e001      	b.n	80036f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3720      	adds	r7, #32
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	feeefffc 	.word	0xfeeefffc

08003708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0e7      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800371c:	4b75      	ldr	r3, [pc, #468]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d910      	bls.n	800374c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b72      	ldr	r3, [pc, #456]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 0207 	bic.w	r2, r3, #7
 8003732:	4970      	ldr	r1, [pc, #448]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b6e      	ldr	r3, [pc, #440]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0cf      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d010      	beq.n	800377a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	4b66      	ldr	r3, [pc, #408]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003764:	429a      	cmp	r2, r3
 8003766:	d908      	bls.n	800377a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003768:	4b63      	ldr	r3, [pc, #396]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4960      	ldr	r1, [pc, #384]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d04c      	beq.n	8003820 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378e:	4b5a      	ldr	r3, [pc, #360]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d121      	bne.n	80037de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e0a6      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d107      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a6:	4b54      	ldr	r3, [pc, #336]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d115      	bne.n	80037de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e09a      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037be:	4b4e      	ldr	r3, [pc, #312]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e08e      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ce:	4b4a      	ldr	r3, [pc, #296]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e086      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037de:	4b46      	ldr	r3, [pc, #280]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f023 0203 	bic.w	r2, r3, #3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4943      	ldr	r1, [pc, #268]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f0:	f7fe fc9a 	bl	8002128 <HAL_GetTick>
 80037f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	e00a      	b.n	800380e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f8:	f7fe fc96 	bl	8002128 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e06e      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380e:	4b3a      	ldr	r3, [pc, #232]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 020c 	and.w	r2, r3, #12
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	429a      	cmp	r2, r3
 800381e:	d1eb      	bne.n	80037f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d010      	beq.n	800384e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	4b31      	ldr	r3, [pc, #196]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003838:	429a      	cmp	r2, r3
 800383a:	d208      	bcs.n	800384e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383c:	4b2e      	ldr	r3, [pc, #184]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	492b      	ldr	r1, [pc, #172]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800384e:	4b29      	ldr	r3, [pc, #164]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d210      	bcs.n	800387e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385c:	4b25      	ldr	r3, [pc, #148]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f023 0207 	bic.w	r2, r3, #7
 8003864:	4923      	ldr	r1, [pc, #140]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386c:	4b21      	ldr	r3, [pc, #132]	@ (80038f4 <HAL_RCC_ClockConfig+0x1ec>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d001      	beq.n	800387e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e036      	b.n	80038ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388a:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	4918      	ldr	r1, [pc, #96]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003898:	4313      	orrs	r3, r2
 800389a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d009      	beq.n	80038bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038a8:	4b13      	ldr	r3, [pc, #76]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4910      	ldr	r1, [pc, #64]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038bc:	f000 f824 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	490b      	ldr	r1, [pc, #44]	@ (80038fc <HAL_RCC_ClockConfig+0x1f4>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	f003 031f 	and.w	r3, r3, #31
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
 80038d8:	4a09      	ldr	r2, [pc, #36]	@ (8003900 <HAL_RCC_ClockConfig+0x1f8>)
 80038da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038dc:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <HAL_RCC_ClockConfig+0x1fc>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe fbd1 	bl	8002088 <HAL_InitTick>
 80038e6:	4603      	mov	r3, r0
 80038e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80038ea:	7afb      	ldrb	r3, [r7, #11]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40022000 	.word	0x40022000
 80038f8:	40021000 	.word	0x40021000
 80038fc:	08007138 	.word	0x08007138
 8003900:	20000004 	.word	0x20000004
 8003904:	20000008 	.word	0x20000008

08003908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	@ 0x24
 800390c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003916:	4b3e      	ldr	r3, [pc, #248]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003920:	4b3b      	ldr	r3, [pc, #236]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x34>
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d121      	bne.n	800397a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d11e      	bne.n	800397a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800393c:	4b34      	ldr	r3, [pc, #208]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d107      	bne.n	8003958 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003948:	4b31      	ldr	r3, [pc, #196]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800394a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	e005      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003958:	4b2d      	ldr	r3, [pc, #180]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003964:	4a2b      	ldr	r2, [pc, #172]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10d      	bne.n	8003990 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003978:	e00a      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b04      	cmp	r3, #4
 800397e:	d102      	bne.n	8003986 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003980:	4b25      	ldr	r3, [pc, #148]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003982:	61bb      	str	r3, [r7, #24]
 8003984:	e004      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d101      	bne.n	8003990 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800398c:	4b23      	ldr	r3, [pc, #140]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x114>)
 800398e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b0c      	cmp	r3, #12
 8003994:	d134      	bne.n	8003a00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003996:	4b1e      	ldr	r3, [pc, #120]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d003      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0xa6>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d003      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0xac>
 80039ac:	e005      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x110>)
 80039b0:	617b      	str	r3, [r7, #20]
      break;
 80039b2:	e005      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039b4:	4b19      	ldr	r3, [pc, #100]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x114>)
 80039b6:	617b      	str	r3, [r7, #20]
      break;
 80039b8:	e002      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	617b      	str	r3, [r7, #20]
      break;
 80039be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039c0:	4b13      	ldr	r3, [pc, #76]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	091b      	lsrs	r3, r3, #4
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	3301      	adds	r3, #1
 80039cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039ce:	4b10      	ldr	r3, [pc, #64]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	0a1b      	lsrs	r3, r3, #8
 80039d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	fb03 f202 	mul.w	r2, r3, r2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	0e5b      	lsrs	r3, r3, #25
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	3301      	adds	r3, #1
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a00:	69bb      	ldr	r3, [r7, #24]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3724      	adds	r7, #36	@ 0x24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	08007150 	.word	0x08007150
 8003a18:	00f42400 	.word	0x00f42400
 8003a1c:	007a1200 	.word	0x007a1200

08003a20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a24:	4b03      	ldr	r3, [pc, #12]	@ (8003a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000004 	.word	0x20000004

08003a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a3c:	f7ff fff0 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a40:	4602      	mov	r2, r0
 8003a42:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	0a1b      	lsrs	r3, r3, #8
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4904      	ldr	r1, [pc, #16]	@ (8003a60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a4e:	5ccb      	ldrb	r3, [r1, r3]
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	08007148 	.word	0x08007148

08003a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a68:	f7ff ffda 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	0adb      	lsrs	r3, r3, #11
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	4904      	ldr	r1, [pc, #16]	@ (8003a8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a7a:	5ccb      	ldrb	r3, [r1, r3]
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	08007148 	.word	0x08007148

08003a90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003aa8:	f7ff f9c2 	bl	8002e30 <HAL_PWREx_GetVoltageRange>
 8003aac:	6178      	str	r0, [r7, #20]
 8003aae:	e014      	b.n	8003ada <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ab0:	4b25      	ldr	r3, [pc, #148]	@ (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab4:	4a24      	ldr	r2, [pc, #144]	@ (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003abc:	4b22      	ldr	r3, [pc, #136]	@ (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ac8:	f7ff f9b2 	bl	8002e30 <HAL_PWREx_GetVoltageRange>
 8003acc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ace:	4b1e      	ldr	r3, [pc, #120]	@ (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ad8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae0:	d10b      	bne.n	8003afa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b80      	cmp	r3, #128	@ 0x80
 8003ae6:	d919      	bls.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2ba0      	cmp	r3, #160	@ 0xa0
 8003aec:	d902      	bls.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aee:	2302      	movs	r3, #2
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	e013      	b.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003af4:	2301      	movs	r3, #1
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	e010      	b.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b80      	cmp	r3, #128	@ 0x80
 8003afe:	d902      	bls.n	8003b06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b00:	2303      	movs	r3, #3
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	e00a      	b.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b80      	cmp	r3, #128	@ 0x80
 8003b0a:	d102      	bne.n	8003b12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	e004      	b.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b70      	cmp	r3, #112	@ 0x70
 8003b16:	d101      	bne.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b18:	2301      	movs	r3, #1
 8003b1a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 0207 	bic.w	r2, r3, #7
 8003b24:	4909      	ldr	r1, [pc, #36]	@ (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b2c:	4b07      	ldr	r3, [pc, #28]	@ (8003b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d001      	beq.n	8003b3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40022000 	.word	0x40022000

08003b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b58:	2300      	movs	r3, #0
 8003b5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d041      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b74:	d02a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b7a:	d824      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b80:	d008      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b86:	d81e      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b90:	d010      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b92:	e018      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b94:	4b86      	ldr	r3, [pc, #536]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4a85      	ldr	r2, [pc, #532]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ba0:	e015      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fabb 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bb2:	e00c      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3320      	adds	r3, #32
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fba6 	bl	800430c <RCCEx_PLLSAI2_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bc4:	e003      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	74fb      	strb	r3, [r7, #19]
      break;
 8003bca:	e000      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bce:	7cfb      	ldrb	r3, [r7, #19]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10b      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bd4:	4b76      	ldr	r3, [pc, #472]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be2:	4973      	ldr	r1, [pc, #460]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bea:	e001      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d041      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c04:	d02a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c0a:	d824      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c10:	d008      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c16:	d81e      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c20:	d010      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c22:	e018      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c24:	4b62      	ldr	r3, [pc, #392]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4a61      	ldr	r2, [pc, #388]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c30:	e015      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3304      	adds	r3, #4
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fa73 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c42:	e00c      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3320      	adds	r3, #32
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fb5e 	bl	800430c <RCCEx_PLLSAI2_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c54:	e003      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	74fb      	strb	r3, [r7, #19]
      break;
 8003c5a:	e000      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c5e:	7cfb      	ldrb	r3, [r7, #19]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c64:	4b52      	ldr	r3, [pc, #328]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c72:	494f      	ldr	r1, [pc, #316]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c7a:	e001      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7c:	7cfb      	ldrb	r3, [r7, #19]
 8003c7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80a0 	beq.w	8003dce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c92:	4b47      	ldr	r3, [pc, #284]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca8:	4b41      	ldr	r3, [pc, #260]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cac:	4a40      	ldr	r2, [pc, #256]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a3a      	ldr	r2, [pc, #232]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd0:	f7fe fa2a 	bl	8002128 <HAL_GetTick>
 8003cd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cd6:	e009      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd8:	f7fe fa26 	bl	8002128 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	74fb      	strb	r3, [r7, #19]
        break;
 8003cea:	e005      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cec:	4b31      	ldr	r3, [pc, #196]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ef      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003cf8:	7cfb      	ldrb	r3, [r7, #19]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d15c      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01f      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d019      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d1c:	4b24      	ldr	r3, [pc, #144]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d28:	4b21      	ldr	r3, [pc, #132]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2e:	4a20      	ldr	r2, [pc, #128]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d38:	4b1d      	ldr	r3, [pc, #116]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d48:	4a19      	ldr	r2, [pc, #100]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d016      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fe f9e5 	bl	8002128 <HAL_GetTick>
 8003d5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d60:	e00b      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fe f9e1 	bl	8002128 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d902      	bls.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	74fb      	strb	r3, [r7, #19]
            break;
 8003d78:	e006      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0ec      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10c      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d8e:	4b08      	ldr	r3, [pc, #32]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d9e:	4904      	ldr	r1, [pc, #16]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003da6:	e009      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	74bb      	strb	r3, [r7, #18]
 8003dac:	e006      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dbc:	7c7b      	ldrb	r3, [r7, #17]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc2:	4b9e      	ldr	r3, [pc, #632]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc6:	4a9d      	ldr	r2, [pc, #628]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dda:	4b98      	ldr	r3, [pc, #608]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de0:	f023 0203 	bic.w	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de8:	4994      	ldr	r1, [pc, #592]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dfc:	4b8f      	ldr	r3, [pc, #572]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e02:	f023 020c 	bic.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0a:	498c      	ldr	r1, [pc, #560]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e1e:	4b87      	ldr	r3, [pc, #540]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	4983      	ldr	r1, [pc, #524]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e40:	4b7e      	ldr	r3, [pc, #504]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	497b      	ldr	r1, [pc, #492]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e62:	4b76      	ldr	r3, [pc, #472]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e70:	4972      	ldr	r1, [pc, #456]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e84:	4b6d      	ldr	r3, [pc, #436]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e92:	496a      	ldr	r1, [pc, #424]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ea6:	4b65      	ldr	r3, [pc, #404]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb4:	4961      	ldr	r1, [pc, #388]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ec8:	4b5c      	ldr	r3, [pc, #368]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ece:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed6:	4959      	ldr	r1, [pc, #356]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eea:	4b54      	ldr	r3, [pc, #336]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef8:	4950      	ldr	r1, [pc, #320]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f0c:	4b4b      	ldr	r3, [pc, #300]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1a:	4948      	ldr	r1, [pc, #288]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f2e:	4b43      	ldr	r3, [pc, #268]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3c:	493f      	ldr	r1, [pc, #252]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d028      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f50:	4b3a      	ldr	r3, [pc, #232]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f5e:	4937      	ldr	r1, [pc, #220]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f70:	4b32      	ldr	r3, [pc, #200]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	4a31      	ldr	r2, [pc, #196]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f7a:	60d3      	str	r3, [r2, #12]
 8003f7c:	e011      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f86:	d10c      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 f8c8 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
 8003fa0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d028      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fae:	4b23      	ldr	r3, [pc, #140]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fbc:	491f      	ldr	r1, [pc, #124]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fcc:	d106      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fce:	4b1b      	ldr	r3, [pc, #108]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fd8:	60d3      	str	r3, [r2, #12]
 8003fda:	e011      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	2101      	movs	r1, #1
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f899 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ff6:	7cfb      	ldrb	r3, [r7, #19]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d02b      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800400c:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004012:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800401a:	4908      	ldr	r1, [pc, #32]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004026:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800402a:	d109      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800402c:	4b03      	ldr	r3, [pc, #12]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a02      	ldr	r2, [pc, #8]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004036:	60d3      	str	r3, [r2, #12]
 8004038:	e014      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004044:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004048:	d10c      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	2101      	movs	r1, #1
 8004050:	4618      	mov	r0, r3
 8004052:	f000 f867 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d02f      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004070:	4b2b      	ldr	r3, [pc, #172]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004076:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800407e:	4928      	ldr	r1, [pc, #160]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800408a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800408e:	d10d      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f844 	bl	8004124 <RCCEx_PLLSAI1_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d014      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	74bb      	strb	r3, [r7, #18]
 80040aa:	e011      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3320      	adds	r3, #32
 80040ba:	2102      	movs	r1, #2
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 f925 	bl	800430c <RCCEx_PLLSAI2_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040dc:	4b10      	ldr	r3, [pc, #64]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040ea:	490d      	ldr	r1, [pc, #52]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00b      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040fe:	4b08      	ldr	r3, [pc, #32]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004104:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800410e:	4904      	ldr	r1, [pc, #16]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004116:	7cbb      	ldrb	r3, [r7, #18]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000

08004124 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004132:	4b75      	ldr	r3, [pc, #468]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d018      	beq.n	8004170 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800413e:	4b72      	ldr	r3, [pc, #456]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0203 	and.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d10d      	bne.n	800416a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
       ||
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004156:	4b6c      	ldr	r3, [pc, #432]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
       ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d047      	beq.n	80041fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	e044      	b.n	80041fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b03      	cmp	r3, #3
 8004176:	d018      	beq.n	80041aa <RCCEx_PLLSAI1_Config+0x86>
 8004178:	2b03      	cmp	r3, #3
 800417a:	d825      	bhi.n	80041c8 <RCCEx_PLLSAI1_Config+0xa4>
 800417c:	2b01      	cmp	r3, #1
 800417e:	d002      	beq.n	8004186 <RCCEx_PLLSAI1_Config+0x62>
 8004180:	2b02      	cmp	r3, #2
 8004182:	d009      	beq.n	8004198 <RCCEx_PLLSAI1_Config+0x74>
 8004184:	e020      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004186:	4b60      	ldr	r3, [pc, #384]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11d      	bne.n	80041ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004196:	e01a      	b.n	80041ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004198:	4b5b      	ldr	r3, [pc, #364]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d116      	bne.n	80041d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a8:	e013      	b.n	80041d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041aa:	4b57      	ldr	r3, [pc, #348]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041b6:	4b54      	ldr	r3, [pc, #336]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041c6:	e006      	b.n	80041d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      break;
 80041cc:	e004      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10d      	bne.n	80041fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041de:	4b4a      	ldr	r3, [pc, #296]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6819      	ldr	r1, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	430b      	orrs	r3, r1
 80041f4:	4944      	ldr	r1, [pc, #272]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d17d      	bne.n	80042fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004200:	4b41      	ldr	r3, [pc, #260]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a40      	ldr	r2, [pc, #256]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004206:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800420a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420c:	f7fd ff8c 	bl	8002128 <HAL_GetTick>
 8004210:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004212:	e009      	b.n	8004228 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004214:	f7fd ff88 	bl	8002128 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d902      	bls.n	8004228 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	73fb      	strb	r3, [r7, #15]
        break;
 8004226:	e005      	b.n	8004234 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004228:	4b37      	ldr	r3, [pc, #220]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ef      	bne.n	8004214 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d160      	bne.n	80042fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d111      	bne.n	8004264 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004240:	4b31      	ldr	r3, [pc, #196]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004248:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6892      	ldr	r2, [r2, #8]
 8004250:	0211      	lsls	r1, r2, #8
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68d2      	ldr	r2, [r2, #12]
 8004256:	0912      	lsrs	r2, r2, #4
 8004258:	0452      	lsls	r2, r2, #17
 800425a:	430a      	orrs	r2, r1
 800425c:	492a      	ldr	r1, [pc, #168]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425e:	4313      	orrs	r3, r2
 8004260:	610b      	str	r3, [r1, #16]
 8004262:	e027      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d112      	bne.n	8004290 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800426a:	4b27      	ldr	r3, [pc, #156]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004272:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6892      	ldr	r2, [r2, #8]
 800427a:	0211      	lsls	r1, r2, #8
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6912      	ldr	r2, [r2, #16]
 8004280:	0852      	lsrs	r2, r2, #1
 8004282:	3a01      	subs	r2, #1
 8004284:	0552      	lsls	r2, r2, #21
 8004286:	430a      	orrs	r2, r1
 8004288:	491f      	ldr	r1, [pc, #124]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428a:	4313      	orrs	r3, r2
 800428c:	610b      	str	r3, [r1, #16]
 800428e:	e011      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004290:	4b1d      	ldr	r3, [pc, #116]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004298:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6892      	ldr	r2, [r2, #8]
 80042a0:	0211      	lsls	r1, r2, #8
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6952      	ldr	r2, [r2, #20]
 80042a6:	0852      	lsrs	r2, r2, #1
 80042a8:	3a01      	subs	r2, #1
 80042aa:	0652      	lsls	r2, r2, #25
 80042ac:	430a      	orrs	r2, r1
 80042ae:	4916      	ldr	r1, [pc, #88]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042b4:	4b14      	ldr	r3, [pc, #80]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a13      	ldr	r2, [pc, #76]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fd ff32 	bl	8002128 <HAL_GetTick>
 80042c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042c6:	e009      	b.n	80042dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042c8:	f7fd ff2e 	bl	8002128 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d902      	bls.n	80042dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	73fb      	strb	r3, [r7, #15]
          break;
 80042da:	e005      	b.n	80042e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0ef      	beq.n	80042c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042ee:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	4904      	ldr	r1, [pc, #16]	@ (8004308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000

0800430c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800431a:	4b6a      	ldr	r3, [pc, #424]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d018      	beq.n	8004358 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004326:	4b67      	ldr	r3, [pc, #412]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0203 	and.w	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d10d      	bne.n	8004352 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
       ||
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800433e:	4b61      	ldr	r3, [pc, #388]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
       ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d047      	beq.n	80043e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
 8004356:	e044      	b.n	80043e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b03      	cmp	r3, #3
 800435e:	d018      	beq.n	8004392 <RCCEx_PLLSAI2_Config+0x86>
 8004360:	2b03      	cmp	r3, #3
 8004362:	d825      	bhi.n	80043b0 <RCCEx_PLLSAI2_Config+0xa4>
 8004364:	2b01      	cmp	r3, #1
 8004366:	d002      	beq.n	800436e <RCCEx_PLLSAI2_Config+0x62>
 8004368:	2b02      	cmp	r3, #2
 800436a:	d009      	beq.n	8004380 <RCCEx_PLLSAI2_Config+0x74>
 800436c:	e020      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800436e:	4b55      	ldr	r3, [pc, #340]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d11d      	bne.n	80043b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800437e:	e01a      	b.n	80043b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004380:	4b50      	ldr	r3, [pc, #320]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004388:	2b00      	cmp	r3, #0
 800438a:	d116      	bne.n	80043ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004390:	e013      	b.n	80043ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004392:	4b4c      	ldr	r3, [pc, #304]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800439e:	4b49      	ldr	r3, [pc, #292]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043ae:	e006      	b.n	80043be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
      break;
 80043b4:	e004      	b.n	80043c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043b6:	bf00      	nop
 80043b8:	e002      	b.n	80043c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043be:	bf00      	nop
    }

    if(status == HAL_OK)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10d      	bne.n	80043e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043c6:	4b3f      	ldr	r3, [pc, #252]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6819      	ldr	r1, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	430b      	orrs	r3, r1
 80043dc:	4939      	ldr	r1, [pc, #228]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d167      	bne.n	80044b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043e8:	4b36      	ldr	r3, [pc, #216]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a35      	ldr	r2, [pc, #212]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f4:	f7fd fe98 	bl	8002128 <HAL_GetTick>
 80043f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043fa:	e009      	b.n	8004410 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043fc:	f7fd fe94 	bl	8002128 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d902      	bls.n	8004410 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	73fb      	strb	r3, [r7, #15]
        break;
 800440e:	e005      	b.n	800441c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004410:	4b2c      	ldr	r3, [pc, #176]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ef      	bne.n	80043fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d14a      	bne.n	80044b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d111      	bne.n	800444c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004428:	4b26      	ldr	r3, [pc, #152]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6892      	ldr	r2, [r2, #8]
 8004438:	0211      	lsls	r1, r2, #8
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	68d2      	ldr	r2, [r2, #12]
 800443e:	0912      	lsrs	r2, r2, #4
 8004440:	0452      	lsls	r2, r2, #17
 8004442:	430a      	orrs	r2, r1
 8004444:	491f      	ldr	r1, [pc, #124]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004446:	4313      	orrs	r3, r2
 8004448:	614b      	str	r3, [r1, #20]
 800444a:	e011      	b.n	8004470 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800444c:	4b1d      	ldr	r3, [pc, #116]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004454:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6892      	ldr	r2, [r2, #8]
 800445c:	0211      	lsls	r1, r2, #8
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6912      	ldr	r2, [r2, #16]
 8004462:	0852      	lsrs	r2, r2, #1
 8004464:	3a01      	subs	r2, #1
 8004466:	0652      	lsls	r2, r2, #25
 8004468:	430a      	orrs	r2, r1
 800446a:	4916      	ldr	r1, [pc, #88]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800446c:	4313      	orrs	r3, r2
 800446e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004470:	4b14      	ldr	r3, [pc, #80]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a13      	ldr	r2, [pc, #76]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800447a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7fd fe54 	bl	8002128 <HAL_GetTick>
 8004480:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004482:	e009      	b.n	8004498 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004484:	f7fd fe50 	bl	8002128 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d902      	bls.n	8004498 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	73fb      	strb	r3, [r7, #15]
          break;
 8004496:	e005      	b.n	80044a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004498:	4b0a      	ldr	r3, [pc, #40]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ef      	beq.n	8004484 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044aa:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	4904      	ldr	r1, [pc, #16]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000

080044c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d079      	beq.n	80045ce <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fd fb9e 	bl	8001c30 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b10      	cmp	r3, #16
 8004508:	d058      	beq.n	80045bc <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	22ca      	movs	r2, #202	@ 0xca
 8004510:	625a      	str	r2, [r3, #36]	@ 0x24
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2253      	movs	r2, #83	@ 0x53
 8004518:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f880 	bl	8004620 <RTC_EnterInitMode>
 8004520:	4603      	mov	r3, r0
 8004522:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d127      	bne.n	800457a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800453c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6899      	ldr	r1, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	68d2      	ldr	r2, [r2, #12]
 8004564:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6919      	ldr	r1, [r3, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	041a      	lsls	r2, r3, #16
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f884 	bl	8004688 <RTC_ExitInitMode>
 8004580:	4603      	mov	r3, r0
 8004582:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d113      	bne.n	80045b2 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0203 	bic.w	r2, r2, #3
 8004598:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69da      	ldr	r2, [r3, #28]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	22ff      	movs	r2, #255	@ 0xff
 80045b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80045ba:	e001      	b.n	80045c0 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80045bc:	2300      	movs	r3, #0
 80045be:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a0d      	ldr	r2, [pc, #52]	@ (800461c <HAL_RTC_WaitForSynchro+0x44>)
 80045e6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80045e8:	f7fd fd9e 	bl	8002128 <HAL_GetTick>
 80045ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045ee:	e009      	b.n	8004604 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045f0:	f7fd fd9a 	bl	8002128 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045fe:	d901      	bls.n	8004604 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e007      	b.n	8004614 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ee      	beq.n	80045f0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	0003ff5f 	.word	0x0003ff5f

08004620 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d120      	bne.n	800467c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004642:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004644:	f7fd fd70 	bl	8002128 <HAL_GetTick>
 8004648:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800464a:	e00d      	b.n	8004668 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800464c:	f7fd fd6c 	bl	8002128 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800465a:	d905      	bls.n	8004668 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2203      	movs	r2, #3
 8004664:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <RTC_EnterInitMode+0x5c>
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	2b03      	cmp	r3, #3
 800467a:	d1e7      	bne.n	800464c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004694:	4b1a      	ldr	r3, [pc, #104]	@ (8004700 <RTC_ExitInitMode+0x78>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4a19      	ldr	r2, [pc, #100]	@ (8004700 <RTC_ExitInitMode+0x78>)
 800469a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800469e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80046a0:	4b17      	ldr	r3, [pc, #92]	@ (8004700 <RTC_ExitInitMode+0x78>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10c      	bne.n	80046c6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff ff93 	bl	80045d8 <HAL_RTC_WaitForSynchro>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01e      	beq.n	80046f6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2203      	movs	r2, #3
 80046bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	73fb      	strb	r3, [r7, #15]
 80046c4:	e017      	b.n	80046f6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80046c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004700 <RTC_ExitInitMode+0x78>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004700 <RTC_ExitInitMode+0x78>)
 80046cc:	f023 0320 	bic.w	r3, r3, #32
 80046d0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff ff80 	bl	80045d8 <HAL_RTC_WaitForSynchro>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2203      	movs	r2, #3
 80046e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80046ea:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <RTC_ExitInitMode+0x78>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	4a04      	ldr	r2, [pc, #16]	@ (8004700 <RTC_ExitInitMode+0x78>)
 80046f0:	f043 0320 	orr.w	r3, r3, #32
 80046f4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40002800 	.word	0x40002800

08004704 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800470c:	4b0f      	ldr	r3, [pc, #60]	@ (800474c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800470e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004712:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8004732:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f80b 	bl	8004750 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40010400 	.word	0x40010400

08004750 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e095      	b.n	80048a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477a:	2b00      	cmp	r3, #0
 800477c:	d108      	bne.n	8004790 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004786:	d009      	beq.n	800479c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	61da      	str	r2, [r3, #28]
 800478e:	e005      	b.n	800479c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fd fa74 	bl	8001ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047dc:	d902      	bls.n	80047e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e002      	b.n	80047ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80047f2:	d007      	beq.n	8004804 <HAL_SPI_Init+0xa0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047fc:	d002      	beq.n	8004804 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004846:	ea42 0103 	orr.w	r1, r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	0c1b      	lsrs	r3, r3, #16
 8004860:	f003 0204 	and.w	r2, r3, #4
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004880:	ea42 0103 	orr.w	r1, r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b088      	sub	sp, #32
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	4613      	mov	r3, r2
 80048b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ba:	f7fd fc35 	bl	8002128 <HAL_GetTick>
 80048be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80048c0:	88fb      	ldrh	r3, [r7, #6]
 80048c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d001      	beq.n	80048d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80048d0:	2302      	movs	r3, #2
 80048d2:	e15c      	b.n	8004b8e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_SPI_Transmit+0x36>
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e154      	b.n	8004b8e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_SPI_Transmit+0x48>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e14d      	b.n	8004b8e <HAL_SPI_Transmit+0x2e4>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2203      	movs	r2, #3
 80048fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	88fa      	ldrh	r2, [r7, #6]
 8004912:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	88fa      	ldrh	r2, [r7, #6]
 8004918:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004944:	d10f      	bne.n	8004966 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004954:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004964:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004970:	2b40      	cmp	r3, #64	@ 0x40
 8004972:	d007      	beq.n	8004984 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004982:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800498c:	d952      	bls.n	8004a34 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_SPI_Transmit+0xf2>
 8004996:	8b7b      	ldrh	r3, [r7, #26]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d145      	bne.n	8004a28 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a0:	881a      	ldrh	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ac:	1c9a      	adds	r2, r3, #2
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049c0:	e032      	b.n	8004a28 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d112      	bne.n	80049f6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d4:	881a      	ldrh	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e0:	1c9a      	adds	r2, r3, #2
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049f4:	e018      	b.n	8004a28 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f6:	f7fd fb97 	bl	8002128 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d803      	bhi.n	8004a0e <HAL_SPI_Transmit+0x164>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a0c:	d102      	bne.n	8004a14 <HAL_SPI_Transmit+0x16a>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d109      	bne.n	8004a28 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e0b2      	b.n	8004b8e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1c7      	bne.n	80049c2 <HAL_SPI_Transmit+0x118>
 8004a32:	e083      	b.n	8004b3c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_SPI_Transmit+0x198>
 8004a3c:	8b7b      	ldrh	r3, [r7, #26]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d177      	bne.n	8004b32 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d912      	bls.n	8004a72 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a50:	881a      	ldrh	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5c:	1c9a      	adds	r2, r3, #2
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b02      	subs	r3, #2
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a70:	e05f      	b.n	8004b32 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	330c      	adds	r3, #12
 8004a7c:	7812      	ldrb	r2, [r2, #0]
 8004a7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a98:	e04b      	b.n	8004b32 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d12b      	bne.n	8004b00 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d912      	bls.n	8004ad8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab6:	881a      	ldrh	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac2:	1c9a      	adds	r2, r3, #2
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b02      	subs	r3, #2
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ad6:	e02c      	b.n	8004b32 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	330c      	adds	r3, #12
 8004ae2:	7812      	ldrb	r2, [r2, #0]
 8004ae4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004afe:	e018      	b.n	8004b32 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b00:	f7fd fb12 	bl	8002128 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d803      	bhi.n	8004b18 <HAL_SPI_Transmit+0x26e>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b16:	d102      	bne.n	8004b1e <HAL_SPI_Transmit+0x274>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e02d      	b.n	8004b8e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1ae      	bne.n	8004a9a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	6839      	ldr	r1, [r7, #0]
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fcf5 	bl	8005530 <SPI_EndRxTxTransaction>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
  }
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b088      	sub	sp, #32
 8004b9a:	af02      	add	r7, sp, #8
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d001      	beq.n	8004bb6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e123      	b.n	8004dfe <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bbe:	d112      	bne.n	8004be6 <HAL_SPI_Receive+0x50>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10e      	bne.n	8004be6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2204      	movs	r2, #4
 8004bcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bd0:	88fa      	ldrh	r2, [r7, #6]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f912 	bl	8004e06 <HAL_SPI_TransmitReceive>
 8004be2:	4603      	mov	r3, r0
 8004be4:	e10b      	b.n	8004dfe <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004be6:	f7fd fa9f 	bl	8002128 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_SPI_Receive+0x62>
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e100      	b.n	8004dfe <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_SPI_Receive+0x74>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e0f9      	b.n	8004dfe <HAL_SPI_Receive+0x268>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2204      	movs	r2, #4
 8004c16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	88fa      	ldrh	r2, [r7, #6]
 8004c2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c5c:	d908      	bls.n	8004c70 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c6c:	605a      	str	r2, [r3, #4]
 8004c6e:	e007      	b.n	8004c80 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c7e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c88:	d10f      	bne.n	8004caa <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ca8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb4:	2b40      	cmp	r3, #64	@ 0x40
 8004cb6:	d007      	beq.n	8004cc8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cc6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cd0:	d875      	bhi.n	8004dbe <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004cd2:	e037      	b.n	8004d44 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d117      	bne.n	8004d12 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f103 020c 	add.w	r2, r3, #12
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	7812      	ldrb	r2, [r2, #0]
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004d10:	e018      	b.n	8004d44 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d12:	f7fd fa09 	bl	8002128 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d803      	bhi.n	8004d2a <HAL_SPI_Receive+0x194>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d28:	d102      	bne.n	8004d30 <HAL_SPI_Receive+0x19a>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e05c      	b.n	8004dfe <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1c1      	bne.n	8004cd4 <HAL_SPI_Receive+0x13e>
 8004d50:	e03b      	b.n	8004dca <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d115      	bne.n	8004d8c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6a:	b292      	uxth	r2, r2
 8004d6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d72:	1c9a      	adds	r2, r3, #2
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004d8a:	e018      	b.n	8004dbe <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d8c:	f7fd f9cc 	bl	8002128 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d803      	bhi.n	8004da4 <HAL_SPI_Receive+0x20e>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004da2:	d102      	bne.n	8004daa <HAL_SPI_Receive+0x214>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e01f      	b.n	8004dfe <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1c3      	bne.n	8004d52 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	6839      	ldr	r1, [r7, #0]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 fb56 	bl	8005480 <SPI_EndRxTransaction>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
  }
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b08a      	sub	sp, #40	@ 0x28
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	607a      	str	r2, [r7, #4]
 8004e12:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e14:	2301      	movs	r3, #1
 8004e16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e18:	f7fd f986 	bl	8002128 <HAL_GetTick>
 8004e1c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e24:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004e2c:	887b      	ldrh	r3, [r7, #2]
 8004e2e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004e30:	887b      	ldrh	r3, [r7, #2]
 8004e32:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e34:	7ffb      	ldrb	r3, [r7, #31]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d00c      	beq.n	8004e54 <HAL_SPI_TransmitReceive+0x4e>
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e40:	d106      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d102      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x4a>
 8004e4a:	7ffb      	ldrb	r3, [r7, #31]
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d001      	beq.n	8004e54 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004e50:	2302      	movs	r3, #2
 8004e52:	e1f3      	b.n	800523c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <HAL_SPI_TransmitReceive+0x60>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_SPI_TransmitReceive+0x60>
 8004e60:	887b      	ldrh	r3, [r7, #2]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e1e8      	b.n	800523c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_SPI_TransmitReceive+0x72>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e1e1      	b.n	800523c <HAL_SPI_TransmitReceive+0x436>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d003      	beq.n	8004e94 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2205      	movs	r2, #5
 8004e90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	887a      	ldrh	r2, [r7, #2]
 8004ea4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	887a      	ldrh	r2, [r7, #2]
 8004eac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	887a      	ldrh	r2, [r7, #2]
 8004eba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	887a      	ldrh	r2, [r7, #2]
 8004ec0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ed6:	d802      	bhi.n	8004ede <HAL_SPI_TransmitReceive+0xd8>
 8004ed8:	8abb      	ldrh	r3, [r7, #20]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d908      	bls.n	8004ef0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	e007      	b.n	8004f00 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004efe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0a:	2b40      	cmp	r3, #64	@ 0x40
 8004f0c:	d007      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f26:	f240 8083 	bls.w	8005030 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_SPI_TransmitReceive+0x132>
 8004f32:	8afb      	ldrh	r3, [r7, #22]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d16f      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3c:	881a      	ldrh	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f48:	1c9a      	adds	r2, r3, #2
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f5c:	e05c      	b.n	8005018 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d11b      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x19e>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <HAL_SPI_TransmitReceive+0x19e>
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d113      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f80:	881a      	ldrh	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8c:	1c9a      	adds	r2, r3, #2
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d11c      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x1e6>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d016      	beq.n	8004fec <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc8:	b292      	uxth	r2, r2
 8004fca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd0:	1c9a      	adds	r2, r3, #2
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fec:	f7fd f89c 	bl	8002128 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d80d      	bhi.n	8005018 <HAL_SPI_TransmitReceive+0x212>
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005002:	d009      	beq.n	8005018 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e111      	b.n	800523c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d19d      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x158>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d197      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x158>
 800502e:	e0e5      	b.n	80051fc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_SPI_TransmitReceive+0x23a>
 8005038:	8afb      	ldrh	r3, [r7, #22]
 800503a:	2b01      	cmp	r3, #1
 800503c:	f040 80d1 	bne.w	80051e2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b01      	cmp	r3, #1
 8005048:	d912      	bls.n	8005070 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504e:	881a      	ldrh	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505a:	1c9a      	adds	r2, r3, #2
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b02      	subs	r3, #2
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800506e:	e0b8      	b.n	80051e2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	7812      	ldrb	r2, [r2, #0]
 800507c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005096:	e0a4      	b.n	80051e2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d134      	bne.n	8005110 <HAL_SPI_TransmitReceive+0x30a>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d02f      	beq.n	8005110 <HAL_SPI_TransmitReceive+0x30a>
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d12c      	bne.n	8005110 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d912      	bls.n	80050e6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c4:	881a      	ldrh	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d0:	1c9a      	adds	r2, r3, #2
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b02      	subs	r3, #2
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050e4:	e012      	b.n	800510c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	330c      	adds	r3, #12
 80050f0:	7812      	ldrb	r2, [r2, #0]
 80050f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b01      	cmp	r3, #1
 800511c:	d148      	bne.n	80051b0 <HAL_SPI_TransmitReceive+0x3aa>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d042      	beq.n	80051b0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b01      	cmp	r3, #1
 8005134:	d923      	bls.n	800517e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005140:	b292      	uxth	r2, r2
 8005142:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005148:	1c9a      	adds	r2, r3, #2
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b02      	subs	r3, #2
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	d81f      	bhi.n	80051ac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800517a:	605a      	str	r2, [r3, #4]
 800517c:	e016      	b.n	80051ac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f103 020c 	add.w	r2, r3, #12
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518a:	7812      	ldrb	r2, [r2, #0]
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051ac:	2301      	movs	r3, #1
 80051ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051b0:	f7fc ffba 	bl	8002128 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051bc:	429a      	cmp	r2, r3
 80051be:	d803      	bhi.n	80051c8 <HAL_SPI_TransmitReceive+0x3c2>
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051c6:	d102      	bne.n	80051ce <HAL_SPI_TransmitReceive+0x3c8>
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e02c      	b.n	800523c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f47f af55 	bne.w	8005098 <HAL_SPI_TransmitReceive+0x292>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f47f af4e 	bne.w	8005098 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051fc:	6a3a      	ldr	r2, [r7, #32]
 80051fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f995 	bl	8005530 <SPI_EndRxTxTransaction>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2220      	movs	r2, #32
 8005210:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e00e      	b.n	800523c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800523a:	2300      	movs	r3, #0
  }
}
 800523c:	4618      	mov	r0, r3
 800523e:	3728      	adds	r7, #40	@ 0x28
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	4613      	mov	r3, r2
 8005252:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005254:	f7fc ff68 	bl	8002128 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525c:	1a9b      	subs	r3, r3, r2
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	4413      	add	r3, r2
 8005262:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005264:	f7fc ff60 	bl	8002128 <HAL_GetTick>
 8005268:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800526a:	4b39      	ldr	r3, [pc, #228]	@ (8005350 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	015b      	lsls	r3, r3, #5
 8005270:	0d1b      	lsrs	r3, r3, #20
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	fb02 f303 	mul.w	r3, r2, r3
 8005278:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800527a:	e054      	b.n	8005326 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005282:	d050      	beq.n	8005326 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005284:	f7fc ff50 	bl	8002128 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	429a      	cmp	r2, r3
 8005292:	d902      	bls.n	800529a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d13d      	bne.n	8005316 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052b2:	d111      	bne.n	80052d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052bc:	d004      	beq.n	80052c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052c6:	d107      	bne.n	80052d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e0:	d10f      	bne.n	8005302 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005300:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e017      	b.n	8005346 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	3b01      	subs	r3, #1
 8005324:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4013      	ands	r3, r2
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	429a      	cmp	r2, r3
 8005334:	bf0c      	ite	eq
 8005336:	2301      	moveq	r3, #1
 8005338:	2300      	movne	r3, #0
 800533a:	b2db      	uxtb	r3, r3
 800533c:	461a      	mov	r2, r3
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	429a      	cmp	r2, r3
 8005342:	d19b      	bne.n	800527c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3720      	adds	r7, #32
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000004 	.word	0x20000004

08005354 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	@ 0x28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005366:	f7fc fedf 	bl	8002128 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	1a9b      	subs	r3, r3, r2
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	4413      	add	r3, r2
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005376:	f7fc fed7 	bl	8002128 <HAL_GetTick>
 800537a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005384:	4b3d      	ldr	r3, [pc, #244]	@ (800547c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	00da      	lsls	r2, r3, #3
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	0d1b      	lsrs	r3, r3, #20
 8005394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800539c:	e060      	b.n	8005460 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80053a4:	d107      	bne.n	80053b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d104      	bne.n	80053b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053bc:	d050      	beq.n	8005460 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053be:	f7fc feb3 	bl	8002128 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d902      	bls.n	80053d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d13d      	bne.n	8005450 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053ec:	d111      	bne.n	8005412 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053f6:	d004      	beq.n	8005402 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005400:	d107      	bne.n	8005412 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005410:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800541a:	d10f      	bne.n	800543c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800543a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e010      	b.n	8005472 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	3b01      	subs	r3, #1
 800545e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4013      	ands	r3, r2
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	429a      	cmp	r2, r3
 800546e:	d196      	bne.n	800539e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3728      	adds	r7, #40	@ 0x28
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20000004 	.word	0x20000004

08005480 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005494:	d111      	bne.n	80054ba <SPI_EndRxTransaction+0x3a>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800549e:	d004      	beq.n	80054aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a8:	d107      	bne.n	80054ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054b8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2200      	movs	r2, #0
 80054c2:	2180      	movs	r1, #128	@ 0x80
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f7ff febd 	bl	8005244 <SPI_WaitFlagStateUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054d4:	f043 0220 	orr.w	r2, r3, #32
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e023      	b.n	8005528 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054e8:	d11d      	bne.n	8005526 <SPI_EndRxTransaction+0xa6>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054f2:	d004      	beq.n	80054fe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054fc:	d113      	bne.n	8005526 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2200      	movs	r2, #0
 8005506:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f7ff ff22 	bl	8005354 <SPI_WaitFifoStateUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d007      	beq.n	8005526 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800551a:	f043 0220 	orr.w	r2, r3, #32
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e000      	b.n	8005528 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2200      	movs	r2, #0
 8005544:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f7ff ff03 	bl	8005354 <SPI_WaitFifoStateUntilTimeout>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d007      	beq.n	8005564 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005558:	f043 0220 	orr.w	r2, r3, #32
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e027      	b.n	80055b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2200      	movs	r2, #0
 800556c:	2180      	movs	r1, #128	@ 0x80
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f7ff fe68 	bl	8005244 <SPI_WaitFlagStateUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d007      	beq.n	800558a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800557e:	f043 0220 	orr.w	r2, r3, #32
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e014      	b.n	80055b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2200      	movs	r2, #0
 8005592:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7ff fedc 	bl	8005354 <SPI_WaitFifoStateUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d007      	beq.n	80055b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a6:	f043 0220 	orr.w	r2, r3, #32
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e000      	b.n	80055b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e040      	b.n	8005650 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fc fbb6 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2224      	movs	r2, #36	@ 0x24
 80055e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0201 	bic.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fb6a 	bl	8005cdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f8af 	bl	800576c <UART_SetConfig>
 800560e:	4603      	mov	r3, r0
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e01b      	b.n	8005650 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005626:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005636:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fbe9 	bl	8005e20 <UART_CheckIdleState>
 800564e:	4603      	mov	r3, r0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08a      	sub	sp, #40	@ 0x28
 800565c:	af02      	add	r7, sp, #8
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800566c:	2b20      	cmp	r3, #32
 800566e:	d177      	bne.n	8005760 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <HAL_UART_Transmit+0x24>
 8005676:	88fb      	ldrh	r3, [r7, #6]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e070      	b.n	8005762 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2221      	movs	r2, #33	@ 0x21
 800568c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800568e:	f7fc fd4b 	bl	8002128 <HAL_GetTick>
 8005692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	88fa      	ldrh	r2, [r7, #6]
 80056a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ac:	d108      	bne.n	80056c0 <HAL_UART_Transmit+0x68>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d104      	bne.n	80056c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	61bb      	str	r3, [r7, #24]
 80056be:	e003      	b.n	80056c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056c8:	e02f      	b.n	800572a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2200      	movs	r2, #0
 80056d2:	2180      	movs	r1, #128	@ 0x80
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 fc4b 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2220      	movs	r2, #32
 80056e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e03b      	b.n	8005762 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10b      	bne.n	8005708 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	881a      	ldrh	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056fc:	b292      	uxth	r2, r2
 80056fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	3302      	adds	r3, #2
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	e007      	b.n	8005718 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	781a      	ldrb	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	3301      	adds	r3, #1
 8005716:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1c9      	bne.n	80056ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2200      	movs	r2, #0
 800573e:	2140      	movs	r1, #64	@ 0x40
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 fc15 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e005      	b.n	8005762 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2220      	movs	r2, #32
 800575a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	e000      	b.n	8005762 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005760:	2302      	movs	r3, #2
  }
}
 8005762:	4618      	mov	r0, r3
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800576c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005770:	b08a      	sub	sp, #40	@ 0x28
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	431a      	orrs	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	431a      	orrs	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	4313      	orrs	r3, r2
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4ba4      	ldr	r3, [pc, #656]	@ (8005a2c <UART_SetConfig+0x2c0>)
 800579c:	4013      	ands	r3, r2
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a99      	ldr	r2, [pc, #612]	@ (8005a30 <UART_SetConfig+0x2c4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d4:	4313      	orrs	r3, r2
 80057d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e8:	430a      	orrs	r2, r1
 80057ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a90      	ldr	r2, [pc, #576]	@ (8005a34 <UART_SetConfig+0x2c8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d126      	bne.n	8005844 <UART_SetConfig+0xd8>
 80057f6:	4b90      	ldr	r3, [pc, #576]	@ (8005a38 <UART_SetConfig+0x2cc>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fc:	f003 0303 	and.w	r3, r3, #3
 8005800:	2b03      	cmp	r3, #3
 8005802:	d81b      	bhi.n	800583c <UART_SetConfig+0xd0>
 8005804:	a201      	add	r2, pc, #4	@ (adr r2, 800580c <UART_SetConfig+0xa0>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	0800581d 	.word	0x0800581d
 8005810:	0800582d 	.word	0x0800582d
 8005814:	08005825 	.word	0x08005825
 8005818:	08005835 	.word	0x08005835
 800581c:	2301      	movs	r3, #1
 800581e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005822:	e116      	b.n	8005a52 <UART_SetConfig+0x2e6>
 8005824:	2302      	movs	r3, #2
 8005826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800582a:	e112      	b.n	8005a52 <UART_SetConfig+0x2e6>
 800582c:	2304      	movs	r3, #4
 800582e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005832:	e10e      	b.n	8005a52 <UART_SetConfig+0x2e6>
 8005834:	2308      	movs	r3, #8
 8005836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800583a:	e10a      	b.n	8005a52 <UART_SetConfig+0x2e6>
 800583c:	2310      	movs	r3, #16
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005842:	e106      	b.n	8005a52 <UART_SetConfig+0x2e6>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a7c      	ldr	r2, [pc, #496]	@ (8005a3c <UART_SetConfig+0x2d0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d138      	bne.n	80058c0 <UART_SetConfig+0x154>
 800584e:	4b7a      	ldr	r3, [pc, #488]	@ (8005a38 <UART_SetConfig+0x2cc>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005854:	f003 030c 	and.w	r3, r3, #12
 8005858:	2b0c      	cmp	r3, #12
 800585a:	d82d      	bhi.n	80058b8 <UART_SetConfig+0x14c>
 800585c:	a201      	add	r2, pc, #4	@ (adr r2, 8005864 <UART_SetConfig+0xf8>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005899 	.word	0x08005899
 8005868:	080058b9 	.word	0x080058b9
 800586c:	080058b9 	.word	0x080058b9
 8005870:	080058b9 	.word	0x080058b9
 8005874:	080058a9 	.word	0x080058a9
 8005878:	080058b9 	.word	0x080058b9
 800587c:	080058b9 	.word	0x080058b9
 8005880:	080058b9 	.word	0x080058b9
 8005884:	080058a1 	.word	0x080058a1
 8005888:	080058b9 	.word	0x080058b9
 800588c:	080058b9 	.word	0x080058b9
 8005890:	080058b9 	.word	0x080058b9
 8005894:	080058b1 	.word	0x080058b1
 8005898:	2300      	movs	r3, #0
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800589e:	e0d8      	b.n	8005a52 <UART_SetConfig+0x2e6>
 80058a0:	2302      	movs	r3, #2
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058a6:	e0d4      	b.n	8005a52 <UART_SetConfig+0x2e6>
 80058a8:	2304      	movs	r3, #4
 80058aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ae:	e0d0      	b.n	8005a52 <UART_SetConfig+0x2e6>
 80058b0:	2308      	movs	r3, #8
 80058b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058b6:	e0cc      	b.n	8005a52 <UART_SetConfig+0x2e6>
 80058b8:	2310      	movs	r3, #16
 80058ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058be:	e0c8      	b.n	8005a52 <UART_SetConfig+0x2e6>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a5e      	ldr	r2, [pc, #376]	@ (8005a40 <UART_SetConfig+0x2d4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d125      	bne.n	8005916 <UART_SetConfig+0x1aa>
 80058ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005a38 <UART_SetConfig+0x2cc>)
 80058cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80058d4:	2b30      	cmp	r3, #48	@ 0x30
 80058d6:	d016      	beq.n	8005906 <UART_SetConfig+0x19a>
 80058d8:	2b30      	cmp	r3, #48	@ 0x30
 80058da:	d818      	bhi.n	800590e <UART_SetConfig+0x1a2>
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d00a      	beq.n	80058f6 <UART_SetConfig+0x18a>
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d814      	bhi.n	800590e <UART_SetConfig+0x1a2>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <UART_SetConfig+0x182>
 80058e8:	2b10      	cmp	r3, #16
 80058ea:	d008      	beq.n	80058fe <UART_SetConfig+0x192>
 80058ec:	e00f      	b.n	800590e <UART_SetConfig+0x1a2>
 80058ee:	2300      	movs	r3, #0
 80058f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058f4:	e0ad      	b.n	8005a52 <UART_SetConfig+0x2e6>
 80058f6:	2302      	movs	r3, #2
 80058f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058fc:	e0a9      	b.n	8005a52 <UART_SetConfig+0x2e6>
 80058fe:	2304      	movs	r3, #4
 8005900:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005904:	e0a5      	b.n	8005a52 <UART_SetConfig+0x2e6>
 8005906:	2308      	movs	r3, #8
 8005908:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800590c:	e0a1      	b.n	8005a52 <UART_SetConfig+0x2e6>
 800590e:	2310      	movs	r3, #16
 8005910:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005914:	e09d      	b.n	8005a52 <UART_SetConfig+0x2e6>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a4a      	ldr	r2, [pc, #296]	@ (8005a44 <UART_SetConfig+0x2d8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d125      	bne.n	800596c <UART_SetConfig+0x200>
 8005920:	4b45      	ldr	r3, [pc, #276]	@ (8005a38 <UART_SetConfig+0x2cc>)
 8005922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005926:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800592a:	2bc0      	cmp	r3, #192	@ 0xc0
 800592c:	d016      	beq.n	800595c <UART_SetConfig+0x1f0>
 800592e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005930:	d818      	bhi.n	8005964 <UART_SetConfig+0x1f8>
 8005932:	2b80      	cmp	r3, #128	@ 0x80
 8005934:	d00a      	beq.n	800594c <UART_SetConfig+0x1e0>
 8005936:	2b80      	cmp	r3, #128	@ 0x80
 8005938:	d814      	bhi.n	8005964 <UART_SetConfig+0x1f8>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <UART_SetConfig+0x1d8>
 800593e:	2b40      	cmp	r3, #64	@ 0x40
 8005940:	d008      	beq.n	8005954 <UART_SetConfig+0x1e8>
 8005942:	e00f      	b.n	8005964 <UART_SetConfig+0x1f8>
 8005944:	2300      	movs	r3, #0
 8005946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800594a:	e082      	b.n	8005a52 <UART_SetConfig+0x2e6>
 800594c:	2302      	movs	r3, #2
 800594e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005952:	e07e      	b.n	8005a52 <UART_SetConfig+0x2e6>
 8005954:	2304      	movs	r3, #4
 8005956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800595a:	e07a      	b.n	8005a52 <UART_SetConfig+0x2e6>
 800595c:	2308      	movs	r3, #8
 800595e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005962:	e076      	b.n	8005a52 <UART_SetConfig+0x2e6>
 8005964:	2310      	movs	r3, #16
 8005966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800596a:	e072      	b.n	8005a52 <UART_SetConfig+0x2e6>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a35      	ldr	r2, [pc, #212]	@ (8005a48 <UART_SetConfig+0x2dc>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d12a      	bne.n	80059cc <UART_SetConfig+0x260>
 8005976:	4b30      	ldr	r3, [pc, #192]	@ (8005a38 <UART_SetConfig+0x2cc>)
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005980:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005984:	d01a      	beq.n	80059bc <UART_SetConfig+0x250>
 8005986:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800598a:	d81b      	bhi.n	80059c4 <UART_SetConfig+0x258>
 800598c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005990:	d00c      	beq.n	80059ac <UART_SetConfig+0x240>
 8005992:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005996:	d815      	bhi.n	80059c4 <UART_SetConfig+0x258>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <UART_SetConfig+0x238>
 800599c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059a0:	d008      	beq.n	80059b4 <UART_SetConfig+0x248>
 80059a2:	e00f      	b.n	80059c4 <UART_SetConfig+0x258>
 80059a4:	2300      	movs	r3, #0
 80059a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059aa:	e052      	b.n	8005a52 <UART_SetConfig+0x2e6>
 80059ac:	2302      	movs	r3, #2
 80059ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059b2:	e04e      	b.n	8005a52 <UART_SetConfig+0x2e6>
 80059b4:	2304      	movs	r3, #4
 80059b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ba:	e04a      	b.n	8005a52 <UART_SetConfig+0x2e6>
 80059bc:	2308      	movs	r3, #8
 80059be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059c2:	e046      	b.n	8005a52 <UART_SetConfig+0x2e6>
 80059c4:	2310      	movs	r3, #16
 80059c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ca:	e042      	b.n	8005a52 <UART_SetConfig+0x2e6>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a17      	ldr	r2, [pc, #92]	@ (8005a30 <UART_SetConfig+0x2c4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d13a      	bne.n	8005a4c <UART_SetConfig+0x2e0>
 80059d6:	4b18      	ldr	r3, [pc, #96]	@ (8005a38 <UART_SetConfig+0x2cc>)
 80059d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80059e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059e4:	d01a      	beq.n	8005a1c <UART_SetConfig+0x2b0>
 80059e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059ea:	d81b      	bhi.n	8005a24 <UART_SetConfig+0x2b8>
 80059ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059f0:	d00c      	beq.n	8005a0c <UART_SetConfig+0x2a0>
 80059f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059f6:	d815      	bhi.n	8005a24 <UART_SetConfig+0x2b8>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <UART_SetConfig+0x298>
 80059fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a00:	d008      	beq.n	8005a14 <UART_SetConfig+0x2a8>
 8005a02:	e00f      	b.n	8005a24 <UART_SetConfig+0x2b8>
 8005a04:	2300      	movs	r3, #0
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a0a:	e022      	b.n	8005a52 <UART_SetConfig+0x2e6>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a12:	e01e      	b.n	8005a52 <UART_SetConfig+0x2e6>
 8005a14:	2304      	movs	r3, #4
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a1a:	e01a      	b.n	8005a52 <UART_SetConfig+0x2e6>
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a22:	e016      	b.n	8005a52 <UART_SetConfig+0x2e6>
 8005a24:	2310      	movs	r3, #16
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a2a:	e012      	b.n	8005a52 <UART_SetConfig+0x2e6>
 8005a2c:	efff69f3 	.word	0xefff69f3
 8005a30:	40008000 	.word	0x40008000
 8005a34:	40013800 	.word	0x40013800
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	40004400 	.word	0x40004400
 8005a40:	40004800 	.word	0x40004800
 8005a44:	40004c00 	.word	0x40004c00
 8005a48:	40005000 	.word	0x40005000
 8005a4c:	2310      	movs	r3, #16
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a9f      	ldr	r2, [pc, #636]	@ (8005cd4 <UART_SetConfig+0x568>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d17a      	bne.n	8005b52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d824      	bhi.n	8005aae <UART_SetConfig+0x342>
 8005a64:	a201      	add	r2, pc, #4	@ (adr r2, 8005a6c <UART_SetConfig+0x300>)
 8005a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6a:	bf00      	nop
 8005a6c:	08005a91 	.word	0x08005a91
 8005a70:	08005aaf 	.word	0x08005aaf
 8005a74:	08005a99 	.word	0x08005a99
 8005a78:	08005aaf 	.word	0x08005aaf
 8005a7c:	08005a9f 	.word	0x08005a9f
 8005a80:	08005aaf 	.word	0x08005aaf
 8005a84:	08005aaf 	.word	0x08005aaf
 8005a88:	08005aaf 	.word	0x08005aaf
 8005a8c:	08005aa7 	.word	0x08005aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a90:	f7fd ffd2 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8005a94:	61f8      	str	r0, [r7, #28]
        break;
 8005a96:	e010      	b.n	8005aba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a98:	4b8f      	ldr	r3, [pc, #572]	@ (8005cd8 <UART_SetConfig+0x56c>)
 8005a9a:	61fb      	str	r3, [r7, #28]
        break;
 8005a9c:	e00d      	b.n	8005aba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a9e:	f7fd ff33 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 8005aa2:	61f8      	str	r0, [r7, #28]
        break;
 8005aa4:	e009      	b.n	8005aba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aaa:	61fb      	str	r3, [r7, #28]
        break;
 8005aac:	e005      	b.n	8005aba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ab8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80fb 	beq.w	8005cb8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	4413      	add	r3, r2
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d305      	bcc.n	8005ade <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d903      	bls.n	8005ae6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ae4:	e0e8      	b.n	8005cb8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	461c      	mov	r4, r3
 8005aec:	4615      	mov	r5, r2
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	022b      	lsls	r3, r5, #8
 8005af8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005afc:	0222      	lsls	r2, r4, #8
 8005afe:	68f9      	ldr	r1, [r7, #12]
 8005b00:	6849      	ldr	r1, [r1, #4]
 8005b02:	0849      	lsrs	r1, r1, #1
 8005b04:	2000      	movs	r0, #0
 8005b06:	4688      	mov	r8, r1
 8005b08:	4681      	mov	r9, r0
 8005b0a:	eb12 0a08 	adds.w	sl, r2, r8
 8005b0e:	eb43 0b09 	adc.w	fp, r3, r9
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	603b      	str	r3, [r7, #0]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b20:	4650      	mov	r0, sl
 8005b22:	4659      	mov	r1, fp
 8005b24:	f7fa fba4 	bl	8000270 <__aeabi_uldivmod>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b36:	d308      	bcc.n	8005b4a <UART_SetConfig+0x3de>
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b3e:	d204      	bcs.n	8005b4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	60da      	str	r2, [r3, #12]
 8005b48:	e0b6      	b.n	8005cb8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b50:	e0b2      	b.n	8005cb8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b5a:	d15e      	bne.n	8005c1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d828      	bhi.n	8005bb6 <UART_SetConfig+0x44a>
 8005b64:	a201      	add	r2, pc, #4	@ (adr r2, 8005b6c <UART_SetConfig+0x400>)
 8005b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6a:	bf00      	nop
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005b99 	.word	0x08005b99
 8005b74:	08005ba1 	.word	0x08005ba1
 8005b78:	08005bb7 	.word	0x08005bb7
 8005b7c:	08005ba7 	.word	0x08005ba7
 8005b80:	08005bb7 	.word	0x08005bb7
 8005b84:	08005bb7 	.word	0x08005bb7
 8005b88:	08005bb7 	.word	0x08005bb7
 8005b8c:	08005baf 	.word	0x08005baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b90:	f7fd ff52 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8005b94:	61f8      	str	r0, [r7, #28]
        break;
 8005b96:	e014      	b.n	8005bc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b98:	f7fd ff64 	bl	8003a64 <HAL_RCC_GetPCLK2Freq>
 8005b9c:	61f8      	str	r0, [r7, #28]
        break;
 8005b9e:	e010      	b.n	8005bc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8005cd8 <UART_SetConfig+0x56c>)
 8005ba2:	61fb      	str	r3, [r7, #28]
        break;
 8005ba4:	e00d      	b.n	8005bc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba6:	f7fd feaf 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 8005baa:	61f8      	str	r0, [r7, #28]
        break;
 8005bac:	e009      	b.n	8005bc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bb2:	61fb      	str	r3, [r7, #28]
        break;
 8005bb4:	e005      	b.n	8005bc2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005bc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d077      	beq.n	8005cb8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	005a      	lsls	r2, r3, #1
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	085b      	lsrs	r3, r3, #1
 8005bd2:	441a      	add	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bdc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b0f      	cmp	r3, #15
 8005be2:	d916      	bls.n	8005c12 <UART_SetConfig+0x4a6>
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bea:	d212      	bcs.n	8005c12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f023 030f 	bic.w	r3, r3, #15
 8005bf4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	085b      	lsrs	r3, r3, #1
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f003 0307 	and.w	r3, r3, #7
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	8afb      	ldrh	r3, [r7, #22]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	8afa      	ldrh	r2, [r7, #22]
 8005c0e:	60da      	str	r2, [r3, #12]
 8005c10:	e052      	b.n	8005cb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c18:	e04e      	b.n	8005cb8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d827      	bhi.n	8005c72 <UART_SetConfig+0x506>
 8005c22:	a201      	add	r2, pc, #4	@ (adr r2, 8005c28 <UART_SetConfig+0x4bc>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c4d 	.word	0x08005c4d
 8005c2c:	08005c55 	.word	0x08005c55
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	08005c73 	.word	0x08005c73
 8005c38:	08005c63 	.word	0x08005c63
 8005c3c:	08005c73 	.word	0x08005c73
 8005c40:	08005c73 	.word	0x08005c73
 8005c44:	08005c73 	.word	0x08005c73
 8005c48:	08005c6b 	.word	0x08005c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c4c:	f7fd fef4 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8005c50:	61f8      	str	r0, [r7, #28]
        break;
 8005c52:	e014      	b.n	8005c7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c54:	f7fd ff06 	bl	8003a64 <HAL_RCC_GetPCLK2Freq>
 8005c58:	61f8      	str	r0, [r7, #28]
        break;
 8005c5a:	e010      	b.n	8005c7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd8 <UART_SetConfig+0x56c>)
 8005c5e:	61fb      	str	r3, [r7, #28]
        break;
 8005c60:	e00d      	b.n	8005c7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c62:	f7fd fe51 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 8005c66:	61f8      	str	r0, [r7, #28]
        break;
 8005c68:	e009      	b.n	8005c7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c6e:	61fb      	str	r3, [r7, #28]
        break;
 8005c70:	e005      	b.n	8005c7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c7c:	bf00      	nop
    }

    if (pclk != 0U)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d019      	beq.n	8005cb8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	085a      	lsrs	r2, r3, #1
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	441a      	add	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b0f      	cmp	r3, #15
 8005c9c:	d909      	bls.n	8005cb2 <UART_SetConfig+0x546>
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca4:	d205      	bcs.n	8005cb2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60da      	str	r2, [r3, #12]
 8005cb0:	e002      	b.n	8005cb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005cc4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3728      	adds	r7, #40	@ 0x28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cd2:	bf00      	nop
 8005cd4:	40008000 	.word	0x40008000
 8005cd8:	00f42400 	.word	0x00f42400

08005cdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d70:	f003 0310 	and.w	r3, r3, #16
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01a      	beq.n	8005df2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dda:	d10a      	bne.n	8005df2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	605a      	str	r2, [r3, #4]
  }
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b098      	sub	sp, #96	@ 0x60
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e30:	f7fc f97a 	bl	8002128 <HAL_GetTick>
 8005e34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d12e      	bne.n	8005ea2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f88c 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d021      	beq.n	8005ea2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e72:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e6      	bne.n	8005e5e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e062      	b.n	8005f68 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d149      	bne.n	8005f44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f856 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d03c      	beq.n	8005f44 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ee8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005eea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e6      	bne.n	8005eca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3308      	adds	r3, #8
 8005f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0301 	bic.w	r3, r3, #1
 8005f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3308      	adds	r3, #8
 8005f1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f1c:	61fa      	str	r2, [r7, #28]
 8005f1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	69b9      	ldr	r1, [r7, #24]
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	617b      	str	r3, [r7, #20]
   return(result);
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e5      	bne.n	8005efc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e011      	b.n	8005f68 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2220      	movs	r2, #32
 8005f48:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3758      	adds	r7, #88	@ 0x58
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f80:	e04f      	b.n	8006022 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f88:	d04b      	beq.n	8006022 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f8a:	f7fc f8cd 	bl	8002128 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d302      	bcc.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e04e      	b.n	8006042 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d037      	beq.n	8006022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b80      	cmp	r3, #128	@ 0x80
 8005fb6:	d034      	beq.n	8006022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b40      	cmp	r3, #64	@ 0x40
 8005fbc:	d031      	beq.n	8006022 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d110      	bne.n	8005fee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f838 	bl	800604a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2208      	movs	r2, #8
 8005fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e029      	b.n	8006042 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ffc:	d111      	bne.n	8006022 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f81e 	bl	800604a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2220      	movs	r2, #32
 8006012:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e00f      	b.n	8006042 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4013      	ands	r3, r2
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	429a      	cmp	r2, r3
 8006030:	bf0c      	ite	eq
 8006032:	2301      	moveq	r3, #1
 8006034:	2300      	movne	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	461a      	mov	r2, r3
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	429a      	cmp	r2, r3
 800603e:	d0a0      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800604a:	b480      	push	{r7}
 800604c:	b095      	sub	sp, #84	@ 0x54
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800605a:	e853 3f00 	ldrex	r3, [r3]
 800605e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	461a      	mov	r2, r3
 800606e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006070:	643b      	str	r3, [r7, #64]	@ 0x40
 8006072:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006074:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006078:	e841 2300 	strex	r3, r2, [r1]
 800607c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800607e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1e6      	bne.n	8006052 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3308      	adds	r3, #8
 800608a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	e853 3f00 	ldrex	r3, [r3]
 8006092:	61fb      	str	r3, [r7, #28]
   return(result);
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f023 0301 	bic.w	r3, r3, #1
 800609a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3308      	adds	r3, #8
 80060a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e5      	bne.n	8006084 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d118      	bne.n	80060f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f023 0310 	bic.w	r3, r3, #16
 80060d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060de:	61bb      	str	r3, [r7, #24]
 80060e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	6979      	ldr	r1, [r7, #20]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	613b      	str	r3, [r7, #16]
   return(result);
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e6      	bne.n	80060c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006106:	bf00      	nop
 8006108:	3754      	adds	r7, #84	@ 0x54
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <std>:
 8006114:	2300      	movs	r3, #0
 8006116:	b510      	push	{r4, lr}
 8006118:	4604      	mov	r4, r0
 800611a:	e9c0 3300 	strd	r3, r3, [r0]
 800611e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006122:	6083      	str	r3, [r0, #8]
 8006124:	8181      	strh	r1, [r0, #12]
 8006126:	6643      	str	r3, [r0, #100]	@ 0x64
 8006128:	81c2      	strh	r2, [r0, #14]
 800612a:	6183      	str	r3, [r0, #24]
 800612c:	4619      	mov	r1, r3
 800612e:	2208      	movs	r2, #8
 8006130:	305c      	adds	r0, #92	@ 0x5c
 8006132:	f000 f921 	bl	8006378 <memset>
 8006136:	4b0d      	ldr	r3, [pc, #52]	@ (800616c <std+0x58>)
 8006138:	6263      	str	r3, [r4, #36]	@ 0x24
 800613a:	4b0d      	ldr	r3, [pc, #52]	@ (8006170 <std+0x5c>)
 800613c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800613e:	4b0d      	ldr	r3, [pc, #52]	@ (8006174 <std+0x60>)
 8006140:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006142:	4b0d      	ldr	r3, [pc, #52]	@ (8006178 <std+0x64>)
 8006144:	6323      	str	r3, [r4, #48]	@ 0x30
 8006146:	4b0d      	ldr	r3, [pc, #52]	@ (800617c <std+0x68>)
 8006148:	6224      	str	r4, [r4, #32]
 800614a:	429c      	cmp	r4, r3
 800614c:	d006      	beq.n	800615c <std+0x48>
 800614e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006152:	4294      	cmp	r4, r2
 8006154:	d002      	beq.n	800615c <std+0x48>
 8006156:	33d0      	adds	r3, #208	@ 0xd0
 8006158:	429c      	cmp	r4, r3
 800615a:	d105      	bne.n	8006168 <std+0x54>
 800615c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006164:	f000 b93a 	b.w	80063dc <__retarget_lock_init_recursive>
 8006168:	bd10      	pop	{r4, pc}
 800616a:	bf00      	nop
 800616c:	08006c31 	.word	0x08006c31
 8006170:	08006c53 	.word	0x08006c53
 8006174:	08006c8b 	.word	0x08006c8b
 8006178:	08006caf 	.word	0x08006caf
 800617c:	20000330 	.word	0x20000330

08006180 <stdio_exit_handler>:
 8006180:	4a02      	ldr	r2, [pc, #8]	@ (800618c <stdio_exit_handler+0xc>)
 8006182:	4903      	ldr	r1, [pc, #12]	@ (8006190 <stdio_exit_handler+0x10>)
 8006184:	4803      	ldr	r0, [pc, #12]	@ (8006194 <stdio_exit_handler+0x14>)
 8006186:	f000 b869 	b.w	800625c <_fwalk_sglue>
 800618a:	bf00      	nop
 800618c:	20000010 	.word	0x20000010
 8006190:	08006bc9 	.word	0x08006bc9
 8006194:	20000020 	.word	0x20000020

08006198 <cleanup_stdio>:
 8006198:	6841      	ldr	r1, [r0, #4]
 800619a:	4b0c      	ldr	r3, [pc, #48]	@ (80061cc <cleanup_stdio+0x34>)
 800619c:	4299      	cmp	r1, r3
 800619e:	b510      	push	{r4, lr}
 80061a0:	4604      	mov	r4, r0
 80061a2:	d001      	beq.n	80061a8 <cleanup_stdio+0x10>
 80061a4:	f000 fd10 	bl	8006bc8 <_fflush_r>
 80061a8:	68a1      	ldr	r1, [r4, #8]
 80061aa:	4b09      	ldr	r3, [pc, #36]	@ (80061d0 <cleanup_stdio+0x38>)
 80061ac:	4299      	cmp	r1, r3
 80061ae:	d002      	beq.n	80061b6 <cleanup_stdio+0x1e>
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 fd09 	bl	8006bc8 <_fflush_r>
 80061b6:	68e1      	ldr	r1, [r4, #12]
 80061b8:	4b06      	ldr	r3, [pc, #24]	@ (80061d4 <cleanup_stdio+0x3c>)
 80061ba:	4299      	cmp	r1, r3
 80061bc:	d004      	beq.n	80061c8 <cleanup_stdio+0x30>
 80061be:	4620      	mov	r0, r4
 80061c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c4:	f000 bd00 	b.w	8006bc8 <_fflush_r>
 80061c8:	bd10      	pop	{r4, pc}
 80061ca:	bf00      	nop
 80061cc:	20000330 	.word	0x20000330
 80061d0:	20000398 	.word	0x20000398
 80061d4:	20000400 	.word	0x20000400

080061d8 <global_stdio_init.part.0>:
 80061d8:	b510      	push	{r4, lr}
 80061da:	4b0b      	ldr	r3, [pc, #44]	@ (8006208 <global_stdio_init.part.0+0x30>)
 80061dc:	4c0b      	ldr	r4, [pc, #44]	@ (800620c <global_stdio_init.part.0+0x34>)
 80061de:	4a0c      	ldr	r2, [pc, #48]	@ (8006210 <global_stdio_init.part.0+0x38>)
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	4620      	mov	r0, r4
 80061e4:	2200      	movs	r2, #0
 80061e6:	2104      	movs	r1, #4
 80061e8:	f7ff ff94 	bl	8006114 <std>
 80061ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061f0:	2201      	movs	r2, #1
 80061f2:	2109      	movs	r1, #9
 80061f4:	f7ff ff8e 	bl	8006114 <std>
 80061f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061fc:	2202      	movs	r2, #2
 80061fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006202:	2112      	movs	r1, #18
 8006204:	f7ff bf86 	b.w	8006114 <std>
 8006208:	20000468 	.word	0x20000468
 800620c:	20000330 	.word	0x20000330
 8006210:	08006181 	.word	0x08006181

08006214 <__sfp_lock_acquire>:
 8006214:	4801      	ldr	r0, [pc, #4]	@ (800621c <__sfp_lock_acquire+0x8>)
 8006216:	f000 b8e2 	b.w	80063de <__retarget_lock_acquire_recursive>
 800621a:	bf00      	nop
 800621c:	2000046d 	.word	0x2000046d

08006220 <__sfp_lock_release>:
 8006220:	4801      	ldr	r0, [pc, #4]	@ (8006228 <__sfp_lock_release+0x8>)
 8006222:	f000 b8dd 	b.w	80063e0 <__retarget_lock_release_recursive>
 8006226:	bf00      	nop
 8006228:	2000046d 	.word	0x2000046d

0800622c <__sinit>:
 800622c:	b510      	push	{r4, lr}
 800622e:	4604      	mov	r4, r0
 8006230:	f7ff fff0 	bl	8006214 <__sfp_lock_acquire>
 8006234:	6a23      	ldr	r3, [r4, #32]
 8006236:	b11b      	cbz	r3, 8006240 <__sinit+0x14>
 8006238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800623c:	f7ff bff0 	b.w	8006220 <__sfp_lock_release>
 8006240:	4b04      	ldr	r3, [pc, #16]	@ (8006254 <__sinit+0x28>)
 8006242:	6223      	str	r3, [r4, #32]
 8006244:	4b04      	ldr	r3, [pc, #16]	@ (8006258 <__sinit+0x2c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1f5      	bne.n	8006238 <__sinit+0xc>
 800624c:	f7ff ffc4 	bl	80061d8 <global_stdio_init.part.0>
 8006250:	e7f2      	b.n	8006238 <__sinit+0xc>
 8006252:	bf00      	nop
 8006254:	08006199 	.word	0x08006199
 8006258:	20000468 	.word	0x20000468

0800625c <_fwalk_sglue>:
 800625c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006260:	4607      	mov	r7, r0
 8006262:	4688      	mov	r8, r1
 8006264:	4614      	mov	r4, r2
 8006266:	2600      	movs	r6, #0
 8006268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800626c:	f1b9 0901 	subs.w	r9, r9, #1
 8006270:	d505      	bpl.n	800627e <_fwalk_sglue+0x22>
 8006272:	6824      	ldr	r4, [r4, #0]
 8006274:	2c00      	cmp	r4, #0
 8006276:	d1f7      	bne.n	8006268 <_fwalk_sglue+0xc>
 8006278:	4630      	mov	r0, r6
 800627a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627e:	89ab      	ldrh	r3, [r5, #12]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d907      	bls.n	8006294 <_fwalk_sglue+0x38>
 8006284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006288:	3301      	adds	r3, #1
 800628a:	d003      	beq.n	8006294 <_fwalk_sglue+0x38>
 800628c:	4629      	mov	r1, r5
 800628e:	4638      	mov	r0, r7
 8006290:	47c0      	blx	r8
 8006292:	4306      	orrs	r6, r0
 8006294:	3568      	adds	r5, #104	@ 0x68
 8006296:	e7e9      	b.n	800626c <_fwalk_sglue+0x10>

08006298 <iprintf>:
 8006298:	b40f      	push	{r0, r1, r2, r3}
 800629a:	b507      	push	{r0, r1, r2, lr}
 800629c:	4906      	ldr	r1, [pc, #24]	@ (80062b8 <iprintf+0x20>)
 800629e:	ab04      	add	r3, sp, #16
 80062a0:	6808      	ldr	r0, [r1, #0]
 80062a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80062a6:	6881      	ldr	r1, [r0, #8]
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	f000 f8c3 	bl	8006434 <_vfiprintf_r>
 80062ae:	b003      	add	sp, #12
 80062b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062b4:	b004      	add	sp, #16
 80062b6:	4770      	bx	lr
 80062b8:	2000001c 	.word	0x2000001c

080062bc <_puts_r>:
 80062bc:	6a03      	ldr	r3, [r0, #32]
 80062be:	b570      	push	{r4, r5, r6, lr}
 80062c0:	6884      	ldr	r4, [r0, #8]
 80062c2:	4605      	mov	r5, r0
 80062c4:	460e      	mov	r6, r1
 80062c6:	b90b      	cbnz	r3, 80062cc <_puts_r+0x10>
 80062c8:	f7ff ffb0 	bl	800622c <__sinit>
 80062cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062ce:	07db      	lsls	r3, r3, #31
 80062d0:	d405      	bmi.n	80062de <_puts_r+0x22>
 80062d2:	89a3      	ldrh	r3, [r4, #12]
 80062d4:	0598      	lsls	r0, r3, #22
 80062d6:	d402      	bmi.n	80062de <_puts_r+0x22>
 80062d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062da:	f000 f880 	bl	80063de <__retarget_lock_acquire_recursive>
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	0719      	lsls	r1, r3, #28
 80062e2:	d502      	bpl.n	80062ea <_puts_r+0x2e>
 80062e4:	6923      	ldr	r3, [r4, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d135      	bne.n	8006356 <_puts_r+0x9a>
 80062ea:	4621      	mov	r1, r4
 80062ec:	4628      	mov	r0, r5
 80062ee:	f000 fd21 	bl	8006d34 <__swsetup_r>
 80062f2:	b380      	cbz	r0, 8006356 <_puts_r+0x9a>
 80062f4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80062f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062fa:	07da      	lsls	r2, r3, #31
 80062fc:	d405      	bmi.n	800630a <_puts_r+0x4e>
 80062fe:	89a3      	ldrh	r3, [r4, #12]
 8006300:	059b      	lsls	r3, r3, #22
 8006302:	d402      	bmi.n	800630a <_puts_r+0x4e>
 8006304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006306:	f000 f86b 	bl	80063e0 <__retarget_lock_release_recursive>
 800630a:	4628      	mov	r0, r5
 800630c:	bd70      	pop	{r4, r5, r6, pc}
 800630e:	2b00      	cmp	r3, #0
 8006310:	da04      	bge.n	800631c <_puts_r+0x60>
 8006312:	69a2      	ldr	r2, [r4, #24]
 8006314:	429a      	cmp	r2, r3
 8006316:	dc17      	bgt.n	8006348 <_puts_r+0x8c>
 8006318:	290a      	cmp	r1, #10
 800631a:	d015      	beq.n	8006348 <_puts_r+0x8c>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	6022      	str	r2, [r4, #0]
 8006322:	7019      	strb	r1, [r3, #0]
 8006324:	68a3      	ldr	r3, [r4, #8]
 8006326:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800632a:	3b01      	subs	r3, #1
 800632c:	60a3      	str	r3, [r4, #8]
 800632e:	2900      	cmp	r1, #0
 8006330:	d1ed      	bne.n	800630e <_puts_r+0x52>
 8006332:	2b00      	cmp	r3, #0
 8006334:	da11      	bge.n	800635a <_puts_r+0x9e>
 8006336:	4622      	mov	r2, r4
 8006338:	210a      	movs	r1, #10
 800633a:	4628      	mov	r0, r5
 800633c:	f000 fcbb 	bl	8006cb6 <__swbuf_r>
 8006340:	3001      	adds	r0, #1
 8006342:	d0d7      	beq.n	80062f4 <_puts_r+0x38>
 8006344:	250a      	movs	r5, #10
 8006346:	e7d7      	b.n	80062f8 <_puts_r+0x3c>
 8006348:	4622      	mov	r2, r4
 800634a:	4628      	mov	r0, r5
 800634c:	f000 fcb3 	bl	8006cb6 <__swbuf_r>
 8006350:	3001      	adds	r0, #1
 8006352:	d1e7      	bne.n	8006324 <_puts_r+0x68>
 8006354:	e7ce      	b.n	80062f4 <_puts_r+0x38>
 8006356:	3e01      	subs	r6, #1
 8006358:	e7e4      	b.n	8006324 <_puts_r+0x68>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	6022      	str	r2, [r4, #0]
 8006360:	220a      	movs	r2, #10
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	e7ee      	b.n	8006344 <_puts_r+0x88>
	...

08006368 <puts>:
 8006368:	4b02      	ldr	r3, [pc, #8]	@ (8006374 <puts+0xc>)
 800636a:	4601      	mov	r1, r0
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	f7ff bfa5 	b.w	80062bc <_puts_r>
 8006372:	bf00      	nop
 8006374:	2000001c 	.word	0x2000001c

08006378 <memset>:
 8006378:	4402      	add	r2, r0
 800637a:	4603      	mov	r3, r0
 800637c:	4293      	cmp	r3, r2
 800637e:	d100      	bne.n	8006382 <memset+0xa>
 8006380:	4770      	bx	lr
 8006382:	f803 1b01 	strb.w	r1, [r3], #1
 8006386:	e7f9      	b.n	800637c <memset+0x4>

08006388 <__errno>:
 8006388:	4b01      	ldr	r3, [pc, #4]	@ (8006390 <__errno+0x8>)
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	2000001c 	.word	0x2000001c

08006394 <__libc_init_array>:
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	4d0d      	ldr	r5, [pc, #52]	@ (80063cc <__libc_init_array+0x38>)
 8006398:	4c0d      	ldr	r4, [pc, #52]	@ (80063d0 <__libc_init_array+0x3c>)
 800639a:	1b64      	subs	r4, r4, r5
 800639c:	10a4      	asrs	r4, r4, #2
 800639e:	2600      	movs	r6, #0
 80063a0:	42a6      	cmp	r6, r4
 80063a2:	d109      	bne.n	80063b8 <__libc_init_array+0x24>
 80063a4:	4d0b      	ldr	r5, [pc, #44]	@ (80063d4 <__libc_init_array+0x40>)
 80063a6:	4c0c      	ldr	r4, [pc, #48]	@ (80063d8 <__libc_init_array+0x44>)
 80063a8:	f000 fe3e 	bl	8007028 <_init>
 80063ac:	1b64      	subs	r4, r4, r5
 80063ae:	10a4      	asrs	r4, r4, #2
 80063b0:	2600      	movs	r6, #0
 80063b2:	42a6      	cmp	r6, r4
 80063b4:	d105      	bne.n	80063c2 <__libc_init_array+0x2e>
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
 80063b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063bc:	4798      	blx	r3
 80063be:	3601      	adds	r6, #1
 80063c0:	e7ee      	b.n	80063a0 <__libc_init_array+0xc>
 80063c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c6:	4798      	blx	r3
 80063c8:	3601      	adds	r6, #1
 80063ca:	e7f2      	b.n	80063b2 <__libc_init_array+0x1e>
 80063cc:	080071bc 	.word	0x080071bc
 80063d0:	080071bc 	.word	0x080071bc
 80063d4:	080071bc 	.word	0x080071bc
 80063d8:	080071c0 	.word	0x080071c0

080063dc <__retarget_lock_init_recursive>:
 80063dc:	4770      	bx	lr

080063de <__retarget_lock_acquire_recursive>:
 80063de:	4770      	bx	lr

080063e0 <__retarget_lock_release_recursive>:
 80063e0:	4770      	bx	lr

080063e2 <__sfputc_r>:
 80063e2:	6893      	ldr	r3, [r2, #8]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	b410      	push	{r4}
 80063ea:	6093      	str	r3, [r2, #8]
 80063ec:	da08      	bge.n	8006400 <__sfputc_r+0x1e>
 80063ee:	6994      	ldr	r4, [r2, #24]
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	db01      	blt.n	80063f8 <__sfputc_r+0x16>
 80063f4:	290a      	cmp	r1, #10
 80063f6:	d103      	bne.n	8006400 <__sfputc_r+0x1e>
 80063f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063fc:	f000 bc5b 	b.w	8006cb6 <__swbuf_r>
 8006400:	6813      	ldr	r3, [r2, #0]
 8006402:	1c58      	adds	r0, r3, #1
 8006404:	6010      	str	r0, [r2, #0]
 8006406:	7019      	strb	r1, [r3, #0]
 8006408:	4608      	mov	r0, r1
 800640a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800640e:	4770      	bx	lr

08006410 <__sfputs_r>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	4606      	mov	r6, r0
 8006414:	460f      	mov	r7, r1
 8006416:	4614      	mov	r4, r2
 8006418:	18d5      	adds	r5, r2, r3
 800641a:	42ac      	cmp	r4, r5
 800641c:	d101      	bne.n	8006422 <__sfputs_r+0x12>
 800641e:	2000      	movs	r0, #0
 8006420:	e007      	b.n	8006432 <__sfputs_r+0x22>
 8006422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006426:	463a      	mov	r2, r7
 8006428:	4630      	mov	r0, r6
 800642a:	f7ff ffda 	bl	80063e2 <__sfputc_r>
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	d1f3      	bne.n	800641a <__sfputs_r+0xa>
 8006432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006434 <_vfiprintf_r>:
 8006434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006438:	460d      	mov	r5, r1
 800643a:	b09d      	sub	sp, #116	@ 0x74
 800643c:	4614      	mov	r4, r2
 800643e:	4698      	mov	r8, r3
 8006440:	4606      	mov	r6, r0
 8006442:	b118      	cbz	r0, 800644c <_vfiprintf_r+0x18>
 8006444:	6a03      	ldr	r3, [r0, #32]
 8006446:	b90b      	cbnz	r3, 800644c <_vfiprintf_r+0x18>
 8006448:	f7ff fef0 	bl	800622c <__sinit>
 800644c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800644e:	07d9      	lsls	r1, r3, #31
 8006450:	d405      	bmi.n	800645e <_vfiprintf_r+0x2a>
 8006452:	89ab      	ldrh	r3, [r5, #12]
 8006454:	059a      	lsls	r2, r3, #22
 8006456:	d402      	bmi.n	800645e <_vfiprintf_r+0x2a>
 8006458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800645a:	f7ff ffc0 	bl	80063de <__retarget_lock_acquire_recursive>
 800645e:	89ab      	ldrh	r3, [r5, #12]
 8006460:	071b      	lsls	r3, r3, #28
 8006462:	d501      	bpl.n	8006468 <_vfiprintf_r+0x34>
 8006464:	692b      	ldr	r3, [r5, #16]
 8006466:	b99b      	cbnz	r3, 8006490 <_vfiprintf_r+0x5c>
 8006468:	4629      	mov	r1, r5
 800646a:	4630      	mov	r0, r6
 800646c:	f000 fc62 	bl	8006d34 <__swsetup_r>
 8006470:	b170      	cbz	r0, 8006490 <_vfiprintf_r+0x5c>
 8006472:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006474:	07dc      	lsls	r4, r3, #31
 8006476:	d504      	bpl.n	8006482 <_vfiprintf_r+0x4e>
 8006478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800647c:	b01d      	add	sp, #116	@ 0x74
 800647e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006482:	89ab      	ldrh	r3, [r5, #12]
 8006484:	0598      	lsls	r0, r3, #22
 8006486:	d4f7      	bmi.n	8006478 <_vfiprintf_r+0x44>
 8006488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800648a:	f7ff ffa9 	bl	80063e0 <__retarget_lock_release_recursive>
 800648e:	e7f3      	b.n	8006478 <_vfiprintf_r+0x44>
 8006490:	2300      	movs	r3, #0
 8006492:	9309      	str	r3, [sp, #36]	@ 0x24
 8006494:	2320      	movs	r3, #32
 8006496:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800649a:	f8cd 800c 	str.w	r8, [sp, #12]
 800649e:	2330      	movs	r3, #48	@ 0x30
 80064a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006650 <_vfiprintf_r+0x21c>
 80064a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064a8:	f04f 0901 	mov.w	r9, #1
 80064ac:	4623      	mov	r3, r4
 80064ae:	469a      	mov	sl, r3
 80064b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064b4:	b10a      	cbz	r2, 80064ba <_vfiprintf_r+0x86>
 80064b6:	2a25      	cmp	r2, #37	@ 0x25
 80064b8:	d1f9      	bne.n	80064ae <_vfiprintf_r+0x7a>
 80064ba:	ebba 0b04 	subs.w	fp, sl, r4
 80064be:	d00b      	beq.n	80064d8 <_vfiprintf_r+0xa4>
 80064c0:	465b      	mov	r3, fp
 80064c2:	4622      	mov	r2, r4
 80064c4:	4629      	mov	r1, r5
 80064c6:	4630      	mov	r0, r6
 80064c8:	f7ff ffa2 	bl	8006410 <__sfputs_r>
 80064cc:	3001      	adds	r0, #1
 80064ce:	f000 80a7 	beq.w	8006620 <_vfiprintf_r+0x1ec>
 80064d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064d4:	445a      	add	r2, fp
 80064d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80064d8:	f89a 3000 	ldrb.w	r3, [sl]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 809f 	beq.w	8006620 <_vfiprintf_r+0x1ec>
 80064e2:	2300      	movs	r3, #0
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ec:	f10a 0a01 	add.w	sl, sl, #1
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	9307      	str	r3, [sp, #28]
 80064f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80064fa:	4654      	mov	r4, sl
 80064fc:	2205      	movs	r2, #5
 80064fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006502:	4853      	ldr	r0, [pc, #332]	@ (8006650 <_vfiprintf_r+0x21c>)
 8006504:	f7f9 fe64 	bl	80001d0 <memchr>
 8006508:	9a04      	ldr	r2, [sp, #16]
 800650a:	b9d8      	cbnz	r0, 8006544 <_vfiprintf_r+0x110>
 800650c:	06d1      	lsls	r1, r2, #27
 800650e:	bf44      	itt	mi
 8006510:	2320      	movmi	r3, #32
 8006512:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006516:	0713      	lsls	r3, r2, #28
 8006518:	bf44      	itt	mi
 800651a:	232b      	movmi	r3, #43	@ 0x2b
 800651c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006520:	f89a 3000 	ldrb.w	r3, [sl]
 8006524:	2b2a      	cmp	r3, #42	@ 0x2a
 8006526:	d015      	beq.n	8006554 <_vfiprintf_r+0x120>
 8006528:	9a07      	ldr	r2, [sp, #28]
 800652a:	4654      	mov	r4, sl
 800652c:	2000      	movs	r0, #0
 800652e:	f04f 0c0a 	mov.w	ip, #10
 8006532:	4621      	mov	r1, r4
 8006534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006538:	3b30      	subs	r3, #48	@ 0x30
 800653a:	2b09      	cmp	r3, #9
 800653c:	d94b      	bls.n	80065d6 <_vfiprintf_r+0x1a2>
 800653e:	b1b0      	cbz	r0, 800656e <_vfiprintf_r+0x13a>
 8006540:	9207      	str	r2, [sp, #28]
 8006542:	e014      	b.n	800656e <_vfiprintf_r+0x13a>
 8006544:	eba0 0308 	sub.w	r3, r0, r8
 8006548:	fa09 f303 	lsl.w	r3, r9, r3
 800654c:	4313      	orrs	r3, r2
 800654e:	9304      	str	r3, [sp, #16]
 8006550:	46a2      	mov	sl, r4
 8006552:	e7d2      	b.n	80064fa <_vfiprintf_r+0xc6>
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	1d19      	adds	r1, r3, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	9103      	str	r1, [sp, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	bfbb      	ittet	lt
 8006560:	425b      	neglt	r3, r3
 8006562:	f042 0202 	orrlt.w	r2, r2, #2
 8006566:	9307      	strge	r3, [sp, #28]
 8006568:	9307      	strlt	r3, [sp, #28]
 800656a:	bfb8      	it	lt
 800656c:	9204      	strlt	r2, [sp, #16]
 800656e:	7823      	ldrb	r3, [r4, #0]
 8006570:	2b2e      	cmp	r3, #46	@ 0x2e
 8006572:	d10a      	bne.n	800658a <_vfiprintf_r+0x156>
 8006574:	7863      	ldrb	r3, [r4, #1]
 8006576:	2b2a      	cmp	r3, #42	@ 0x2a
 8006578:	d132      	bne.n	80065e0 <_vfiprintf_r+0x1ac>
 800657a:	9b03      	ldr	r3, [sp, #12]
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	9203      	str	r2, [sp, #12]
 8006582:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006586:	3402      	adds	r4, #2
 8006588:	9305      	str	r3, [sp, #20]
 800658a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006660 <_vfiprintf_r+0x22c>
 800658e:	7821      	ldrb	r1, [r4, #0]
 8006590:	2203      	movs	r2, #3
 8006592:	4650      	mov	r0, sl
 8006594:	f7f9 fe1c 	bl	80001d0 <memchr>
 8006598:	b138      	cbz	r0, 80065aa <_vfiprintf_r+0x176>
 800659a:	9b04      	ldr	r3, [sp, #16]
 800659c:	eba0 000a 	sub.w	r0, r0, sl
 80065a0:	2240      	movs	r2, #64	@ 0x40
 80065a2:	4082      	lsls	r2, r0
 80065a4:	4313      	orrs	r3, r2
 80065a6:	3401      	adds	r4, #1
 80065a8:	9304      	str	r3, [sp, #16]
 80065aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ae:	4829      	ldr	r0, [pc, #164]	@ (8006654 <_vfiprintf_r+0x220>)
 80065b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065b4:	2206      	movs	r2, #6
 80065b6:	f7f9 fe0b 	bl	80001d0 <memchr>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d03f      	beq.n	800663e <_vfiprintf_r+0x20a>
 80065be:	4b26      	ldr	r3, [pc, #152]	@ (8006658 <_vfiprintf_r+0x224>)
 80065c0:	bb1b      	cbnz	r3, 800660a <_vfiprintf_r+0x1d6>
 80065c2:	9b03      	ldr	r3, [sp, #12]
 80065c4:	3307      	adds	r3, #7
 80065c6:	f023 0307 	bic.w	r3, r3, #7
 80065ca:	3308      	adds	r3, #8
 80065cc:	9303      	str	r3, [sp, #12]
 80065ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d0:	443b      	add	r3, r7
 80065d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80065d4:	e76a      	b.n	80064ac <_vfiprintf_r+0x78>
 80065d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80065da:	460c      	mov	r4, r1
 80065dc:	2001      	movs	r0, #1
 80065de:	e7a8      	b.n	8006532 <_vfiprintf_r+0xfe>
 80065e0:	2300      	movs	r3, #0
 80065e2:	3401      	adds	r4, #1
 80065e4:	9305      	str	r3, [sp, #20]
 80065e6:	4619      	mov	r1, r3
 80065e8:	f04f 0c0a 	mov.w	ip, #10
 80065ec:	4620      	mov	r0, r4
 80065ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065f2:	3a30      	subs	r2, #48	@ 0x30
 80065f4:	2a09      	cmp	r2, #9
 80065f6:	d903      	bls.n	8006600 <_vfiprintf_r+0x1cc>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0c6      	beq.n	800658a <_vfiprintf_r+0x156>
 80065fc:	9105      	str	r1, [sp, #20]
 80065fe:	e7c4      	b.n	800658a <_vfiprintf_r+0x156>
 8006600:	fb0c 2101 	mla	r1, ip, r1, r2
 8006604:	4604      	mov	r4, r0
 8006606:	2301      	movs	r3, #1
 8006608:	e7f0      	b.n	80065ec <_vfiprintf_r+0x1b8>
 800660a:	ab03      	add	r3, sp, #12
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	462a      	mov	r2, r5
 8006610:	4b12      	ldr	r3, [pc, #72]	@ (800665c <_vfiprintf_r+0x228>)
 8006612:	a904      	add	r1, sp, #16
 8006614:	4630      	mov	r0, r6
 8006616:	f3af 8000 	nop.w
 800661a:	4607      	mov	r7, r0
 800661c:	1c78      	adds	r0, r7, #1
 800661e:	d1d6      	bne.n	80065ce <_vfiprintf_r+0x19a>
 8006620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006622:	07d9      	lsls	r1, r3, #31
 8006624:	d405      	bmi.n	8006632 <_vfiprintf_r+0x1fe>
 8006626:	89ab      	ldrh	r3, [r5, #12]
 8006628:	059a      	lsls	r2, r3, #22
 800662a:	d402      	bmi.n	8006632 <_vfiprintf_r+0x1fe>
 800662c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800662e:	f7ff fed7 	bl	80063e0 <__retarget_lock_release_recursive>
 8006632:	89ab      	ldrh	r3, [r5, #12]
 8006634:	065b      	lsls	r3, r3, #25
 8006636:	f53f af1f 	bmi.w	8006478 <_vfiprintf_r+0x44>
 800663a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800663c:	e71e      	b.n	800647c <_vfiprintf_r+0x48>
 800663e:	ab03      	add	r3, sp, #12
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	462a      	mov	r2, r5
 8006644:	4b05      	ldr	r3, [pc, #20]	@ (800665c <_vfiprintf_r+0x228>)
 8006646:	a904      	add	r1, sp, #16
 8006648:	4630      	mov	r0, r6
 800664a:	f000 f91b 	bl	8006884 <_printf_i>
 800664e:	e7e4      	b.n	800661a <_vfiprintf_r+0x1e6>
 8006650:	08007180 	.word	0x08007180
 8006654:	0800718a 	.word	0x0800718a
 8006658:	00000000 	.word	0x00000000
 800665c:	08006411 	.word	0x08006411
 8006660:	08007186 	.word	0x08007186

08006664 <sbrk_aligned>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	4e0f      	ldr	r6, [pc, #60]	@ (80066a4 <sbrk_aligned+0x40>)
 8006668:	460c      	mov	r4, r1
 800666a:	6831      	ldr	r1, [r6, #0]
 800666c:	4605      	mov	r5, r0
 800666e:	b911      	cbnz	r1, 8006676 <sbrk_aligned+0x12>
 8006670:	f000 fc4c 	bl	8006f0c <_sbrk_r>
 8006674:	6030      	str	r0, [r6, #0]
 8006676:	4621      	mov	r1, r4
 8006678:	4628      	mov	r0, r5
 800667a:	f000 fc47 	bl	8006f0c <_sbrk_r>
 800667e:	1c43      	adds	r3, r0, #1
 8006680:	d103      	bne.n	800668a <sbrk_aligned+0x26>
 8006682:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006686:	4620      	mov	r0, r4
 8006688:	bd70      	pop	{r4, r5, r6, pc}
 800668a:	1cc4      	adds	r4, r0, #3
 800668c:	f024 0403 	bic.w	r4, r4, #3
 8006690:	42a0      	cmp	r0, r4
 8006692:	d0f8      	beq.n	8006686 <sbrk_aligned+0x22>
 8006694:	1a21      	subs	r1, r4, r0
 8006696:	4628      	mov	r0, r5
 8006698:	f000 fc38 	bl	8006f0c <_sbrk_r>
 800669c:	3001      	adds	r0, #1
 800669e:	d1f2      	bne.n	8006686 <sbrk_aligned+0x22>
 80066a0:	e7ef      	b.n	8006682 <sbrk_aligned+0x1e>
 80066a2:	bf00      	nop
 80066a4:	20000470 	.word	0x20000470

080066a8 <_malloc_r>:
 80066a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ac:	1ccd      	adds	r5, r1, #3
 80066ae:	f025 0503 	bic.w	r5, r5, #3
 80066b2:	3508      	adds	r5, #8
 80066b4:	2d0c      	cmp	r5, #12
 80066b6:	bf38      	it	cc
 80066b8:	250c      	movcc	r5, #12
 80066ba:	2d00      	cmp	r5, #0
 80066bc:	4606      	mov	r6, r0
 80066be:	db01      	blt.n	80066c4 <_malloc_r+0x1c>
 80066c0:	42a9      	cmp	r1, r5
 80066c2:	d904      	bls.n	80066ce <_malloc_r+0x26>
 80066c4:	230c      	movs	r3, #12
 80066c6:	6033      	str	r3, [r6, #0]
 80066c8:	2000      	movs	r0, #0
 80066ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067a4 <_malloc_r+0xfc>
 80066d2:	f000 faa1 	bl	8006c18 <__malloc_lock>
 80066d6:	f8d8 3000 	ldr.w	r3, [r8]
 80066da:	461c      	mov	r4, r3
 80066dc:	bb44      	cbnz	r4, 8006730 <_malloc_r+0x88>
 80066de:	4629      	mov	r1, r5
 80066e0:	4630      	mov	r0, r6
 80066e2:	f7ff ffbf 	bl	8006664 <sbrk_aligned>
 80066e6:	1c43      	adds	r3, r0, #1
 80066e8:	4604      	mov	r4, r0
 80066ea:	d158      	bne.n	800679e <_malloc_r+0xf6>
 80066ec:	f8d8 4000 	ldr.w	r4, [r8]
 80066f0:	4627      	mov	r7, r4
 80066f2:	2f00      	cmp	r7, #0
 80066f4:	d143      	bne.n	800677e <_malloc_r+0xd6>
 80066f6:	2c00      	cmp	r4, #0
 80066f8:	d04b      	beq.n	8006792 <_malloc_r+0xea>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	4639      	mov	r1, r7
 80066fe:	4630      	mov	r0, r6
 8006700:	eb04 0903 	add.w	r9, r4, r3
 8006704:	f000 fc02 	bl	8006f0c <_sbrk_r>
 8006708:	4581      	cmp	r9, r0
 800670a:	d142      	bne.n	8006792 <_malloc_r+0xea>
 800670c:	6821      	ldr	r1, [r4, #0]
 800670e:	1a6d      	subs	r5, r5, r1
 8006710:	4629      	mov	r1, r5
 8006712:	4630      	mov	r0, r6
 8006714:	f7ff ffa6 	bl	8006664 <sbrk_aligned>
 8006718:	3001      	adds	r0, #1
 800671a:	d03a      	beq.n	8006792 <_malloc_r+0xea>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	442b      	add	r3, r5
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	f8d8 3000 	ldr.w	r3, [r8]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	bb62      	cbnz	r2, 8006784 <_malloc_r+0xdc>
 800672a:	f8c8 7000 	str.w	r7, [r8]
 800672e:	e00f      	b.n	8006750 <_malloc_r+0xa8>
 8006730:	6822      	ldr	r2, [r4, #0]
 8006732:	1b52      	subs	r2, r2, r5
 8006734:	d420      	bmi.n	8006778 <_malloc_r+0xd0>
 8006736:	2a0b      	cmp	r2, #11
 8006738:	d917      	bls.n	800676a <_malloc_r+0xc2>
 800673a:	1961      	adds	r1, r4, r5
 800673c:	42a3      	cmp	r3, r4
 800673e:	6025      	str	r5, [r4, #0]
 8006740:	bf18      	it	ne
 8006742:	6059      	strne	r1, [r3, #4]
 8006744:	6863      	ldr	r3, [r4, #4]
 8006746:	bf08      	it	eq
 8006748:	f8c8 1000 	streq.w	r1, [r8]
 800674c:	5162      	str	r2, [r4, r5]
 800674e:	604b      	str	r3, [r1, #4]
 8006750:	4630      	mov	r0, r6
 8006752:	f000 fa67 	bl	8006c24 <__malloc_unlock>
 8006756:	f104 000b 	add.w	r0, r4, #11
 800675a:	1d23      	adds	r3, r4, #4
 800675c:	f020 0007 	bic.w	r0, r0, #7
 8006760:	1ac2      	subs	r2, r0, r3
 8006762:	bf1c      	itt	ne
 8006764:	1a1b      	subne	r3, r3, r0
 8006766:	50a3      	strne	r3, [r4, r2]
 8006768:	e7af      	b.n	80066ca <_malloc_r+0x22>
 800676a:	6862      	ldr	r2, [r4, #4]
 800676c:	42a3      	cmp	r3, r4
 800676e:	bf0c      	ite	eq
 8006770:	f8c8 2000 	streq.w	r2, [r8]
 8006774:	605a      	strne	r2, [r3, #4]
 8006776:	e7eb      	b.n	8006750 <_malloc_r+0xa8>
 8006778:	4623      	mov	r3, r4
 800677a:	6864      	ldr	r4, [r4, #4]
 800677c:	e7ae      	b.n	80066dc <_malloc_r+0x34>
 800677e:	463c      	mov	r4, r7
 8006780:	687f      	ldr	r7, [r7, #4]
 8006782:	e7b6      	b.n	80066f2 <_malloc_r+0x4a>
 8006784:	461a      	mov	r2, r3
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	42a3      	cmp	r3, r4
 800678a:	d1fb      	bne.n	8006784 <_malloc_r+0xdc>
 800678c:	2300      	movs	r3, #0
 800678e:	6053      	str	r3, [r2, #4]
 8006790:	e7de      	b.n	8006750 <_malloc_r+0xa8>
 8006792:	230c      	movs	r3, #12
 8006794:	6033      	str	r3, [r6, #0]
 8006796:	4630      	mov	r0, r6
 8006798:	f000 fa44 	bl	8006c24 <__malloc_unlock>
 800679c:	e794      	b.n	80066c8 <_malloc_r+0x20>
 800679e:	6005      	str	r5, [r0, #0]
 80067a0:	e7d6      	b.n	8006750 <_malloc_r+0xa8>
 80067a2:	bf00      	nop
 80067a4:	20000474 	.word	0x20000474

080067a8 <_printf_common>:
 80067a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ac:	4616      	mov	r6, r2
 80067ae:	4698      	mov	r8, r3
 80067b0:	688a      	ldr	r2, [r1, #8]
 80067b2:	690b      	ldr	r3, [r1, #16]
 80067b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067b8:	4293      	cmp	r3, r2
 80067ba:	bfb8      	it	lt
 80067bc:	4613      	movlt	r3, r2
 80067be:	6033      	str	r3, [r6, #0]
 80067c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067c4:	4607      	mov	r7, r0
 80067c6:	460c      	mov	r4, r1
 80067c8:	b10a      	cbz	r2, 80067ce <_printf_common+0x26>
 80067ca:	3301      	adds	r3, #1
 80067cc:	6033      	str	r3, [r6, #0]
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	0699      	lsls	r1, r3, #26
 80067d2:	bf42      	ittt	mi
 80067d4:	6833      	ldrmi	r3, [r6, #0]
 80067d6:	3302      	addmi	r3, #2
 80067d8:	6033      	strmi	r3, [r6, #0]
 80067da:	6825      	ldr	r5, [r4, #0]
 80067dc:	f015 0506 	ands.w	r5, r5, #6
 80067e0:	d106      	bne.n	80067f0 <_printf_common+0x48>
 80067e2:	f104 0a19 	add.w	sl, r4, #25
 80067e6:	68e3      	ldr	r3, [r4, #12]
 80067e8:	6832      	ldr	r2, [r6, #0]
 80067ea:	1a9b      	subs	r3, r3, r2
 80067ec:	42ab      	cmp	r3, r5
 80067ee:	dc26      	bgt.n	800683e <_printf_common+0x96>
 80067f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067f4:	6822      	ldr	r2, [r4, #0]
 80067f6:	3b00      	subs	r3, #0
 80067f8:	bf18      	it	ne
 80067fa:	2301      	movne	r3, #1
 80067fc:	0692      	lsls	r2, r2, #26
 80067fe:	d42b      	bmi.n	8006858 <_printf_common+0xb0>
 8006800:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006804:	4641      	mov	r1, r8
 8006806:	4638      	mov	r0, r7
 8006808:	47c8      	blx	r9
 800680a:	3001      	adds	r0, #1
 800680c:	d01e      	beq.n	800684c <_printf_common+0xa4>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	6922      	ldr	r2, [r4, #16]
 8006812:	f003 0306 	and.w	r3, r3, #6
 8006816:	2b04      	cmp	r3, #4
 8006818:	bf02      	ittt	eq
 800681a:	68e5      	ldreq	r5, [r4, #12]
 800681c:	6833      	ldreq	r3, [r6, #0]
 800681e:	1aed      	subeq	r5, r5, r3
 8006820:	68a3      	ldr	r3, [r4, #8]
 8006822:	bf0c      	ite	eq
 8006824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006828:	2500      	movne	r5, #0
 800682a:	4293      	cmp	r3, r2
 800682c:	bfc4      	itt	gt
 800682e:	1a9b      	subgt	r3, r3, r2
 8006830:	18ed      	addgt	r5, r5, r3
 8006832:	2600      	movs	r6, #0
 8006834:	341a      	adds	r4, #26
 8006836:	42b5      	cmp	r5, r6
 8006838:	d11a      	bne.n	8006870 <_printf_common+0xc8>
 800683a:	2000      	movs	r0, #0
 800683c:	e008      	b.n	8006850 <_printf_common+0xa8>
 800683e:	2301      	movs	r3, #1
 8006840:	4652      	mov	r2, sl
 8006842:	4641      	mov	r1, r8
 8006844:	4638      	mov	r0, r7
 8006846:	47c8      	blx	r9
 8006848:	3001      	adds	r0, #1
 800684a:	d103      	bne.n	8006854 <_printf_common+0xac>
 800684c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006854:	3501      	adds	r5, #1
 8006856:	e7c6      	b.n	80067e6 <_printf_common+0x3e>
 8006858:	18e1      	adds	r1, r4, r3
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	2030      	movs	r0, #48	@ 0x30
 800685e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006862:	4422      	add	r2, r4
 8006864:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006868:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800686c:	3302      	adds	r3, #2
 800686e:	e7c7      	b.n	8006800 <_printf_common+0x58>
 8006870:	2301      	movs	r3, #1
 8006872:	4622      	mov	r2, r4
 8006874:	4641      	mov	r1, r8
 8006876:	4638      	mov	r0, r7
 8006878:	47c8      	blx	r9
 800687a:	3001      	adds	r0, #1
 800687c:	d0e6      	beq.n	800684c <_printf_common+0xa4>
 800687e:	3601      	adds	r6, #1
 8006880:	e7d9      	b.n	8006836 <_printf_common+0x8e>
	...

08006884 <_printf_i>:
 8006884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006888:	7e0f      	ldrb	r7, [r1, #24]
 800688a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800688c:	2f78      	cmp	r7, #120	@ 0x78
 800688e:	4691      	mov	r9, r2
 8006890:	4680      	mov	r8, r0
 8006892:	460c      	mov	r4, r1
 8006894:	469a      	mov	sl, r3
 8006896:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800689a:	d807      	bhi.n	80068ac <_printf_i+0x28>
 800689c:	2f62      	cmp	r7, #98	@ 0x62
 800689e:	d80a      	bhi.n	80068b6 <_printf_i+0x32>
 80068a0:	2f00      	cmp	r7, #0
 80068a2:	f000 80d1 	beq.w	8006a48 <_printf_i+0x1c4>
 80068a6:	2f58      	cmp	r7, #88	@ 0x58
 80068a8:	f000 80b8 	beq.w	8006a1c <_printf_i+0x198>
 80068ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068b4:	e03a      	b.n	800692c <_printf_i+0xa8>
 80068b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068ba:	2b15      	cmp	r3, #21
 80068bc:	d8f6      	bhi.n	80068ac <_printf_i+0x28>
 80068be:	a101      	add	r1, pc, #4	@ (adr r1, 80068c4 <_printf_i+0x40>)
 80068c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068c4:	0800691d 	.word	0x0800691d
 80068c8:	08006931 	.word	0x08006931
 80068cc:	080068ad 	.word	0x080068ad
 80068d0:	080068ad 	.word	0x080068ad
 80068d4:	080068ad 	.word	0x080068ad
 80068d8:	080068ad 	.word	0x080068ad
 80068dc:	08006931 	.word	0x08006931
 80068e0:	080068ad 	.word	0x080068ad
 80068e4:	080068ad 	.word	0x080068ad
 80068e8:	080068ad 	.word	0x080068ad
 80068ec:	080068ad 	.word	0x080068ad
 80068f0:	08006a2f 	.word	0x08006a2f
 80068f4:	0800695b 	.word	0x0800695b
 80068f8:	080069e9 	.word	0x080069e9
 80068fc:	080068ad 	.word	0x080068ad
 8006900:	080068ad 	.word	0x080068ad
 8006904:	08006a51 	.word	0x08006a51
 8006908:	080068ad 	.word	0x080068ad
 800690c:	0800695b 	.word	0x0800695b
 8006910:	080068ad 	.word	0x080068ad
 8006914:	080068ad 	.word	0x080068ad
 8006918:	080069f1 	.word	0x080069f1
 800691c:	6833      	ldr	r3, [r6, #0]
 800691e:	1d1a      	adds	r2, r3, #4
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6032      	str	r2, [r6, #0]
 8006924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006928:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800692c:	2301      	movs	r3, #1
 800692e:	e09c      	b.n	8006a6a <_printf_i+0x1e6>
 8006930:	6833      	ldr	r3, [r6, #0]
 8006932:	6820      	ldr	r0, [r4, #0]
 8006934:	1d19      	adds	r1, r3, #4
 8006936:	6031      	str	r1, [r6, #0]
 8006938:	0606      	lsls	r6, r0, #24
 800693a:	d501      	bpl.n	8006940 <_printf_i+0xbc>
 800693c:	681d      	ldr	r5, [r3, #0]
 800693e:	e003      	b.n	8006948 <_printf_i+0xc4>
 8006940:	0645      	lsls	r5, r0, #25
 8006942:	d5fb      	bpl.n	800693c <_printf_i+0xb8>
 8006944:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006948:	2d00      	cmp	r5, #0
 800694a:	da03      	bge.n	8006954 <_printf_i+0xd0>
 800694c:	232d      	movs	r3, #45	@ 0x2d
 800694e:	426d      	negs	r5, r5
 8006950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006954:	4858      	ldr	r0, [pc, #352]	@ (8006ab8 <_printf_i+0x234>)
 8006956:	230a      	movs	r3, #10
 8006958:	e011      	b.n	800697e <_printf_i+0xfa>
 800695a:	6821      	ldr	r1, [r4, #0]
 800695c:	6833      	ldr	r3, [r6, #0]
 800695e:	0608      	lsls	r0, r1, #24
 8006960:	f853 5b04 	ldr.w	r5, [r3], #4
 8006964:	d402      	bmi.n	800696c <_printf_i+0xe8>
 8006966:	0649      	lsls	r1, r1, #25
 8006968:	bf48      	it	mi
 800696a:	b2ad      	uxthmi	r5, r5
 800696c:	2f6f      	cmp	r7, #111	@ 0x6f
 800696e:	4852      	ldr	r0, [pc, #328]	@ (8006ab8 <_printf_i+0x234>)
 8006970:	6033      	str	r3, [r6, #0]
 8006972:	bf14      	ite	ne
 8006974:	230a      	movne	r3, #10
 8006976:	2308      	moveq	r3, #8
 8006978:	2100      	movs	r1, #0
 800697a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800697e:	6866      	ldr	r6, [r4, #4]
 8006980:	60a6      	str	r6, [r4, #8]
 8006982:	2e00      	cmp	r6, #0
 8006984:	db05      	blt.n	8006992 <_printf_i+0x10e>
 8006986:	6821      	ldr	r1, [r4, #0]
 8006988:	432e      	orrs	r6, r5
 800698a:	f021 0104 	bic.w	r1, r1, #4
 800698e:	6021      	str	r1, [r4, #0]
 8006990:	d04b      	beq.n	8006a2a <_printf_i+0x1a6>
 8006992:	4616      	mov	r6, r2
 8006994:	fbb5 f1f3 	udiv	r1, r5, r3
 8006998:	fb03 5711 	mls	r7, r3, r1, r5
 800699c:	5dc7      	ldrb	r7, [r0, r7]
 800699e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069a2:	462f      	mov	r7, r5
 80069a4:	42bb      	cmp	r3, r7
 80069a6:	460d      	mov	r5, r1
 80069a8:	d9f4      	bls.n	8006994 <_printf_i+0x110>
 80069aa:	2b08      	cmp	r3, #8
 80069ac:	d10b      	bne.n	80069c6 <_printf_i+0x142>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	07df      	lsls	r7, r3, #31
 80069b2:	d508      	bpl.n	80069c6 <_printf_i+0x142>
 80069b4:	6923      	ldr	r3, [r4, #16]
 80069b6:	6861      	ldr	r1, [r4, #4]
 80069b8:	4299      	cmp	r1, r3
 80069ba:	bfde      	ittt	le
 80069bc:	2330      	movle	r3, #48	@ 0x30
 80069be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069c2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80069c6:	1b92      	subs	r2, r2, r6
 80069c8:	6122      	str	r2, [r4, #16]
 80069ca:	f8cd a000 	str.w	sl, [sp]
 80069ce:	464b      	mov	r3, r9
 80069d0:	aa03      	add	r2, sp, #12
 80069d2:	4621      	mov	r1, r4
 80069d4:	4640      	mov	r0, r8
 80069d6:	f7ff fee7 	bl	80067a8 <_printf_common>
 80069da:	3001      	adds	r0, #1
 80069dc:	d14a      	bne.n	8006a74 <_printf_i+0x1f0>
 80069de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069e2:	b004      	add	sp, #16
 80069e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	f043 0320 	orr.w	r3, r3, #32
 80069ee:	6023      	str	r3, [r4, #0]
 80069f0:	4832      	ldr	r0, [pc, #200]	@ (8006abc <_printf_i+0x238>)
 80069f2:	2778      	movs	r7, #120	@ 0x78
 80069f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	6831      	ldr	r1, [r6, #0]
 80069fc:	061f      	lsls	r7, r3, #24
 80069fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a02:	d402      	bmi.n	8006a0a <_printf_i+0x186>
 8006a04:	065f      	lsls	r7, r3, #25
 8006a06:	bf48      	it	mi
 8006a08:	b2ad      	uxthmi	r5, r5
 8006a0a:	6031      	str	r1, [r6, #0]
 8006a0c:	07d9      	lsls	r1, r3, #31
 8006a0e:	bf44      	itt	mi
 8006a10:	f043 0320 	orrmi.w	r3, r3, #32
 8006a14:	6023      	strmi	r3, [r4, #0]
 8006a16:	b11d      	cbz	r5, 8006a20 <_printf_i+0x19c>
 8006a18:	2310      	movs	r3, #16
 8006a1a:	e7ad      	b.n	8006978 <_printf_i+0xf4>
 8006a1c:	4826      	ldr	r0, [pc, #152]	@ (8006ab8 <_printf_i+0x234>)
 8006a1e:	e7e9      	b.n	80069f4 <_printf_i+0x170>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	f023 0320 	bic.w	r3, r3, #32
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	e7f6      	b.n	8006a18 <_printf_i+0x194>
 8006a2a:	4616      	mov	r6, r2
 8006a2c:	e7bd      	b.n	80069aa <_printf_i+0x126>
 8006a2e:	6833      	ldr	r3, [r6, #0]
 8006a30:	6825      	ldr	r5, [r4, #0]
 8006a32:	6961      	ldr	r1, [r4, #20]
 8006a34:	1d18      	adds	r0, r3, #4
 8006a36:	6030      	str	r0, [r6, #0]
 8006a38:	062e      	lsls	r6, r5, #24
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	d501      	bpl.n	8006a42 <_printf_i+0x1be>
 8006a3e:	6019      	str	r1, [r3, #0]
 8006a40:	e002      	b.n	8006a48 <_printf_i+0x1c4>
 8006a42:	0668      	lsls	r0, r5, #25
 8006a44:	d5fb      	bpl.n	8006a3e <_printf_i+0x1ba>
 8006a46:	8019      	strh	r1, [r3, #0]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	6123      	str	r3, [r4, #16]
 8006a4c:	4616      	mov	r6, r2
 8006a4e:	e7bc      	b.n	80069ca <_printf_i+0x146>
 8006a50:	6833      	ldr	r3, [r6, #0]
 8006a52:	1d1a      	adds	r2, r3, #4
 8006a54:	6032      	str	r2, [r6, #0]
 8006a56:	681e      	ldr	r6, [r3, #0]
 8006a58:	6862      	ldr	r2, [r4, #4]
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	f7f9 fbb7 	bl	80001d0 <memchr>
 8006a62:	b108      	cbz	r0, 8006a68 <_printf_i+0x1e4>
 8006a64:	1b80      	subs	r0, r0, r6
 8006a66:	6060      	str	r0, [r4, #4]
 8006a68:	6863      	ldr	r3, [r4, #4]
 8006a6a:	6123      	str	r3, [r4, #16]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a72:	e7aa      	b.n	80069ca <_printf_i+0x146>
 8006a74:	6923      	ldr	r3, [r4, #16]
 8006a76:	4632      	mov	r2, r6
 8006a78:	4649      	mov	r1, r9
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	47d0      	blx	sl
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d0ad      	beq.n	80069de <_printf_i+0x15a>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	079b      	lsls	r3, r3, #30
 8006a86:	d413      	bmi.n	8006ab0 <_printf_i+0x22c>
 8006a88:	68e0      	ldr	r0, [r4, #12]
 8006a8a:	9b03      	ldr	r3, [sp, #12]
 8006a8c:	4298      	cmp	r0, r3
 8006a8e:	bfb8      	it	lt
 8006a90:	4618      	movlt	r0, r3
 8006a92:	e7a6      	b.n	80069e2 <_printf_i+0x15e>
 8006a94:	2301      	movs	r3, #1
 8006a96:	4632      	mov	r2, r6
 8006a98:	4649      	mov	r1, r9
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	47d0      	blx	sl
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	d09d      	beq.n	80069de <_printf_i+0x15a>
 8006aa2:	3501      	adds	r5, #1
 8006aa4:	68e3      	ldr	r3, [r4, #12]
 8006aa6:	9903      	ldr	r1, [sp, #12]
 8006aa8:	1a5b      	subs	r3, r3, r1
 8006aaa:	42ab      	cmp	r3, r5
 8006aac:	dcf2      	bgt.n	8006a94 <_printf_i+0x210>
 8006aae:	e7eb      	b.n	8006a88 <_printf_i+0x204>
 8006ab0:	2500      	movs	r5, #0
 8006ab2:	f104 0619 	add.w	r6, r4, #25
 8006ab6:	e7f5      	b.n	8006aa4 <_printf_i+0x220>
 8006ab8:	08007191 	.word	0x08007191
 8006abc:	080071a2 	.word	0x080071a2

08006ac0 <__sflush_r>:
 8006ac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac8:	0716      	lsls	r6, r2, #28
 8006aca:	4605      	mov	r5, r0
 8006acc:	460c      	mov	r4, r1
 8006ace:	d454      	bmi.n	8006b7a <__sflush_r+0xba>
 8006ad0:	684b      	ldr	r3, [r1, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	dc02      	bgt.n	8006adc <__sflush_r+0x1c>
 8006ad6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	dd48      	ble.n	8006b6e <__sflush_r+0xae>
 8006adc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ade:	2e00      	cmp	r6, #0
 8006ae0:	d045      	beq.n	8006b6e <__sflush_r+0xae>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ae8:	682f      	ldr	r7, [r5, #0]
 8006aea:	6a21      	ldr	r1, [r4, #32]
 8006aec:	602b      	str	r3, [r5, #0]
 8006aee:	d030      	beq.n	8006b52 <__sflush_r+0x92>
 8006af0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	0759      	lsls	r1, r3, #29
 8006af6:	d505      	bpl.n	8006b04 <__sflush_r+0x44>
 8006af8:	6863      	ldr	r3, [r4, #4]
 8006afa:	1ad2      	subs	r2, r2, r3
 8006afc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006afe:	b10b      	cbz	r3, 8006b04 <__sflush_r+0x44>
 8006b00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b02:	1ad2      	subs	r2, r2, r3
 8006b04:	2300      	movs	r3, #0
 8006b06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b08:	6a21      	ldr	r1, [r4, #32]
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	47b0      	blx	r6
 8006b0e:	1c43      	adds	r3, r0, #1
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	d106      	bne.n	8006b22 <__sflush_r+0x62>
 8006b14:	6829      	ldr	r1, [r5, #0]
 8006b16:	291d      	cmp	r1, #29
 8006b18:	d82b      	bhi.n	8006b72 <__sflush_r+0xb2>
 8006b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8006bc4 <__sflush_r+0x104>)
 8006b1c:	40ca      	lsrs	r2, r1
 8006b1e:	07d6      	lsls	r6, r2, #31
 8006b20:	d527      	bpl.n	8006b72 <__sflush_r+0xb2>
 8006b22:	2200      	movs	r2, #0
 8006b24:	6062      	str	r2, [r4, #4]
 8006b26:	04d9      	lsls	r1, r3, #19
 8006b28:	6922      	ldr	r2, [r4, #16]
 8006b2a:	6022      	str	r2, [r4, #0]
 8006b2c:	d504      	bpl.n	8006b38 <__sflush_r+0x78>
 8006b2e:	1c42      	adds	r2, r0, #1
 8006b30:	d101      	bne.n	8006b36 <__sflush_r+0x76>
 8006b32:	682b      	ldr	r3, [r5, #0]
 8006b34:	b903      	cbnz	r3, 8006b38 <__sflush_r+0x78>
 8006b36:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b3a:	602f      	str	r7, [r5, #0]
 8006b3c:	b1b9      	cbz	r1, 8006b6e <__sflush_r+0xae>
 8006b3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b42:	4299      	cmp	r1, r3
 8006b44:	d002      	beq.n	8006b4c <__sflush_r+0x8c>
 8006b46:	4628      	mov	r0, r5
 8006b48:	f000 fa24 	bl	8006f94 <_free_r>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b50:	e00d      	b.n	8006b6e <__sflush_r+0xae>
 8006b52:	2301      	movs	r3, #1
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b0      	blx	r6
 8006b58:	4602      	mov	r2, r0
 8006b5a:	1c50      	adds	r0, r2, #1
 8006b5c:	d1c9      	bne.n	8006af2 <__sflush_r+0x32>
 8006b5e:	682b      	ldr	r3, [r5, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0c6      	beq.n	8006af2 <__sflush_r+0x32>
 8006b64:	2b1d      	cmp	r3, #29
 8006b66:	d001      	beq.n	8006b6c <__sflush_r+0xac>
 8006b68:	2b16      	cmp	r3, #22
 8006b6a:	d11e      	bne.n	8006baa <__sflush_r+0xea>
 8006b6c:	602f      	str	r7, [r5, #0]
 8006b6e:	2000      	movs	r0, #0
 8006b70:	e022      	b.n	8006bb8 <__sflush_r+0xf8>
 8006b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b76:	b21b      	sxth	r3, r3
 8006b78:	e01b      	b.n	8006bb2 <__sflush_r+0xf2>
 8006b7a:	690f      	ldr	r7, [r1, #16]
 8006b7c:	2f00      	cmp	r7, #0
 8006b7e:	d0f6      	beq.n	8006b6e <__sflush_r+0xae>
 8006b80:	0793      	lsls	r3, r2, #30
 8006b82:	680e      	ldr	r6, [r1, #0]
 8006b84:	bf08      	it	eq
 8006b86:	694b      	ldreq	r3, [r1, #20]
 8006b88:	600f      	str	r7, [r1, #0]
 8006b8a:	bf18      	it	ne
 8006b8c:	2300      	movne	r3, #0
 8006b8e:	eba6 0807 	sub.w	r8, r6, r7
 8006b92:	608b      	str	r3, [r1, #8]
 8006b94:	f1b8 0f00 	cmp.w	r8, #0
 8006b98:	dde9      	ble.n	8006b6e <__sflush_r+0xae>
 8006b9a:	6a21      	ldr	r1, [r4, #32]
 8006b9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006b9e:	4643      	mov	r3, r8
 8006ba0:	463a      	mov	r2, r7
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	47b0      	blx	r6
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	dc08      	bgt.n	8006bbc <__sflush_r+0xfc>
 8006baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bb2:	81a3      	strh	r3, [r4, #12]
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bbc:	4407      	add	r7, r0
 8006bbe:	eba8 0800 	sub.w	r8, r8, r0
 8006bc2:	e7e7      	b.n	8006b94 <__sflush_r+0xd4>
 8006bc4:	20400001 	.word	0x20400001

08006bc8 <_fflush_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	690b      	ldr	r3, [r1, #16]
 8006bcc:	4605      	mov	r5, r0
 8006bce:	460c      	mov	r4, r1
 8006bd0:	b913      	cbnz	r3, 8006bd8 <_fflush_r+0x10>
 8006bd2:	2500      	movs	r5, #0
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	b118      	cbz	r0, 8006be2 <_fflush_r+0x1a>
 8006bda:	6a03      	ldr	r3, [r0, #32]
 8006bdc:	b90b      	cbnz	r3, 8006be2 <_fflush_r+0x1a>
 8006bde:	f7ff fb25 	bl	800622c <__sinit>
 8006be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0f3      	beq.n	8006bd2 <_fflush_r+0xa>
 8006bea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006bec:	07d0      	lsls	r0, r2, #31
 8006bee:	d404      	bmi.n	8006bfa <_fflush_r+0x32>
 8006bf0:	0599      	lsls	r1, r3, #22
 8006bf2:	d402      	bmi.n	8006bfa <_fflush_r+0x32>
 8006bf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bf6:	f7ff fbf2 	bl	80063de <__retarget_lock_acquire_recursive>
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	f7ff ff5f 	bl	8006ac0 <__sflush_r>
 8006c02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c04:	07da      	lsls	r2, r3, #31
 8006c06:	4605      	mov	r5, r0
 8006c08:	d4e4      	bmi.n	8006bd4 <_fflush_r+0xc>
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	059b      	lsls	r3, r3, #22
 8006c0e:	d4e1      	bmi.n	8006bd4 <_fflush_r+0xc>
 8006c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c12:	f7ff fbe5 	bl	80063e0 <__retarget_lock_release_recursive>
 8006c16:	e7dd      	b.n	8006bd4 <_fflush_r+0xc>

08006c18 <__malloc_lock>:
 8006c18:	4801      	ldr	r0, [pc, #4]	@ (8006c20 <__malloc_lock+0x8>)
 8006c1a:	f7ff bbe0 	b.w	80063de <__retarget_lock_acquire_recursive>
 8006c1e:	bf00      	nop
 8006c20:	2000046c 	.word	0x2000046c

08006c24 <__malloc_unlock>:
 8006c24:	4801      	ldr	r0, [pc, #4]	@ (8006c2c <__malloc_unlock+0x8>)
 8006c26:	f7ff bbdb 	b.w	80063e0 <__retarget_lock_release_recursive>
 8006c2a:	bf00      	nop
 8006c2c:	2000046c 	.word	0x2000046c

08006c30 <__sread>:
 8006c30:	b510      	push	{r4, lr}
 8006c32:	460c      	mov	r4, r1
 8006c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c38:	f000 f956 	bl	8006ee8 <_read_r>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	bfab      	itete	ge
 8006c40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c42:	89a3      	ldrhlt	r3, [r4, #12]
 8006c44:	181b      	addge	r3, r3, r0
 8006c46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c4a:	bfac      	ite	ge
 8006c4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c4e:	81a3      	strhlt	r3, [r4, #12]
 8006c50:	bd10      	pop	{r4, pc}

08006c52 <__swrite>:
 8006c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c56:	461f      	mov	r7, r3
 8006c58:	898b      	ldrh	r3, [r1, #12]
 8006c5a:	05db      	lsls	r3, r3, #23
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	460c      	mov	r4, r1
 8006c60:	4616      	mov	r6, r2
 8006c62:	d505      	bpl.n	8006c70 <__swrite+0x1e>
 8006c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c68:	2302      	movs	r3, #2
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f000 f92a 	bl	8006ec4 <_lseek_r>
 8006c70:	89a3      	ldrh	r3, [r4, #12]
 8006c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c7a:	81a3      	strh	r3, [r4, #12]
 8006c7c:	4632      	mov	r2, r6
 8006c7e:	463b      	mov	r3, r7
 8006c80:	4628      	mov	r0, r5
 8006c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c86:	f000 b951 	b.w	8006f2c <_write_r>

08006c8a <__sseek>:
 8006c8a:	b510      	push	{r4, lr}
 8006c8c:	460c      	mov	r4, r1
 8006c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c92:	f000 f917 	bl	8006ec4 <_lseek_r>
 8006c96:	1c43      	adds	r3, r0, #1
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	bf15      	itete	ne
 8006c9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ca2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ca6:	81a3      	strheq	r3, [r4, #12]
 8006ca8:	bf18      	it	ne
 8006caa:	81a3      	strhne	r3, [r4, #12]
 8006cac:	bd10      	pop	{r4, pc}

08006cae <__sclose>:
 8006cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb2:	f000 b94d 	b.w	8006f50 <_close_r>

08006cb6 <__swbuf_r>:
 8006cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb8:	460e      	mov	r6, r1
 8006cba:	4614      	mov	r4, r2
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	b118      	cbz	r0, 8006cc8 <__swbuf_r+0x12>
 8006cc0:	6a03      	ldr	r3, [r0, #32]
 8006cc2:	b90b      	cbnz	r3, 8006cc8 <__swbuf_r+0x12>
 8006cc4:	f7ff fab2 	bl	800622c <__sinit>
 8006cc8:	69a3      	ldr	r3, [r4, #24]
 8006cca:	60a3      	str	r3, [r4, #8]
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	071a      	lsls	r2, r3, #28
 8006cd0:	d501      	bpl.n	8006cd6 <__swbuf_r+0x20>
 8006cd2:	6923      	ldr	r3, [r4, #16]
 8006cd4:	b943      	cbnz	r3, 8006ce8 <__swbuf_r+0x32>
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f000 f82b 	bl	8006d34 <__swsetup_r>
 8006cde:	b118      	cbz	r0, 8006ce8 <__swbuf_r+0x32>
 8006ce0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	6922      	ldr	r2, [r4, #16]
 8006cec:	1a98      	subs	r0, r3, r2
 8006cee:	6963      	ldr	r3, [r4, #20]
 8006cf0:	b2f6      	uxtb	r6, r6
 8006cf2:	4283      	cmp	r3, r0
 8006cf4:	4637      	mov	r7, r6
 8006cf6:	dc05      	bgt.n	8006d04 <__swbuf_r+0x4e>
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	f7ff ff64 	bl	8006bc8 <_fflush_r>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d1ed      	bne.n	8006ce0 <__swbuf_r+0x2a>
 8006d04:	68a3      	ldr	r3, [r4, #8]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	60a3      	str	r3, [r4, #8]
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	6022      	str	r2, [r4, #0]
 8006d10:	701e      	strb	r6, [r3, #0]
 8006d12:	6962      	ldr	r2, [r4, #20]
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d004      	beq.n	8006d24 <__swbuf_r+0x6e>
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	07db      	lsls	r3, r3, #31
 8006d1e:	d5e1      	bpl.n	8006ce4 <__swbuf_r+0x2e>
 8006d20:	2e0a      	cmp	r6, #10
 8006d22:	d1df      	bne.n	8006ce4 <__swbuf_r+0x2e>
 8006d24:	4621      	mov	r1, r4
 8006d26:	4628      	mov	r0, r5
 8006d28:	f7ff ff4e 	bl	8006bc8 <_fflush_r>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d0d9      	beq.n	8006ce4 <__swbuf_r+0x2e>
 8006d30:	e7d6      	b.n	8006ce0 <__swbuf_r+0x2a>
	...

08006d34 <__swsetup_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4b29      	ldr	r3, [pc, #164]	@ (8006ddc <__swsetup_r+0xa8>)
 8006d38:	4605      	mov	r5, r0
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	b118      	cbz	r0, 8006d48 <__swsetup_r+0x14>
 8006d40:	6a03      	ldr	r3, [r0, #32]
 8006d42:	b90b      	cbnz	r3, 8006d48 <__swsetup_r+0x14>
 8006d44:	f7ff fa72 	bl	800622c <__sinit>
 8006d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d4c:	0719      	lsls	r1, r3, #28
 8006d4e:	d422      	bmi.n	8006d96 <__swsetup_r+0x62>
 8006d50:	06da      	lsls	r2, r3, #27
 8006d52:	d407      	bmi.n	8006d64 <__swsetup_r+0x30>
 8006d54:	2209      	movs	r2, #9
 8006d56:	602a      	str	r2, [r5, #0]
 8006d58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d5c:	81a3      	strh	r3, [r4, #12]
 8006d5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d62:	e033      	b.n	8006dcc <__swsetup_r+0x98>
 8006d64:	0758      	lsls	r0, r3, #29
 8006d66:	d512      	bpl.n	8006d8e <__swsetup_r+0x5a>
 8006d68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d6a:	b141      	cbz	r1, 8006d7e <__swsetup_r+0x4a>
 8006d6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d70:	4299      	cmp	r1, r3
 8006d72:	d002      	beq.n	8006d7a <__swsetup_r+0x46>
 8006d74:	4628      	mov	r0, r5
 8006d76:	f000 f90d 	bl	8006f94 <_free_r>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	2300      	movs	r3, #0
 8006d88:	6063      	str	r3, [r4, #4]
 8006d8a:	6923      	ldr	r3, [r4, #16]
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	f043 0308 	orr.w	r3, r3, #8
 8006d94:	81a3      	strh	r3, [r4, #12]
 8006d96:	6923      	ldr	r3, [r4, #16]
 8006d98:	b94b      	cbnz	r3, 8006dae <__swsetup_r+0x7a>
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006da4:	d003      	beq.n	8006dae <__swsetup_r+0x7a>
 8006da6:	4621      	mov	r1, r4
 8006da8:	4628      	mov	r0, r5
 8006daa:	f000 f83f 	bl	8006e2c <__smakebuf_r>
 8006dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db2:	f013 0201 	ands.w	r2, r3, #1
 8006db6:	d00a      	beq.n	8006dce <__swsetup_r+0x9a>
 8006db8:	2200      	movs	r2, #0
 8006dba:	60a2      	str	r2, [r4, #8]
 8006dbc:	6962      	ldr	r2, [r4, #20]
 8006dbe:	4252      	negs	r2, r2
 8006dc0:	61a2      	str	r2, [r4, #24]
 8006dc2:	6922      	ldr	r2, [r4, #16]
 8006dc4:	b942      	cbnz	r2, 8006dd8 <__swsetup_r+0xa4>
 8006dc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006dca:	d1c5      	bne.n	8006d58 <__swsetup_r+0x24>
 8006dcc:	bd38      	pop	{r3, r4, r5, pc}
 8006dce:	0799      	lsls	r1, r3, #30
 8006dd0:	bf58      	it	pl
 8006dd2:	6962      	ldrpl	r2, [r4, #20]
 8006dd4:	60a2      	str	r2, [r4, #8]
 8006dd6:	e7f4      	b.n	8006dc2 <__swsetup_r+0x8e>
 8006dd8:	2000      	movs	r0, #0
 8006dda:	e7f7      	b.n	8006dcc <__swsetup_r+0x98>
 8006ddc:	2000001c 	.word	0x2000001c

08006de0 <__swhatbuf_r>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	460c      	mov	r4, r1
 8006de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de8:	2900      	cmp	r1, #0
 8006dea:	b096      	sub	sp, #88	@ 0x58
 8006dec:	4615      	mov	r5, r2
 8006dee:	461e      	mov	r6, r3
 8006df0:	da0d      	bge.n	8006e0e <__swhatbuf_r+0x2e>
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006df8:	f04f 0100 	mov.w	r1, #0
 8006dfc:	bf14      	ite	ne
 8006dfe:	2340      	movne	r3, #64	@ 0x40
 8006e00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e04:	2000      	movs	r0, #0
 8006e06:	6031      	str	r1, [r6, #0]
 8006e08:	602b      	str	r3, [r5, #0]
 8006e0a:	b016      	add	sp, #88	@ 0x58
 8006e0c:	bd70      	pop	{r4, r5, r6, pc}
 8006e0e:	466a      	mov	r2, sp
 8006e10:	f000 f8ae 	bl	8006f70 <_fstat_r>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	dbec      	blt.n	8006df2 <__swhatbuf_r+0x12>
 8006e18:	9901      	ldr	r1, [sp, #4]
 8006e1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e22:	4259      	negs	r1, r3
 8006e24:	4159      	adcs	r1, r3
 8006e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e2a:	e7eb      	b.n	8006e04 <__swhatbuf_r+0x24>

08006e2c <__smakebuf_r>:
 8006e2c:	898b      	ldrh	r3, [r1, #12]
 8006e2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e30:	079d      	lsls	r5, r3, #30
 8006e32:	4606      	mov	r6, r0
 8006e34:	460c      	mov	r4, r1
 8006e36:	d507      	bpl.n	8006e48 <__smakebuf_r+0x1c>
 8006e38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	6123      	str	r3, [r4, #16]
 8006e40:	2301      	movs	r3, #1
 8006e42:	6163      	str	r3, [r4, #20]
 8006e44:	b003      	add	sp, #12
 8006e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e48:	ab01      	add	r3, sp, #4
 8006e4a:	466a      	mov	r2, sp
 8006e4c:	f7ff ffc8 	bl	8006de0 <__swhatbuf_r>
 8006e50:	9f00      	ldr	r7, [sp, #0]
 8006e52:	4605      	mov	r5, r0
 8006e54:	4639      	mov	r1, r7
 8006e56:	4630      	mov	r0, r6
 8006e58:	f7ff fc26 	bl	80066a8 <_malloc_r>
 8006e5c:	b948      	cbnz	r0, 8006e72 <__smakebuf_r+0x46>
 8006e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e62:	059a      	lsls	r2, r3, #22
 8006e64:	d4ee      	bmi.n	8006e44 <__smakebuf_r+0x18>
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	f043 0302 	orr.w	r3, r3, #2
 8006e6e:	81a3      	strh	r3, [r4, #12]
 8006e70:	e7e2      	b.n	8006e38 <__smakebuf_r+0xc>
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	6020      	str	r0, [r4, #0]
 8006e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e7a:	81a3      	strh	r3, [r4, #12]
 8006e7c:	9b01      	ldr	r3, [sp, #4]
 8006e7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e82:	b15b      	cbz	r3, 8006e9c <__smakebuf_r+0x70>
 8006e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f000 f80b 	bl	8006ea4 <_isatty_r>
 8006e8e:	b128      	cbz	r0, 8006e9c <__smakebuf_r+0x70>
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	f023 0303 	bic.w	r3, r3, #3
 8006e96:	f043 0301 	orr.w	r3, r3, #1
 8006e9a:	81a3      	strh	r3, [r4, #12]
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	431d      	orrs	r5, r3
 8006ea0:	81a5      	strh	r5, [r4, #12]
 8006ea2:	e7cf      	b.n	8006e44 <__smakebuf_r+0x18>

08006ea4 <_isatty_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	4d06      	ldr	r5, [pc, #24]	@ (8006ec0 <_isatty_r+0x1c>)
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4604      	mov	r4, r0
 8006eac:	4608      	mov	r0, r1
 8006eae:	602b      	str	r3, [r5, #0]
 8006eb0:	f7fb f83f 	bl	8001f32 <_isatty>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d102      	bne.n	8006ebe <_isatty_r+0x1a>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	b103      	cbz	r3, 8006ebe <_isatty_r+0x1a>
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	20000478 	.word	0x20000478

08006ec4 <_lseek_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4d07      	ldr	r5, [pc, #28]	@ (8006ee4 <_lseek_r+0x20>)
 8006ec8:	4604      	mov	r4, r0
 8006eca:	4608      	mov	r0, r1
 8006ecc:	4611      	mov	r1, r2
 8006ece:	2200      	movs	r2, #0
 8006ed0:	602a      	str	r2, [r5, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f7fb f838 	bl	8001f48 <_lseek>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_lseek_r+0x1e>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_lseek_r+0x1e>
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	20000478 	.word	0x20000478

08006ee8 <_read_r>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	4d07      	ldr	r5, [pc, #28]	@ (8006f08 <_read_r+0x20>)
 8006eec:	4604      	mov	r4, r0
 8006eee:	4608      	mov	r0, r1
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	602a      	str	r2, [r5, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f7fa ffe2 	bl	8001ec0 <_read>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_read_r+0x1e>
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_read_r+0x1e>
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	20000478 	.word	0x20000478

08006f0c <_sbrk_r>:
 8006f0c:	b538      	push	{r3, r4, r5, lr}
 8006f0e:	4d06      	ldr	r5, [pc, #24]	@ (8006f28 <_sbrk_r+0x1c>)
 8006f10:	2300      	movs	r3, #0
 8006f12:	4604      	mov	r4, r0
 8006f14:	4608      	mov	r0, r1
 8006f16:	602b      	str	r3, [r5, #0]
 8006f18:	f7fb f824 	bl	8001f64 <_sbrk>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d102      	bne.n	8006f26 <_sbrk_r+0x1a>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	b103      	cbz	r3, 8006f26 <_sbrk_r+0x1a>
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	20000478 	.word	0x20000478

08006f2c <_write_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d07      	ldr	r5, [pc, #28]	@ (8006f4c <_write_r+0x20>)
 8006f30:	4604      	mov	r4, r0
 8006f32:	4608      	mov	r0, r1
 8006f34:	4611      	mov	r1, r2
 8006f36:	2200      	movs	r2, #0
 8006f38:	602a      	str	r2, [r5, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f7fa fdfc 	bl	8001b38 <_write>
 8006f40:	1c43      	adds	r3, r0, #1
 8006f42:	d102      	bne.n	8006f4a <_write_r+0x1e>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	b103      	cbz	r3, 8006f4a <_write_r+0x1e>
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
 8006f4c:	20000478 	.word	0x20000478

08006f50 <_close_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4d06      	ldr	r5, [pc, #24]	@ (8006f6c <_close_r+0x1c>)
 8006f54:	2300      	movs	r3, #0
 8006f56:	4604      	mov	r4, r0
 8006f58:	4608      	mov	r0, r1
 8006f5a:	602b      	str	r3, [r5, #0]
 8006f5c:	f7fa ffcd 	bl	8001efa <_close>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d102      	bne.n	8006f6a <_close_r+0x1a>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	b103      	cbz	r3, 8006f6a <_close_r+0x1a>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	20000478 	.word	0x20000478

08006f70 <_fstat_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d07      	ldr	r5, [pc, #28]	@ (8006f90 <_fstat_r+0x20>)
 8006f74:	2300      	movs	r3, #0
 8006f76:	4604      	mov	r4, r0
 8006f78:	4608      	mov	r0, r1
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	602b      	str	r3, [r5, #0]
 8006f7e:	f7fa ffc8 	bl	8001f12 <_fstat>
 8006f82:	1c43      	adds	r3, r0, #1
 8006f84:	d102      	bne.n	8006f8c <_fstat_r+0x1c>
 8006f86:	682b      	ldr	r3, [r5, #0]
 8006f88:	b103      	cbz	r3, 8006f8c <_fstat_r+0x1c>
 8006f8a:	6023      	str	r3, [r4, #0]
 8006f8c:	bd38      	pop	{r3, r4, r5, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000478 	.word	0x20000478

08006f94 <_free_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4605      	mov	r5, r0
 8006f98:	2900      	cmp	r1, #0
 8006f9a:	d041      	beq.n	8007020 <_free_r+0x8c>
 8006f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fa0:	1f0c      	subs	r4, r1, #4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bfb8      	it	lt
 8006fa6:	18e4      	addlt	r4, r4, r3
 8006fa8:	f7ff fe36 	bl	8006c18 <__malloc_lock>
 8006fac:	4a1d      	ldr	r2, [pc, #116]	@ (8007024 <_free_r+0x90>)
 8006fae:	6813      	ldr	r3, [r2, #0]
 8006fb0:	b933      	cbnz	r3, 8006fc0 <_free_r+0x2c>
 8006fb2:	6063      	str	r3, [r4, #4]
 8006fb4:	6014      	str	r4, [r2, #0]
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fbc:	f7ff be32 	b.w	8006c24 <__malloc_unlock>
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	d908      	bls.n	8006fd6 <_free_r+0x42>
 8006fc4:	6820      	ldr	r0, [r4, #0]
 8006fc6:	1821      	adds	r1, r4, r0
 8006fc8:	428b      	cmp	r3, r1
 8006fca:	bf01      	itttt	eq
 8006fcc:	6819      	ldreq	r1, [r3, #0]
 8006fce:	685b      	ldreq	r3, [r3, #4]
 8006fd0:	1809      	addeq	r1, r1, r0
 8006fd2:	6021      	streq	r1, [r4, #0]
 8006fd4:	e7ed      	b.n	8006fb2 <_free_r+0x1e>
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	b10b      	cbz	r3, 8006fe0 <_free_r+0x4c>
 8006fdc:	42a3      	cmp	r3, r4
 8006fde:	d9fa      	bls.n	8006fd6 <_free_r+0x42>
 8006fe0:	6811      	ldr	r1, [r2, #0]
 8006fe2:	1850      	adds	r0, r2, r1
 8006fe4:	42a0      	cmp	r0, r4
 8006fe6:	d10b      	bne.n	8007000 <_free_r+0x6c>
 8006fe8:	6820      	ldr	r0, [r4, #0]
 8006fea:	4401      	add	r1, r0
 8006fec:	1850      	adds	r0, r2, r1
 8006fee:	4283      	cmp	r3, r0
 8006ff0:	6011      	str	r1, [r2, #0]
 8006ff2:	d1e0      	bne.n	8006fb6 <_free_r+0x22>
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	6053      	str	r3, [r2, #4]
 8006ffa:	4408      	add	r0, r1
 8006ffc:	6010      	str	r0, [r2, #0]
 8006ffe:	e7da      	b.n	8006fb6 <_free_r+0x22>
 8007000:	d902      	bls.n	8007008 <_free_r+0x74>
 8007002:	230c      	movs	r3, #12
 8007004:	602b      	str	r3, [r5, #0]
 8007006:	e7d6      	b.n	8006fb6 <_free_r+0x22>
 8007008:	6820      	ldr	r0, [r4, #0]
 800700a:	1821      	adds	r1, r4, r0
 800700c:	428b      	cmp	r3, r1
 800700e:	bf04      	itt	eq
 8007010:	6819      	ldreq	r1, [r3, #0]
 8007012:	685b      	ldreq	r3, [r3, #4]
 8007014:	6063      	str	r3, [r4, #4]
 8007016:	bf04      	itt	eq
 8007018:	1809      	addeq	r1, r1, r0
 800701a:	6021      	streq	r1, [r4, #0]
 800701c:	6054      	str	r4, [r2, #4]
 800701e:	e7ca      	b.n	8006fb6 <_free_r+0x22>
 8007020:	bd38      	pop	{r3, r4, r5, pc}
 8007022:	bf00      	nop
 8007024:	20000474 	.word	0x20000474

08007028 <_init>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	bf00      	nop
 800702c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702e:	bc08      	pop	{r3}
 8007030:	469e      	mov	lr, r3
 8007032:	4770      	bx	lr

08007034 <_fini>:
 8007034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007036:	bf00      	nop
 8007038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800703a:	bc08      	pop	{r3}
 800703c:	469e      	mov	lr, r3
 800703e:	4770      	bx	lr
