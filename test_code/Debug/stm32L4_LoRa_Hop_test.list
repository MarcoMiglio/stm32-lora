
stm32L4_LoRa_Hop_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c70  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08007e00  08007e00  00008e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800805c  0800805c  0000a124  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800805c  0800805c  0000905c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008064  08008064  0000a124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008064  08008064  00009064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008068  08008068  00009068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000124  20000000  0800806c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023ac  20000124  08008190  0000a124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024d0  08008190  0000a4d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b87  00000000  00000000  0000a154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef0  00000000  00000000  0001ecdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00021bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e6c  00000000  00000000  00022e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004cc2  00000000  00000000  00023ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152c3  00000000  00000000  000289a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6a8d  00000000  00000000  0003dc69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001346f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e8  00000000  00000000  0013473c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00139c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000124 	.word	0x20000124
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007de8 	.word	0x08007de8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000128 	.word	0x20000128
 80001cc:	08007de8 	.word	0x08007de8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <init_LL>:
 *
 * @param LL_handler* h_LL  linked list handler.
 *
 * @return: none
 */
void init_LL(LL_handler* h_LL){
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  h_LL->head = 0;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	801a      	strh	r2, [r3, #0]
  h_LL->tail = 0;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2200      	movs	r2, #0
 80005ae:	805a      	strh	r2, [r3, #2]
  h_LL->ins_idx = 0;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	809a      	strh	r2, [r3, #4]

  h_LL->ll_status = LL_EMPTY;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2201      	movs	r2, #1
 80005ba:	731a      	strb	r2, [r3, #12]

  // init free node sequence:
  for(uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 80005bc:	2300      	movs	r3, #0
 80005be:	81fb      	strh	r3, [r7, #14]
 80005c0:	e00b      	b.n	80005da <init_LL+0x3e>

    h_LL->ll_buff[i].next_free_idx = i + 1;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	689a      	ldr	r2, [r3, #8]
 80005c6:	89fb      	ldrh	r3, [r7, #14]
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	4413      	add	r3, r2
 80005cc:	89fa      	ldrh	r2, [r7, #14]
 80005ce:	3201      	adds	r2, #1
 80005d0:	b292      	uxth	r2, r2
 80005d2:	80da      	strh	r2, [r3, #6]
  for(uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	3301      	adds	r3, #1
 80005d8:	81fb      	strh	r3, [r7, #14]
 80005da:	89fb      	ldrh	r3, [r7, #14]
 80005dc:	2b63      	cmp	r3, #99	@ 0x63
 80005de:	d9f0      	bls.n	80005c2 <init_LL+0x26>
  }

  // link last element to the flag "LL IS FULL"
  h_LL->ll_buff[BUFF_FIFO_SIZE - 1].next_free_idx = LL_IDX_IS_FULL;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f503 7346 	add.w	r3, r3, #792	@ 0x318
 80005e8:	2264      	movs	r2, #100	@ 0x64
 80005ea:	80da      	strh	r2, [r3, #6]
}
 80005ec:	bf00      	nop
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <init_buffers>:
 *
 * @param h_rx_tx*  h_rx_tx  pointer to the buffer handler (which includes handlers for both RX and TX lists).
 *
 * @return: none
 */
void init_buffers(h_rx_tx* h_rx_tx){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  // init RX FIFO
  for (uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 8000600:	2300      	movs	r3, #0
 8000602:	81fb      	strh	r3, [r7, #14]
 8000604:	e016      	b.n	8000634 <init_buffers+0x3c>
    h_rx_tx->h_rx[i].slot_free = true;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6859      	ldr	r1, [r3, #4]
 800060a:	89fa      	ldrh	r2, [r7, #14]
 800060c:	4613      	mov	r3, r2
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	4413      	add	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	440b      	add	r3, r1
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
    h_rx_tx->h_rx[i].ll_idx = TX_IDX_EMPTY;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6859      	ldr	r1, [r3, #4]
 800061e:	89fa      	ldrh	r2, [r7, #14]
 8000620:	4613      	mov	r3, r2
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	4413      	add	r3, r2
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	440b      	add	r3, r1
 800062a:	2270      	movs	r2, #112	@ 0x70
 800062c:	805a      	strh	r2, [r3, #2]
  for (uint16_t i = 0; i < BUFF_FIFO_SIZE; i++){
 800062e:	89fb      	ldrh	r3, [r7, #14]
 8000630:	3301      	adds	r3, #1
 8000632:	81fb      	strh	r3, [r7, #14]
 8000634:	89fb      	ldrh	r3, [r7, #14]
 8000636:	2b63      	cmp	r3, #99	@ 0x63
 8000638:	d9e5      	bls.n	8000606 <init_buffers+0xe>
  }

  // init Linked List for TX sequence
  init_LL(h_rx_tx->h_tx);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffac 	bl	800059c <init_LL>
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <read_register>:
 * @param *buffer pointer to data buffer to be written into the register
 * @param length  size_t specifying amount of bytes to be written
 *
 * @return: false if an SPI error occurred, true otherwise
 */
static bool read_register(rfm95_handle_t *handle, uint8_t reg, uint8_t *buffer, size_t length) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	607a      	str	r2, [r7, #4]
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	460b      	mov	r3, r1
 800065a:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	6898      	ldr	r0, [r3, #8]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	899b      	ldrh	r3, [r3, #12]
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	f002 fd08 	bl	800307c <HAL_GPIO_WritePin>

  uint8_t transmit_buffer = reg & 0x7fu;
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000672:	b2db      	uxtb	r3, r3
 8000674:	75fb      	strb	r3, [r7, #23]

  if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	6858      	ldr	r0, [r3, #4]
 800067a:	f107 0117 	add.w	r1, r7, #23
 800067e:	230a      	movs	r3, #10
 8000680:	2201      	movs	r2, #1
 8000682:	f004 ffe2 	bl	800564a <HAL_SPI_Transmit>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <read_register+0x44>
    return false;
 800068c:	2300      	movs	r3, #0
 800068e:	e015      	b.n	80006bc <read_register+0x70>
  }

  if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	6858      	ldr	r0, [r3, #4]
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b29a      	uxth	r2, r3
 8000698:	230a      	movs	r3, #10
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	f005 f94b 	bl	8005936 <HAL_SPI_Receive>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <read_register+0x5e>
    return false;
 80006a6:	2300      	movs	r3, #0
 80006a8:	e008      	b.n	80006bc <read_register+0x70>
  }

  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6898      	ldr	r0, [r3, #8]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	899b      	ldrh	r3, [r3, #12]
 80006b2:	2201      	movs	r2, #1
 80006b4:	4619      	mov	r1, r3
 80006b6:	f002 fce1 	bl	800307c <HAL_GPIO_WritePin>

  return true;
 80006ba:	2301      	movs	r3, #1
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <write_register>:
 * @param value   uint8_t specifying byte to be written into the register
 *
 *
 * @return: false if an SPI error occurred, true otherwise
 */
static bool write_register(rfm95_handle_t *handle, uint8_t reg, uint8_t value) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	70fb      	strb	r3, [r7, #3]
 80006d0:	4613      	mov	r3, r2
 80006d2:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6898      	ldr	r0, [r3, #8]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	899b      	ldrh	r3, [r3, #12]
 80006dc:	2200      	movs	r2, #0
 80006de:	4619      	mov	r1, r3
 80006e0:	f002 fccc 	bl	800307c <HAL_GPIO_WritePin>

  uint8_t transmit_buffer[2] = {(reg | 0x80u), value};
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	733b      	strb	r3, [r7, #12]
 80006ee:	78bb      	ldrb	r3, [r7, #2]
 80006f0:	737b      	strb	r3, [r7, #13]

  if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6858      	ldr	r0, [r3, #4]
 80006f6:	f107 010c 	add.w	r1, r7, #12
 80006fa:	230a      	movs	r3, #10
 80006fc:	2202      	movs	r2, #2
 80006fe:	f004 ffa4 	bl	800564a <HAL_SPI_Transmit>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <write_register+0x48>
    return false;
 8000708:	2300      	movs	r3, #0
 800070a:	e008      	b.n	800071e <write_register+0x5a>
  }

  HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6898      	ldr	r0, [r3, #8]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	899b      	ldrh	r3, [r3, #12]
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	f002 fcb0 	bl	800307c <HAL_GPIO_WritePin>

  return true;
 800071c:	2301      	movs	r3, #1
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <rfm95_modify_power>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_power(rfm95_handle_t *handle){
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	memset(&pa_config, 0, sizeof(pa_config));
 8000730:	2201      	movs	r2, #1
 8000732:	2100      	movs	r1, #0
 8000734:	482e      	ldr	r0, [pc, #184]	@ (80007f0 <rfm95_modify_power+0xc8>)
 8000736:	f006 fdc7 	bl	80072c8 <memset>
	uint8_t pa_dac_config = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	73fb      	strb	r3, [r7, #15]

	uint8_t power = handle->config.tx_power;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000744:	73bb      	strb	r3, [r7, #14]

	if (power >= 2 && power <= 17) {
 8000746:	7bbb      	ldrb	r3, [r7, #14]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d91a      	bls.n	8000782 <rfm95_modify_power+0x5a>
 800074c:	7bbb      	ldrb	r3, [r7, #14]
 800074e:	2b11      	cmp	r3, #17
 8000750:	d817      	bhi.n	8000782 <rfm95_modify_power+0x5a>
		pa_config.max_power = 7;
 8000752:	4a27      	ldr	r2, [pc, #156]	@ (80007f0 <rfm95_modify_power+0xc8>)
 8000754:	7813      	ldrb	r3, [r2, #0]
 8000756:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800075a:	7013      	strb	r3, [r2, #0]
		pa_config.pa_select = 1;
 800075c:	4a24      	ldr	r2, [pc, #144]	@ (80007f0 <rfm95_modify_power+0xc8>)
 800075e:	7813      	ldrb	r3, [r2, #0]
 8000760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000764:	7013      	strb	r3, [r2, #0]
		pa_config.output_power = (power - 2);
 8000766:	7bbb      	ldrb	r3, [r7, #14]
 8000768:	3b02      	subs	r3, #2
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f003 030f 	and.w	r3, r3, #15
 8000770:	b2d9      	uxtb	r1, r3
 8000772:	4a1f      	ldr	r2, [pc, #124]	@ (80007f0 <rfm95_modify_power+0xc8>)
 8000774:	7813      	ldrb	r3, [r2, #0]
 8000776:	f361 0303 	bfi	r3, r1, #0, #4
 800077a:	7013      	strb	r3, [r2, #0]
		pa_dac_config = RFM95_PA_DAC_LOW_POWER;
 800077c:	2384      	movs	r3, #132	@ 0x84
 800077e:	73fb      	strb	r3, [r7, #15]
 8000780:	e013      	b.n	80007aa <rfm95_modify_power+0x82>

	} else if (power == 20) {
 8000782:	7bbb      	ldrb	r3, [r7, #14]
 8000784:	2b14      	cmp	r3, #20
 8000786:	d110      	bne.n	80007aa <rfm95_modify_power+0x82>
		pa_config.max_power = 7;
 8000788:	4a19      	ldr	r2, [pc, #100]	@ (80007f0 <rfm95_modify_power+0xc8>)
 800078a:	7813      	ldrb	r3, [r2, #0]
 800078c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000790:	7013      	strb	r3, [r2, #0]
		pa_config.pa_select = 1;
 8000792:	4a17      	ldr	r2, [pc, #92]	@ (80007f0 <rfm95_modify_power+0xc8>)
 8000794:	7813      	ldrb	r3, [r2, #0]
 8000796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079a:	7013      	strb	r3, [r2, #0]
		pa_config.output_power = 15;
 800079c:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <rfm95_modify_power+0xc8>)
 800079e:	7813      	ldrb	r3, [r2, #0]
 80007a0:	f043 030f 	orr.w	r3, r3, #15
 80007a4:	7013      	strb	r3, [r2, #0]
		pa_dac_config = RFM95_PA_DAC_HIGH_POWER;
 80007a6:	2387      	movs	r3, #135	@ 0x87
 80007a8:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <rfm95_modify_power+0xc8>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	2109      	movs	r1, #9
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff ff86 	bl	80006c4 <write_register>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f083 0301 	eor.w	r3, r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <rfm95_modify_power+0xa0>
 80007c4:	2300      	movs	r3, #0
 80007c6:	e00e      	b.n	80007e6 <rfm95_modify_power+0xbe>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	461a      	mov	r2, r3
 80007cc:	214d      	movs	r1, #77	@ 0x4d
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ff78 	bl	80006c4 <write_register>
 80007d4:	4603      	mov	r3, r0
 80007d6:	f083 0301 	eor.w	r3, r3, #1
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <rfm95_modify_power+0xbc>
 80007e0:	2300      	movs	r3, #0
 80007e2:	e000      	b.n	80007e6 <rfm95_modify_power+0xbe>

	return true;
 80007e4:	2301      	movs	r3, #1
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000140 	.word	0x20000140

080007f4 <rfm95_modify_SF>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_SF(rfm95_handle_t *handle){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	uint8_t  sf = RFM95_SF[handle->config.sf];
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000802:	461a      	mov	r2, r3
 8000804:	4b2a      	ldr	r3, [pc, #168]	@ (80008b0 <rfm95_modify_SF+0xbc>)
 8000806:	5c9b      	ldrb	r3, [r3, r2]
 8000808:	75fb      	strb	r3, [r7, #23]

	// Configure modem SF (depends on user configuration + DR offset):
	uint8_t sf_bits = (sf << 4) | 0x04; // set SF + CRC enable
 800080a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800080e:	011b      	lsls	r3, r3, #4
 8000810:	b25b      	sxtb	r3, r3
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	b25b      	sxtb	r3, r3
 8000818:	75bb      	strb	r3, [r7, #22]
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, sf_bits)) return false;
 800081a:	7dbb      	ldrb	r3, [r7, #22]
 800081c:	461a      	mov	r2, r3
 800081e:	211e      	movs	r1, #30
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff4f 	bl	80006c4 <write_register>
 8000826:	4603      	mov	r3, r0
 8000828:	f083 0301 	eor.w	r3, r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <rfm95_modify_SF+0x42>
 8000832:	2300      	movs	r3, #0
 8000834:	e038      	b.n	80008a8 <rfm95_modify_SF+0xb4>

	// AGC on (suggested in application note), LDR optimization only for Ts > 16 ms
	uint32_t bw = RFM95_BW_HZ[handle->config.bandwidth];
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800083c:	461a      	mov	r2, r3
 800083e:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <rfm95_modify_SF+0xc0>)
 8000840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000844:	613b      	str	r3, [r7, #16]

	// compute symbol time (in ms) based on current settings:
	float curr_ts = 1e3*(((float) (1<<sf)) / bw);
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	2201      	movs	r2, #1
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	ee07 3a90 	vmov	s15, r3
 8000852:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	ee07 3a90 	vmov	s15, r3
 800085c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000864:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80008b8 <rfm95_modify_SF+0xc4>
 8000868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800086c:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t LDRoptimize = curr_ts >= 16 ? 0x0C : 0x04;
 8000870:	edd7 7a03 	vldr	s15, [r7, #12]
 8000874:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800087c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000880:	db01      	blt.n	8000886 <rfm95_modify_SF+0x92>
 8000882:	230c      	movs	r3, #12
 8000884:	e000      	b.n	8000888 <rfm95_modify_SF+0x94>
 8000886:	2304      	movs	r3, #4
 8000888:	72fb      	strb	r3, [r7, #11]
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, LDRoptimize)) return false;
 800088a:	7afb      	ldrb	r3, [r7, #11]
 800088c:	461a      	mov	r2, r3
 800088e:	2126      	movs	r1, #38	@ 0x26
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ff17 	bl	80006c4 <write_register>
 8000896:	4603      	mov	r3, r0
 8000898:	f083 0301 	eor.w	r3, r3, #1
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <rfm95_modify_SF+0xb2>
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <rfm95_modify_SF+0xb4>

	return true;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	08007fd4 	.word	0x08007fd4
 80008b4:	08007fb4 	.word	0x08007fb4
 80008b8:	447a0000 	.word	0x447a0000

080008bc <rfm95_modify_CR_BW>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_CR_BW(rfm95_handle_t *handle){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	uint8_t  cr = RFM95_CR[handle->config.cr];
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80008ca:	461a      	mov	r2, r3
 80008cc:	4b13      	ldr	r3, [pc, #76]	@ (800091c <rfm95_modify_CR_BW+0x60>)
 80008ce:	5c9b      	ldrb	r3, [r3, r2]
 80008d0:	75fb      	strb	r3, [r7, #23]
	uint32_t bw = RFM95_BW_BIN[handle->config.bandwidth];
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80008d8:	461a      	mov	r2, r3
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <rfm95_modify_CR_BW+0x64>)
 80008dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e0:	613b      	str	r3, [r7, #16]

	uint8_t data = (bw << 4) | (cr << 1);
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	7dfb      	ldrb	r3, [r7, #23]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	73fb      	strb	r3, [r7, #15]
	if(!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, data)) return false;
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	461a      	mov	r2, r3
 80008f8:	211d      	movs	r1, #29
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff fee2 	bl	80006c4 <write_register>
 8000900:	4603      	mov	r3, r0
 8000902:	f083 0301 	eor.w	r3, r3, #1
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <rfm95_modify_CR_BW+0x54>
 800090c:	2300      	movs	r3, #0
 800090e:	e000      	b.n	8000912 <rfm95_modify_CR_BW+0x56>

	return true;
 8000910:	2301      	movs	r3, #1
}
 8000912:	4618      	mov	r0, r3
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	08007fdc 	.word	0x08007fdc
 8000920:	08007fc4 	.word	0x08007fc4

08000924 <rfm95_modify_frequency>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_frequency(rfm95_handle_t *handle){
 8000924:	b5b0      	push	{r4, r5, r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = handle->config.channel_freq;
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 8000930:	6179      	str	r1, [r7, #20]

  // FQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = ((uint64_t)frequency << 19) / RFM95_TCXO_FREQ;
 8000932:	6979      	ldr	r1, [r7, #20]
 8000934:	2000      	movs	r0, #0
 8000936:	460a      	mov	r2, r1
 8000938:	4603      	mov	r3, r0
 800093a:	0b55      	lsrs	r5, r2, #13
 800093c:	04d4      	lsls	r4, r2, #19
 800093e:	4a27      	ldr	r2, [pc, #156]	@ (80009dc <rfm95_modify_frequency+0xb8>)
 8000940:	f04f 0300 	mov.w	r3, #0
 8000944:	4620      	mov	r0, r4
 8000946:	4629      	mov	r1, r5
 8000948:	f7ff fc92 	bl	8000270 <__aeabi_uldivmod>
 800094c:	4602      	mov	r2, r0
 800094e:	460b      	mov	r3, r1
 8000950:	e9c7 2302 	strd	r2, r3, [r7, #8]

  if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 8000954:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000958:	f04f 0200 	mov.w	r2, #0
 800095c:	f04f 0300 	mov.w	r3, #0
 8000960:	0c02      	lsrs	r2, r0, #16
 8000962:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000966:	0c0b      	lsrs	r3, r1, #16
 8000968:	b2d3      	uxtb	r3, r2
 800096a:	461a      	mov	r2, r3
 800096c:	2106      	movs	r1, #6
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fea8 	bl	80006c4 <write_register>
 8000974:	4603      	mov	r3, r0
 8000976:	f083 0301 	eor.w	r3, r3, #1
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <rfm95_modify_frequency+0x60>
 8000980:	2300      	movs	r3, #0
 8000982:	e026      	b.n	80009d2 <rfm95_modify_frequency+0xae>
  if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 8000984:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000988:	f04f 0200 	mov.w	r2, #0
 800098c:	f04f 0300 	mov.w	r3, #0
 8000990:	0a02      	lsrs	r2, r0, #8
 8000992:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000996:	0a0b      	lsrs	r3, r1, #8
 8000998:	b2d3      	uxtb	r3, r2
 800099a:	461a      	mov	r2, r3
 800099c:	2107      	movs	r1, #7
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff fe90 	bl	80006c4 <write_register>
 80009a4:	4603      	mov	r3, r0
 80009a6:	f083 0301 	eor.w	r3, r3, #1
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <rfm95_modify_frequency+0x90>
 80009b0:	2300      	movs	r3, #0
 80009b2:	e00e      	b.n	80009d2 <rfm95_modify_frequency+0xae>
  if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 80009b4:	7a3b      	ldrb	r3, [r7, #8]
 80009b6:	461a      	mov	r2, r3
 80009b8:	2108      	movs	r1, #8
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff fe82 	bl	80006c4 <write_register>
 80009c0:	4603      	mov	r3, r0
 80009c2:	f083 0301 	eor.w	r3, r3, #1
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <rfm95_modify_frequency+0xac>
 80009cc:	2300      	movs	r3, #0
 80009ce:	e000      	b.n	80009d2 <rfm95_modify_frequency+0xae>

	return true;
 80009d0:	2301      	movs	r3, #1
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bdb0      	pop	{r4, r5, r7, pc}
 80009da:	bf00      	nop
 80009dc:	01e84800 	.word	0x01e84800

080009e0 <rfm95_modify_syncWord>:
 * @param *handle pointer to handle structure containing rfm95 configurations (refer to .h file for additional details
 *                about the structure).
 *
 * @return: false if an error occurred, true otherwise
 */
static bool rfm95_modify_syncWord(rfm95_handle_t *handle){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, handle->config.sync_word)) return false;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80009ee:	461a      	mov	r2, r3
 80009f0:	2139      	movs	r1, #57	@ 0x39
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff fe66 	bl	80006c4 <write_register>
 80009f8:	4603      	mov	r3, r0
 80009fa:	f083 0301 	eor.w	r3, r3, #1
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <rfm95_modify_syncWord+0x28>
 8000a04:	2300      	movs	r3, #0
 8000a06:	e000      	b.n	8000a0a <rfm95_modify_syncWord+0x2a>

	return true;
 8000a08:	2301      	movs	r3, #1
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <config_load_default>:
 *
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers.
 *
 * @return void.
 */
static void config_load_default(rfm95_handle_t *handle){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if (handle->config.sf == 0) 					rfm95_set_SF(handle, RFM95_SF7);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d103      	bne.n	8000a2e <config_load_default+0x1a>
 8000a26:	2100      	movs	r1, #0
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f000 f982 	bl	8000d32 <rfm95_set_SF>
  if (handle->config.cr == 0) 					rfm95_set_CR(handle, RFM95_CR4_5);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d103      	bne.n	8000a40 <config_load_default+0x2c>
 8000a38:	2100      	movs	r1, #0
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 f989 	bl	8000d52 <rfm95_set_CR>
  if (handle->config.tx_power == 0)  		rfm95_set_power(handle, 14);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d103      	bne.n	8000a52 <config_load_default+0x3e>
 8000a4a:	210e      	movs	r1, #14
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f000 f954 	bl	8000cfa <rfm95_set_power>
  if (handle->config.bandwidth == 0) 		rfm95_set_BW(handle, RFM95_BW125);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d103      	bne.n	8000a64 <config_load_default+0x50>
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 f987 	bl	8000d72 <rfm95_set_BW>
  if (handle->config.sync_word == 0) 		rfm95_set_syncWord(handle, LORA_DEF_SYNC_WORD);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d103      	bne.n	8000a76 <config_load_default+0x62>
 8000a6e:	2112      	movs	r1, #18
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f000 f9af 	bl	8000dd4 <rfm95_set_syncWord>
  if (handle->config.channel_freq == 0) rfm95_set_frequency(handle, 868000000);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d104      	bne.n	8000a88 <config_load_default+0x74>
 8000a7e:	4904      	ldr	r1, [pc, #16]	@ (8000a90 <config_load_default+0x7c>)
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 f987 	bl	8000d94 <rfm95_set_frequency>

  return;
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
}
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	33bca100 	.word	0x33bca100

08000a94 <wait_for_irq>:
 * @param interrupt  rfm95_interrupt_t defining the interrupt event to wait for (DIO0, DIO1, DIO5 supported in this version)
 * @param timeout_ms uint32_t defining the maximum timeout in ms.
 *
 * @return true if an interrupt is received within the specified timeout, false otherwise
 */
static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	607a      	str	r2, [r7, #4]
 8000aa0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6a1b      	ldr	r3, [r3, #32]
 8000aa6:	4798      	blx	r3
 8000aa8:	4601      	mov	r1, r0
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	fb02 f303 	mul.w	r3, r2, r3
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8000aec <wait_for_irq+0x58>)
 8000ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aba:	099b      	lsrs	r3, r3, #6
 8000abc:	440b      	add	r3, r1
 8000abe:	617b      	str	r3, [r7, #20]

  while (handle->interrupt_times[interrupt] == 0) {
 8000ac0:	e008      	b.n	8000ad4 <wait_for_irq+0x40>
    if (handle->get_precision_tick() >= timeout_tick) {
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	6a1b      	ldr	r3, [r3, #32]
 8000ac6:	4798      	blx	r3
 8000ac8:	4602      	mov	r2, r0
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d801      	bhi.n	8000ad4 <wait_for_irq+0x40>
      return false;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e007      	b.n	8000ae4 <wait_for_irq+0x50>
  while (handle->interrupt_times[interrupt] == 0) {
 8000ad4:	7afa      	ldrb	r2, [r7, #11]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	320c      	adds	r2, #12
 8000ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0ef      	beq.n	8000ac2 <wait_for_irq+0x2e>
    }
  }

  return true;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	10624dd3 	.word	0x10624dd3

08000af0 <rfm95_init>:



// -------------------------------- USER PUBLIC FUNCTIONS -------------------------------

uint16_t rfm95_init(rfm95_handle_t *handle){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]


  reset_rfm(handle);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f000 f8e0 	bl	8000cbe <reset_rfm>

  // setup default configurations:
  config_load_default(handle);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ff88 	bl	8000a14 <config_load_default>

  // Check for correct version.
  uint8_t version;
  if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8000b04:	f107 020f 	add.w	r2, r7, #15
 8000b08:	2301      	movs	r3, #1
 8000b0a:	2142      	movs	r1, #66	@ 0x42
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fd9d 	bl	800064c <read_register>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f083 0301 	eor.w	r3, r3, #1
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <rfm95_init+0x32>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e0c9      	b.n	8000cb6 <rfm95_init+0x1c6>
  if (version != RFM9x_VER) return false;
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	2b12      	cmp	r3, #18
 8000b26:	d001      	beq.n	8000b2c <rfm95_init+0x3c>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e0c4      	b.n	8000cb6 <rfm95_init+0x1c6>

  // Module must be placed in sleep mode before switching to LoRa.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_SLEEP)) return false;
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2101      	movs	r1, #1
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff fdc7 	bl	80006c4 <write_register>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f083 0301 	eor.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <rfm95_init+0x56>
 8000b42:	2300      	movs	r3, #0
 8000b44:	e0b7      	b.n	8000cb6 <rfm95_init+0x1c6>
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 8000b46:	2280      	movs	r2, #128	@ 0x80
 8000b48:	2101      	movs	r1, #1
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fdba 	bl	80006c4 <write_register>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f083 0301 	eor.w	r3, r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <rfm95_init+0x70>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e0aa      	b.n	8000cb6 <rfm95_init+0x1c6>

  // Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
  if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8000b60:	2200      	movs	r2, #0
 8000b62:	2140      	movs	r1, #64	@ 0x40
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff fdad 	bl	80006c4 <write_register>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f083 0301 	eor.w	r3, r3, #1
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <rfm95_init+0x8a>
 8000b76:	2300      	movs	r3, #0
 8000b78:	e09d      	b.n	8000cb6 <rfm95_init+0x1c6>

  if (handle->on_after_interrupts_configured != NULL) {
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d002      	beq.n	8000b88 <rfm95_init+0x98>
    handle->on_after_interrupts_configured();
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b86:	4798      	blx	r3
  }

  // Set LNA to the highest gain with 150% boost (suggested in AN)
  if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 8000b88:	2223      	movs	r2, #35	@ 0x23
 8000b8a:	210c      	movs	r1, #12
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff fd99 	bl	80006c4 <write_register>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f083 0301 	eor.w	r3, r3, #1
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <rfm95_init+0xb2>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e089      	b.n	8000cb6 <rfm95_init+0x1c6>

  // Preamble set to 10 + 4.25 = 14.25 symbols
  if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2120      	movs	r1, #32
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff fd8c 	bl	80006c4 <write_register>
 8000bac:	4603      	mov	r3, r0
 8000bae:	f083 0301 	eor.w	r3, r3, #1
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <rfm95_init+0xcc>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e07c      	b.n	8000cb6 <rfm95_init+0x1c6>
  if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x0A)) return false;
 8000bbc:	220a      	movs	r2, #10
 8000bbe:	2121      	movs	r1, #33	@ 0x21
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fd7f 	bl	80006c4 <write_register>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f083 0301 	eor.w	r3, r3, #1
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <rfm95_init+0xe6>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e06f      	b.n	8000cb6 <rfm95_init+0x1c6>

  // Set up TX and RX FIFO base addresses.
  if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, RFM95_FIFO_TX_BASE_ADDRESS)) return false;
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	210e      	movs	r1, #14
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff fd72 	bl	80006c4 <write_register>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f083 0301 	eor.w	r3, r3, #1
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <rfm95_init+0x100>
 8000bec:	2300      	movs	r3, #0
 8000bee:	e062      	b.n	8000cb6 <rfm95_init+0x1c6>
  if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, RFM95_FIFO_RX_BASE_ADDRESS)) return false;
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fd65 	bl	80006c4 <write_register>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	f083 0301 	eor.w	r3, r3, #1
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <rfm95_init+0x11a>
 8000c06:	2300      	movs	r3, #0
 8000c08:	e055      	b.n	8000cb6 <rfm95_init+0x1c6>

  // Maximum payload length of the RFM95 is 0xFF.
  if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 0xFF)) return false;
 8000c0a:	22ff      	movs	r2, #255	@ 0xff
 8000c0c:	2123      	movs	r1, #35	@ 0x23
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff fd58 	bl	80006c4 <write_register>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f083 0301 	eor.w	r3, r3, #1
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <rfm95_init+0x134>
 8000c20:	2300      	movs	r3, #0
 8000c22:	e048      	b.n	8000cb6 <rfm95_init+0x1c6>

  // make changes effective
	if (!rfm95_modify_power(handle))     return false;
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff fd7f 	bl	8000728 <rfm95_modify_power>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f083 0301 	eor.w	r3, r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <rfm95_init+0x14a>
 8000c36:	2300      	movs	r3, #0
 8000c38:	e03d      	b.n	8000cb6 <rfm95_init+0x1c6>
	if (!rfm95_modify_SF(handle))        return false;
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff fdda 	bl	80007f4 <rfm95_modify_SF>
 8000c40:	4603      	mov	r3, r0
 8000c42:	f083 0301 	eor.w	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <rfm95_init+0x160>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e032      	b.n	8000cb6 <rfm95_init+0x1c6>
	if (!rfm95_modify_frequency(handle)) return false;
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff fe67 	bl	8000924 <rfm95_modify_frequency>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f083 0301 	eor.w	r3, r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <rfm95_init+0x176>
 8000c62:	2300      	movs	r3, #0
 8000c64:	e027      	b.n	8000cb6 <rfm95_init+0x1c6>
	if (!rfm95_modify_CR_BW(handle))     return false;
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fe28 	bl	80008bc <rfm95_modify_CR_BW>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f083 0301 	eor.w	r3, r3, #1
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <rfm95_init+0x18c>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e01c      	b.n	8000cb6 <rfm95_init+0x1c6>
	if (!rfm95_modify_syncWord(handle))  return false;
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff feaf 	bl	80009e0 <rfm95_modify_syncWord>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f083 0301 	eor.w	r3, r3, #1
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <rfm95_init+0x1a2>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e011      	b.n	8000cb6 <rfm95_init+0x1c6>

  // Let module sleep after initialization.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 8000c92:	2280      	movs	r2, #128	@ 0x80
 8000c94:	2101      	movs	r1, #1
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fd14 	bl	80006c4 <write_register>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	f083 0301 	eor.w	r3, r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <rfm95_init+0x1bc>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e004      	b.n	8000cb6 <rfm95_init+0x1c6>
  handle->rfm_status = SLEEP_MODE;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return true;
 8000cb4:	2301      	movs	r3, #1
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <reset_rfm>:
 *
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers.
 *
 * @return void.
 */
void reset_rfm(rfm95_handle_t *handle){
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6918      	ldr	r0, [r3, #16]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	8a9b      	ldrh	r3, [r3, #20]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f002 f9d3 	bl	800307c <HAL_GPIO_WritePin>
  HAL_Delay(1); // 0.1ms would theoretically be enough
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f001 fed0 	bl	8002a7c <HAL_Delay>
  HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6918      	ldr	r0, [r3, #16]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	8a9b      	ldrh	r3, [r3, #20]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f002 f9c8 	bl	800307c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000cec:	2005      	movs	r0, #5
 8000cee:	f001 fec5 	bl	8002a7c <HAL_Delay>

  return;
 8000cf2:	bf00      	nop
}
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <rfm95_set_power>:
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param uint8_t power          must be wihin the range 2 dbm - 17 dBm.
 *
 * @return void.
 */
void rfm95_set_power(rfm95_handle_t *handle, uint8_t power){
 8000cfa:	b480      	push	{r7}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	460b      	mov	r3, r1
 8000d04:	70fb      	strb	r3, [r7, #3]
	uint8_t pw = power;
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	73fb      	strb	r3, [r7, #15]
	if (power < 2)  pw = 2;
 8000d0a:	78fb      	ldrb	r3, [r7, #3]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d801      	bhi.n	8000d14 <rfm95_set_power+0x1a>
 8000d10:	2302      	movs	r3, #2
 8000d12:	73fb      	strb	r3, [r7, #15]
	if (power > 17) pw = 17;
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	2b11      	cmp	r3, #17
 8000d18:	d901      	bls.n	8000d1e <rfm95_set_power+0x24>
 8000d1a:	2311      	movs	r3, #17
 8000d1c:	73fb      	strb	r3, [r7, #15]

	handle->config.tx_power = pw;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7bfa      	ldrb	r2, [r7, #15]
 8000d22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

	return;
 8000d26:	bf00      	nop
}
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <rfm95_set_SF>:
 * @param *handle    rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param rfm95_sf_t sf             must be within 7 - 12 (rely on the dedicated rfm95_sf_t structure, do not manually write).
 *
 * @return void.
 */
void rfm95_set_SF(rfm95_handle_t *handle, rfm95_sf_t sf){
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	70fb      	strb	r3, [r7, #3]
	handle->config.sf = sf;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	78fa      	ldrb	r2, [r7, #3]
 8000d42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	return;
 8000d46:	bf00      	nop
}
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <rfm95_set_CR>:
 * @param *handle    rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param rfm95_cr_t cr             must be within 4/5 - 4/8 (rely on the dedicated rfm95_cr_t structure, do not manually write).
 *
 * @return void.
 */
void rfm95_set_CR(rfm95_handle_t *handle, rfm95_cr_t cr){
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	70fb      	strb	r3, [r7, #3]
	handle->config.cr = cr;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	78fa      	ldrb	r2, [r7, #3]
 8000d62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
	return;
 8000d66:	bf00      	nop
}
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <rfm95_set_BW>:
 * @param *handle    rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param rfm95_bw_t bw             must be within 62.5 - 500 kHz (rely on the dedicated rfm95_cr_t structure, do not manually write).
 *
 * @return void.
 */
void rfm95_set_BW(rfm95_handle_t *handle, rfm95_bw_t bw){
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	70fb      	strb	r3, [r7, #3]
	handle->config.bandwidth = bw;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	78fa      	ldrb	r2, [r7, #3]
 8000d82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	return;
 8000d86:	bf00      	nop
}
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <rfm95_set_frequency>:
 * @param *handle  rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param uint32_t freq           must be within 863 - 870 MHz.
 *
 * @return void.
 */
void rfm95_set_frequency(rfm95_handle_t *handle, uint32_t freq){
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	uint32_t f = freq;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
	if (f < LOW_FREQ_BAND_EU868)  f = LOW_FREQ_BAND_EU868;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4a09      	ldr	r2, [pc, #36]	@ (8000dcc <rfm95_set_frequency+0x38>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d201      	bcs.n	8000dae <rfm95_set_frequency+0x1a>
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <rfm95_set_frequency+0x38>)
 8000dac:	60fb      	str	r3, [r7, #12]
	if (f > HIGH_FREQ_BAND_EU868) f = HIGH_FREQ_BAND_EU868;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4a07      	ldr	r2, [pc, #28]	@ (8000dd0 <rfm95_set_frequency+0x3c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d901      	bls.n	8000dba <rfm95_set_frequency+0x26>
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <rfm95_set_frequency+0x3c>)
 8000db8:	60fb      	str	r3, [r7, #12]

	handle->config.channel_freq = f;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	649a      	str	r2, [r3, #72]	@ 0x48
	return;
 8000dc0:	bf00      	nop
}
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	337055c0 	.word	0x337055c0
 8000dd0:	33db2580 	.word	0x33db2580

08000dd4 <rfm95_set_syncWord>:
 * @param *handle  rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param uint8_t syncWord        any value (0x12 suggested, avoid 0x34 reserved for LoRaWAN).
 *
 * @return void.
 */
void rfm95_set_syncWord(rfm95_handle_t *handle, uint8_t syncWord){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	70fb      	strb	r3, [r7, #3]
	uint8_t sync = syncWord;
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	73fb      	strb	r3, [r7, #15]

	if(sync == 0x34) sync = LORA_DEF_SYNC_WORD;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	2b34      	cmp	r3, #52	@ 0x34
 8000de8:	d101      	bne.n	8000dee <rfm95_set_syncWord+0x1a>
 8000dea:	2312      	movs	r3, #18
 8000dec:	73fb      	strb	r3, [r7, #15]
	handle->config.sync_word = sync;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7bfa      	ldrb	r2, [r7, #15]
 8000df2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	return;
 8000df6:	bf00      	nop
}
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <rfm95_stdby>:
 *
 * @param *handle rfm95_handle_t structure containing RFM95 configurations and function pointers
 *
 * @return true if no errors occurred
 */
bool rfm95_stdby(rfm95_handle_t *handle){
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  // Move modem to LoRa standby
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 8000e0a:	2281      	movs	r2, #129	@ 0x81
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff fc58 	bl	80006c4 <write_register>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f083 0301 	eor.w	r3, r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <rfm95_stdby+0x22>
 8000e20:	2300      	movs	r3, #0
 8000e22:	e011      	b.n	8000e48 <rfm95_stdby+0x46>

  // Wait for the modem to be ready
  if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8000e24:	220a      	movs	r2, #10
 8000e26:	2102      	movs	r1, #2
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fe33 	bl	8000a94 <wait_for_irq>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f083 0301 	eor.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <rfm95_stdby+0x3c>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e004      	b.n	8000e48 <rfm95_stdby+0x46>

  handle->rfm_status = STNBY_MODE;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return true;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <rfm95_send>:
 * @param *uint8_t senda_daya       pointer to data buffer to be transmitted.
 * @param size_t   send_data_length size for the TX buffer
 *
 * @return true if no errors occurred.
 */
bool rfm95_send(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]

  // make changes effective
  if (!rfm95_modify_power(handle))     return false;
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff fc63 	bl	8000728 <rfm95_modify_power>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f083 0301 	eor.w	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <rfm95_send+0x22>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e0e5      	b.n	800103e <rfm95_send+0x1ee>
  if (!rfm95_modify_SF(handle))        return false;
 8000e72:	68f8      	ldr	r0, [r7, #12]
 8000e74:	f7ff fcbe 	bl	80007f4 <rfm95_modify_SF>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	f083 0301 	eor.w	r3, r3, #1
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <rfm95_send+0x38>
 8000e84:	2300      	movs	r3, #0
 8000e86:	e0da      	b.n	800103e <rfm95_send+0x1ee>
  if (!rfm95_modify_frequency(handle)) return false;
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f7ff fd4b 	bl	8000924 <rfm95_modify_frequency>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f083 0301 	eor.w	r3, r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <rfm95_send+0x4e>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e0cf      	b.n	800103e <rfm95_send+0x1ee>
  if (!rfm95_modify_CR_BW(handle))     return false;
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f7ff fd0c 	bl	80008bc <rfm95_modify_CR_BW>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	f083 0301 	eor.w	r3, r3, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <rfm95_send+0x64>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e0c4      	b.n	800103e <rfm95_send+0x1ee>
  if (!rfm95_modify_syncWord(handle))  return false;
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff fd93 	bl	80009e0 <rfm95_modify_syncWord>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f083 0301 	eor.w	r3, r3, #1
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <rfm95_send+0x7a>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e0b9      	b.n	800103e <rfm95_send+0x1ee>

  // Set the payload length.
  if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, send_data_length)) return false;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2122      	movs	r1, #34	@ 0x22
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f7ff fbf6 	bl	80006c4 <write_register>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f083 0301 	eor.w	r3, r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <rfm95_send+0x98>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	e0aa      	b.n	800103e <rfm95_send+0x1ee>

  // Enable tx-done interrupt, clear flags and previous interrupt time
  if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8000ee8:	2240      	movs	r2, #64	@ 0x40
 8000eea:	2140      	movs	r1, #64	@ 0x40
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f7ff fbe9 	bl	80006c4 <write_register>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f083 0301 	eor.w	r3, r3, #1
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <rfm95_send+0xb2>
 8000efe:	2300      	movs	r3, #0
 8000f00:	e09d      	b.n	800103e <rfm95_send+0x1ee>
  if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xFF)) return false;
 8000f02:	22ff      	movs	r2, #255	@ 0xff
 8000f04:	2112      	movs	r1, #18
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f7ff fbdc 	bl	80006c4 <write_register>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	f083 0301 	eor.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <rfm95_send+0xcc>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e090      	b.n	800103e <rfm95_send+0x1ee>
  handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	631a      	str	r2, [r3, #48]	@ 0x30
  handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2200      	movs	r2, #0
 8000f26:	635a      	str	r2, [r3, #52]	@ 0x34
  handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	639a      	str	r2, [r3, #56]	@ 0x38

  // Move modem to LoRa standby
  if (handle->rfm_status != STNBY_MODE){
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d01d      	beq.n	8000f76 <rfm95_send+0x126>
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 8000f3a:	2281      	movs	r2, #129	@ 0x81
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f7ff fbc0 	bl	80006c4 <write_register>
 8000f44:	4603      	mov	r3, r0
 8000f46:	f083 0301 	eor.w	r3, r3, #1
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <rfm95_send+0x104>
 8000f50:	2300      	movs	r3, #0
 8000f52:	e074      	b.n	800103e <rfm95_send+0x1ee>

    // Wait for the modem to be ready
    if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8000f54:	220a      	movs	r2, #10
 8000f56:	2102      	movs	r1, #2
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f7ff fd9b 	bl	8000a94 <wait_for_irq>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f083 0301 	eor.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <rfm95_send+0x11e>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e067      	b.n	800103e <rfm95_send+0x1ee>
    handle->rfm_status = STNBY_MODE;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2201      	movs	r2, #1
 8000f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  // Set pointer to start of TX section in FIFO
  if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, RFM95_FIFO_TX_BASE_ADDRESS)) return false;
 8000f76:	2200      	movs	r2, #0
 8000f78:	210d      	movs	r1, #13
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f7ff fba2 	bl	80006c4 <write_register>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f083 0301 	eor.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <rfm95_send+0x140>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e056      	b.n	800103e <rfm95_send+0x1ee>

  // Write payload to FIFO.
  for (size_t i = 0; i < send_data_length; i++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e00b      	b.n	8000fae <rfm95_send+0x15e>
    write_register(handle, RFM95_REGISTER_FIFO_ACCESS, send_data[i]);
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff fb8e 	bl	80006c4 <write_register>
  for (size_t i = 0; i < send_data_length; i++) {
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d3ef      	bcc.n	8000f96 <rfm95_send+0x146>
  }

  // Set modem to tx mode.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_TX)) return false;
 8000fb6:	2283      	movs	r2, #131	@ 0x83
 8000fb8:	2101      	movs	r1, #1
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f7ff fb82 	bl	80006c4 <write_register>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f083 0301 	eor.w	r3, r3, #1
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <rfm95_send+0x180>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e036      	b.n	800103e <rfm95_send+0x1ee>

  // Wait for the modem to be ready
  if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 8000fd0:	220a      	movs	r2, #10
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f7ff fd5d 	bl	8000a94 <wait_for_irq>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f083 0301 	eor.w	r3, r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <rfm95_send+0x19a>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e029      	b.n	800103e <rfm95_send+0x1ee>
  handle->rfm_status = TRANSMIT_MODE;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2202      	movs	r2, #2
 8000fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  // Wait for the transfer complete interrupt.
  if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 8000ff2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f7ff fd4b 	bl	8000a94 <wait_for_irq>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f083 0301 	eor.w	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <rfm95_send+0x1be>
 800100a:	2300      	movs	r3, #0
 800100c:	e017      	b.n	800103e <rfm95_send+0x1ee>

  // LSE Tick corresponding to the end of TX --> not needed here
  uint32_t tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	613b      	str	r3, [r7, #16]
  handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2200      	movs	r2, #0
 8001018:	631a      	str	r2, [r3, #48]	@ 0x30

  // Return modem to sleep.
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 800101a:	2280      	movs	r2, #128	@ 0x80
 800101c:	2101      	movs	r1, #1
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f7ff fb50 	bl	80006c4 <write_register>
 8001024:	4603      	mov	r3, r0
 8001026:	f083 0301 	eor.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <rfm95_send+0x1e4>
 8001030:	2300      	movs	r3, #0
 8001032:	e004      	b.n	800103e <rfm95_send+0x1ee>
  handle->rfm_status = SLEEP_MODE;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return 1;
 800103c:	2301      	movs	r3, #1
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <rfm95_enter_rx_mode>:
 *
 * @param *handle  rfm95_handle_t   structure containing RFM95 configurations and function pointers.
 *
 * @return true if no errors occurred.
 */
bool rfm95_enter_rx_mode(rfm95_handle_t *handle){
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]

  // Clear flags and previous interrupt time, configure mapping for RX done.
  if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 800104e:	2200      	movs	r2, #0
 8001050:	2140      	movs	r1, #64	@ 0x40
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fb36 	bl	80006c4 <write_register>
 8001058:	4603      	mov	r3, r0
 800105a:	f083 0301 	eor.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <rfm95_enter_rx_mode+0x22>
 8001064:	2300      	movs	r3, #0
 8001066:	e05b      	b.n	8001120 <rfm95_enter_rx_mode+0xda>
  if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xFF)) return false;
 8001068:	22ff      	movs	r2, #255	@ 0xff
 800106a:	2112      	movs	r1, #18
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff fb29 	bl	80006c4 <write_register>
 8001072:	4603      	mov	r3, r0
 8001074:	f083 0301 	eor.w	r3, r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <rfm95_enter_rx_mode+0x3c>
 800107e:	2300      	movs	r3, #0
 8001080:	e04e      	b.n	8001120 <rfm95_enter_rx_mode+0xda>
  handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	631a      	str	r2, [r3, #48]	@ 0x30
  handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	635a      	str	r2, [r3, #52]	@ 0x34
  handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	639a      	str	r2, [r3, #56]	@ 0x38

  // Move modem to LoRa standby
  if (handle->rfm_status != STNBY_MODE){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b01      	cmp	r3, #1
 800109e:	d01d      	beq.n	80010dc <rfm95_enter_rx_mode+0x96>
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 80010a0:	2281      	movs	r2, #129	@ 0x81
 80010a2:	2101      	movs	r1, #1
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fb0d 	bl	80006c4 <write_register>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f083 0301 	eor.w	r3, r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <rfm95_enter_rx_mode+0x74>
 80010b6:	2300      	movs	r3, #0
 80010b8:	e032      	b.n	8001120 <rfm95_enter_rx_mode+0xda>

    // Wait for the modem to be ready.
    if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 80010ba:	220a      	movs	r2, #10
 80010bc:	2102      	movs	r1, #2
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fce8 	bl	8000a94 <wait_for_irq>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f083 0301 	eor.w	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <rfm95_enter_rx_mode+0x8e>
 80010d0:	2300      	movs	r3, #0
 80010d2:	e025      	b.n	8001120 <rfm95_enter_rx_mode+0xda>
    handle->rfm_status = STNBY_MODE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  // Enter RX CONT mode
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_RX_CONT)) return false;
 80010dc:	2285      	movs	r2, #133	@ 0x85
 80010de:	2101      	movs	r1, #1
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff faef 	bl	80006c4 <write_register>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f083 0301 	eor.w	r3, r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <rfm95_enter_rx_mode+0xb0>
 80010f2:	2300      	movs	r3, #0
 80010f4:	e014      	b.n	8001120 <rfm95_enter_rx_mode+0xda>

  // Wait for the modem to be ready.
  handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	639a      	str	r2, [r3, #56]	@ 0x38
  if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 80010fc:	220a      	movs	r2, #10
 80010fe:	2102      	movs	r1, #2
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff fcc7 	bl	8000a94 <wait_for_irq>
 8001106:	4603      	mov	r3, r0
 8001108:	f083 0301 	eor.w	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <rfm95_enter_rx_mode+0xd0>
 8001112:	2300      	movs	r3, #0
 8001114:	e004      	b.n	8001120 <rfm95_enter_rx_mode+0xda>
  handle->rfm_status = RXCONTIN_MODE;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2203      	movs	r2, #3
 800111a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	return 1;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <rfm95_receive>:
 * @param *uint8_t rx_buff          will contain the received payload.
 * @param size_t   rx_data_length   will contain the received number of bytes.
 *
 * @return true if no errors occurred.
 */
bool rfm95_receive(rfm95_handle_t *handle, uint8_t *rx_buff, uint8_t *rx_data_length){
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]

  // Move modem to LoRa standby.
  if (handle->rfm_status != STNBY_MODE){
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d01d      	beq.n	800117c <rfm95_receive+0x54>
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_STANDBY)) return false;
 8001140:	2281      	movs	r2, #129	@ 0x81
 8001142:	2101      	movs	r1, #1
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f7ff fabd 	bl	80006c4 <write_register>
 800114a:	4603      	mov	r3, r0
 800114c:	f083 0301 	eor.w	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <rfm95_receive+0x32>
 8001156:	2300      	movs	r3, #0
 8001158:	e088      	b.n	800126c <rfm95_receive+0x144>

    // Wait for the modem to be ready.
    if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT)) return false;
 800115a:	220a      	movs	r2, #10
 800115c:	2102      	movs	r1, #2
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff fc98 	bl	8000a94 <wait_for_irq>
 8001164:	4603      	mov	r3, r0
 8001166:	f083 0301 	eor.w	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <rfm95_receive+0x4c>
 8001170:	2300      	movs	r3, #0
 8001172:	e07b      	b.n	800126c <rfm95_receive+0x144>
    handle->rfm_status = STNBY_MODE;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  // proceed with payload extraction:
  uint8_t irq_flags;
  read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 800117c:	f107 0217 	add.w	r2, r7, #23
 8001180:	2301      	movs	r3, #1
 8001182:	2112      	movs	r1, #18
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f7ff fa61 	bl	800064c <read_register>

  // Check if there was a CRC error.
  if (irq_flags & RFM95_PAYLOAD_CRC_ERR_MSK) {
 800118a:	7dfb      	ldrb	r3, [r7, #23]
 800118c:	f003 0320 	and.w	r3, r3, #32
 8001190:	2b00      	cmp	r3, #0
 8001192:	d012      	beq.n	80011ba <rfm95_receive+0x92>
    // Return modem to sleep.
    if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 8001194:	2280      	movs	r2, #128	@ 0x80
 8001196:	2101      	movs	r1, #1
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f7ff fa93 	bl	80006c4 <write_register>
 800119e:	4603      	mov	r3, r0
 80011a0:	f083 0301 	eor.w	r3, r3, #1
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <rfm95_receive+0x86>
 80011aa:	2300      	movs	r3, #0
 80011ac:	e05e      	b.n	800126c <rfm95_receive+0x144>
    handle->rfm_status = SLEEP_MODE;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return false;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e058      	b.n	800126c <rfm95_receive+0x144>
  }

  // Read received payload length.
  uint8_t rx_bytes;
  if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &rx_bytes, 1)) return false;
 80011ba:	f107 0216 	add.w	r2, r7, #22
 80011be:	2301      	movs	r3, #1
 80011c0:	2113      	movs	r1, #19
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff fa42 	bl	800064c <read_register>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f083 0301 	eor.w	r3, r3, #1
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <rfm95_receive+0xb0>
 80011d4:	2300      	movs	r3, #0
 80011d6:	e049      	b.n	800126c <rfm95_receive+0x144>

  // block here if no bytes were received
  if (rx_bytes == 0) {
 80011d8:	7dbb      	ldrb	r3, [r7, #22]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d106      	bne.n	80011ec <rfm95_receive+0xc4>
    write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP);
 80011de:	2280      	movs	r2, #128	@ 0x80
 80011e0:	2101      	movs	r1, #1
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f7ff fa6e 	bl	80006c4 <write_register>
    return false;
 80011e8:	2300      	movs	r3, #0
 80011ea:	e03f      	b.n	800126c <rfm95_receive+0x144>
  }

  // Read packet location within the FIFO buffer
  uint8_t fifo_rx_entry;
  if (!read_register(handle, RFM95_REGISTER_FIFO_RX_CURR_ADDR, &fifo_rx_entry, 1)) return false;
 80011ec:	f107 0215 	add.w	r2, r7, #21
 80011f0:	2301      	movs	r3, #1
 80011f2:	2110      	movs	r1, #16
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f7ff fa29 	bl	800064c <read_register>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f083 0301 	eor.w	r3, r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <rfm95_receive+0xe2>
 8001206:	2300      	movs	r3, #0
 8001208:	e030      	b.n	800126c <rfm95_receive+0x144>

  // Read received payload itself.
  if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, fifo_rx_entry)) return false;
 800120a:	7d7b      	ldrb	r3, [r7, #21]
 800120c:	461a      	mov	r2, r3
 800120e:	210d      	movs	r1, #13
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f7ff fa57 	bl	80006c4 <write_register>
 8001216:	4603      	mov	r3, r0
 8001218:	f083 0301 	eor.w	r3, r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <rfm95_receive+0xfe>
 8001222:	2300      	movs	r3, #0
 8001224:	e022      	b.n	800126c <rfm95_receive+0x144>
  if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, rx_buff, rx_bytes))return false;
 8001226:	7dbb      	ldrb	r3, [r7, #22]
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	2100      	movs	r1, #0
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f7ff fa0d 	bl	800064c <read_register>
 8001232:	4603      	mov	r3, r0
 8001234:	f083 0301 	eor.w	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <rfm95_receive+0x11a>
 800123e:	2300      	movs	r3, #0
 8001240:	e014      	b.n	800126c <rfm95_receive+0x144>

  // Return modem to sleep --> needed to clear the FIFO
  if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_OP_MODE_LORA_SLEEP)) return false;
 8001242:	2280      	movs	r2, #128	@ 0x80
 8001244:	2101      	movs	r1, #1
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7ff fa3c 	bl	80006c4 <write_register>
 800124c:	4603      	mov	r3, r0
 800124e:	f083 0301 	eor.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <rfm95_receive+0x134>
 8001258:	2300      	movs	r3, #0
 800125a:	e007      	b.n	800126c <rfm95_receive+0x144>
  handle->rfm_status = SLEEP_MODE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  *rx_data_length = rx_bytes;
 8001264:	7dba      	ldrb	r2, [r7, #22]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	701a      	strb	r2, [r3, #0]

	return true;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <rfm95_on_interrupt>:
 * @param *handle   rfm95_handle_t structure containing RFM95 configurations and function pointers.
 * @param interrupt rfm95_interrupt_t defining which interrupt triggered the IRQ (either DIO0, DIO1 or DIO5).
 *
 * @return void.
 */
void rfm95_on_interrupt(rfm95_handle_t *handle, rfm95_interrupt_t interrupt) {
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
  if (handle->rfm_timer->Instance->CR & LPTIM_CR_ENABLE) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00a      	beq.n	80012a6 <rfm95_on_interrupt+0x32>
    // get timing if and only if LPTIM is running
    handle->interrupt_times[interrupt] = handle->get_precision_tick();
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	78fc      	ldrb	r4, [r7, #3]
 8001296:	4798      	blx	r3
 8001298:	4601      	mov	r1, r0
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f104 020c 	add.w	r2, r4, #12
 80012a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return;
 80012a4:	e005      	b.n	80012b2 <rfm95_on_interrupt+0x3e>
  }

  // else, skip...
  handle->interrupt_times[interrupt] = 0;
 80012a6:	78fa      	ldrb	r2, [r7, #3]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	320c      	adds	r2, #12
 80012ac:	2100      	movs	r1, #0
 80012ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd90      	pop	{r4, r7, pc}

080012b8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db0c      	blt.n	80012e4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f003 021f 	and.w	r2, r3, #31
 80012d0:	4907      	ldr	r1, [pc, #28]	@ (80012f0 <__NVIC_ClearPendingIRQ+0x38>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	2001      	movs	r0, #1
 80012da:	fa00 f202 	lsl.w	r2, r0, r2
 80012de:	3360      	adds	r3, #96	@ 0x60
 80012e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	b0ab      	sub	sp, #172	@ 0xac
 80012f8:	af08      	add	r7, sp, #32
   * uint8_t mask, uint8_t nodeID, uint16_t pktID, uint8_t* sensors, uint8_t sens_len,
   * int16_t RSSI, uint8_t* bc_seq, uint8_t bc_seq_len, uint8_t* t_buff, uint8_t* t_buff_le
   */

	// ----> ENV NODE 1
	build_pkt(SYNC_WORD_ENV, 0, 1, 1, pyl1, pyl1_len, 0, bc_seq, 0, e1_p1_bc22.buff, &e1_p1_bc22.len);
 80012fa:	4bb6      	ldr	r3, [pc, #728]	@ (80015d4 <main+0x2e0>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4ab6      	ldr	r2, [pc, #728]	@ (80015d8 <main+0x2e4>)
 8001300:	9206      	str	r2, [sp, #24]
 8001302:	4ab6      	ldr	r2, [pc, #728]	@ (80015dc <main+0x2e8>)
 8001304:	9205      	str	r2, [sp, #20]
 8001306:	2200      	movs	r2, #0
 8001308:	9204      	str	r2, [sp, #16]
 800130a:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800130e:	9203      	str	r2, [sp, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	9202      	str	r2, [sp, #8]
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	4bb2      	ldr	r3, [pc, #712]	@ (80015e0 <main+0x2ec>)
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	2201      	movs	r2, #1
 800131e:	2100      	movs	r1, #0
 8001320:	f64a 2055 	movw	r0, #43605	@ 0xaa55
 8001324:	f001 f810 	bl	8002348 <build_pkt>

	build_pkt(SYNC_WORD_ENV, 0, 1, 2, pyl2, pyl2_len, 0, bc_seq, 0, e1_p2_bc22.buff, &e1_p2_bc22.len);
 8001328:	4bae      	ldr	r3, [pc, #696]	@ (80015e4 <main+0x2f0>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4aae      	ldr	r2, [pc, #696]	@ (80015e8 <main+0x2f4>)
 800132e:	9206      	str	r2, [sp, #24]
 8001330:	4aae      	ldr	r2, [pc, #696]	@ (80015ec <main+0x2f8>)
 8001332:	9205      	str	r2, [sp, #20]
 8001334:	2200      	movs	r2, #0
 8001336:	9204      	str	r2, [sp, #16]
 8001338:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800133c:	9203      	str	r2, [sp, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	9202      	str	r2, [sp, #8]
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	4baa      	ldr	r3, [pc, #680]	@ (80015f0 <main+0x2fc>)
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2302      	movs	r3, #2
 800134a:	2201      	movs	r2, #1
 800134c:	2100      	movs	r1, #0
 800134e:	f64a 2055 	movw	r0, #43605	@ 0xaa55
 8001352:	f000 fff9 	bl	8002348 <build_pkt>

	bc_seq[0] = 5;
 8001356:	2305      	movs	r3, #5
 8001358:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	bc_seq[1] = 4;
 800135c:	2304      	movs	r3, #4
 800135e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	build_pkt(SYNC_WORD_BC, 0, 1, 1, pyl1, pyl1_len, -89, bc_seq, 2, e1_p1_bc54.buff, &e1_p1_bc54.len);
 8001362:	4b9c      	ldr	r3, [pc, #624]	@ (80015d4 <main+0x2e0>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	4aa3      	ldr	r2, [pc, #652]	@ (80015f4 <main+0x300>)
 8001368:	9206      	str	r2, [sp, #24]
 800136a:	4aa3      	ldr	r2, [pc, #652]	@ (80015f8 <main+0x304>)
 800136c:	9205      	str	r2, [sp, #20]
 800136e:	2202      	movs	r2, #2
 8001370:	9204      	str	r2, [sp, #16]
 8001372:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001376:	9203      	str	r2, [sp, #12]
 8001378:	f06f 0258 	mvn.w	r2, #88	@ 0x58
 800137c:	9202      	str	r2, [sp, #8]
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	4b97      	ldr	r3, [pc, #604]	@ (80015e0 <main+0x2ec>)
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	2201      	movs	r2, #1
 8001388:	2100      	movs	r1, #0
 800138a:	f241 10aa 	movw	r0, #4522	@ 0x11aa
 800138e:	f000 ffdb 	bl	8002348 <build_pkt>

	bc_seq[0] = 5;
 8001392:	2305      	movs	r3, #5
 8001394:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	bc_seq[1] = 4;
 8001398:	2304      	movs	r3, #4
 800139a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	bc_seq[2] = 2;
 800139e:	2302      	movs	r3, #2
 80013a0:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	bc_seq[3] = 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	build_pkt(SYNC_WORD_BC, 0, 1, 1, pyl1, pyl1_len, -89, bc_seq, 4, e1_p1_bc51.buff, &e1_p1_bc51.len);
 80013aa:	4b8a      	ldr	r3, [pc, #552]	@ (80015d4 <main+0x2e0>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	4a93      	ldr	r2, [pc, #588]	@ (80015fc <main+0x308>)
 80013b0:	9206      	str	r2, [sp, #24]
 80013b2:	4a93      	ldr	r2, [pc, #588]	@ (8001600 <main+0x30c>)
 80013b4:	9205      	str	r2, [sp, #20]
 80013b6:	2204      	movs	r2, #4
 80013b8:	9204      	str	r2, [sp, #16]
 80013ba:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80013be:	9203      	str	r2, [sp, #12]
 80013c0:	f06f 0258 	mvn.w	r2, #88	@ 0x58
 80013c4:	9202      	str	r2, [sp, #8]
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	4b85      	ldr	r3, [pc, #532]	@ (80015e0 <main+0x2ec>)
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2301      	movs	r3, #1
 80013ce:	2201      	movs	r2, #1
 80013d0:	2100      	movs	r1, #0
 80013d2:	f241 10aa 	movw	r0, #4522	@ 0x11aa
 80013d6:	f000 ffb7 	bl	8002348 <build_pkt>

	bc_seq[0] = 5;
 80013da:	2305      	movs	r3, #5
 80013dc:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	bc_seq[1] = 4;
 80013e0:	2304      	movs	r3, #4
 80013e2:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	bc_seq[2] = 3;
 80013e6:	2303      	movs	r3, #3
 80013e8:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	build_pkt(SYNC_WORD_BC, 0, 1, 1, pyl1, pyl1_len, -92, bc_seq, 3, e1_p1_bc543.buff, &e1_p1_bc543.len);
 80013ec:	4b79      	ldr	r3, [pc, #484]	@ (80015d4 <main+0x2e0>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4a84      	ldr	r2, [pc, #528]	@ (8001604 <main+0x310>)
 80013f2:	9206      	str	r2, [sp, #24]
 80013f4:	4a84      	ldr	r2, [pc, #528]	@ (8001608 <main+0x314>)
 80013f6:	9205      	str	r2, [sp, #20]
 80013f8:	2203      	movs	r2, #3
 80013fa:	9204      	str	r2, [sp, #16]
 80013fc:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001400:	9203      	str	r2, [sp, #12]
 8001402:	f06f 025b 	mvn.w	r2, #91	@ 0x5b
 8001406:	9202      	str	r2, [sp, #8]
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	4b75      	ldr	r3, [pc, #468]	@ (80015e0 <main+0x2ec>)
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2301      	movs	r3, #1
 8001410:	2201      	movs	r2, #1
 8001412:	2100      	movs	r1, #0
 8001414:	f241 10aa 	movw	r0, #4522	@ 0x11aa
 8001418:	f000 ff96 	bl	8002348 <build_pkt>

	bc_seq[0] = 6;
 800141c:	2306      	movs	r3, #6
 800141e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	bc_seq[1] = 5;
 8001422:	2305      	movs	r3, #5
 8001424:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	bc_seq[2] = 4;
 8001428:	2304      	movs	r3, #4
 800142a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	build_pkt(SYNC_WORD_BC, 0, 1, 1, pyl1, pyl1_len, -99, bc_seq, 3, e1_p1_bc64.buff, &e1_p1_bc64.len);
 800142e:	4b69      	ldr	r3, [pc, #420]	@ (80015d4 <main+0x2e0>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4a76      	ldr	r2, [pc, #472]	@ (800160c <main+0x318>)
 8001434:	9206      	str	r2, [sp, #24]
 8001436:	4a76      	ldr	r2, [pc, #472]	@ (8001610 <main+0x31c>)
 8001438:	9205      	str	r2, [sp, #20]
 800143a:	2203      	movs	r2, #3
 800143c:	9204      	str	r2, [sp, #16]
 800143e:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001442:	9203      	str	r2, [sp, #12]
 8001444:	f06f 0262 	mvn.w	r2, #98	@ 0x62
 8001448:	9202      	str	r2, [sp, #8]
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	4b64      	ldr	r3, [pc, #400]	@ (80015e0 <main+0x2ec>)
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2301      	movs	r3, #1
 8001452:	2201      	movs	r2, #1
 8001454:	2100      	movs	r1, #0
 8001456:	f241 10aa 	movw	r0, #4522	@ 0x11aa
 800145a:	f000 ff75 	bl	8002348 <build_pkt>

	bc_seq[0] = 2;
 800145e:	2302      	movs	r3, #2
 8001460:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	bc_seq[1] = 1;
 8001464:	2301      	movs	r3, #1
 8001466:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	build_pkt(SYNC_WORD_BC, 0, 1, 1, pyl1, pyl1_len, -123, bc_seq, 2, e1_p1_bc21.buff, &e1_p1_bc21.len);
 800146a:	4b5a      	ldr	r3, [pc, #360]	@ (80015d4 <main+0x2e0>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4a69      	ldr	r2, [pc, #420]	@ (8001614 <main+0x320>)
 8001470:	9206      	str	r2, [sp, #24]
 8001472:	4a69      	ldr	r2, [pc, #420]	@ (8001618 <main+0x324>)
 8001474:	9205      	str	r2, [sp, #20]
 8001476:	2202      	movs	r2, #2
 8001478:	9204      	str	r2, [sp, #16]
 800147a:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800147e:	9203      	str	r2, [sp, #12]
 8001480:	f06f 027a 	mvn.w	r2, #122	@ 0x7a
 8001484:	9202      	str	r2, [sp, #8]
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	4b55      	ldr	r3, [pc, #340]	@ (80015e0 <main+0x2ec>)
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	2201      	movs	r2, #1
 8001490:	2100      	movs	r1, #0
 8001492:	f241 10aa 	movw	r0, #4522	@ 0x11aa
 8001496:	f000 ff57 	bl	8002348 <build_pkt>

	bc_seq[0] = 3;
 800149a:	2303      	movs	r3, #3
 800149c:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	bc_seq[1] = 2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	bc_seq[2] = 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	build_pkt(SYNC_WORD_BC, 0, 1, 1, pyl1, pyl1_len, -123, bc_seq, 3, e1_p1_bc31.buff, &e1_p1_bc31.len);
 80014ac:	4b49      	ldr	r3, [pc, #292]	@ (80015d4 <main+0x2e0>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4a5a      	ldr	r2, [pc, #360]	@ (800161c <main+0x328>)
 80014b2:	9206      	str	r2, [sp, #24]
 80014b4:	4a5a      	ldr	r2, [pc, #360]	@ (8001620 <main+0x32c>)
 80014b6:	9205      	str	r2, [sp, #20]
 80014b8:	2203      	movs	r2, #3
 80014ba:	9204      	str	r2, [sp, #16]
 80014bc:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80014c0:	9203      	str	r2, [sp, #12]
 80014c2:	f06f 027a 	mvn.w	r2, #122	@ 0x7a
 80014c6:	9202      	str	r2, [sp, #8]
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	4b45      	ldr	r3, [pc, #276]	@ (80015e0 <main+0x2ec>)
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	2201      	movs	r2, #1
 80014d2:	2100      	movs	r1, #0
 80014d4:	f241 10aa 	movw	r0, #4522	@ 0x11aa
 80014d8:	f000 ff36 	bl	8002348 <build_pkt>

	bc_seq[0] = 4;
 80014dc:	2304      	movs	r3, #4
 80014de:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	bc_seq[1] = 3;
 80014e2:	2303      	movs	r3, #3
 80014e4:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	bc_seq[2] = 1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	build_pkt(SYNC_WORD_BC, 0, 1, 2, pyl3, pyl3_len, -74, bc_seq, 3, e1_p2_bc41.buff, &e1_p2_bc41.len);
 80014ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001624 <main+0x330>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	4a4d      	ldr	r2, [pc, #308]	@ (8001628 <main+0x334>)
 80014f4:	9206      	str	r2, [sp, #24]
 80014f6:	4a4d      	ldr	r2, [pc, #308]	@ (800162c <main+0x338>)
 80014f8:	9205      	str	r2, [sp, #20]
 80014fa:	2203      	movs	r2, #3
 80014fc:	9204      	str	r2, [sp, #16]
 80014fe:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001502:	9203      	str	r2, [sp, #12]
 8001504:	f06f 0249 	mvn.w	r2, #73	@ 0x49
 8001508:	9202      	str	r2, [sp, #8]
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	4b48      	ldr	r3, [pc, #288]	@ (8001630 <main+0x33c>)
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2302      	movs	r3, #2
 8001512:	2201      	movs	r2, #1
 8001514:	2100      	movs	r1, #0
 8001516:	f241 10aa 	movw	r0, #4522	@ 0x11aa
 800151a:	f000 ff15 	bl	8002348 <build_pkt>

	bc_seq[0] = 4;
 800151e:	2304      	movs	r3, #4
 8001520:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	bc_seq[1] = 3;
 8001524:	2303      	movs	r3, #3
 8001526:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	build_pkt(SYNC_WORD_BC, 0, 1, 2, pyl3, pyl3_len, -78, bc_seq, 2, e1_p2_bc43.buff, &e1_p2_bc43.len);
 800152a:	4b3e      	ldr	r3, [pc, #248]	@ (8001624 <main+0x330>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4a41      	ldr	r2, [pc, #260]	@ (8001634 <main+0x340>)
 8001530:	9206      	str	r2, [sp, #24]
 8001532:	4a41      	ldr	r2, [pc, #260]	@ (8001638 <main+0x344>)
 8001534:	9205      	str	r2, [sp, #20]
 8001536:	2202      	movs	r2, #2
 8001538:	9204      	str	r2, [sp, #16]
 800153a:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800153e:	9203      	str	r2, [sp, #12]
 8001540:	f06f 024d 	mvn.w	r2, #77	@ 0x4d
 8001544:	9202      	str	r2, [sp, #8]
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	4b39      	ldr	r3, [pc, #228]	@ (8001630 <main+0x33c>)
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2302      	movs	r3, #2
 800154e:	2201      	movs	r2, #1
 8001550:	2100      	movs	r1, #0
 8001552:	f241 10aa 	movw	r0, #4522	@ 0x11aa
 8001556:	f000 fef7 	bl	8002348 <build_pkt>


	// ----> ENV NODE 2
	bc_seq[0] = 5;
 800155a:	2305      	movs	r3, #5
 800155c:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	bc_seq[1] = 3;
 8001560:	2303      	movs	r3, #3
 8001562:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	bc_seq[2] = 1;
 8001566:	2301      	movs	r3, #1
 8001568:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	build_pkt(SYNC_WORD_BC, 0, 2, 1, pyl2, pyl2_len,  -80, bc_seq, 3, e2_p1_bc51.buff, &e2_p1_bc51.len);
 800156c:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <main+0x2f0>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4a32      	ldr	r2, [pc, #200]	@ (800163c <main+0x348>)
 8001572:	9206      	str	r2, [sp, #24]
 8001574:	4a32      	ldr	r2, [pc, #200]	@ (8001640 <main+0x34c>)
 8001576:	9205      	str	r2, [sp, #20]
 8001578:	2203      	movs	r2, #3
 800157a:	9204      	str	r2, [sp, #16]
 800157c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001580:	9203      	str	r2, [sp, #12]
 8001582:	f06f 024f 	mvn.w	r2, #79	@ 0x4f
 8001586:	9202      	str	r2, [sp, #8]
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <main+0x2fc>)
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2301      	movs	r3, #1
 8001590:	2202      	movs	r2, #2
 8001592:	2100      	movs	r1, #0
 8001594:	f241 10aa 	movw	r0, #4522	@ 0x11aa
 8001598:	f000 fed6 	bl	8002348 <build_pkt>


	// ----> ENV NODE 3
	bc_seq[0] = 5;
 800159c:	2305      	movs	r3, #5
 800159e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	bc_seq[1] = 4;
 80015a2:	2304      	movs	r3, #4
 80015a4:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	bc_seq[2] = 3;
 80015a8:	2303      	movs	r3, #3
 80015aa:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	build_pkt(SYNC_WORD_BC, 0, 3, 1, pyl3, pyl3_len,  -91, bc_seq, 3, e3_p1_bc53.buff, &e3_p1_bc53.len);
 80015ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001624 <main+0x330>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4a24      	ldr	r2, [pc, #144]	@ (8001644 <main+0x350>)
 80015b4:	9206      	str	r2, [sp, #24]
 80015b6:	4a24      	ldr	r2, [pc, #144]	@ (8001648 <main+0x354>)
 80015b8:	9205      	str	r2, [sp, #20]
 80015ba:	2203      	movs	r2, #3
 80015bc:	9204      	str	r2, [sp, #16]
 80015be:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80015c2:	9203      	str	r2, [sp, #12]
 80015c4:	f06f 025a 	mvn.w	r2, #90	@ 0x5a
 80015c8:	9202      	str	r2, [sp, #8]
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	4b18      	ldr	r3, [pc, #96]	@ (8001630 <main+0x33c>)
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2301      	movs	r3, #1
 80015d2:	e03b      	b.n	800164c <main+0x358>
 80015d4:	20000040 	.word	0x20000040
 80015d8:	200020da 	.word	0x200020da
 80015dc:	200020a4 	.word	0x200020a4
 80015e0:	2000001c 	.word	0x2000001c
 80015e4:	20000068 	.word	0x20000068
 80015e8:	2000229a 	.word	0x2000229a
 80015ec:	20002264 	.word	0x20002264
 80015f0:	20000044 	.word	0x20000044
 80015f4:	20002112 	.word	0x20002112
 80015f8:	200020dc 	.word	0x200020dc
 80015fc:	20002182 	.word	0x20002182
 8001600:	2000214c 	.word	0x2000214c
 8001604:	2000214a 	.word	0x2000214a
 8001608:	20002114 	.word	0x20002114
 800160c:	200021ba 	.word	0x200021ba
 8001610:	20002184 	.word	0x20002184
 8001614:	2000222a 	.word	0x2000222a
 8001618:	200021f4 	.word	0x200021f4
 800161c:	20002262 	.word	0x20002262
 8001620:	2000222c 	.word	0x2000222c
 8001624:	20000090 	.word	0x20000090
 8001628:	200021f2 	.word	0x200021f2
 800162c:	200021bc 	.word	0x200021bc
 8001630:	2000006c 	.word	0x2000006c
 8001634:	200022d2 	.word	0x200022d2
 8001638:	2000229c 	.word	0x2000229c
 800163c:	2000230a 	.word	0x2000230a
 8001640:	200022d4 	.word	0x200022d4
 8001644:	20002342 	.word	0x20002342
 8001648:	2000230c 	.word	0x2000230c
 800164c:	2203      	movs	r2, #3
 800164e:	2100      	movs	r1, #0
 8001650:	f241 10aa 	movw	r0, #4522	@ 0x11aa
 8001654:	f000 fe78 	bl	8002348 <build_pkt>

	bc_seq[0] = 6;
 8001658:	2306      	movs	r3, #6
 800165a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	bc_seq[1] = 5;
 800165e:	2305      	movs	r3, #5
 8001660:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	bc_seq[2] = 4;
 8001664:	2304      	movs	r3, #4
 8001666:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	build_pkt(SYNC_WORD_BC, 0, 3, 1, pyl3, pyl3_len, -101, bc_seq, 3, e3_p1_bc64.buff, &e3_p1_bc64.len);
 800166a:	4b86      	ldr	r3, [pc, #536]	@ (8001884 <main+0x590>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4a86      	ldr	r2, [pc, #536]	@ (8001888 <main+0x594>)
 8001670:	9206      	str	r2, [sp, #24]
 8001672:	4a86      	ldr	r2, [pc, #536]	@ (800188c <main+0x598>)
 8001674:	9205      	str	r2, [sp, #20]
 8001676:	2203      	movs	r2, #3
 8001678:	9204      	str	r2, [sp, #16]
 800167a:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800167e:	9203      	str	r2, [sp, #12]
 8001680:	f06f 0264 	mvn.w	r2, #100	@ 0x64
 8001684:	9202      	str	r2, [sp, #8]
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	4b81      	ldr	r3, [pc, #516]	@ (8001890 <main+0x59c>)
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	2100      	movs	r1, #0
 8001692:	f241 10aa 	movw	r0, #4522	@ 0x11aa
 8001696:	f000 fe57 	bl	8002348 <build_pkt>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169a:	f001 f973 	bl	8002984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169e:	f000 f9e1 	bl	8001a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a2:	f000 fb57 	bl	8001d54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016a6:	f000 fb25 	bl	8001cf4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80016aa:	f000 fa7b 	bl	8001ba4 <MX_RTC_Init>
  MX_SPI3_Init();
 80016ae:	f000 fad9 	bl	8001c64 <MX_SPI3_Init>
  MX_LPTIM1_Init();
 80016b2:	f000 fa37 	bl	8001b24 <MX_LPTIM1_Init>
  MX_RNG_Init();
 80016b6:	f000 fa61 	bl	8001b7c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  printf("start\r\n");
 80016ba:	4876      	ldr	r0, [pc, #472]	@ (8001894 <main+0x5a0>)
 80016bc:	f005 fd24 	bl	8007108 <puts>

  // init RX and TX handler
  init_buffers(&h_buffs);
 80016c0:	4875      	ldr	r0, [pc, #468]	@ (8001898 <main+0x5a4>)
 80016c2:	f7fe ff99 	bl	80005f8 <init_buffers>

  // init RF in RX mode
  if (!init_rfm()) printf("Error during RFM initialization\r\n");
 80016c6:	f000 fc37 	bl	8001f38 <init_rfm>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f083 0301 	eor.w	r3, r3, #1
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <main+0x3e8>
 80016d6:	4871      	ldr	r0, [pc, #452]	@ (800189c <main+0x5a8>)
 80016d8:	f005 fd16 	bl	8007108 <puts>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	if (tx_evt == true) {
 80016dc:	4b70      	ldr	r3, [pc, #448]	@ (80018a0 <main+0x5ac>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8081 	beq.w	80017ea <main+0x4f6>
  		tx_evt = false;
 80016e8:	4b6d      	ldr	r3, [pc, #436]	@ (80018a0 <main+0x5ac>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]

  		uint8_t c_len  = test_buffs[tx_seq_idx]->len;
 80016ee:	4b6d      	ldr	r3, [pc, #436]	@ (80018a4 <main+0x5b0>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b6c      	ldr	r3, [pc, #432]	@ (80018a8 <main+0x5b4>)
 80016f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fa:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80016fe:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
  		uint8_t c_node = test_buffs[tx_seq_idx]->buff[NODE_ID_POS];
 8001702:	4b68      	ldr	r3, [pc, #416]	@ (80018a4 <main+0x5b0>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	4b67      	ldr	r3, [pc, #412]	@ (80018a8 <main+0x5b4>)
 800170a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170e:	78db      	ldrb	r3, [r3, #3]
 8001710:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
  		uint16_t c_pkt = ((uint16_t)(test_buffs[tx_seq_idx]->buff[PKT_ID_MSB_POS] << 8)) | test_buffs[tx_seq_idx]->buff[PKT_ID_LSB_POS];
 8001714:	4b63      	ldr	r3, [pc, #396]	@ (80018a4 <main+0x5b0>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b63      	ldr	r3, [pc, #396]	@ (80018a8 <main+0x5b4>)
 800171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001720:	791b      	ldrb	r3, [r3, #4]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	b29b      	uxth	r3, r3
 8001726:	4a5f      	ldr	r2, [pc, #380]	@ (80018a4 <main+0x5b0>)
 8001728:	7812      	ldrb	r2, [r2, #0]
 800172a:	4611      	mov	r1, r2
 800172c:	4a5e      	ldr	r2, [pc, #376]	@ (80018a8 <main+0x5b4>)
 800172e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001732:	7952      	ldrb	r2, [r2, #5]
 8001734:	4313      	orrs	r3, r2
 8001736:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
  		uint8_t  c_bc1 = test_buffs[tx_seq_idx]->buff[BC_ID1_POS];
 800173a:	4b5a      	ldr	r3, [pc, #360]	@ (80018a4 <main+0x5b0>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	4b59      	ldr	r3, [pc, #356]	@ (80018a8 <main+0x5b4>)
 8001742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001746:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800174a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  		uint8_t  c_bcL = test_buffs[tx_seq_idx]->buff[c_len-1];
 800174e:	4b55      	ldr	r3, [pc, #340]	@ (80018a4 <main+0x5b0>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	4b54      	ldr	r3, [pc, #336]	@ (80018a8 <main+0x5b4>)
 8001756:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800175a:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800175e:	3b01      	subs	r3, #1
 8001760:	5cd3      	ldrb	r3, [r2, r3]
 8001762:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

  		printf("\n###### TX PKT E%d-P%d-%d%d\r\n",c_node,c_pkt,c_bc1,c_bcL);
 8001766:	f897 1084 	ldrb.w	r1, [r7, #132]	@ 0x84
 800176a:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 800176e:	f897 0081 	ldrb.w	r0, [r7, #129]	@ 0x81
 8001772:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	4603      	mov	r3, r0
 800177a:	484c      	ldr	r0, [pc, #304]	@ (80018ac <main+0x5b8>)
 800177c:	f005 fc5c 	bl	8007038 <iprintf>

  		/* Prepare TX buff here */

  		/* TX payload here */
			if (!rfm95_send(&rfm95_handle, test_buffs[tx_seq_idx]->buff, test_buffs[tx_seq_idx]->len)) printf("TX error");
 8001780:	4b48      	ldr	r3, [pc, #288]	@ (80018a4 <main+0x5b0>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b48      	ldr	r3, [pc, #288]	@ (80018a8 <main+0x5b4>)
 8001788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178c:	4619      	mov	r1, r3
 800178e:	4b45      	ldr	r3, [pc, #276]	@ (80018a4 <main+0x5b0>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	4b44      	ldr	r3, [pc, #272]	@ (80018a8 <main+0x5b4>)
 8001796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800179e:	461a      	mov	r2, r3
 80017a0:	4843      	ldr	r0, [pc, #268]	@ (80018b0 <main+0x5bc>)
 80017a2:	f7ff fb55 	bl	8000e50 <rfm95_send>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f083 0301 	eor.w	r3, r3, #1
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <main+0x4c4>
 80017b2:	4840      	ldr	r0, [pc, #256]	@ (80018b4 <main+0x5c0>)
 80017b4:	f005 fc40 	bl	8007038 <iprintf>
			tx_seq_idx+=1;
 80017b8:	4b3a      	ldr	r3, [pc, #232]	@ (80018a4 <main+0x5b0>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b38      	ldr	r3, [pc, #224]	@ (80018a4 <main+0x5b0>)
 80017c2:	701a      	strb	r2, [r3, #0]

			if (tx_seq_idx >= TEST_SEQ_SIZE) tx_seq_idx = 0;
 80017c4:	4b37      	ldr	r3, [pc, #220]	@ (80018a4 <main+0x5b0>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b09      	cmp	r3, #9
 80017ca:	d902      	bls.n	80017d2 <main+0x4de>
 80017cc:	4b35      	ldr	r3, [pc, #212]	@ (80018a4 <main+0x5b0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]

  		/* set RFM95 back to continuous RX mode */
			if(!rfm95_enter_rx_mode(&rfm95_handle)) printf("RFM err entering RX\r\n");
 80017d2:	4837      	ldr	r0, [pc, #220]	@ (80018b0 <main+0x5bc>)
 80017d4:	f7ff fc37 	bl	8001046 <rfm95_enter_rx_mode>
 80017d8:	4603      	mov	r3, r0
 80017da:	f083 0301 	eor.w	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <main+0x4f6>
 80017e4:	4834      	ldr	r0, [pc, #208]	@ (80018b8 <main+0x5c4>)
 80017e6:	f005 fc8f 	bl	8007108 <puts>
  	}

  	if (h_sys.evt_flags & SYS_EVT_RX_PENDING) {
 80017ea:	4b34      	ldr	r3, [pc, #208]	@ (80018bc <main+0x5c8>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f43f af71 	beq.w	80016dc <main+0x3e8>
  		 h_sys.evt_flags &= ~SYS_EVT_RX_PENDING;
 80017fa:	4b30      	ldr	r3, [pc, #192]	@ (80018bc <main+0x5c8>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f023 0302 	bic.w	r3, r3, #2
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4b2d      	ldr	r3, [pc, #180]	@ (80018bc <main+0x5c8>)
 8001808:	701a      	strb	r2, [r3, #0]
  		 // read rfm data and print
  		 uint8_t rx_buff[LORA_PAYLOAD_MAX_SIZE];
  		 uint8_t rx_buff_len;

  		 /* set standby mode to read data from rfm95 */
			 if(!rfm95_stdby(&rfm95_handle)) printf("RFM err stdby\r\n");
 800180a:	4829      	ldr	r0, [pc, #164]	@ (80018b0 <main+0x5bc>)
 800180c:	f7ff faf9 	bl	8000e02 <rfm95_stdby>
 8001810:	4603      	mov	r3, r0
 8001812:	f083 0301 	eor.w	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <main+0x52e>
 800181c:	4828      	ldr	r0, [pc, #160]	@ (80018c0 <main+0x5cc>)
 800181e:	f005 fc73 	bl	8007108 <puts>

			 /* read received data */
			 if(!rfm95_receive(&rfm95_handle, &rx_buff[0], &rx_buff_len)) {
 8001822:	f107 025f 	add.w	r2, r7, #95	@ 0x5f
 8001826:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800182a:	4619      	mov	r1, r3
 800182c:	4820      	ldr	r0, [pc, #128]	@ (80018b0 <main+0x5bc>)
 800182e:	f7ff fc7b 	bl	8001128 <rfm95_receive>
 8001832:	4603      	mov	r3, r0
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <main+0x552>

				 printf("RX error");
 800183e:	4821      	ldr	r0, [pc, #132]	@ (80018c4 <main+0x5d0>)
 8001840:	f005 fbfa 	bl	8007038 <iprintf>
 8001844:	e74a      	b.n	80016dc <main+0x3e8>
				 // do domething...

			 } else {

				 if (rx_buff_len < ENV_NODE_PYL_SIZE) {
 8001846:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800184a:	2b29      	cmp	r3, #41	@ 0x29
 800184c:	d803      	bhi.n	8001856 <main+0x562>

					 printf("\nPKT too short, drop\r\n");
 800184e:	481e      	ldr	r0, [pc, #120]	@ (80018c8 <main+0x5d4>)
 8001850:	f005 fc5a 	bl	8007108 <puts>
 8001854:	e0dc      	b.n	8001a10 <main+0x71c>

				 } else {

					 uint16_t sync = (uint16_t)((rx_buff[SYNC_WORD_POS] << 8) | (rx_buff[SYNC_WORD_POS+1]));
 8001856:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800185a:	b21b      	sxth	r3, r3
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	b21a      	sxth	r2, r3
 8001860:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001864:	b21b      	sxth	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b21b      	sxth	r3, r3
 800186a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

					 if (sync != SYNC_WORD_BC) { /* Check if TX comes from known BC node */
 800186e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001872:	f241 12aa 	movw	r2, #4522	@ 0x11aa
 8001876:	4293      	cmp	r3, r2
 8001878:	d02a      	beq.n	80018d0 <main+0x5dc>

						 printf("\nWrong SYNC,PKT drop\r\n");
 800187a:	4814      	ldr	r0, [pc, #80]	@ (80018cc <main+0x5d8>)
 800187c:	f005 fc44 	bl	8007108 <puts>
 8001880:	e0c6      	b.n	8001a10 <main+0x71c>
 8001882:	bf00      	nop
 8001884:	20000090 	.word	0x20000090
 8001888:	2000237a 	.word	0x2000237a
 800188c:	20002344 	.word	0x20002344
 8001890:	2000006c 	.word	0x2000006c
 8001894:	08007e00 	.word	0x08007e00
 8001898:	20000010 	.word	0x20000010
 800189c:	08007e08 	.word	0x08007e08
 80018a0:	200020a0 	.word	0x200020a0
 80018a4:	200020a1 	.word	0x200020a1
 80018a8:	20000094 	.word	0x20000094
 80018ac:	08007e2c 	.word	0x08007e2c
 80018b0:	20000144 	.word	0x20000144
 80018b4:	08007e4c 	.word	0x08007e4c
 80018b8:	08007e58 	.word	0x08007e58
 80018bc:	20000018 	.word	0x20000018
 80018c0:	08007e70 	.word	0x08007e70
 80018c4:	08007e80 	.word	0x08007e80
 80018c8:	08007e8c 	.word	0x08007e8c
 80018cc:	08007ea4 	.word	0x08007ea4

					 } else {

						 uint8_t  masks     = rx_buff[MASK_POS];
 80018d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80018d4:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
						 uint8_t  node_id   = rx_buff[NODE_ID_POS];
 80018d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80018dc:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
						 uint16_t pkt_id    = (rx_buff[PKT_ID_MSB_POS] << 8) | rx_buff[PKT_ID_LSB_POS];
 80018e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

						 uint8_t data[SENSOR_PLD_BYTES];
						 memcpy(data, &rx_buff[SMPL_DATA_POS], SENSOR_PLD_BYTES);
 80018f8:	f107 042e 	add.w	r4, r7, #46	@ 0x2e
 80018fc:	1d3e      	adds	r6, r7, #4
 80018fe:	f104 0c20 	add.w	ip, r4, #32
 8001902:	4635      	mov	r5, r6
 8001904:	4623      	mov	r3, r4
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	6859      	ldr	r1, [r3, #4]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001910:	3410      	adds	r4, #16
 8001912:	3610      	adds	r6, #16
 8001914:	4564      	cmp	r4, ip
 8001916:	d1f4      	bne.n	8001902 <main+0x60e>
 8001918:	4633      	mov	r3, r6
 800191a:	4622      	mov	r2, r4
 800191c:	6810      	ldr	r0, [r2, #0]
 800191e:	6018      	str	r0, [r3, #0]

						 int16_t rssi       = (int16_t) ((rx_buff[RSSI_POS] << 8) | rx_buff[RSSI_POS + 1]);
 8001920:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001924:	b21b      	sxth	r3, r3
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	b21a      	sxth	r2, r3
 800192a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800192e:	b21b      	sxth	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
						 uint8_t bc_id1     = rx_buff[BC_ID1_POS];
 8001936:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800193a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						 uint8_t last_bc_id = rx_buff[rx_buff_len-1];
 800193e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001942:	3b01      	subs	r3, #1
 8001944:	3388      	adds	r3, #136	@ 0x88
 8001946:	443b      	add	r3, r7
 8001948:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 800194c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

						 uint8_t tx_bc_id   = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
						 if (rx_buff_len >= ENV_NODE_PYL_SIZE + RSSI_BYTES + 2*BC_ID_BYTES) tx_bc_id = rx_buff[rx_buff_len-2];
 8001956:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800195a:	2b2d      	cmp	r3, #45	@ 0x2d
 800195c:	d908      	bls.n	8001970 <main+0x67c>
 800195e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001962:	3b02      	subs	r3, #2
 8001964:	3388      	adds	r3, #136	@ 0x88
 8001966:	443b      	add	r3, r7
 8001968:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 800196c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

						 printf("\n###### RX PKT ######\r\n");
 8001970:	482e      	ldr	r0, [pc, #184]	@ (8001a2c <main+0x738>)
 8001972:	f005 fbc9 	bl	8007108 <puts>
						 printf("       SYNC: 0x%04X\r\n", sync);
 8001976:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800197a:	4619      	mov	r1, r3
 800197c:	482c      	ldr	r0, [pc, #176]	@ (8001a30 <main+0x73c>)
 800197e:	f005 fb5b 	bl	8007038 <iprintf>
						 printf("        MSK: %d\r\n", masks);
 8001982:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001986:	4619      	mov	r1, r3
 8001988:	482a      	ldr	r0, [pc, #168]	@ (8001a34 <main+0x740>)
 800198a:	f005 fb55 	bl	8007038 <iprintf>
						 printf("    NODE ID: %d\r\n", node_id);
 800198e:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8001992:	4619      	mov	r1, r3
 8001994:	4828      	ldr	r0, [pc, #160]	@ (8001a38 <main+0x744>)
 8001996:	f005 fb4f 	bl	8007038 <iprintf>
						 printf("     PKT ID: %d\r\n", pkt_id);
 800199a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800199e:	4619      	mov	r1, r3
 80019a0:	4826      	ldr	r0, [pc, #152]	@ (8001a3c <main+0x748>)
 80019a2:	f005 fb49 	bl	8007038 <iprintf>
						 printf("       RSSI: %i\r\n", rssi);
 80019a6:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 80019aa:	4619      	mov	r1, r3
 80019ac:	4824      	ldr	r0, [pc, #144]	@ (8001a40 <main+0x74c>)
 80019ae:	f005 fb43 	bl	8007038 <iprintf>
						 printf("  1st BC ID: %d\r\n", bc_id1);
 80019b2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80019b6:	4619      	mov	r1, r3
 80019b8:	4822      	ldr	r0, [pc, #136]	@ (8001a44 <main+0x750>)
 80019ba:	f005 fb3d 	bl	8007038 <iprintf>
						 printf("   Tx BC ID: %d\r\n", tx_bc_id);
 80019be:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80019c2:	4619      	mov	r1, r3
 80019c4:	4820      	ldr	r0, [pc, #128]	@ (8001a48 <main+0x754>)
 80019c6:	f005 fb37 	bl	8007038 <iprintf>
						 printf(" last BC ID: %d\r\n", last_bc_id);
 80019ca:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80019ce:	4619      	mov	r1, r3
 80019d0:	481e      	ldr	r0, [pc, #120]	@ (8001a4c <main+0x758>)
 80019d2:	f005 fb31 	bl	8007038 <iprintf>

						 // plot payload:
						 printf(" PYLD: ");
 80019d6:	481e      	ldr	r0, [pc, #120]	@ (8001a50 <main+0x75c>)
 80019d8:	f005 fb2e 	bl	8007038 <iprintf>
						 for(uint8_t i = 0; i < SENSOR_PLD_BYTES; i++){
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80019e2:	e00e      	b.n	8001a02 <main+0x70e>
							 printf("0x%02X ", data[i]);
 80019e4:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80019e8:	3388      	adds	r3, #136	@ 0x88
 80019ea:	443b      	add	r3, r7
 80019ec:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 80019f0:	4619      	mov	r1, r3
 80019f2:	4818      	ldr	r0, [pc, #96]	@ (8001a54 <main+0x760>)
 80019f4:	f005 fb20 	bl	8007038 <iprintf>
						 for(uint8_t i = 0; i < SENSOR_PLD_BYTES; i++){
 80019f8:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80019fc:	3301      	adds	r3, #1
 80019fe:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8001a02:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001a06:	2b23      	cmp	r3, #35	@ 0x23
 8001a08:	d9ec      	bls.n	80019e4 <main+0x6f0>
						 }
						 printf("\r\n");
 8001a0a:	4813      	ldr	r0, [pc, #76]	@ (8001a58 <main+0x764>)
 8001a0c:	f005 fb7c 	bl	8007108 <puts>
					 }

				 }

				 /* set RFM95 back to continuous RX mode */
				 if(!rfm95_enter_rx_mode(&rfm95_handle)) printf("RFM err entering RX\r\n");
 8001a10:	4812      	ldr	r0, [pc, #72]	@ (8001a5c <main+0x768>)
 8001a12:	f7ff fb18 	bl	8001046 <rfm95_enter_rx_mode>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f083 0301 	eor.w	r3, r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f43f ae5c 	beq.w	80016dc <main+0x3e8>
 8001a24:	480e      	ldr	r0, [pc, #56]	@ (8001a60 <main+0x76c>)
 8001a26:	f005 fb6f 	bl	8007108 <puts>
  	if (tx_evt == true) {
 8001a2a:	e657      	b.n	80016dc <main+0x3e8>
 8001a2c:	08007ebc 	.word	0x08007ebc
 8001a30:	08007ed4 	.word	0x08007ed4
 8001a34:	08007eec 	.word	0x08007eec
 8001a38:	08007f00 	.word	0x08007f00
 8001a3c:	08007f14 	.word	0x08007f14
 8001a40:	08007f28 	.word	0x08007f28
 8001a44:	08007f3c 	.word	0x08007f3c
 8001a48:	08007f50 	.word	0x08007f50
 8001a4c:	08007f64 	.word	0x08007f64
 8001a50:	08007f78 	.word	0x08007f78
 8001a54:	08007f80 	.word	0x08007f80
 8001a58:	08007f88 	.word	0x08007f88
 8001a5c:	20000144 	.word	0x20000144
 8001a60:	08007e58 	.word	0x08007e58

08001a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b096      	sub	sp, #88	@ 0x58
 8001a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	2244      	movs	r2, #68	@ 0x44
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f005 fc28 	bl	80072c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a78:	463b      	mov	r3, r7
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a86:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a8a:	f001 febf 	bl	800380c <HAL_PWREx_ControlVoltageScaling>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a94:	f000 fcce 	bl	8002434 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a98:	f001 fe9a 	bl	80037d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a9c:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <SystemClock_Config+0xbc>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b20 <SystemClock_Config+0xbc>)
 8001aa4:	f023 0318 	bic.w	r3, r3, #24
 8001aa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001aac:	2306      	movs	r3, #6
 8001aae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ab8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aba:	2310      	movs	r3, #16
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001aca:	230a      	movs	r3, #10
 8001acc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ace:	2307      	movs	r3, #7
 8001ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8001ad2:	2308      	movs	r3, #8
 8001ad4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f001 ff16 	bl	8003910 <HAL_RCC_OscConfig>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001aea:	f000 fca3 	bl	8002434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aee:	230f      	movs	r3, #15
 8001af0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af2:	2303      	movs	r3, #3
 8001af4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b02:	463b      	mov	r3, r7
 8001b04:	2104      	movs	r1, #4
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fade 	bl	80040c8 <HAL_RCC_ClockConfig>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001b12:	f000 fc8f 	bl	8002434 <Error_Handler>
  }
}
 8001b16:	bf00      	nop
 8001b18:	3758      	adds	r7, #88	@ 0x58
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000

08001b24 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001b28:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <MX_LPTIM1_Init+0x50>)
 8001b2a:	4a13      	ldr	r2, [pc, #76]	@ (8001b78 <MX_LPTIM1_Init+0x54>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001b2e:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <MX_LPTIM1_Init+0x50>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001b34:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <MX_LPTIM1_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <MX_LPTIM1_Init+0x50>)
 8001b3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b40:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001b42:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <MX_LPTIM1_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001b48:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <MX_LPTIM1_Init+0x50>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <MX_LPTIM1_Init+0x50>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001b54:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <MX_LPTIM1_Init+0x50>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <MX_LPTIM1_Init+0x50>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001b60:	4804      	ldr	r0, [pc, #16]	@ (8001b74 <MX_LPTIM1_Init+0x50>)
 8001b62:	f001 fabb 	bl	80030dc <HAL_LPTIM_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001b6c:	f000 fc62 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20001f44 	.word	0x20001f44
 8001b78:	40007c00 	.word	0x40007c00

08001b7c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <MX_RNG_Init+0x20>)
 8001b82:	4a07      	ldr	r2, [pc, #28]	@ (8001ba0 <MX_RNG_Init+0x24>)
 8001b84:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001b86:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <MX_RNG_Init+0x20>)
 8001b88:	f003 f97e 	bl	8004e88 <HAL_RNG_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001b92:	f000 fc4f 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20001f7c 	.word	0x20001f7c
 8001ba0:	50060800 	.word	0x50060800

08001ba4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001bb8:	2300      	movs	r3, #0
 8001bba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bbc:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <MX_RTC_Init+0xb8>)
 8001bbe:	4a28      	ldr	r2, [pc, #160]	@ (8001c60 <MX_RTC_Init+0xbc>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bc2:	4b26      	ldr	r3, [pc, #152]	@ (8001c5c <MX_RTC_Init+0xb8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bc8:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <MX_RTC_Init+0xb8>)
 8001bca:	227f      	movs	r2, #127	@ 0x7f
 8001bcc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001bce:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <MX_RTC_Init+0xb8>)
 8001bd0:	22ff      	movs	r2, #255	@ 0xff
 8001bd2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bd4:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <MX_RTC_Init+0xb8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bda:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <MX_RTC_Init+0xb8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001be0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <MX_RTC_Init+0xb8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001be6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <MX_RTC_Init+0xb8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bec:	481b      	ldr	r0, [pc, #108]	@ (8001c5c <MX_RTC_Init+0xb8>)
 8001bee:	f003 f9a2 	bl	8004f36 <HAL_RTC_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001bf8:	f000 fc1c 	bl	8002434 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2201      	movs	r2, #1
 8001c14:	4619      	mov	r1, r3
 8001c16:	4811      	ldr	r0, [pc, #68]	@ (8001c5c <MX_RTC_Init+0xb8>)
 8001c18:	f003 fa15 	bl	8005046 <HAL_RTC_SetTime>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001c22:	f000 fc07 	bl	8002434 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c26:	2301      	movs	r3, #1
 8001c28:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c36:	463b      	mov	r3, r7
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4807      	ldr	r0, [pc, #28]	@ (8001c5c <MX_RTC_Init+0xb8>)
 8001c3e:	f003 fa9f 	bl	8005180 <HAL_RTC_SetDate>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001c48:	f000 fbf4 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // make sure RTC wkup is not running:
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001c4c:	4803      	ldr	r0, [pc, #12]	@ (8001c5c <MX_RTC_Init+0xb8>)
 8001c4e:	f003 fbd5 	bl	80053fc <HAL_RTCEx_DeactivateWakeUpTimer>

  /* USER CODE END RTC_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20001f8c 	.word	0x20001f8c
 8001c60:	40002800 	.word	0x40002800

08001c64 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001c6a:	4b20      	ldr	r3, [pc, #128]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001c6c:	4a20      	ldr	r2, [pc, #128]	@ (8001cf0 <MX_SPI3_Init+0x8c>)
 8001c6e:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c70:	4b1e      	ldr	r3, [pc, #120]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001c72:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c76:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c78:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001c80:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c84:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c86:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c92:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c98:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c9a:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001c9c:	2218      	movs	r2, #24
 8001c9e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ca6:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001cc4:	4809      	ldr	r0, [pc, #36]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001cc6:	f003 fc1d 	bl	8005504 <HAL_SPI_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8001cd0:	f000 fbb0 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */
  /*
   * This dummy sequence sets clock LOW when idle, MOSI and MISO to a definite state (either HIGH or LOW)
   */
   uint8_t dummy = 0xFF;
 8001cd4:	23ff      	movs	r3, #255	@ 0xff
 8001cd6:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Transmit(&hspi3, &dummy, 1, 10);
 8001cd8:	1df9      	adds	r1, r7, #7
 8001cda:	230a      	movs	r3, #10
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4803      	ldr	r0, [pc, #12]	@ (8001cec <MX_SPI3_Init+0x88>)
 8001ce0:	f003 fcb3 	bl	800564a <HAL_SPI_Transmit>

  /* USER CODE END SPI3_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20001fb0 	.word	0x20001fb0
 8001cf0:	40003c00 	.word	0x40003c00

08001cf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	@ (8001d4c <MX_USART2_UART_Init+0x58>)
 8001cfa:	4a15      	ldr	r2, [pc, #84]	@ (8001d50 <MX_USART2_UART_Init+0x5c>)
 8001cfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <MX_USART2_UART_Init+0x58>)
 8001d00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d06:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <MX_USART2_UART_Init+0x58>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <MX_USART2_UART_Init+0x58>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <MX_USART2_UART_Init+0x58>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <MX_USART2_UART_Init+0x58>)
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <MX_USART2_UART_Init+0x58>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d24:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <MX_USART2_UART_Init+0x58>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2a:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <MX_USART2_UART_Init+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d30:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <MX_USART2_UART_Init+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d36:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <MX_USART2_UART_Init+0x58>)
 8001d38:	f004 fb10 	bl	800635c <HAL_UART_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d42:	f000 fb77 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20002014 	.word	0x20002014
 8001d50:	40004400 	.word	0x40004400

08001d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d76:	4b6c      	ldr	r3, [pc, #432]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d82:	4b69      	ldr	r3, [pc, #420]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	4a68      	ldr	r2, [pc, #416]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8e:	4b66      	ldr	r3, [pc, #408]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	4b63      	ldr	r3, [pc, #396]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9e:	4a62      	ldr	r2, [pc, #392]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da6:	4b60      	ldr	r3, [pc, #384]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dbe:	4b5a      	ldr	r3, [pc, #360]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dca:	4b57      	ldr	r3, [pc, #348]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	4a56      	ldr	r2, [pc, #344]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd6:	4b54      	ldr	r3, [pc, #336]	@ (8001f28 <MX_GPIO_Init+0x1d4>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2120      	movs	r1, #32
 8001de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dea:	f001 f947 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM95_RST_GPIO_Port, RFM95_RST_Pin, GPIO_PIN_SET);
 8001dee:	2201      	movs	r2, #1
 8001df0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001df8:	f001 f940 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM95_CS_GPIO_Port, RFM95_CS_Pin, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2104      	movs	r1, #4
 8001e00:	484a      	ldr	r0, [pc, #296]	@ (8001f2c <MX_GPIO_Init+0x1d8>)
 8001e02:	f001 f93b 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_GPIO_Port, Test_Pin, GPIO_PIN_RESET);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2120      	movs	r1, #32
 8001e0a:	4849      	ldr	r0, [pc, #292]	@ (8001f30 <MX_GPIO_Init+0x1dc>)
 8001e0c:	f001 f936 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e16:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4619      	mov	r1, r3
 8001e26:	4843      	ldr	r0, [pc, #268]	@ (8001f34 <MX_GPIO_Init+0x1e0>)
 8001e28:	f000 ff7e 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e2c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8001e30:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e32:	2303      	movs	r3, #3
 8001e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	483c      	ldr	r0, [pc, #240]	@ (8001f34 <MX_GPIO_Init+0x1e0>)
 8001e42:	f000 ff71 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8001e46:	f241 13d3 	movw	r3, #4563	@ 0x11d3
 8001e4a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e5e:	f000 ff63 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e62:	2320      	movs	r3, #32
 8001e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e7c:	f000 ff54 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001e80:	f64f 73d7 	movw	r3, #65495	@ 0xffd7
 8001e84:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e86:	2303      	movs	r3, #3
 8001e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	4826      	ldr	r0, [pc, #152]	@ (8001f30 <MX_GPIO_Init+0x1dc>)
 8001e96:	f000 ff47 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM95_DIO0_Pin RFM95_DIO1_Pin RFM95_DIO5_Pin */
  GPIO_InitStruct.Pin = RFM95_DIO0_Pin|RFM95_DIO1_Pin|RFM95_DIO5_Pin;
 8001e9a:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ea0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb4:	f000 ff38 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM95_RST_Pin */
  GPIO_InitStruct.Pin = RFM95_RST_Pin;
 8001eb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ebe:	2311      	movs	r3, #17
 8001ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RFM95_RST_GPIO_Port, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ed4:	f000 ff28 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM95_CS_Pin */
  GPIO_InitStruct.Pin = RFM95_CS_Pin;
 8001ed8:	2304      	movs	r3, #4
 8001eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RFM95_CS_GPIO_Port, &GPIO_InitStruct);
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	480f      	ldr	r0, [pc, #60]	@ (8001f2c <MX_GPIO_Init+0x1d8>)
 8001ef0:	f000 ff1a 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Test_Pin */
  GPIO_InitStruct.Pin = Test_Pin;
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Test_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4809      	ldr	r0, [pc, #36]	@ (8001f30 <MX_GPIO_Init+0x1dc>)
 8001f0c:	f000 ff0c 	bl	8002d28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	2017      	movs	r0, #23
 8001f16:	f000 fed0 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f1a:	2017      	movs	r0, #23
 8001f1c:	f000 fee9 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f20:	bf00      	nop
 8001f22:	3728      	adds	r7, #40	@ 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	48000c00 	.word	0x48000c00
 8001f30:	48000400 	.word	0x48000400
 8001f34:	48000800 	.word	0x48000800

08001f38 <init_rfm>:
// -------------- RFM95 user defined functions -------------------

/*
 *
 */
bool init_rfm(){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0

  // Start lptim timer
  HAL_LPTIM_Counter_Start_IT(&hlptim1, 0xFFFF);
 8001f3c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f40:	482c      	ldr	r0, [pc, #176]	@ (8001ff4 <init_rfm+0xbc>)
 8001f42:	f001 f96d 	bl	8003220 <HAL_LPTIM_Counter_Start_IT>

  // config RFM95
  rfm95_handle.rfm_timer  = &hlptim1;
 8001f46:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff8 <init_rfm+0xc0>)
 8001f48:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff4 <init_rfm+0xbc>)
 8001f4a:	601a      	str	r2, [r3, #0]
  rfm95_handle.spi_handle = &hspi3;
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff8 <init_rfm+0xc0>)
 8001f4e:	4a2b      	ldr	r2, [pc, #172]	@ (8001ffc <init_rfm+0xc4>)
 8001f50:	605a      	str	r2, [r3, #4]
  rfm95_handle.nrst_port  = RFM95_RST_GPIO_Port;
 8001f52:	4b29      	ldr	r3, [pc, #164]	@ (8001ff8 <init_rfm+0xc0>)
 8001f54:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f58:	611a      	str	r2, [r3, #16]
  rfm95_handle.nrst_pin   = RFM95_RST_Pin;
 8001f5a:	4b27      	ldr	r3, [pc, #156]	@ (8001ff8 <init_rfm+0xc0>)
 8001f5c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f60:	829a      	strh	r2, [r3, #20]
  rfm95_handle.nss_port   = RFM95_CS_GPIO_Port;
 8001f62:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <init_rfm+0xc0>)
 8001f64:	4a26      	ldr	r2, [pc, #152]	@ (8002000 <init_rfm+0xc8>)
 8001f66:	609a      	str	r2, [r3, #8]
  rfm95_handle.nss_pin    = RFM95_CS_Pin;
 8001f68:	4b23      	ldr	r3, [pc, #140]	@ (8001ff8 <init_rfm+0xc0>)
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	819a      	strh	r2, [r3, #12]

  rfm95_handle.precision_tick_frequency = LSE_CLK;
 8001f6e:	4b22      	ldr	r3, [pc, #136]	@ (8001ff8 <init_rfm+0xc0>)
 8001f70:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f74:	619a      	str	r2, [r3, #24]
  rfm95_handle.precision_tick_drift_ns_per_s = 20000;
 8001f76:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <init_rfm+0xc0>)
 8001f78:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001f7c:	61da      	str	r2, [r3, #28]
  rfm95_handle.get_precision_tick = get_precision_tick;
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff8 <init_rfm+0xc0>)
 8001f80:	4a20      	ldr	r2, [pc, #128]	@ (8002004 <init_rfm+0xcc>)
 8001f82:	621a      	str	r2, [r3, #32]
  rfm95_handle.precision_sleep_until = precision_sleep_until;
 8001f84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <init_rfm+0xc0>)
 8001f86:	4a20      	ldr	r2, [pc, #128]	@ (8002008 <init_rfm+0xd0>)
 8001f88:	625a      	str	r2, [r3, #36]	@ 0x24
  rfm95_handle.on_after_interrupts_configured = rfm95_after_interrupts_configured;
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <init_rfm+0xc0>)
 8001f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800200c <init_rfm+0xd4>)
 8001f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  //rfm95_handle.random_int = random_int;
  rfm95_handle.get_battery_level = get_battery_level;
 8001f90:	4b19      	ldr	r3, [pc, #100]	@ (8001ff8 <init_rfm+0xc0>)
 8001f92:	4a1f      	ldr	r2, [pc, #124]	@ (8002010 <init_rfm+0xd8>)
 8001f94:	629a      	str	r2, [r3, #40]	@ 0x28

  // Modify parameters here:
  rfm95_set_power(&rfm95_handle, LORA_TX_POWER); // power 2 dBm - 17 dBm
 8001f96:	2102      	movs	r1, #2
 8001f98:	4817      	ldr	r0, [pc, #92]	@ (8001ff8 <init_rfm+0xc0>)
 8001f9a:	f7fe feae 	bl	8000cfa <rfm95_set_power>
  rfm95_set_frequency(&rfm95_handle, LORA_CH_FREQ);
 8001f9e:	491d      	ldr	r1, [pc, #116]	@ (8002014 <init_rfm+0xdc>)
 8001fa0:	4815      	ldr	r0, [pc, #84]	@ (8001ff8 <init_rfm+0xc0>)
 8001fa2:	f7fe fef7 	bl	8000d94 <rfm95_set_frequency>
  rfm95_set_BW(&rfm95_handle, LORA_BW);
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	4813      	ldr	r0, [pc, #76]	@ (8001ff8 <init_rfm+0xc0>)
 8001faa:	f7fe fee2 	bl	8000d72 <rfm95_set_BW>
  rfm95_set_CR(&rfm95_handle, LORA_CR);
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4811      	ldr	r0, [pc, #68]	@ (8001ff8 <init_rfm+0xc0>)
 8001fb2:	f7fe fece 	bl	8000d52 <rfm95_set_CR>
  rfm95_set_SF(&rfm95_handle, LORA_SF);
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	480f      	ldr	r0, [pc, #60]	@ (8001ff8 <init_rfm+0xc0>)
 8001fba:	f7fe feba 	bl	8000d32 <rfm95_set_SF>
  rfm95_set_syncWord(&rfm95_handle, LORA_SYNC_WORD);
 8001fbe:	21ba      	movs	r1, #186	@ 0xba
 8001fc0:	480d      	ldr	r0, [pc, #52]	@ (8001ff8 <init_rfm+0xc0>)
 8001fc2:	f7fe ff07 	bl	8000dd4 <rfm95_set_syncWord>

  // initialize RFM95
  if(!rfm95_init(&rfm95_handle)) return false;
 8001fc6:	480c      	ldr	r0, [pc, #48]	@ (8001ff8 <init_rfm+0xc0>)
 8001fc8:	f7fe fd92 	bl	8000af0 <rfm95_init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <init_rfm+0x9e>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e00b      	b.n	8001fee <init_rfm+0xb6>

  // set RFM95 to continuous RX mode
  if(!rfm95_enter_rx_mode(&rfm95_handle)) return false;
 8001fd6:	4808      	ldr	r0, [pc, #32]	@ (8001ff8 <init_rfm+0xc0>)
 8001fd8:	f7ff f835 	bl	8001046 <rfm95_enter_rx_mode>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f083 0301 	eor.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <init_rfm+0xb4>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e000      	b.n	8001fee <init_rfm+0xb6>

  return true;
 8001fec:	2301      	movs	r3, #1
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20001f44 	.word	0x20001f44
 8001ff8:	20000144 	.word	0x20000144
 8001ffc:	20001fb0 	.word	0x20001fb0
 8002000:	48000c00 	.word	0x48000c00
 8002004:	08002019 	.word	0x08002019
 8002008:	08002049 	.word	0x08002049
 800200c:	08002111 	.word	0x08002111
 8002010:	08002101 	.word	0x08002101
 8002014:	33bca100 	.word	0x33bca100

08002018 <get_precision_tick>:

/*
 * return precise timing based on internal LPTIM module
 */
static uint32_t get_precision_tick(){
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800201e:	b672      	cpsid	i
}
 8002020:	bf00      	nop
	__disable_irq();
	uint32_t precision_tick = lptim_tick_msb | HAL_LPTIM_ReadCounter(&hlptim1);
 8002022:	4807      	ldr	r0, [pc, #28]	@ (8002040 <get_precision_tick+0x28>)
 8002024:	f001 f9bc 	bl	80033a0 <HAL_LPTIM_ReadCounter>
 8002028:	4602      	mov	r2, r0
 800202a:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <get_precision_tick+0x2c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8002032:	b662      	cpsie	i
}
 8002034:	bf00      	nop
	__enable_irq();
	return precision_tick;
 8002036:	687b      	ldr	r3, [r7, #4]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20001f44 	.word	0x20001f44
 8002044:	2000209c 	.word	0x2000209c

08002048 <precision_sleep_until>:

/*
 * Allows to set the MCU into STOP2 mode with accurate wkup timer
 */
static void precision_sleep_until(uint32_t target_ticks){
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	while(1){
		uint32_t curr_tick = get_precision_tick();
 8002050:	f7ff ffe2 	bl	8002018 <get_precision_tick>
 8002054:	6178      	str	r0, [r7, #20]

		// exit condition:
		if(target_ticks < curr_tick) break;
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	429a      	cmp	r2, r3
 800205c:	d33f      	bcc.n	80020de <precision_sleep_until+0x96>

		uint32_t sleep_ticks = target_ticks - curr_tick;
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	613b      	str	r3, [r7, #16]

		// avoid short sleep intervals:
		if(sleep_ticks < 10) break;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b09      	cmp	r3, #9
 800206a:	d93a      	bls.n	80020e2 <precision_sleep_until+0x9a>
		else {
			// overall CMP value - some margin (needed to reset clock configurations after stop mode2)
			uint32_t compare_tick = (curr_tick & 0xFFFF) + sleep_ticks - 10;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	b29a      	uxth	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	3b0a      	subs	r3, #10
 8002076:	60fb      	str	r3, [r7, #12]

			if (compare_tick >= 0xFFFF){ // ARR will awake MCU before compare
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800207e:	4293      	cmp	r3, r2
 8002080:	d904      	bls.n	800208c <precision_sleep_until+0x44>
				HAL_SuspendTick();
 8002082:	f000 fd1f 	bl	8002ac4 <HAL_SuspendTick>
				enterStopMode();
 8002086:	f000 f84f 	bl	8002128 <enterStopMode>
 800208a:	e7e1      	b.n	8002050 <precision_sleep_until+0x8>
			} else { // otherwise CMP keeps MCU sleep all time
				__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 800208c:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <precision_sleep_until+0xb4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2208      	movs	r2, #8
 8002092:	605a      	str	r2, [r3, #4]
				__HAL_LPTIM_COMPARE_SET(&hlptim1, compare_tick);            // set CMP limit
 8002094:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <precision_sleep_until+0xb4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	615a      	str	r2, [r3, #20]

				while (!__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK));  // wait for effective change
 800209c:	bf00      	nop
 800209e:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <precision_sleep_until+0xb4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d1f8      	bne.n	800209e <precision_sleep_until+0x56>

				__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);          // clear CMP interrupt flag
 80020ac:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <precision_sleep_until+0xb4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2201      	movs	r2, #1
 80020b2:	605a      	str	r2, [r3, #4]
				__HAL_LPTIM_ENABLE_IT(&hlptim1, LPTIM_IT_CMPM);             // enable CMP interrupt
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <precision_sleep_until+0xb4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <precision_sleep_until+0xb4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	609a      	str	r2, [r3, #8]

				HAL_SuspendTick();
 80020c4:	f000 fcfe 	bl	8002ac4 <HAL_SuspendTick>
				enterStopMode();
 80020c8:	f000 f82e 	bl	8002128 <enterStopMode>

				__HAL_LPTIM_DISABLE_IT(&hlptim1, LPTIM_IT_CMPM);            // disable CMP interrupt
 80020cc:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <precision_sleep_until+0xb4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <precision_sleep_until+0xb4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	609a      	str	r2, [r3, #8]
	while(1){
 80020dc:	e7b8      	b.n	8002050 <precision_sleep_until+0x8>
		if(target_ticks < curr_tick) break;
 80020de:	bf00      	nop
 80020e0:	e000      	b.n	80020e4 <precision_sleep_until+0x9c>
		if(sleep_ticks < 10) break;
 80020e2:	bf00      	nop
			}
		}
	}

	while(get_precision_tick() < target_ticks);                       // wait residue time here ( < 10 ticks)
 80020e4:	bf00      	nop
 80020e6:	f7ff ff97 	bl	8002018 <get_precision_tick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d8f9      	bhi.n	80020e6 <precision_sleep_until+0x9e>
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20001f44 	.word	0x20001f44

08002100 <get_battery_level>:


static uint8_t get_battery_level(){
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
	return 0;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <rfm95_after_interrupts_configured>:

/*
 * This function is executed after initializing rfm95 (ready to accept interrupts
 * without hard fault errors)
 */
void rfm95_after_interrupts_configured(){
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002114:	2200      	movs	r2, #0
 8002116:	2100      	movs	r1, #0
 8002118:	2028      	movs	r0, #40	@ 0x28
 800211a:	f000 fdce 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800211e:	2028      	movs	r0, #40	@ 0x28
 8002120:	f000 fde7 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <enterStopMode>:
// -------------------------- System Power down routines --------------------------------

/*
 * Enter stop mode and resume clock configurations on exit
 */
void enterStopMode(){
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0

  // Stop LPTIM and clear pending bits
  HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 800212c:	4812      	ldr	r0, [pc, #72]	@ (8002178 <enterStopMode+0x50>)
 800212e:	f001 f8f5 	bl	800331c <HAL_LPTIM_Counter_Stop_IT>
  LPTIM1->ICR |= 0x3F;
 8002132:	4b12      	ldr	r3, [pc, #72]	@ (800217c <enterStopMode+0x54>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4a11      	ldr	r2, [pc, #68]	@ (800217c <enterStopMode+0x54>)
 8002138:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 800213c:	6053      	str	r3, [r2, #4]

  // CLear LPTIM IRQ at NVIC level
  NVIC_ClearPendingIRQ(LPTIM1_IRQn);
 800213e:	2041      	movs	r0, #65	@ 0x41
 8002140:	f7ff f8ba 	bl	80012b8 <__NVIC_ClearPendingIRQ>

  // wake from HSI --> faster wake up sequence:
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_HSI);
 8002144:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <enterStopMode+0x58>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	4a0d      	ldr	r2, [pc, #52]	@ (8002180 <enterStopMode+0x58>)
 800214a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800214e:	6093      	str	r3, [r2, #8]

	// Enter stop mode 2:
	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002150:	2001      	movs	r0, #1
 8002152:	f001 fbb1 	bl	80038b8 <HAL_PWREx_EnterSTOP2Mode>

	// awake here...

	// resume system clock:
	if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) MySystemClock_Config();
 8002156:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <enterStopMode+0x58>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <enterStopMode+0x3e>
 8002162:	f000 f80f 	bl	8002184 <MySystemClock_Config>

	// resume system tick with correct clock
	HAL_ResumeTick();
 8002166:	f000 fcbd 	bl	8002ae4 <HAL_ResumeTick>

	// Enable LPTIM again:
	HAL_LPTIM_Counter_Start_IT(&hlptim1, 0xFFFF);
 800216a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800216e:	4802      	ldr	r0, [pc, #8]	@ (8002178 <enterStopMode+0x50>)
 8002170:	f001 f856 	bl	8003220 <HAL_LPTIM_Counter_Start_IT>
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20001f44 	.word	0x20001f44
 800217c:	40007c00 	.word	0x40007c00
 8002180:	40021000 	.word	0x40021000

08002184 <MySystemClock_Config>:
/*
 * Modified clock setup function:
 * -> Avoid repeating initialization for the LSE 32 kHz clock if already running.
 *    Doing this every time the MCU exits STOP mode, results in a corrupted timing accuracy.
 */
void MySystemClock_Config(void) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b096      	sub	sp, #88	@ 0x58
 8002188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	2244      	movs	r2, #68	@ 0x44
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f005 f898 	bl	80072c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002198:	463b      	mov	r3, r7
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80021aa:	f001 fb2f 	bl	800380c <HAL_PWREx_ControlVoltageScaling>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MySystemClock_Config+0x34>
  {
    Error_Handler();
 80021b4:	f000 f93e 	bl	8002434 <Error_Handler>
  }

  /** Configure LSE Drive Capability only if it
  */
  if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON) == 0) || (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) != 1){
 80021b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002264 <MySystemClock_Config+0xe0>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d106      	bne.n	80021d4 <MySystemClock_Config+0x50>
 80021c6:	4b27      	ldr	r3, [pc, #156]	@ (8002264 <MySystemClock_Config+0xe0>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d00b      	beq.n	80021ec <MySystemClock_Config+0x68>
  	HAL_PWR_EnableBkUpAccess();
 80021d4:	f001 fafc 	bl	80037d0 <HAL_PWR_EnableBkUpAccess>
		__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80021d8:	4b22      	ldr	r3, [pc, #136]	@ (8002264 <MySystemClock_Config+0xe0>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021de:	4a21      	ldr	r2, [pc, #132]	@ (8002264 <MySystemClock_Config+0xe0>)
 80021e0:	f023 0318 	bic.w	r3, r3, #24
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80021e8:	2304      	movs	r3, #4
 80021ea:	617b      	str	r3, [r7, #20]


  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType |= RCC_OSCILLATORTYPE_HSI;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021f4:	2301      	movs	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021fe:	2310      	movs	r3, #16
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002202:	2302      	movs	r3, #2
 8002204:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002206:	2302      	movs	r3, #2
 8002208:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800220e:	230a      	movs	r3, #10
 8002210:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002212:	2307      	movs	r3, #7
 8002214:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002216:	2302      	movs	r3, #2
 8002218:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800221a:	2302      	movs	r3, #2
 800221c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4618      	mov	r0, r3
 8002224:	f001 fb74 	bl	8003910 <HAL_RCC_OscConfig>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MySystemClock_Config+0xae>
  {
    Error_Handler();
 800222e:	f000 f901 	bl	8002434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002232:	230f      	movs	r3, #15
 8002234:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002236:	2303      	movs	r3, #3
 8002238:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002246:	463b      	mov	r3, r7
 8002248:	2104      	movs	r1, #4
 800224a:	4618      	mov	r0, r3
 800224c:	f001 ff3c 	bl	80040c8 <HAL_RCC_ClockConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MySystemClock_Config+0xd6>
  {
    Error_Handler();
 8002256:	f000 f8ed 	bl	8002434 <Error_Handler>
  }
}
 800225a:	bf00      	nop
 800225c:	3758      	adds	r7, #88	@ 0x58
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000

08002268 <HAL_LPTIM_AutoReloadMatchCallback>:


// ------------------------------------- Call-backs --------------------------------------

// Auto-reload callback for LPTIM module
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  lptim_tick_msb += 0x10000;
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <HAL_LPTIM_AutoReloadMatchCallback+0x20>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002278:	4a03      	ldr	r2, [pc, #12]	@ (8002288 <HAL_LPTIM_AutoReloadMatchCallback+0x20>)
 800227a:	6013      	str	r3, [r2, #0]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	2000209c 	.word	0x2000209c

0800228c <HAL_LPTIM_CompareMatchCallback>:

// Compare match callback for LPTIM module
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  // do nothing...
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_RTCEx_WakeUpTimerEventCallback>:

// RTC wkup timer -> needed to schedule tx events
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  h_sys.evt_flags |= SYS_EVT_TX_PENDING;
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b03      	ldr	r3, [pc, #12]	@ (80022c4 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 80022b6:	701a      	strb	r2, [r3, #0]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	20000018 	.word	0x20000018

080022c8 <HAL_GPIO_EXTI_Callback>:

// GPIO external interrupts callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	80fb      	strh	r3, [r7, #6]

	// Events on RFM95 interrupt pins
  if (GPIO_Pin == RFM95_DIO0_Pin) {
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022d8:	d112      	bne.n	8002300 <HAL_GPIO_EXTI_Callback+0x38>
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO0);
 80022da:	2100      	movs	r1, #0
 80022dc:	4817      	ldr	r0, [pc, #92]	@ (800233c <HAL_GPIO_EXTI_Callback+0x74>)
 80022de:	f7fe ffc9 	bl	8001274 <rfm95_on_interrupt>

    // something received
    if(rfm95_handle.rfm_status == RXCONTIN_MODE) h_sys.evt_flags |= SYS_EVT_RX_PENDING;
 80022e2:	4b16      	ldr	r3, [pc, #88]	@ (800233c <HAL_GPIO_EXTI_Callback+0x74>)
 80022e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d121      	bne.n	8002332 <HAL_GPIO_EXTI_Callback+0x6a>
 80022ee:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <HAL_GPIO_EXTI_Callback+0x78>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <HAL_GPIO_EXTI_Callback+0x78>)
 80022fc:	701a      	strb	r2, [r3, #0]
  } else if (GPIO_Pin == RFM95_DIO5_Pin) {
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
  } else if (GPIO_Pin == B1_Pin) {
  	tx_evt = true;
  }
}
 80022fe:	e018      	b.n	8002332 <HAL_GPIO_EXTI_Callback+0x6a>
  } else if (GPIO_Pin == RFM95_DIO1_Pin) {
 8002300:	88fb      	ldrh	r3, [r7, #6]
 8002302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002306:	d104      	bne.n	8002312 <HAL_GPIO_EXTI_Callback+0x4a>
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
 8002308:	2101      	movs	r1, #1
 800230a:	480c      	ldr	r0, [pc, #48]	@ (800233c <HAL_GPIO_EXTI_Callback+0x74>)
 800230c:	f7fe ffb2 	bl	8001274 <rfm95_on_interrupt>
}
 8002310:	e00f      	b.n	8002332 <HAL_GPIO_EXTI_Callback+0x6a>
  } else if (GPIO_Pin == RFM95_DIO5_Pin) {
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002318:	d104      	bne.n	8002324 <HAL_GPIO_EXTI_Callback+0x5c>
    rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
 800231a:	2102      	movs	r1, #2
 800231c:	4807      	ldr	r0, [pc, #28]	@ (800233c <HAL_GPIO_EXTI_Callback+0x74>)
 800231e:	f7fe ffa9 	bl	8001274 <rfm95_on_interrupt>
}
 8002322:	e006      	b.n	8002332 <HAL_GPIO_EXTI_Callback+0x6a>
  } else if (GPIO_Pin == B1_Pin) {
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800232a:	d102      	bne.n	8002332 <HAL_GPIO_EXTI_Callback+0x6a>
  	tx_evt = true;
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <HAL_GPIO_EXTI_Callback+0x7c>)
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000144 	.word	0x20000144
 8002340:	20000018 	.word	0x20000018
 8002344:	200020a0 	.word	0x200020a0

08002348 <build_pkt>:


// --------------------------------- DEBUG FUNCTIONS --------------------------------------

void build_pkt(uint16_t sync, uint8_t mask, uint8_t nodeID, uint16_t pktID, uint8_t* sensors, uint8_t sens_len,
		           int16_t rssi, uint8_t* bc_seq, uint8_t bc_seq_len, uint8_t* t_buff, uint8_t* t_buff_len){
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4604      	mov	r4, r0
 8002350:	4608      	mov	r0, r1
 8002352:	4611      	mov	r1, r2
 8002354:	461a      	mov	r2, r3
 8002356:	4623      	mov	r3, r4
 8002358:	80fb      	strh	r3, [r7, #6]
 800235a:	4603      	mov	r3, r0
 800235c:	717b      	strb	r3, [r7, #5]
 800235e:	460b      	mov	r3, r1
 8002360:	713b      	strb	r3, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	807b      	strh	r3, [r7, #2]

	t_buff[SYNC_WORD_POS]   = (uint8_t)((sync >> 8) & 0xFF);
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	b29b      	uxth	r3, r3
 800236c:	b2da      	uxtb	r2, r3
 800236e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002370:	701a      	strb	r2, [r3, #0]
	t_buff[SYNC_WORD_POS+1] = (uint8_t)( sync & 0xFF);
 8002372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002374:	3301      	adds	r3, #1
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]
	t_buff[MASK_POS]        = mask;
 800237c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237e:	3302      	adds	r3, #2
 8002380:	797a      	ldrb	r2, [r7, #5]
 8002382:	701a      	strb	r2, [r3, #0]
	t_buff[NODE_ID_POS]     = nodeID;
 8002384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002386:	3303      	adds	r3, #3
 8002388:	793a      	ldrb	r2, [r7, #4]
 800238a:	701a      	strb	r2, [r3, #0]
	t_buff[PKT_ID_MSB_POS]  = (uint8_t)((pktID >> 8) & 0xFF);
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	b29a      	uxth	r2, r3
 8002392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002394:	3304      	adds	r3, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
	t_buff[PKT_ID_LSB_POS]  = (uint8_t)(pktID & 0xFF);
 800239a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239c:	3305      	adds	r3, #5
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	701a      	strb	r2, [r3, #0]

	memcpy(&t_buff[SMPL_DATA_POS],sensors, sens_len);
 80023a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a6:	3306      	adds	r3, #6
 80023a8:	7f3a      	ldrb	r2, [r7, #28]
 80023aa:	69b9      	ldr	r1, [r7, #24]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f005 f806 	bl	80073be <memcpy>

	*t_buff_len = ENV_NODE_PYL_SIZE;
 80023b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b4:	222a      	movs	r2, #42	@ 0x2a
 80023b6:	701a      	strb	r2, [r3, #0]

	if(bc_seq_len != 0){
 80023b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01e      	beq.n	80023fe <build_pkt+0xb6>

		t_buff[RSSI_POS]        = (uint8_t)((rssi >> 8) & 0xFF);
 80023c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80023c4:	121b      	asrs	r3, r3, #8
 80023c6:	b21a      	sxth	r2, r3
 80023c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ca:	332a      	adds	r3, #42	@ 0x2a
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	701a      	strb	r2, [r3, #0]
		t_buff[RSSI_POS+1]      = (uint8_t)(rssi & 0xFF);
 80023d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d2:	332b      	adds	r3, #43	@ 0x2b
 80023d4:	8c3a      	ldrh	r2, [r7, #32]
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

		memcpy(&t_buff[BC_ID1_POS],bc_seq,bc_seq_len);
 80023da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023dc:	332c      	adds	r3, #44	@ 0x2c
 80023de:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80023e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023e4:	4618      	mov	r0, r3
 80023e6:	f004 ffea 	bl	80073be <memcpy>

		*t_buff_len += (RSSI_BYTES + bc_seq_len);
 80023ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ec:	781a      	ldrb	r2, [r3, #0]
 80023ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80023f2:	4413      	add	r3, r2
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	3302      	adds	r3, #2
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fc:	701a      	strb	r2, [r3, #0]

	}

}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bd90      	pop	{r4, r7, pc}
	...

08002408 <_write>:
}

/*
 * Function used to print on UART serial (DEBUG)
 */
int _write(int file, char *ptr, int len) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	b29a      	uxth	r2, r3
 8002418:	f04f 33ff 	mov.w	r3, #4294967295
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	4804      	ldr	r0, [pc, #16]	@ (8002430 <_write+0x28>)
 8002420:	f003 ffea 	bl	80063f8 <HAL_UART_Transmit>
  return len;
 8002424:	687b      	ldr	r3, [r7, #4]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20002014 	.word	0x20002014

08002434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002438:	b672      	cpsid	i
}
 800243a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <Error_Handler+0x8>

08002440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	4b0f      	ldr	r3, [pc, #60]	@ (8002484 <HAL_MspInit+0x44>)
 8002448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244a:	4a0e      	ldr	r2, [pc, #56]	@ (8002484 <HAL_MspInit+0x44>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6613      	str	r3, [r2, #96]	@ 0x60
 8002452:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <HAL_MspInit+0x44>)
 8002454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <HAL_MspInit+0x44>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002462:	4a08      	ldr	r2, [pc, #32]	@ (8002484 <HAL_MspInit+0x44>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002468:	6593      	str	r3, [r2, #88]	@ 0x58
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_MspInit+0x44>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000

08002488 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b0a6      	sub	sp, #152	@ 0x98
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	2288      	movs	r2, #136	@ 0x88
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f004 ff15 	bl	80072c8 <memset>
  if(hlptim->Instance==LPTIM1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a15      	ldr	r2, [pc, #84]	@ (80024f8 <HAL_LPTIM_MspInit+0x70>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d123      	bne.n	80024f0 <HAL_LPTIM_MspInit+0x68>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80024a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80024ae:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80024b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 f829 	bl	8004510 <HAL_RCCEx_PeriphCLKConfig>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 80024c4:	f7ff ffb6 	bl	8002434 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80024c8:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <HAL_LPTIM_MspInit+0x74>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024cc:	4a0b      	ldr	r2, [pc, #44]	@ (80024fc <HAL_LPTIM_MspInit+0x74>)
 80024ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80024d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80024d4:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <HAL_LPTIM_MspInit+0x74>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2100      	movs	r1, #0
 80024e4:	2041      	movs	r0, #65	@ 0x41
 80024e6:	f000 fbe8 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80024ea:	2041      	movs	r0, #65	@ 0x41
 80024ec:	f000 fc01 	bl	8002cf2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 80024f0:	bf00      	nop
 80024f2:	3798      	adds	r7, #152	@ 0x98
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40007c00 	.word	0x40007c00
 80024fc:	40021000 	.word	0x40021000

08002500 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b0a6      	sub	sp, #152	@ 0x98
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002508:	f107 0310 	add.w	r3, r7, #16
 800250c:	2288      	movs	r2, #136	@ 0x88
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f004 fed9 	bl	80072c8 <memset>
  if(hrng->Instance==RNG)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a12      	ldr	r2, [pc, #72]	@ (8002564 <HAL_RNG_MspInit+0x64>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d11c      	bne.n	800255a <HAL_RNG_MspInit+0x5a>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002520:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002524:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8002526:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800252a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	4618      	mov	r0, r3
 8002534:	f001 ffec 	bl	8004510 <HAL_RCCEx_PeriphCLKConfig>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_RNG_MspInit+0x42>
    {
      Error_Handler();
 800253e:	f7ff ff79 	bl	8002434 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002542:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <HAL_RNG_MspInit+0x68>)
 8002544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002546:	4a08      	ldr	r2, [pc, #32]	@ (8002568 <HAL_RNG_MspInit+0x68>)
 8002548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800254c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800254e:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <HAL_RNG_MspInit+0x68>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002552:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 800255a:	bf00      	nop
 800255c:	3798      	adds	r7, #152	@ 0x98
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	50060800 	.word	0x50060800
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b0a4      	sub	sp, #144	@ 0x90
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002574:	f107 0308 	add.w	r3, r7, #8
 8002578:	2288      	movs	r2, #136	@ 0x88
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fea3 	bl	80072c8 <memset>
  if(hrtc->Instance==RTC)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <HAL_RTC_MspInit+0x6c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d120      	bne.n	80025ce <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800258c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002590:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002592:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002596:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	4618      	mov	r0, r3
 80025a0:	f001 ffb6 	bl	8004510 <HAL_RCCEx_PeriphCLKConfig>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80025aa:	f7ff ff43 	bl	8002434 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025ae:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <HAL_RTC_MspInit+0x70>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b4:	4a09      	ldr	r2, [pc, #36]	@ (80025dc <HAL_RTC_MspInit+0x70>)
 80025b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	2003      	movs	r0, #3
 80025c4:	f000 fb79 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80025c8:	2003      	movs	r0, #3
 80025ca:	f000 fb92 	bl	8002cf2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80025ce:	bf00      	nop
 80025d0:	3790      	adds	r7, #144	@ 0x90
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40002800 	.word	0x40002800
 80025dc:	40021000 	.word	0x40021000

080025e0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	@ 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a20      	ldr	r2, [pc, #128]	@ (8002680 <HAL_SPI_MspInit+0xa0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d139      	bne.n	8002676 <HAL_SPI_MspInit+0x96>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002602:	4b20      	ldr	r3, [pc, #128]	@ (8002684 <HAL_SPI_MspInit+0xa4>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	4a1f      	ldr	r2, [pc, #124]	@ (8002684 <HAL_SPI_MspInit+0xa4>)
 8002608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800260c:	6593      	str	r3, [r2, #88]	@ 0x58
 800260e:	4b1d      	ldr	r3, [pc, #116]	@ (8002684 <HAL_SPI_MspInit+0xa4>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800261a:	4b1a      	ldr	r3, [pc, #104]	@ (8002684 <HAL_SPI_MspInit+0xa4>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	4a19      	ldr	r2, [pc, #100]	@ (8002684 <HAL_SPI_MspInit+0xa4>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002626:	4b17      	ldr	r3, [pc, #92]	@ (8002684 <HAL_SPI_MspInit+0xa4>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002632:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002640:	2303      	movs	r3, #3
 8002642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002644:	2306      	movs	r3, #6
 8002646:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4619      	mov	r1, r3
 800264e:	480e      	ldr	r0, [pc, #56]	@ (8002688 <HAL_SPI_MspInit+0xa8>)
 8002650:	f000 fb6a 	bl	8002d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002654:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800265e:	2301      	movs	r3, #1
 8002660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002666:	2306      	movs	r3, #6
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	4805      	ldr	r0, [pc, #20]	@ (8002688 <HAL_SPI_MspInit+0xa8>)
 8002672:	f000 fb59 	bl	8002d28 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002676:	bf00      	nop
 8002678:	3728      	adds	r7, #40	@ 0x28
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40003c00 	.word	0x40003c00
 8002684:	40021000 	.word	0x40021000
 8002688:	48000800 	.word	0x48000800

0800268c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b0ac      	sub	sp, #176	@ 0xb0
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	2288      	movs	r2, #136	@ 0x88
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f004 fe0b 	bl	80072c8 <memset>
  if(huart->Instance==USART2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a21      	ldr	r2, [pc, #132]	@ (800273c <HAL_UART_MspInit+0xb0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d13b      	bne.n	8002734 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026bc:	2302      	movs	r3, #2
 80026be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026c0:	2300      	movs	r3, #0
 80026c2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 ff21 	bl	8004510 <HAL_RCCEx_PeriphCLKConfig>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026d4:	f7ff feae 	bl	8002434 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026d8:	4b19      	ldr	r3, [pc, #100]	@ (8002740 <HAL_UART_MspInit+0xb4>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	4a18      	ldr	r2, [pc, #96]	@ (8002740 <HAL_UART_MspInit+0xb4>)
 80026de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80026e4:	4b16      	ldr	r3, [pc, #88]	@ (8002740 <HAL_UART_MspInit+0xb4>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	4b13      	ldr	r3, [pc, #76]	@ (8002740 <HAL_UART_MspInit+0xb4>)
 80026f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f4:	4a12      	ldr	r2, [pc, #72]	@ (8002740 <HAL_UART_MspInit+0xb4>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026fc:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <HAL_UART_MspInit+0xb4>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002708:	230c      	movs	r3, #12
 800270a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271a:	2303      	movs	r3, #3
 800271c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002720:	2307      	movs	r3, #7
 8002722:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800272a:	4619      	mov	r1, r3
 800272c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002730:	f000 fafa 	bl	8002d28 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002734:	bf00      	nop
 8002736:	37b0      	adds	r7, #176	@ 0xb0
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40004400 	.word	0x40004400
 8002740:	40021000 	.word	0x40021000

08002744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <NMI_Handler+0x4>

0800274c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <HardFault_Handler+0x4>

08002754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <MemManage_Handler+0x4>

0800275c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <BusFault_Handler+0x4>

08002764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <UsageFault_Handler+0x4>

0800276c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800279a:	f000 f94f 	bl	8002a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80027a8:	4802      	ldr	r0, [pc, #8]	@ (80027b4 <RTC_WKUP_IRQHandler+0x10>)
 80027aa:	f002 fe85 	bl	80054b8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20001f8c 	.word	0x20001f8c

080027b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO0_Pin);
 80027bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80027c0:	f000 fc74 	bl	80030ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO1_Pin);
 80027cc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80027d0:	f000 fc6c 	bl	80030ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO5_Pin);
 80027d4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80027d8:	f000 fc68 	bl	80030ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80027dc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80027e0:	f000 fc64 	bl	80030ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80027ec:	4802      	ldr	r0, [pc, #8]	@ (80027f8 <LPTIM1_IRQHandler+0x10>)
 80027ee:	f000 fde4 	bl	80033ba <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20001f44 	.word	0x20001f44

080027fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	e00a      	b.n	8002824 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800280e:	f3af 8000 	nop.w
 8002812:	4601      	mov	r1, r0
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	60ba      	str	r2, [r7, #8]
 800281a:	b2ca      	uxtb	r2, r1
 800281c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	3301      	adds	r3, #1
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	429a      	cmp	r2, r3
 800282a:	dbf0      	blt.n	800280e <_read+0x12>
  }

  return len;
 800282c:	687b      	ldr	r3, [r7, #4]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800283e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800285e:	605a      	str	r2, [r3, #4]
  return 0;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <_isatty>:

int _isatty(int file)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002876:	2301      	movs	r3, #1
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a8:	4a14      	ldr	r2, [pc, #80]	@ (80028fc <_sbrk+0x5c>)
 80028aa:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <_sbrk+0x60>)
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b4:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <_sbrk+0x64>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <_sbrk+0x64>)
 80028be:	4a12      	ldr	r2, [pc, #72]	@ (8002908 <_sbrk+0x68>)
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028c2:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <_sbrk+0x64>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d207      	bcs.n	80028e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d0:	f004 fd48 	bl	8007364 <__errno>
 80028d4:	4603      	mov	r3, r0
 80028d6:	220c      	movs	r2, #12
 80028d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
 80028de:	e009      	b.n	80028f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e0:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <_sbrk+0x64>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e6:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <_sbrk+0x64>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	4a05      	ldr	r2, [pc, #20]	@ (8002904 <_sbrk+0x64>)
 80028f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028f2:	68fb      	ldr	r3, [r7, #12]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20018000 	.word	0x20018000
 8002900:	00000400 	.word	0x00000400
 8002904:	2000237c 	.word	0x2000237c
 8002908:	200024d0 	.word	0x200024d0

0800290c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002910:	4b06      	ldr	r3, [pc, #24]	@ (800292c <SystemInit+0x20>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002916:	4a05      	ldr	r2, [pc, #20]	@ (800292c <SystemInit+0x20>)
 8002918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800291c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002968 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002934:	f7ff ffea 	bl	800290c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002938:	480c      	ldr	r0, [pc, #48]	@ (800296c <LoopForever+0x6>)
  ldr r1, =_edata
 800293a:	490d      	ldr	r1, [pc, #52]	@ (8002970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800293c:	4a0d      	ldr	r2, [pc, #52]	@ (8002974 <LoopForever+0xe>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002940:	e002      	b.n	8002948 <LoopCopyDataInit>

08002942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002946:	3304      	adds	r3, #4

08002948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800294c:	d3f9      	bcc.n	8002942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294e:	4a0a      	ldr	r2, [pc, #40]	@ (8002978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002950:	4c0a      	ldr	r4, [pc, #40]	@ (800297c <LoopForever+0x16>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002954:	e001      	b.n	800295a <LoopFillZerobss>

08002956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002958:	3204      	adds	r2, #4

0800295a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800295c:	d3fb      	bcc.n	8002956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800295e:	f004 fd07 	bl	8007370 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002962:	f7fe fcc7 	bl	80012f4 <main>

08002966 <LoopForever>:

LoopForever:
    b LoopForever
 8002966:	e7fe      	b.n	8002966 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002968:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800296c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002970:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8002974:	0800806c 	.word	0x0800806c
  ldr r2, =_sbss
 8002978:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 800297c:	200024d0 	.word	0x200024d0

08002980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002980:	e7fe      	b.n	8002980 <ADC1_2_IRQHandler>
	...

08002984 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800298e:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <HAL_Init+0x3c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a0b      	ldr	r2, [pc, #44]	@ (80029c0 <HAL_Init+0x3c>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002998:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299a:	2003      	movs	r0, #3
 800299c:	f000 f982 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029a0:	2000      	movs	r0, #0
 80029a2:	f000 f80f 	bl	80029c4 <HAL_InitTick>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	71fb      	strb	r3, [r7, #7]
 80029b0:	e001      	b.n	80029b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029b2:	f7ff fd45 	bl	8002440 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029b6:	79fb      	ldrb	r3, [r7, #7]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40022000 	.word	0x40022000

080029c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029d0:	4b17      	ldr	r3, [pc, #92]	@ (8002a30 <HAL_InitTick+0x6c>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d023      	beq.n	8002a20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029d8:	4b16      	ldr	r3, [pc, #88]	@ (8002a34 <HAL_InitTick+0x70>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b14      	ldr	r3, [pc, #80]	@ (8002a30 <HAL_InitTick+0x6c>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	4619      	mov	r1, r3
 80029e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f98d 	bl	8002d0e <HAL_SYSTICK_Config>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b0f      	cmp	r3, #15
 80029fe:	d809      	bhi.n	8002a14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a00:	2200      	movs	r2, #0
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f000 f957 	bl	8002cba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a38 <HAL_InitTick+0x74>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e007      	b.n	8002a24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
 8002a18:	e004      	b.n	8002a24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
 8002a1e:	e001      	b.n	8002a24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	200000c4 	.word	0x200000c4
 8002a34:	200000bc 	.word	0x200000bc
 8002a38:	200000c0 	.word	0x200000c0

08002a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a40:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <HAL_IncTick+0x20>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_IncTick+0x24>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <HAL_IncTick+0x24>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	200000c4 	.word	0x200000c4
 8002a60:	20002380 	.word	0x20002380

08002a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return uwTick;
 8002a68:	4b03      	ldr	r3, [pc, #12]	@ (8002a78 <HAL_GetTick+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20002380 	.word	0x20002380

08002a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff ffee 	bl	8002a64 <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d005      	beq.n	8002aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <HAL_Delay+0x44>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aa2:	bf00      	nop
 8002aa4:	f7ff ffde 	bl	8002a64 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d8f7      	bhi.n	8002aa4 <HAL_Delay+0x28>
  {
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200000c4 	.word	0x200000c4

08002ac4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	@ (8002ae0 <HAL_SuspendTick+0x1c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a04      	ldr	r2, [pc, #16]	@ (8002ae0 <HAL_SuspendTick+0x1c>)
 8002ace:	f023 0302 	bic.w	r3, r3, #2
 8002ad2:	6013      	str	r3, [r2, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e000e010 	.word	0xe000e010

08002ae4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <HAL_ResumeTick+0x1c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a04      	ldr	r2, [pc, #16]	@ (8002b00 <HAL_ResumeTick+0x1c>)
 8002aee:	f043 0302 	orr.w	r3, r3, #2
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000e010 	.word	0xe000e010

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b36:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60d3      	str	r3, [r2, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	@ (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	@ (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	@ (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	@ 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf28      	it	cs
 8002c16:	2304      	movcs	r3, #4
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b03      	subs	r3, #3
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
         );
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	@ 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c70:	d301      	bcc.n	8002c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00f      	b.n	8002c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7e:	210f      	movs	r1, #15
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	f7ff ff8e 	bl	8002ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff29 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ccc:	f7ff ff3e 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	f7ff ff8e 	bl	8002bf8 <NVIC_EncodePriority>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff5d 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002cea:	bf00      	nop
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff31 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffa2 	bl	8002c60 <SysTick_Config>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d36:	e17f      	b.n	8003038 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8171 	beq.w	8003032 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d005      	beq.n	8002d68 <HAL_GPIO_Init+0x40>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d130      	bne.n	8002dca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d9e:	2201      	movs	r2, #1
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 0201 	and.w	r2, r3, #1
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d118      	bne.n	8002e08 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ddc:	2201      	movs	r2, #1
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4013      	ands	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	08db      	lsrs	r3, r3, #3
 8002df2:	f003 0201 	and.w	r2, r3, #1
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d017      	beq.n	8002e44 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d123      	bne.n	8002e98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	08da      	lsrs	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3208      	adds	r2, #8
 8002e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	220f      	movs	r2, #15
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	08da      	lsrs	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3208      	adds	r2, #8
 8002e92:	6939      	ldr	r1, [r7, #16]
 8002e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0203 	and.w	r2, r3, #3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80ac 	beq.w	8003032 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eda:	4b5f      	ldr	r3, [pc, #380]	@ (8003058 <HAL_GPIO_Init+0x330>)
 8002edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ede:	4a5e      	ldr	r2, [pc, #376]	@ (8003058 <HAL_GPIO_Init+0x330>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ee6:	4b5c      	ldr	r3, [pc, #368]	@ (8003058 <HAL_GPIO_Init+0x330>)
 8002ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ef2:	4a5a      	ldr	r2, [pc, #360]	@ (800305c <HAL_GPIO_Init+0x334>)
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	3302      	adds	r3, #2
 8002efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	220f      	movs	r2, #15
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f1c:	d025      	beq.n	8002f6a <HAL_GPIO_Init+0x242>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4f      	ldr	r2, [pc, #316]	@ (8003060 <HAL_GPIO_Init+0x338>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01f      	beq.n	8002f66 <HAL_GPIO_Init+0x23e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4e      	ldr	r2, [pc, #312]	@ (8003064 <HAL_GPIO_Init+0x33c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d019      	beq.n	8002f62 <HAL_GPIO_Init+0x23a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4d      	ldr	r2, [pc, #308]	@ (8003068 <HAL_GPIO_Init+0x340>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_GPIO_Init+0x236>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4c      	ldr	r2, [pc, #304]	@ (800306c <HAL_GPIO_Init+0x344>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00d      	beq.n	8002f5a <HAL_GPIO_Init+0x232>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4b      	ldr	r2, [pc, #300]	@ (8003070 <HAL_GPIO_Init+0x348>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <HAL_GPIO_Init+0x22e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4a      	ldr	r2, [pc, #296]	@ (8003074 <HAL_GPIO_Init+0x34c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_GPIO_Init+0x22a>
 8002f4e:	2306      	movs	r3, #6
 8002f50:	e00c      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f52:	2307      	movs	r3, #7
 8002f54:	e00a      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f56:	2305      	movs	r3, #5
 8002f58:	e008      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	e006      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e004      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	f002 0203 	and.w	r2, r2, #3
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4093      	lsls	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f7c:	4937      	ldr	r1, [pc, #220]	@ (800305c <HAL_GPIO_Init+0x334>)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003078 <HAL_GPIO_Init+0x350>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fae:	4a32      	ldr	r2, [pc, #200]	@ (8003078 <HAL_GPIO_Init+0x350>)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fb4:	4b30      	ldr	r3, [pc, #192]	@ (8003078 <HAL_GPIO_Init+0x350>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fd8:	4a27      	ldr	r2, [pc, #156]	@ (8003078 <HAL_GPIO_Init+0x350>)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fde:	4b26      	ldr	r3, [pc, #152]	@ (8003078 <HAL_GPIO_Init+0x350>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003002:	4a1d      	ldr	r2, [pc, #116]	@ (8003078 <HAL_GPIO_Init+0x350>)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003008:	4b1b      	ldr	r3, [pc, #108]	@ (8003078 <HAL_GPIO_Init+0x350>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	43db      	mvns	r3, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800302c:	4a12      	ldr	r2, [pc, #72]	@ (8003078 <HAL_GPIO_Init+0x350>)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	f47f ae78 	bne.w	8002d38 <HAL_GPIO_Init+0x10>
  }
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	40010000 	.word	0x40010000
 8003060:	48000400 	.word	0x48000400
 8003064:	48000800 	.word	0x48000800
 8003068:	48000c00 	.word	0x48000c00
 800306c:	48001000 	.word	0x48001000
 8003070:	48001400 	.word	0x48001400
 8003074:	48001800 	.word	0x48001800
 8003078:	40010400 	.word	0x40010400

0800307c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4613      	mov	r3, r2
 800308a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003098:	e002      	b.n	80030a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030b6:	4b08      	ldr	r3, [pc, #32]	@ (80030d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d006      	beq.n	80030d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030c2:	4a05      	ldr	r2, [pc, #20]	@ (80030d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff f8fc 	bl	80022c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40010400 	.word	0x40010400

080030dc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e08f      	b.n	800320e <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff f9bd 	bl	8002488 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d004      	beq.n	8003130 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800312e:	d103      	bne.n	8003138 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 031e 	bic.w	r3, r3, #30
 8003136:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003140:	4293      	cmp	r3, r2
 8003142:	d005      	beq.n	8003150 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800314a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800314e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4b31      	ldr	r3, [pc, #196]	@ (8003218 <HAL_LPTIM_Init+0x13c>)
 8003154:	4013      	ands	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003160:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003166:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 800316c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8003172:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d107      	bne.n	8003192 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800318a:	4313      	orrs	r3, r2
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d004      	beq.n	80031a4 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031a2:	d107      	bne.n	80031b4 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80031ac:	4313      	orrs	r3, r2
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00a      	beq.n	80031d6 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80031c8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80031ce:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a0e      	ldr	r2, [pc, #56]	@ (800321c <HAL_LPTIM_Init+0x140>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d108      	bne.n	80031fa <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	621a      	str	r2, [r3, #32]
 80031f8:	e004      	b.n	8003204 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003202:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	ff19f1fe 	.word	0xff19f1fe
 800321c:	40007c00 	.word	0x40007c00

08003220 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a37      	ldr	r2, [pc, #220]	@ (8003314 <HAL_LPTIM_Counter_Start_IT+0xf4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d106      	bne.n	800324a <HAL_LPTIM_Counter_Start_IT+0x2a>
 800323c:	4b36      	ldr	r3, [pc, #216]	@ (8003318 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4a35      	ldr	r2, [pc, #212]	@ (8003318 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6213      	str	r3, [r2, #32]
 8003248:	e005      	b.n	8003256 <HAL_LPTIM_Counter_Start_IT+0x36>
 800324a:	4b33      	ldr	r3, [pc, #204]	@ (8003318 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4a32      	ldr	r2, [pc, #200]	@ (8003318 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8003250:	f043 0302 	orr.w	r3, r3, #2
 8003254:	6213      	str	r3, [r2, #32]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d00c      	beq.n	8003278 <HAL_LPTIM_Counter_Start_IT+0x58>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003262:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003266:	d107      	bne.n	8003278 <HAL_LPTIM_Counter_Start_IT+0x58>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8003276:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2210      	movs	r2, #16
 800328e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003298:	2110      	movs	r1, #16
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f968 	bl	8003570 <LPTIM_WaitForFlag>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d101      	bne.n	80032aa <HAL_LPTIM_Counter_Start_IT+0x8a>
  {
    return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e02f      	b.n	800330a <HAL_LPTIM_Counter_Start_IT+0xea>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f990 	bl	80035d0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f94f 	bl	8003554 <HAL_LPTIM_GetState>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d101      	bne.n	80032c0 <HAL_LPTIM_Counter_Start_IT+0xa0>
  {
    return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e024      	b.n	800330a <HAL_LPTIM_Counter_Start_IT+0xea>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0210 	orr.w	r2, r2, #16
 80032ce:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0202 	orr.w	r2, r2, #2
 80032de:	609a      	str	r2, [r3, #8]
  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);

#endif
  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0204 	orr.w	r2, r2, #4
 80032fe:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40007c00 	.word	0x40007c00
 8003318:	40010400 	.word	0x40010400

0800331c <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1b      	ldr	r2, [pc, #108]	@ (8003398 <HAL_LPTIM_Counter_Stop_IT+0x7c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d106      	bne.n	800333c <HAL_LPTIM_Counter_Stop_IT+0x20>
 800332e:	4b1b      	ldr	r3, [pc, #108]	@ (800339c <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	4a1a      	ldr	r2, [pc, #104]	@ (800339c <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6213      	str	r3, [r2, #32]
 800333a:	e005      	b.n	8003348 <HAL_LPTIM_Counter_Stop_IT+0x2c>
 800333c:	4b17      	ldr	r3, [pc, #92]	@ (800339c <HAL_LPTIM_Counter_Stop_IT+0x80>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	4a16      	ldr	r2, [pc, #88]	@ (800339c <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8003342:	f023 0302 	bic.w	r3, r3, #2
 8003346:	6213      	str	r3, [r2, #32]

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f93d 	bl	80035d0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8fc 	bl	8003554 <HAL_LPTIM_GetState>
 800335c:	4603      	mov	r3, r0
 800335e:	2b03      	cmp	r3, #3
 8003360:	d101      	bne.n	8003366 <HAL_LPTIM_Counter_Stop_IT+0x4a>
  {
    return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e014      	b.n	8003390 <HAL_LPTIM_Counter_Stop_IT+0x74>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0210 	bic.w	r2, r2, #16
 8003374:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0202 	bic.w	r2, r2, #2
 8003384:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
#endif
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40007c00 	.word	0x40007c00
 800339c:	40010400 	.word	0x40010400

080033a0 <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d10d      	bne.n	80033ec <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d106      	bne.n	80033ec <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2201      	movs	r2, #1
 80033e4:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe ff50 	bl	800228c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d10d      	bne.n	8003416 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b02      	cmp	r3, #2
 8003406:	d106      	bne.n	8003416 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2202      	movs	r2, #2
 800340e:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fe ff29 	bl	8002268 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b04      	cmp	r3, #4
 8003422:	d10d      	bne.n	8003440 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b04      	cmp	r3, #4
 8003430:	d106      	bne.n	8003440 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2204      	movs	r2, #4
 8003438:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f858 	bl	80034f0 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b08      	cmp	r3, #8
 800344c:	d10d      	bne.n	800346a <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b08      	cmp	r3, #8
 800345a:	d106      	bne.n	800346a <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2208      	movs	r2, #8
 8003462:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f84d 	bl	8003504 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b10      	cmp	r3, #16
 8003476:	d10d      	bne.n	8003494 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b10      	cmp	r3, #16
 8003484:	d106      	bne.n	8003494 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2210      	movs	r2, #16
 800348c:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f842 	bl	8003518 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d10d      	bne.n	80034be <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d106      	bne.n	80034be <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2220      	movs	r2, #32
 80034b6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f837 	bl	800352c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c8:	2b40      	cmp	r3, #64	@ 0x40
 80034ca:	d10d      	bne.n	80034e8 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d6:	2b40      	cmp	r3, #64	@ 0x40
 80034d8:	d106      	bne.n	80034e8 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2240      	movs	r2, #64	@ 0x40
 80034e0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f82c 	bl	8003540 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003562:	b2db      	uxtb	r3, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800357e:	4b12      	ldr	r3, [pc, #72]	@ (80035c8 <LPTIM_WaitForFlag+0x58>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a12      	ldr	r2, [pc, #72]	@ (80035cc <LPTIM_WaitForFlag+0x5c>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	0b9b      	lsrs	r3, r3, #14
 800358a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	3b01      	subs	r3, #1
 8003598:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	4013      	ands	r3, r2
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d002      	beq.n	80035ba <LPTIM_WaitForFlag+0x4a>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ec      	bne.n	8003594 <LPTIM_WaitForFlag+0x24>

  return result;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	200000bc 	.word	0x200000bc
 80035cc:	d1b71759 	.word	0xd1b71759

080035d0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08c      	sub	sp, #48	@ 0x30
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035dc:	f3ef 8310 	mrs	r3, PRIMASK
 80035e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80035e2:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035e6:	2301      	movs	r3, #1
 80035e8:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f383 8810 	msr	PRIMASK, r3
}
 80035f0:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a73      	ldr	r2, [pc, #460]	@ (80037c4 <LPTIM_Disable+0x1f4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <LPTIM_Disable+0x34>
 80035fc:	4a72      	ldr	r2, [pc, #456]	@ (80037c8 <LPTIM_Disable+0x1f8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8003602:	e00d      	b.n	8003620 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003604:	4b71      	ldr	r3, [pc, #452]	@ (80037cc <LPTIM_Disable+0x1fc>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800360e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8003610:	e006      	b.n	8003620 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003612:	4b6e      	ldr	r3, [pc, #440]	@ (80037cc <LPTIM_Disable+0x1fc>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003618:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800361c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800361e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a5d      	ldr	r2, [pc, #372]	@ (80037c4 <LPTIM_Disable+0x1f4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <LPTIM_Disable+0x8a>
 8003652:	4a5d      	ldr	r2, [pc, #372]	@ (80037c8 <LPTIM_Disable+0x1f8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00d      	beq.n	8003674 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8003658:	e019      	b.n	800368e <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800365a:	4b5c      	ldr	r3, [pc, #368]	@ (80037cc <LPTIM_Disable+0x1fc>)
 800365c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365e:	4a5b      	ldr	r2, [pc, #364]	@ (80037cc <LPTIM_Disable+0x1fc>)
 8003660:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003664:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003666:	4b59      	ldr	r3, [pc, #356]	@ (80037cc <LPTIM_Disable+0x1fc>)
 8003668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366a:	4a58      	ldr	r2, [pc, #352]	@ (80037cc <LPTIM_Disable+0x1fc>)
 800366c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003670:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 8003672:	e00c      	b.n	800368e <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8003674:	4b55      	ldr	r3, [pc, #340]	@ (80037cc <LPTIM_Disable+0x1fc>)
 8003676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003678:	4a54      	ldr	r2, [pc, #336]	@ (80037cc <LPTIM_Disable+0x1fc>)
 800367a:	f043 0320 	orr.w	r3, r3, #32
 800367e:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8003680:	4b52      	ldr	r3, [pc, #328]	@ (80037cc <LPTIM_Disable+0x1fc>)
 8003682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003684:	4a51      	ldr	r2, [pc, #324]	@ (80037cc <LPTIM_Disable+0x1fc>)
 8003686:	f023 0320 	bic.w	r3, r3, #32
 800368a:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 800368c:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d102      	bne.n	800369a <LPTIM_Disable+0xca>
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d075      	beq.n	8003786 <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a49      	ldr	r2, [pc, #292]	@ (80037c4 <LPTIM_Disable+0x1f4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <LPTIM_Disable+0xdc>
 80036a4:	4a48      	ldr	r2, [pc, #288]	@ (80037c8 <LPTIM_Disable+0x1f8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d009      	beq.n	80036be <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80036aa:	e011      	b.n	80036d0 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80036ac:	4b47      	ldr	r3, [pc, #284]	@ (80037cc <LPTIM_Disable+0x1fc>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b2:	4a46      	ldr	r2, [pc, #280]	@ (80037cc <LPTIM_Disable+0x1fc>)
 80036b4:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80036b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 80036bc:	e008      	b.n	80036d0 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80036be:	4b43      	ldr	r3, [pc, #268]	@ (80037cc <LPTIM_Disable+0x1fc>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c4:	4a41      	ldr	r2, [pc, #260]	@ (80037cc <LPTIM_Disable+0x1fc>)
 80036c6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80036ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 80036ce:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01a      	beq.n	800370c <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0201 	orr.w	r2, r2, #1
 80036e4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80036ee:	2108      	movs	r1, #8
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ff3d 	bl	8003570 <LPTIM_WaitForFlag>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d103      	bne.n	8003704 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2203      	movs	r2, #3
 8003700:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2208      	movs	r2, #8
 800370a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d01a      	beq.n	8003748 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0201 	orr.w	r2, r2, #1
 8003720:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800372a:	2110      	movs	r1, #16
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff1f 	bl	8003570 <LPTIM_WaitForFlag>
 8003732:	4603      	mov	r3, r0
 8003734:	2b03      	cmp	r3, #3
 8003736:	d103      	bne.n	8003740 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2203      	movs	r2, #3
 800373c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2210      	movs	r2, #16
 8003746:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1d      	ldr	r2, [pc, #116]	@ (80037c4 <LPTIM_Disable+0x1f4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d003      	beq.n	800375a <LPTIM_Disable+0x18a>
 8003752:	4a1d      	ldr	r2, [pc, #116]	@ (80037c8 <LPTIM_Disable+0x1f8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00b      	beq.n	8003770 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8003758:	e015      	b.n	8003786 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800375a:	4b1c      	ldr	r3, [pc, #112]	@ (80037cc <LPTIM_Disable+0x1fc>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003760:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003764:	4919      	ldr	r1, [pc, #100]	@ (80037cc <LPTIM_Disable+0x1fc>)
 8003766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 800376e:	e00a      	b.n	8003786 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8003770:	4b16      	ldr	r3, [pc, #88]	@ (80037cc <LPTIM_Disable+0x1fc>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800377a:	4914      	ldr	r1, [pc, #80]	@ (80037cc <LPTIM_Disable+0x1fc>)
 800377c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8003784:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379c:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a3a      	ldr	r2, [r7, #32]
 80037a4:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	621a      	str	r2, [r3, #32]
 80037ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f383 8810 	msr	PRIMASK, r3
}
 80037b8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80037ba:	bf00      	nop
 80037bc:	3730      	adds	r7, #48	@ 0x30
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40007c00 	.word	0x40007c00
 80037c8:	40009400 	.word	0x40009400
 80037cc:	40021000 	.word	0x40021000

080037d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037d4:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a04      	ldr	r2, [pc, #16]	@ (80037ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037de:	6013      	str	r3, [r2, #0]
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40007000 	.word	0x40007000

080037f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037f4:	4b04      	ldr	r3, [pc, #16]	@ (8003808 <HAL_PWREx_GetVoltageRange+0x18>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40007000 	.word	0x40007000

0800380c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800381a:	d130      	bne.n	800387e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800381c:	4b23      	ldr	r3, [pc, #140]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003828:	d038      	beq.n	800389c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800382a:	4b20      	ldr	r3, [pc, #128]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003832:	4a1e      	ldr	r2, [pc, #120]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003834:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003838:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800383a:	4b1d      	ldr	r3, [pc, #116]	@ (80038b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2232      	movs	r2, #50	@ 0x32
 8003840:	fb02 f303 	mul.w	r3, r2, r3
 8003844:	4a1b      	ldr	r2, [pc, #108]	@ (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	0c9b      	lsrs	r3, r3, #18
 800384c:	3301      	adds	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003850:	e002      	b.n	8003858 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3b01      	subs	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003858:	4b14      	ldr	r3, [pc, #80]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003864:	d102      	bne.n	800386c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f2      	bne.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800386c:	4b0f      	ldr	r3, [pc, #60]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003878:	d110      	bne.n	800389c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e00f      	b.n	800389e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800387e:	4b0b      	ldr	r3, [pc, #44]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388a:	d007      	beq.n	800389c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800388c:	4b07      	ldr	r3, [pc, #28]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003894:	4a05      	ldr	r2, [pc, #20]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800389a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40007000 	.word	0x40007000
 80038b0:	200000bc 	.word	0x200000bc
 80038b4:	431bde83 	.word	0x431bde83

080038b8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 80038c2:	4b11      	ldr	r3, [pc, #68]	@ (8003908 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 0307 	bic.w	r3, r3, #7
 80038ca:	4a0f      	ldr	r2, [pc, #60]	@ (8003908 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80038cc:	f043 0302 	orr.w	r3, r3, #2
 80038d0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80038d2:	4b0e      	ldr	r3, [pc, #56]	@ (800390c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	4a0d      	ldr	r2, [pc, #52]	@ (800390c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80038d8:	f043 0304 	orr.w	r3, r3, #4
 80038dc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80038e4:	bf30      	wfi
 80038e6:	e002      	b.n	80038ee <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80038e8:	bf40      	sev
    __WFE();
 80038ea:	bf20      	wfe
    __WFE();
 80038ec:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80038ee:	4b07      	ldr	r3, [pc, #28]	@ (800390c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	4a06      	ldr	r2, [pc, #24]	@ (800390c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80038f4:	f023 0304 	bic.w	r3, r3, #4
 80038f8:	6113      	str	r3, [r2, #16]
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40007000 	.word	0x40007000
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e3ca      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003922:	4b97      	ldr	r3, [pc, #604]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800392c:	4b94      	ldr	r3, [pc, #592]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80e4 	beq.w	8003b0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d007      	beq.n	800395a <HAL_RCC_OscConfig+0x4a>
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	2b0c      	cmp	r3, #12
 800394e:	f040 808b 	bne.w	8003a68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b01      	cmp	r3, #1
 8003956:	f040 8087 	bne.w	8003a68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800395a:	4b89      	ldr	r3, [pc, #548]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_RCC_OscConfig+0x62>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e3a2      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1a      	ldr	r2, [r3, #32]
 8003976:	4b82      	ldr	r3, [pc, #520]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <HAL_RCC_OscConfig+0x7c>
 8003982:	4b7f      	ldr	r3, [pc, #508]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800398a:	e005      	b.n	8003998 <HAL_RCC_OscConfig+0x88>
 800398c:	4b7c      	ldr	r3, [pc, #496]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 800398e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003998:	4293      	cmp	r3, r2
 800399a:	d223      	bcs.n	80039e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fd55 	bl	8004450 <RCC_SetFlashLatencyFromMSIRange>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e383      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039b0:	4b73      	ldr	r3, [pc, #460]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a72      	ldr	r2, [pc, #456]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039b6:	f043 0308 	orr.w	r3, r3, #8
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b70      	ldr	r3, [pc, #448]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	496d      	ldr	r1, [pc, #436]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	4968      	ldr	r1, [pc, #416]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
 80039e2:	e025      	b.n	8003a30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039e4:	4b66      	ldr	r3, [pc, #408]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a65      	ldr	r2, [pc, #404]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039ea:	f043 0308 	orr.w	r3, r3, #8
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4b63      	ldr	r3, [pc, #396]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4960      	ldr	r1, [pc, #384]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a02:	4b5f      	ldr	r3, [pc, #380]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	495b      	ldr	r1, [pc, #364]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fd15 	bl	8004450 <RCC_SetFlashLatencyFromMSIRange>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e343      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a30:	f000 fc4a 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b52      	ldr	r3, [pc, #328]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	4950      	ldr	r1, [pc, #320]	@ (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4c:	4a4e      	ldr	r2, [pc, #312]	@ (8003b88 <HAL_RCC_OscConfig+0x278>)
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a50:	4b4e      	ldr	r3, [pc, #312]	@ (8003b8c <HAL_RCC_OscConfig+0x27c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe ffb5 	bl	80029c4 <HAL_InitTick>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d052      	beq.n	8003b0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	e327      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d032      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a70:	4b43      	ldr	r3, [pc, #268]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a42      	ldr	r2, [pc, #264]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fff2 	bl	8002a64 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a84:	f7fe ffee 	bl	8002a64 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e310      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a96:	4b3a      	ldr	r3, [pc, #232]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aa2:	4b37      	ldr	r3, [pc, #220]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a36      	ldr	r2, [pc, #216]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	f043 0308 	orr.w	r3, r3, #8
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4b34      	ldr	r3, [pc, #208]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	4931      	ldr	r1, [pc, #196]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	492c      	ldr	r1, [pc, #176]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
 8003ad4:	e01a      	b.n	8003b0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a29      	ldr	r2, [pc, #164]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ae2:	f7fe ffbf 	bl	8002a64 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aea:	f7fe ffbb 	bl	8002a64 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e2dd      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003afc:	4b20      	ldr	r3, [pc, #128]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f0      	bne.n	8003aea <HAL_RCC_OscConfig+0x1da>
 8003b08:	e000      	b.n	8003b0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d074      	beq.n	8003c02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x21a>
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b0c      	cmp	r3, #12
 8003b22:	d10e      	bne.n	8003b42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d10b      	bne.n	8003b42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2a:	4b15      	ldr	r3, [pc, #84]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d064      	beq.n	8003c00 <HAL_RCC_OscConfig+0x2f0>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d160      	bne.n	8003c00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e2ba      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b4a:	d106      	bne.n	8003b5a <HAL_RCC_OscConfig+0x24a>
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0b      	ldr	r2, [pc, #44]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	e026      	b.n	8003ba8 <HAL_RCC_OscConfig+0x298>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b62:	d115      	bne.n	8003b90 <HAL_RCC_OscConfig+0x280>
 8003b64:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a05      	ldr	r2, [pc, #20]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b03      	ldr	r3, [pc, #12]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a02      	ldr	r2, [pc, #8]	@ (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	e014      	b.n	8003ba8 <HAL_RCC_OscConfig+0x298>
 8003b7e:	bf00      	nop
 8003b80:	40021000 	.word	0x40021000
 8003b84:	08007fe0 	.word	0x08007fe0
 8003b88:	200000bc 	.word	0x200000bc
 8003b8c:	200000c0 	.word	0x200000c0
 8003b90:	4ba0      	ldr	r3, [pc, #640]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a9f      	ldr	r2, [pc, #636]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b9d      	ldr	r3, [pc, #628]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a9c      	ldr	r2, [pc, #624]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d013      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe ff58 	bl	8002a64 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fe ff54 	bl	8002a64 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	@ 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e276      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bca:	4b92      	ldr	r3, [pc, #584]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x2a8>
 8003bd6:	e014      	b.n	8003c02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fe ff44 	bl	8002a64 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be0:	f7fe ff40 	bl	8002a64 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	@ 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e262      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bf2:	4b88      	ldr	r3, [pc, #544]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x2d0>
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d060      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_OscConfig+0x310>
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d119      	bne.n	8003c4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d116      	bne.n	8003c4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c20:	4b7c      	ldr	r3, [pc, #496]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_OscConfig+0x328>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e23f      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c38:	4b76      	ldr	r3, [pc, #472]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	4973      	ldr	r1, [pc, #460]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c4c:	e040      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d023      	beq.n	8003c9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c56:	4b6f      	ldr	r3, [pc, #444]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a6e      	ldr	r2, [pc, #440]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c62:	f7fe feff 	bl	8002a64 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6a:	f7fe fefb 	bl	8002a64 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e21d      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c7c:	4b65      	ldr	r3, [pc, #404]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c88:	4b62      	ldr	r3, [pc, #392]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	495f      	ldr	r1, [pc, #380]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
 8003c9c:	e018      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a5c      	ldr	r2, [pc, #368]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fe fedb 	bl	8002a64 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb2:	f7fe fed7 	bl	8002a64 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e1f9      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc4:	4b53      	ldr	r3, [pc, #332]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f0      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d03c      	beq.n	8003d56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cea:	4a4a      	ldr	r2, [pc, #296]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fe feb6 	bl	8002a64 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfc:	f7fe feb2 	bl	8002a64 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e1d4      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d0e:	4b41      	ldr	r3, [pc, #260]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ef      	beq.n	8003cfc <HAL_RCC_OscConfig+0x3ec>
 8003d1c:	e01b      	b.n	8003d56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d24:	4a3b      	ldr	r2, [pc, #236]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fe fe99 	bl	8002a64 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d36:	f7fe fe95 	bl	8002a64 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e1b7      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d48:	4b32      	ldr	r3, [pc, #200]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ef      	bne.n	8003d36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 80a6 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d64:	2300      	movs	r3, #0
 8003d66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d68:	4b2a      	ldr	r3, [pc, #168]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10d      	bne.n	8003d90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d74:	4b27      	ldr	r3, [pc, #156]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d78:	4a26      	ldr	r2, [pc, #152]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d80:	4b24      	ldr	r3, [pc, #144]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d90:	4b21      	ldr	r3, [pc, #132]	@ (8003e18 <HAL_RCC_OscConfig+0x508>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d118      	bne.n	8003dce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8003e18 <HAL_RCC_OscConfig+0x508>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e18 <HAL_RCC_OscConfig+0x508>)
 8003da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da8:	f7fe fe5c 	bl	8002a64 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db0:	f7fe fe58 	bl	8002a64 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e17a      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc2:	4b15      	ldr	r3, [pc, #84]	@ (8003e18 <HAL_RCC_OscConfig+0x508>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d108      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4d8>
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003de6:	e029      	b.n	8003e3c <HAL_RCC_OscConfig+0x52c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	d115      	bne.n	8003e1c <HAL_RCC_OscConfig+0x50c>
 8003df0:	4b08      	ldr	r3, [pc, #32]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df6:	4a07      	ldr	r2, [pc, #28]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003df8:	f043 0304 	orr.w	r3, r3, #4
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e00:	4b04      	ldr	r3, [pc, #16]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e06:	4a03      	ldr	r2, [pc, #12]	@ (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e10:	e014      	b.n	8003e3c <HAL_RCC_OscConfig+0x52c>
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	4b9c      	ldr	r3, [pc, #624]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e22:	4a9b      	ldr	r2, [pc, #620]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e2c:	4b98      	ldr	r3, [pc, #608]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e32:	4a97      	ldr	r2, [pc, #604]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003e34:	f023 0304 	bic.w	r3, r3, #4
 8003e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d016      	beq.n	8003e72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e44:	f7fe fe0e 	bl	8002a64 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4c:	f7fe fe0a 	bl	8002a64 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e12a      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e62:	4b8b      	ldr	r3, [pc, #556]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ed      	beq.n	8003e4c <HAL_RCC_OscConfig+0x53c>
 8003e70:	e015      	b.n	8003e9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e72:	f7fe fdf7 	bl	8002a64 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fe fdf3 	bl	8002a64 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e113      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e90:	4b7f      	ldr	r3, [pc, #508]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1ed      	bne.n	8003e7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea4:	4b7a      	ldr	r3, [pc, #488]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea8:	4a79      	ldr	r2, [pc, #484]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80fe 	beq.w	80040b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	f040 80d0 	bne.w	8004064 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ec4:	4b72      	ldr	r3, [pc, #456]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f003 0203 	and.w	r2, r3, #3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d130      	bne.n	8003f3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d127      	bne.n	8003f3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d11f      	bne.n	8003f3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f04:	2a07      	cmp	r2, #7
 8003f06:	bf14      	ite	ne
 8003f08:	2201      	movne	r2, #1
 8003f0a:	2200      	moveq	r2, #0
 8003f0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d113      	bne.n	8003f3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d109      	bne.n	8003f3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	3b01      	subs	r3, #1
 8003f34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d06e      	beq.n	8004018 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2b0c      	cmp	r3, #12
 8003f3e:	d069      	beq.n	8004014 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f40:	4b53      	ldr	r3, [pc, #332]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f4c:	4b50      	ldr	r3, [pc, #320]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0ad      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f5c:	4b4c      	ldr	r3, [pc, #304]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a4b      	ldr	r2, [pc, #300]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003f62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f68:	f7fe fd7c 	bl	8002a64 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fe fd78 	bl	8002a64 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e09a      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f82:	4b43      	ldr	r3, [pc, #268]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f8e:	4b40      	ldr	r3, [pc, #256]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	4b40      	ldr	r3, [pc, #256]	@ (8004094 <HAL_RCC_OscConfig+0x784>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f9e:	3a01      	subs	r2, #1
 8003fa0:	0112      	lsls	r2, r2, #4
 8003fa2:	4311      	orrs	r1, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fa8:	0212      	lsls	r2, r2, #8
 8003faa:	4311      	orrs	r1, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fb0:	0852      	lsrs	r2, r2, #1
 8003fb2:	3a01      	subs	r2, #1
 8003fb4:	0552      	lsls	r2, r2, #21
 8003fb6:	4311      	orrs	r1, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003fbc:	0852      	lsrs	r2, r2, #1
 8003fbe:	3a01      	subs	r2, #1
 8003fc0:	0652      	lsls	r2, r2, #25
 8003fc2:	4311      	orrs	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fc8:	0912      	lsrs	r2, r2, #4
 8003fca:	0452      	lsls	r2, r2, #17
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	4930      	ldr	r1, [pc, #192]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a2d      	ldr	r2, [pc, #180]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003fda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8003fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fec:	f7fe fd3a 	bl	8002a64 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fe fd36 	bl	8002a64 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e058      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004006:	4b22      	ldr	r3, [pc, #136]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004012:	e050      	b.n	80040b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e04f      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004018:	4b1d      	ldr	r3, [pc, #116]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d148      	bne.n	80040b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004024:	4b1a      	ldr	r3, [pc, #104]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a19      	ldr	r2, [pc, #100]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 800402a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800402e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004030:	4b17      	ldr	r3, [pc, #92]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4a16      	ldr	r2, [pc, #88]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8004036:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800403a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800403c:	f7fe fd12 	bl	8002a64 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004044:	f7fe fd0e 	bl	8002a64 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e030      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004056:	4b0e      	ldr	r3, [pc, #56]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x734>
 8004062:	e028      	b.n	80040b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b0c      	cmp	r3, #12
 8004068:	d023      	beq.n	80040b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406a:	4b09      	ldr	r3, [pc, #36]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a08      	ldr	r2, [pc, #32]	@ (8004090 <HAL_RCC_OscConfig+0x780>)
 8004070:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004076:	f7fe fcf5 	bl	8002a64 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407c:	e00c      	b.n	8004098 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407e:	f7fe fcf1 	bl	8002a64 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d905      	bls.n	8004098 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e013      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
 8004090:	40021000 	.word	0x40021000
 8004094:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004098:	4b09      	ldr	r3, [pc, #36]	@ (80040c0 <HAL_RCC_OscConfig+0x7b0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ec      	bne.n	800407e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040a4:	4b06      	ldr	r3, [pc, #24]	@ (80040c0 <HAL_RCC_OscConfig+0x7b0>)
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	4905      	ldr	r1, [pc, #20]	@ (80040c0 <HAL_RCC_OscConfig+0x7b0>)
 80040aa:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <HAL_RCC_OscConfig+0x7b4>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	60cb      	str	r3, [r1, #12]
 80040b0:	e001      	b.n	80040b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000
 80040c4:	feeefffc 	.word	0xfeeefffc

080040c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0e7      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040dc:	4b75      	ldr	r3, [pc, #468]	@ (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d910      	bls.n	800410c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	4b72      	ldr	r3, [pc, #456]	@ (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 0207 	bic.w	r2, r3, #7
 80040f2:	4970      	ldr	r1, [pc, #448]	@ (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b6e      	ldr	r3, [pc, #440]	@ (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0cf      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d010      	beq.n	800413a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	4b66      	ldr	r3, [pc, #408]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004124:	429a      	cmp	r2, r3
 8004126:	d908      	bls.n	800413a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004128:	4b63      	ldr	r3, [pc, #396]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4960      	ldr	r1, [pc, #384]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d04c      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414e:	4b5a      	ldr	r3, [pc, #360]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d121      	bne.n	800419e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e0a6      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004166:	4b54      	ldr	r3, [pc, #336]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d115      	bne.n	800419e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e09a      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800417e:	4b4e      	ldr	r3, [pc, #312]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e08e      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800418e:	4b4a      	ldr	r3, [pc, #296]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e086      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800419e:	4b46      	ldr	r3, [pc, #280]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 0203 	bic.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4943      	ldr	r1, [pc, #268]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b0:	f7fe fc58 	bl	8002a64 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b8:	f7fe fc54 	bl	8002a64 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e06e      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b3a      	ldr	r3, [pc, #232]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 020c 	and.w	r2, r3, #12
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1eb      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d010      	beq.n	800420e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	4b31      	ldr	r3, [pc, #196]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d208      	bcs.n	800420e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041fc:	4b2e      	ldr	r3, [pc, #184]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	492b      	ldr	r1, [pc, #172]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800420e:	4b29      	ldr	r3, [pc, #164]	@ (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d210      	bcs.n	800423e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421c:	4b25      	ldr	r3, [pc, #148]	@ (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 0207 	bic.w	r2, r3, #7
 8004224:	4923      	ldr	r1, [pc, #140]	@ (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	4313      	orrs	r3, r2
 800422a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422c:	4b21      	ldr	r3, [pc, #132]	@ (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d001      	beq.n	800423e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e036      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d008      	beq.n	800425c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800424a:	4b1b      	ldr	r3, [pc, #108]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	4918      	ldr	r1, [pc, #96]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004258:	4313      	orrs	r3, r2
 800425a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d009      	beq.n	800427c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004268:	4b13      	ldr	r3, [pc, #76]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	4910      	ldr	r1, [pc, #64]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004278:	4313      	orrs	r3, r2
 800427a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800427c:	f000 f824 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8004280:	4602      	mov	r2, r0
 8004282:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	091b      	lsrs	r3, r3, #4
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	490b      	ldr	r1, [pc, #44]	@ (80042bc <HAL_RCC_ClockConfig+0x1f4>)
 800428e:	5ccb      	ldrb	r3, [r1, r3]
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
 8004298:	4a09      	ldr	r2, [pc, #36]	@ (80042c0 <HAL_RCC_ClockConfig+0x1f8>)
 800429a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800429c:	4b09      	ldr	r3, [pc, #36]	@ (80042c4 <HAL_RCC_ClockConfig+0x1fc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe fb8f 	bl	80029c4 <HAL_InitTick>
 80042a6:	4603      	mov	r3, r0
 80042a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80042aa:	7afb      	ldrb	r3, [r7, #11]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40022000 	.word	0x40022000
 80042b8:	40021000 	.word	0x40021000
 80042bc:	08007fe0 	.word	0x08007fe0
 80042c0:	200000bc 	.word	0x200000bc
 80042c4:	200000c0 	.word	0x200000c0

080042c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b089      	sub	sp, #36	@ 0x24
 80042cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	2300      	movs	r3, #0
 80042d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d6:	4b3e      	ldr	r3, [pc, #248]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e0:	4b3b      	ldr	r3, [pc, #236]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0x34>
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	d121      	bne.n	800433a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d11e      	bne.n	800433a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042fc:	4b34      	ldr	r3, [pc, #208]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d107      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004308:	4b31      	ldr	r3, [pc, #196]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800430a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800430e:	0a1b      	lsrs	r3, r3, #8
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	e005      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004318:	4b2d      	ldr	r3, [pc, #180]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004324:	4a2b      	ldr	r2, [pc, #172]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10d      	bne.n	8004350 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b04      	cmp	r3, #4
 800433e:	d102      	bne.n	8004346 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004340:	4b25      	ldr	r3, [pc, #148]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	e004      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d101      	bne.n	8004350 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800434c:	4b23      	ldr	r3, [pc, #140]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x114>)
 800434e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b0c      	cmp	r3, #12
 8004354:	d134      	bne.n	80043c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004356:	4b1e      	ldr	r3, [pc, #120]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d003      	beq.n	800436e <HAL_RCC_GetSysClockFreq+0xa6>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b03      	cmp	r3, #3
 800436a:	d003      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0xac>
 800436c:	e005      	b.n	800437a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800436e:	4b1a      	ldr	r3, [pc, #104]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004370:	617b      	str	r3, [r7, #20]
      break;
 8004372:	e005      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004374:	4b19      	ldr	r3, [pc, #100]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x114>)
 8004376:	617b      	str	r3, [r7, #20]
      break;
 8004378:	e002      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	617b      	str	r3, [r7, #20]
      break;
 800437e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004380:	4b13      	ldr	r3, [pc, #76]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	3301      	adds	r3, #1
 800438c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800438e:	4b10      	ldr	r3, [pc, #64]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	fb03 f202 	mul.w	r2, r3, r2
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043a6:	4b0a      	ldr	r3, [pc, #40]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	0e5b      	lsrs	r3, r3, #25
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	3301      	adds	r3, #1
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043c0:	69bb      	ldr	r3, [r7, #24]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3724      	adds	r7, #36	@ 0x24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000
 80043d4:	08007ff8 	.word	0x08007ff8
 80043d8:	00f42400 	.word	0x00f42400
 80043dc:	007a1200 	.word	0x007a1200

080043e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e4:	4b03      	ldr	r3, [pc, #12]	@ (80043f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	200000bc 	.word	0x200000bc

080043f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043fc:	f7ff fff0 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8004400:	4602      	mov	r2, r0
 8004402:	4b06      	ldr	r3, [pc, #24]	@ (800441c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	0a1b      	lsrs	r3, r3, #8
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	4904      	ldr	r1, [pc, #16]	@ (8004420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800440e:	5ccb      	ldrb	r3, [r1, r3]
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40021000 	.word	0x40021000
 8004420:	08007ff0 	.word	0x08007ff0

08004424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004428:	f7ff ffda 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0adb      	lsrs	r3, r3, #11
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4904      	ldr	r1, [pc, #16]	@ (800444c <HAL_RCC_GetPCLK2Freq+0x28>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40021000 	.word	0x40021000
 800444c:	08007ff0 	.word	0x08007ff0

08004450 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800445c:	4b2a      	ldr	r3, [pc, #168]	@ (8004508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004468:	f7ff f9c2 	bl	80037f0 <HAL_PWREx_GetVoltageRange>
 800446c:	6178      	str	r0, [r7, #20]
 800446e:	e014      	b.n	800449a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004470:	4b25      	ldr	r3, [pc, #148]	@ (8004508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004474:	4a24      	ldr	r2, [pc, #144]	@ (8004508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800447a:	6593      	str	r3, [r2, #88]	@ 0x58
 800447c:	4b22      	ldr	r3, [pc, #136]	@ (8004508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004488:	f7ff f9b2 	bl	80037f0 <HAL_PWREx_GetVoltageRange>
 800448c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800448e:	4b1e      	ldr	r3, [pc, #120]	@ (8004508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004492:	4a1d      	ldr	r2, [pc, #116]	@ (8004508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004494:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004498:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044a0:	d10b      	bne.n	80044ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b80      	cmp	r3, #128	@ 0x80
 80044a6:	d919      	bls.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80044ac:	d902      	bls.n	80044b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ae:	2302      	movs	r3, #2
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	e013      	b.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044b4:	2301      	movs	r3, #1
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	e010      	b.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b80      	cmp	r3, #128	@ 0x80
 80044be:	d902      	bls.n	80044c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044c0:	2303      	movs	r3, #3
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	e00a      	b.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b80      	cmp	r3, #128	@ 0x80
 80044ca:	d102      	bne.n	80044d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044cc:	2302      	movs	r3, #2
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	e004      	b.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b70      	cmp	r3, #112	@ 0x70
 80044d6:	d101      	bne.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044d8:	2301      	movs	r3, #1
 80044da:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044dc:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f023 0207 	bic.w	r2, r3, #7
 80044e4:	4909      	ldr	r1, [pc, #36]	@ (800450c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044ec:	4b07      	ldr	r3, [pc, #28]	@ (800450c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d001      	beq.n	80044fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40021000 	.word	0x40021000
 800450c:	40022000 	.word	0x40022000

08004510 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004518:	2300      	movs	r3, #0
 800451a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800451c:	2300      	movs	r3, #0
 800451e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004528:	2b00      	cmp	r3, #0
 800452a:	d041      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004530:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004534:	d02a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004536:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800453a:	d824      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800453c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004540:	d008      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004542:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004546:	d81e      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800454c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004550:	d010      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004552:	e018      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004554:	4b86      	ldr	r3, [pc, #536]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4a85      	ldr	r2, [pc, #532]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800455e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004560:	e015      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3304      	adds	r3, #4
 8004566:	2100      	movs	r1, #0
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fabb 	bl	8004ae4 <RCCEx_PLLSAI1_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004572:	e00c      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3320      	adds	r3, #32
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fba6 	bl	8004ccc <RCCEx_PLLSAI2_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004584:	e003      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	74fb      	strb	r3, [r7, #19]
      break;
 800458a:	e000      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800458c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800458e:	7cfb      	ldrb	r3, [r7, #19]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10b      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004594:	4b76      	ldr	r3, [pc, #472]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045a2:	4973      	ldr	r1, [pc, #460]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045aa:	e001      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	7cfb      	ldrb	r3, [r7, #19]
 80045ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d041      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045c4:	d02a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045ca:	d824      	bhi.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045d0:	d008      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045d6:	d81e      	bhi.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045e0:	d010      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045e2:	e018      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045e4:	4b62      	ldr	r3, [pc, #392]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a61      	ldr	r2, [pc, #388]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045f0:	e015      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3304      	adds	r3, #4
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fa73 	bl	8004ae4 <RCCEx_PLLSAI1_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004602:	e00c      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3320      	adds	r3, #32
 8004608:	2100      	movs	r1, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fb5e 	bl	8004ccc <RCCEx_PLLSAI2_Config>
 8004610:	4603      	mov	r3, r0
 8004612:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004614:	e003      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	74fb      	strb	r3, [r7, #19]
      break;
 800461a:	e000      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800461c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800461e:	7cfb      	ldrb	r3, [r7, #19]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004624:	4b52      	ldr	r3, [pc, #328]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004632:	494f      	ldr	r1, [pc, #316]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800463a:	e001      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463c:	7cfb      	ldrb	r3, [r7, #19]
 800463e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80a0 	beq.w	800478e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464e:	2300      	movs	r3, #0
 8004650:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004652:	4b47      	ldr	r3, [pc, #284]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004662:	2300      	movs	r3, #0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004668:	4b41      	ldr	r3, [pc, #260]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800466c:	4a40      	ldr	r2, [pc, #256]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004672:	6593      	str	r3, [r2, #88]	@ 0x58
 8004674:	4b3e      	ldr	r3, [pc, #248]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004680:	2301      	movs	r3, #1
 8004682:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004684:	4b3b      	ldr	r3, [pc, #236]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a3a      	ldr	r2, [pc, #232]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800468a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800468e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004690:	f7fe f9e8 	bl	8002a64 <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004696:	e009      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004698:	f7fe f9e4 	bl	8002a64 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d902      	bls.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	74fb      	strb	r3, [r7, #19]
        break;
 80046aa:	e005      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046ac:	4b31      	ldr	r3, [pc, #196]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0ef      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80046b8:	7cfb      	ldrb	r3, [r7, #19]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d15c      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046be:	4b2c      	ldr	r3, [pc, #176]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01f      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d019      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046dc:	4b24      	ldr	r3, [pc, #144]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046e8:	4b21      	ldr	r3, [pc, #132]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ee:	4a20      	ldr	r2, [pc, #128]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004700:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004708:	4a19      	ldr	r2, [pc, #100]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d016      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471a:	f7fe f9a3 	bl	8002a64 <HAL_GetTick>
 800471e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004720:	e00b      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004722:	f7fe f99f 	bl	8002a64 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004730:	4293      	cmp	r3, r2
 8004732:	d902      	bls.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	74fb      	strb	r3, [r7, #19]
            break;
 8004738:	e006      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800473a:	4b0d      	ldr	r3, [pc, #52]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0ec      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10c      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800474e:	4b08      	ldr	r3, [pc, #32]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004754:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800475e:	4904      	ldr	r1, [pc, #16]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004766:	e009      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	74bb      	strb	r3, [r7, #18]
 800476c:	e006      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
 8004774:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004778:	7cfb      	ldrb	r3, [r7, #19]
 800477a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800477c:	7c7b      	ldrb	r3, [r7, #17]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d105      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004782:	4b9e      	ldr	r3, [pc, #632]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004786:	4a9d      	ldr	r2, [pc, #628]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800478c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800479a:	4b98      	ldr	r3, [pc, #608]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a0:	f023 0203 	bic.w	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a8:	4994      	ldr	r1, [pc, #592]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047bc:	4b8f      	ldr	r3, [pc, #572]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c2:	f023 020c 	bic.w	r2, r3, #12
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ca:	498c      	ldr	r1, [pc, #560]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047de:	4b87      	ldr	r3, [pc, #540]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ec:	4983      	ldr	r1, [pc, #524]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004800:	4b7e      	ldr	r3, [pc, #504]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004806:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480e:	497b      	ldr	r1, [pc, #492]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004822:	4b76      	ldr	r3, [pc, #472]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004830:	4972      	ldr	r1, [pc, #456]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004844:	4b6d      	ldr	r3, [pc, #436]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004852:	496a      	ldr	r1, [pc, #424]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004866:	4b65      	ldr	r3, [pc, #404]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004874:	4961      	ldr	r1, [pc, #388]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004888:	4b5c      	ldr	r3, [pc, #368]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004896:	4959      	ldr	r1, [pc, #356]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048aa:	4b54      	ldr	r3, [pc, #336]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b8:	4950      	ldr	r1, [pc, #320]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048cc:	4b4b      	ldr	r3, [pc, #300]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048da:	4948      	ldr	r1, [pc, #288]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048ee:	4b43      	ldr	r3, [pc, #268]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fc:	493f      	ldr	r1, [pc, #252]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d028      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004910:	4b3a      	ldr	r3, [pc, #232]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004916:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800491e:	4937      	ldr	r1, [pc, #220]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800492a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800492e:	d106      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004930:	4b32      	ldr	r3, [pc, #200]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4a31      	ldr	r2, [pc, #196]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800493a:	60d3      	str	r3, [r2, #12]
 800493c:	e011      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004942:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004946:	d10c      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	2101      	movs	r1, #1
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f8c8 	bl	8004ae4 <RCCEx_PLLSAI1_Config>
 8004954:	4603      	mov	r3, r0
 8004956:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800495e:	7cfb      	ldrb	r3, [r7, #19]
 8004960:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d028      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800496e:	4b23      	ldr	r3, [pc, #140]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004974:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497c:	491f      	ldr	r1, [pc, #124]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004988:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800498c:	d106      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800498e:	4b1b      	ldr	r3, [pc, #108]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	4a1a      	ldr	r2, [pc, #104]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004994:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004998:	60d3      	str	r3, [r2, #12]
 800499a:	e011      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049a4:	d10c      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3304      	adds	r3, #4
 80049aa:	2101      	movs	r1, #1
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 f899 	bl	8004ae4 <RCCEx_PLLSAI1_Config>
 80049b2:	4603      	mov	r3, r0
 80049b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049b6:	7cfb      	ldrb	r3, [r7, #19]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049bc:	7cfb      	ldrb	r3, [r7, #19]
 80049be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d02b      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049cc:	4b0b      	ldr	r3, [pc, #44]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049da:	4908      	ldr	r1, [pc, #32]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ea:	d109      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ec:	4b03      	ldr	r3, [pc, #12]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4a02      	ldr	r2, [pc, #8]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049f6:	60d3      	str	r3, [r2, #12]
 80049f8:	e014      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049fa:	bf00      	nop
 80049fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a08:	d10c      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	2101      	movs	r1, #1
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 f867 	bl	8004ae4 <RCCEx_PLLSAI1_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a1a:	7cfb      	ldrb	r3, [r7, #19]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
 8004a22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d02f      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a30:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a3e:	4928      	ldr	r1, [pc, #160]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a4e:	d10d      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3304      	adds	r3, #4
 8004a54:	2102      	movs	r1, #2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f844 	bl	8004ae4 <RCCEx_PLLSAI1_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d014      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a66:	7cfb      	ldrb	r3, [r7, #19]
 8004a68:	74bb      	strb	r3, [r7, #18]
 8004a6a:	e011      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3320      	adds	r3, #32
 8004a7a:	2102      	movs	r1, #2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 f925 	bl	8004ccc <RCCEx_PLLSAI2_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a86:	7cfb      	ldrb	r3, [r7, #19]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a8c:	7cfb      	ldrb	r3, [r7, #19]
 8004a8e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aaa:	490d      	ldr	r1, [pc, #52]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004abe:	4b08      	ldr	r3, [pc, #32]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ace:	4904      	ldr	r1, [pc, #16]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ad6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40021000 	.word	0x40021000

08004ae4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004af2:	4b75      	ldr	r3, [pc, #468]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d018      	beq.n	8004b30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004afe:	4b72      	ldr	r3, [pc, #456]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0203 	and.w	r2, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d10d      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
       ||
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b16:	4b6c      	ldr	r3, [pc, #432]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	091b      	lsrs	r3, r3, #4
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
       ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d047      	beq.n	8004bba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
 8004b2e:	e044      	b.n	8004bba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d018      	beq.n	8004b6a <RCCEx_PLLSAI1_Config+0x86>
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d825      	bhi.n	8004b88 <RCCEx_PLLSAI1_Config+0xa4>
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d002      	beq.n	8004b46 <RCCEx_PLLSAI1_Config+0x62>
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d009      	beq.n	8004b58 <RCCEx_PLLSAI1_Config+0x74>
 8004b44:	e020      	b.n	8004b88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b46:	4b60      	ldr	r3, [pc, #384]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d11d      	bne.n	8004b8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b56:	e01a      	b.n	8004b8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b58:	4b5b      	ldr	r3, [pc, #364]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d116      	bne.n	8004b92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b68:	e013      	b.n	8004b92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b6a:	4b57      	ldr	r3, [pc, #348]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10f      	bne.n	8004b96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b76:	4b54      	ldr	r3, [pc, #336]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d109      	bne.n	8004b96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b86:	e006      	b.n	8004b96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b8c:	e004      	b.n	8004b98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b8e:	bf00      	nop
 8004b90:	e002      	b.n	8004b98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b92:	bf00      	nop
 8004b94:	e000      	b.n	8004b98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b96:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10d      	bne.n	8004bba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6819      	ldr	r1, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	4944      	ldr	r1, [pc, #272]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d17d      	bne.n	8004cbc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bc0:	4b41      	ldr	r3, [pc, #260]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a40      	ldr	r2, [pc, #256]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bcc:	f7fd ff4a 	bl	8002a64 <HAL_GetTick>
 8004bd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bd2:	e009      	b.n	8004be8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bd4:	f7fd ff46 	bl	8002a64 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d902      	bls.n	8004be8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	73fb      	strb	r3, [r7, #15]
        break;
 8004be6:	e005      	b.n	8004bf4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004be8:	4b37      	ldr	r3, [pc, #220]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1ef      	bne.n	8004bd4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d160      	bne.n	8004cbc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d111      	bne.n	8004c24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c00:	4b31      	ldr	r3, [pc, #196]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004c08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6892      	ldr	r2, [r2, #8]
 8004c10:	0211      	lsls	r1, r2, #8
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68d2      	ldr	r2, [r2, #12]
 8004c16:	0912      	lsrs	r2, r2, #4
 8004c18:	0452      	lsls	r2, r2, #17
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	492a      	ldr	r1, [pc, #168]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	610b      	str	r3, [r1, #16]
 8004c22:	e027      	b.n	8004c74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d112      	bne.n	8004c50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c2a:	4b27      	ldr	r3, [pc, #156]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004c32:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6892      	ldr	r2, [r2, #8]
 8004c3a:	0211      	lsls	r1, r2, #8
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6912      	ldr	r2, [r2, #16]
 8004c40:	0852      	lsrs	r2, r2, #1
 8004c42:	3a01      	subs	r2, #1
 8004c44:	0552      	lsls	r2, r2, #21
 8004c46:	430a      	orrs	r2, r1
 8004c48:	491f      	ldr	r1, [pc, #124]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	610b      	str	r3, [r1, #16]
 8004c4e:	e011      	b.n	8004c74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c50:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6892      	ldr	r2, [r2, #8]
 8004c60:	0211      	lsls	r1, r2, #8
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6952      	ldr	r2, [r2, #20]
 8004c66:	0852      	lsrs	r2, r2, #1
 8004c68:	3a01      	subs	r2, #1
 8004c6a:	0652      	lsls	r2, r2, #25
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	4916      	ldr	r1, [pc, #88]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c74:	4b14      	ldr	r3, [pc, #80]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a13      	ldr	r2, [pc, #76]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c80:	f7fd fef0 	bl	8002a64 <HAL_GetTick>
 8004c84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c86:	e009      	b.n	8004c9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c88:	f7fd feec 	bl	8002a64 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d902      	bls.n	8004c9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	73fb      	strb	r3, [r7, #15]
          break;
 8004c9a:	e005      	b.n	8004ca8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0ef      	beq.n	8004c88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cae:	4b06      	ldr	r3, [pc, #24]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	4904      	ldr	r1, [pc, #16]	@ (8004cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000

08004ccc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cda:	4b6a      	ldr	r3, [pc, #424]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d018      	beq.n	8004d18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ce6:	4b67      	ldr	r3, [pc, #412]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f003 0203 	and.w	r2, r3, #3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d10d      	bne.n	8004d12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
       ||
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d009      	beq.n	8004d12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004cfe:	4b61      	ldr	r3, [pc, #388]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d047      	beq.n	8004da2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
 8004d16:	e044      	b.n	8004da2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d018      	beq.n	8004d52 <RCCEx_PLLSAI2_Config+0x86>
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d825      	bhi.n	8004d70 <RCCEx_PLLSAI2_Config+0xa4>
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d002      	beq.n	8004d2e <RCCEx_PLLSAI2_Config+0x62>
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d009      	beq.n	8004d40 <RCCEx_PLLSAI2_Config+0x74>
 8004d2c:	e020      	b.n	8004d70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d2e:	4b55      	ldr	r3, [pc, #340]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d11d      	bne.n	8004d76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d3e:	e01a      	b.n	8004d76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d40:	4b50      	ldr	r3, [pc, #320]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d116      	bne.n	8004d7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d50:	e013      	b.n	8004d7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d52:	4b4c      	ldr	r3, [pc, #304]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10f      	bne.n	8004d7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d5e:	4b49      	ldr	r3, [pc, #292]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d6e:	e006      	b.n	8004d7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
      break;
 8004d74:	e004      	b.n	8004d80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d76:	bf00      	nop
 8004d78:	e002      	b.n	8004d80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d7a:	bf00      	nop
 8004d7c:	e000      	b.n	8004d80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10d      	bne.n	8004da2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d86:	4b3f      	ldr	r3, [pc, #252]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6819      	ldr	r1, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	4939      	ldr	r1, [pc, #228]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d167      	bne.n	8004e78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004da8:	4b36      	ldr	r3, [pc, #216]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a35      	ldr	r2, [pc, #212]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db4:	f7fd fe56 	bl	8002a64 <HAL_GetTick>
 8004db8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dba:	e009      	b.n	8004dd0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dbc:	f7fd fe52 	bl	8002a64 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d902      	bls.n	8004dd0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	73fb      	strb	r3, [r7, #15]
        break;
 8004dce:	e005      	b.n	8004ddc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1ef      	bne.n	8004dbc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d14a      	bne.n	8004e78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d111      	bne.n	8004e0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004de8:	4b26      	ldr	r3, [pc, #152]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6892      	ldr	r2, [r2, #8]
 8004df8:	0211      	lsls	r1, r2, #8
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	68d2      	ldr	r2, [r2, #12]
 8004dfe:	0912      	lsrs	r2, r2, #4
 8004e00:	0452      	lsls	r2, r2, #17
 8004e02:	430a      	orrs	r2, r1
 8004e04:	491f      	ldr	r1, [pc, #124]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	614b      	str	r3, [r1, #20]
 8004e0a:	e011      	b.n	8004e30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6892      	ldr	r2, [r2, #8]
 8004e1c:	0211      	lsls	r1, r2, #8
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6912      	ldr	r2, [r2, #16]
 8004e22:	0852      	lsrs	r2, r2, #1
 8004e24:	3a01      	subs	r2, #1
 8004e26:	0652      	lsls	r2, r2, #25
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	4916      	ldr	r1, [pc, #88]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e30:	4b14      	ldr	r3, [pc, #80]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a13      	ldr	r2, [pc, #76]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3c:	f7fd fe12 	bl	8002a64 <HAL_GetTick>
 8004e40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e42:	e009      	b.n	8004e58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e44:	f7fd fe0e 	bl	8002a64 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d902      	bls.n	8004e58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	73fb      	strb	r3, [r7, #15]
          break;
 8004e56:	e005      	b.n	8004e64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e58:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0ef      	beq.n	8004e44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e6a:	4b06      	ldr	r3, [pc, #24]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e6c:	695a      	ldr	r2, [r3, #20]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	4904      	ldr	r1, [pc, #16]	@ (8004e84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000

08004e88 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e049      	b.n	8004f2e <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	795b      	ldrb	r3, [r3, #5]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d105      	bne.n	8004eb0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fd fb28 	bl	8002500 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0204 	orr.w	r2, r2, #4
 8004ec4:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed0:	2b40      	cmp	r3, #64	@ 0x40
 8004ed2:	d104      	bne.n	8004ede <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2204      	movs	r2, #4
 8004ed8:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e027      	b.n	8004f2e <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004ede:	f7fd fdc1 	bl	8002a64 <HAL_GetTick>
 8004ee2:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8004ee4:	e015      	b.n	8004f12 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004ee6:	f7fd fdbd 	bl	8002a64 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d90e      	bls.n	8004f12 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d007      	beq.n	8004f12 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2204      	movs	r2, #4
 8004f06:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e00d      	b.n	8004f2e <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d1e2      	bne.n	8004ee6 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d079      	beq.n	800503c <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7fd fb05 	bl	800256c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d058      	beq.n	800502a <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	22ca      	movs	r2, #202	@ 0xca
 8004f7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2253      	movs	r2, #83	@ 0x53
 8004f86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f9a5 	bl	80052d8 <RTC_EnterInitMode>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d127      	bne.n	8004fe8 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004fa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004faa:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6899      	ldr	r1, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68d2      	ldr	r2, [r2, #12]
 8004fd2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6919      	ldr	r1, [r3, #16]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	041a      	lsls	r2, r3, #16
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f9a9 	bl	8005340 <RTC_ExitInitMode>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d113      	bne.n	8005020 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0203 	bic.w	r2, r2, #3
 8005006:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69da      	ldr	r2, [r3, #28]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	22ff      	movs	r2, #255	@ 0xff
 8005026:	625a      	str	r2, [r3, #36]	@ 0x24
 8005028:	e001      	b.n	800502e <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d103      	bne.n	800503c <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800503c:	7bfb      	ldrb	r3, [r7, #15]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005046:	b590      	push	{r4, r7, lr}
 8005048:	b087      	sub	sp, #28
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_RTC_SetTime+0x1a>
 800505c:	2302      	movs	r3, #2
 800505e:	e08b      	b.n	8005178 <HAL_RTC_SetTime+0x132>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	22ca      	movs	r2, #202	@ 0xca
 8005076:	625a      	str	r2, [r3, #36]	@ 0x24
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2253      	movs	r2, #83	@ 0x53
 800507e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f929 	bl	80052d8 <RTC_EnterInitMode>
 8005086:	4603      	mov	r3, r0
 8005088:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800508a:	7cfb      	ldrb	r3, [r7, #19]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d163      	bne.n	8005158 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d126      	bne.n	80050e4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d102      	bne.n	80050aa <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2200      	movs	r2, #0
 80050a8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 f984 	bl	80053bc <RTC_ByteToBcd2>
 80050b4:	4603      	mov	r3, r0
 80050b6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 f97d 	bl	80053bc <RTC_ByteToBcd2>
 80050c2:	4603      	mov	r3, r0
 80050c4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050c6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	789b      	ldrb	r3, [r3, #2]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 f975 	bl	80053bc <RTC_ByteToBcd2>
 80050d2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050d4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	78db      	ldrb	r3, [r3, #3]
 80050dc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	e018      	b.n	8005116 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d102      	bne.n	80050f8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2200      	movs	r2, #0
 80050f6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005104:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800510a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	78db      	ldrb	r3, [r3, #3]
 8005110:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005120:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005124:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005134:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6899      	ldr	r1, [r3, #8]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	431a      	orrs	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f8f6 	bl	8005340 <RTC_ExitInitMode>
 8005154:	4603      	mov	r3, r0
 8005156:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	22ff      	movs	r2, #255	@ 0xff
 800515e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005160:	7cfb      	ldrb	r3, [r7, #19]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d103      	bne.n	800516e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005176:	7cfb      	ldrb	r3, [r7, #19]
}
 8005178:	4618      	mov	r0, r3
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	bd90      	pop	{r4, r7, pc}

08005180 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005180:	b590      	push	{r4, r7, lr}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_RTC_SetDate+0x1a>
 8005196:	2302      	movs	r3, #2
 8005198:	e075      	b.n	8005286 <HAL_RTC_SetDate+0x106>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10e      	bne.n	80051ce <HAL_RTC_SetDate+0x4e>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	f023 0310 	bic.w	r3, r3, #16
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	330a      	adds	r3, #10
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d11c      	bne.n	800520e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	78db      	ldrb	r3, [r3, #3]
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 f8ef 	bl	80053bc <RTC_ByteToBcd2>
 80051de:	4603      	mov	r3, r0
 80051e0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	785b      	ldrb	r3, [r3, #1]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 f8e8 	bl	80053bc <RTC_ByteToBcd2>
 80051ec:	4603      	mov	r3, r0
 80051ee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80051f0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	789b      	ldrb	r3, [r3, #2]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 f8e0 	bl	80053bc <RTC_ByteToBcd2>
 80051fc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051fe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	e00e      	b.n	800522c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	78db      	ldrb	r3, [r3, #3]
 8005212:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800521a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005220:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	22ca      	movs	r2, #202	@ 0xca
 8005232:	625a      	str	r2, [r3, #36]	@ 0x24
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2253      	movs	r2, #83	@ 0x53
 800523a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f84b 	bl	80052d8 <RTC_EnterInitMode>
 8005242:	4603      	mov	r3, r0
 8005244:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005246:	7cfb      	ldrb	r3, [r7, #19]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10c      	bne.n	8005266 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005256:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800525a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f86f 	bl	8005340 <RTC_ExitInitMode>
 8005262:	4603      	mov	r3, r0
 8005264:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	22ff      	movs	r2, #255	@ 0xff
 800526c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800526e:	7cfb      	ldrb	r3, [r7, #19]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d103      	bne.n	800527c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005284:	7cfb      	ldrb	r3, [r7, #19]
}
 8005286:	4618      	mov	r0, r3
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	bd90      	pop	{r4, r7, pc}
	...

08005290 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a0d      	ldr	r2, [pc, #52]	@ (80052d4 <HAL_RTC_WaitForSynchro+0x44>)
 800529e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80052a0:	f7fd fbe0 	bl	8002a64 <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052a6:	e009      	b.n	80052bc <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052a8:	f7fd fbdc 	bl	8002a64 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052b6:	d901      	bls.n	80052bc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e007      	b.n	80052cc <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0ee      	beq.n	80052a8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	0003ff5f 	.word	0x0003ff5f

080052d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d120      	bne.n	8005334 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f04f 32ff 	mov.w	r2, #4294967295
 80052fa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80052fc:	f7fd fbb2 	bl	8002a64 <HAL_GetTick>
 8005300:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005302:	e00d      	b.n	8005320 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005304:	f7fd fbae 	bl	8002a64 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005312:	d905      	bls.n	8005320 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2203      	movs	r2, #3
 800531c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d102      	bne.n	8005334 <RTC_EnterInitMode+0x5c>
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d1e7      	bne.n	8005304 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005334:	7bfb      	ldrb	r3, [r7, #15]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800534c:	4b1a      	ldr	r3, [pc, #104]	@ (80053b8 <RTC_ExitInitMode+0x78>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a19      	ldr	r2, [pc, #100]	@ (80053b8 <RTC_ExitInitMode+0x78>)
 8005352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005356:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005358:	4b17      	ldr	r3, [pc, #92]	@ (80053b8 <RTC_ExitInitMode+0x78>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10c      	bne.n	800537e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ff93 	bl	8005290 <HAL_RTC_WaitForSynchro>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01e      	beq.n	80053ae <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2203      	movs	r2, #3
 8005374:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	73fb      	strb	r3, [r7, #15]
 800537c:	e017      	b.n	80053ae <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800537e:	4b0e      	ldr	r3, [pc, #56]	@ (80053b8 <RTC_ExitInitMode+0x78>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	4a0d      	ldr	r2, [pc, #52]	@ (80053b8 <RTC_ExitInitMode+0x78>)
 8005384:	f023 0320 	bic.w	r3, r3, #32
 8005388:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff ff80 	bl	8005290 <HAL_RTC_WaitForSynchro>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d005      	beq.n	80053a2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2203      	movs	r2, #3
 800539a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80053a2:	4b05      	ldr	r3, [pc, #20]	@ (80053b8 <RTC_ExitInitMode+0x78>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	4a04      	ldr	r2, [pc, #16]	@ (80053b8 <RTC_ExitInitMode+0x78>)
 80053a8:	f043 0320 	orr.w	r3, r3, #32
 80053ac:	6093      	str	r3, [r2, #8]
  }

  return status;
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40002800 	.word	0x40002800

080053bc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80053ce:	e005      	b.n	80053dc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3301      	adds	r3, #1
 80053d4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80053d6:	7afb      	ldrb	r3, [r7, #11]
 80053d8:	3b0a      	subs	r3, #10
 80053da:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80053dc:	7afb      	ldrb	r3, [r7, #11]
 80053de:	2b09      	cmp	r3, #9
 80053e0:	d8f6      	bhi.n	80053d0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	7afb      	ldrb	r3, [r7, #11]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	b2db      	uxtb	r3, r3
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800540e:	2302      	movs	r3, #2
 8005410:	e04d      	b.n	80054ae <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	22ca      	movs	r2, #202	@ 0xca
 8005428:	625a      	str	r2, [r3, #36]	@ 0x24
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2253      	movs	r2, #83	@ 0x53
 8005430:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005440:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005450:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005452:	f7fd fb07 	bl	8002a64 <HAL_GetTick>
 8005456:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005458:	e015      	b.n	8005486 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800545a:	f7fd fb03 	bl	8002a64 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005468:	d90d      	bls.n	8005486 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	22ff      	movs	r2, #255	@ 0xff
 8005470:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2203      	movs	r2, #3
 8005476:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e013      	b.n	80054ae <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0e2      	beq.n	800545a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	22ff      	movs	r2, #255	@ 0xff
 800549a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80054c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005500 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80054c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80054c6:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80054e6:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7fc fed9 	bl	80022a0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80054f6:	bf00      	nop
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40010400 	.word	0x40010400

08005504 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e095      	b.n	8005642 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	2b00      	cmp	r3, #0
 800551c:	d108      	bne.n	8005530 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005526:	d009      	beq.n	800553c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	61da      	str	r2, [r3, #28]
 800552e:	e005      	b.n	800553c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fd f842 	bl	80025e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005572:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800557c:	d902      	bls.n	8005584 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	e002      	b.n	800558a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005584:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005588:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005592:	d007      	beq.n	80055a4 <HAL_SPI_Init+0xa0>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800559c:	d002      	beq.n	80055a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e6:	ea42 0103 	orr.w	r1, r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	0c1b      	lsrs	r3, r3, #16
 8005600:	f003 0204 	and.w	r2, r3, #4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005620:	ea42 0103 	orr.w	r1, r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b088      	sub	sp, #32
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	4613      	mov	r3, r2
 8005658:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800565a:	f7fd fa03 	bl	8002a64 <HAL_GetTick>
 800565e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d001      	beq.n	8005674 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005670:	2302      	movs	r3, #2
 8005672:	e15c      	b.n	800592e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_SPI_Transmit+0x36>
 800567a:	88fb      	ldrh	r3, [r7, #6]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e154      	b.n	800592e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_SPI_Transmit+0x48>
 800568e:	2302      	movs	r3, #2
 8005690:	e14d      	b.n	800592e <HAL_SPI_Transmit+0x2e4>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2203      	movs	r2, #3
 800569e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	88fa      	ldrh	r2, [r7, #6]
 80056b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e4:	d10f      	bne.n	8005706 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005704:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005710:	2b40      	cmp	r3, #64	@ 0x40
 8005712:	d007      	beq.n	8005724 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005722:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800572c:	d952      	bls.n	80057d4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_SPI_Transmit+0xf2>
 8005736:	8b7b      	ldrh	r3, [r7, #26]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d145      	bne.n	80057c8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005740:	881a      	ldrh	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574c:	1c9a      	adds	r2, r3, #2
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005760:	e032      	b.n	80057c8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b02      	cmp	r3, #2
 800576e:	d112      	bne.n	8005796 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005774:	881a      	ldrh	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005780:	1c9a      	adds	r2, r3, #2
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800578a:	b29b      	uxth	r3, r3
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005794:	e018      	b.n	80057c8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005796:	f7fd f965 	bl	8002a64 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d803      	bhi.n	80057ae <HAL_SPI_Transmit+0x164>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ac:	d102      	bne.n	80057b4 <HAL_SPI_Transmit+0x16a>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d109      	bne.n	80057c8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e0b2      	b.n	800592e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1c7      	bne.n	8005762 <HAL_SPI_Transmit+0x118>
 80057d2:	e083      	b.n	80058dc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_SPI_Transmit+0x198>
 80057dc:	8b7b      	ldrh	r3, [r7, #26]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d177      	bne.n	80058d2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d912      	bls.n	8005812 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f0:	881a      	ldrh	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fc:	1c9a      	adds	r2, r3, #2
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b02      	subs	r3, #2
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005810:	e05f      	b.n	80058d2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	330c      	adds	r3, #12
 800581c:	7812      	ldrb	r2, [r2, #0]
 800581e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005838:	e04b      	b.n	80058d2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b02      	cmp	r3, #2
 8005846:	d12b      	bne.n	80058a0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	d912      	bls.n	8005878 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005856:	881a      	ldrh	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005862:	1c9a      	adds	r2, r3, #2
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b02      	subs	r3, #2
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005876:	e02c      	b.n	80058d2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	330c      	adds	r3, #12
 8005882:	7812      	ldrb	r2, [r2, #0]
 8005884:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800589e:	e018      	b.n	80058d2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058a0:	f7fd f8e0 	bl	8002a64 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d803      	bhi.n	80058b8 <HAL_SPI_Transmit+0x26e>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b6:	d102      	bne.n	80058be <HAL_SPI_Transmit+0x274>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e02d      	b.n	800592e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1ae      	bne.n	800583a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 fcf5 	bl	80062d0 <SPI_EndRxTxTransaction>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800592c:	2300      	movs	r3, #0
  }
}
 800592e:	4618      	mov	r0, r3
 8005930:	3720      	adds	r7, #32
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b088      	sub	sp, #32
 800593a:	af02      	add	r7, sp, #8
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	603b      	str	r3, [r7, #0]
 8005942:	4613      	mov	r3, r2
 8005944:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b01      	cmp	r3, #1
 8005950:	d001      	beq.n	8005956 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005952:	2302      	movs	r3, #2
 8005954:	e123      	b.n	8005b9e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800595e:	d112      	bne.n	8005986 <HAL_SPI_Receive+0x50>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10e      	bne.n	8005986 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2204      	movs	r2, #4
 800596c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005970:	88fa      	ldrh	r2, [r7, #6]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	4613      	mov	r3, r2
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f912 	bl	8005ba6 <HAL_SPI_TransmitReceive>
 8005982:	4603      	mov	r3, r0
 8005984:	e10b      	b.n	8005b9e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005986:	f7fd f86d 	bl	8002a64 <HAL_GetTick>
 800598a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_SPI_Receive+0x62>
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e100      	b.n	8005b9e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_SPI_Receive+0x74>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e0f9      	b.n	8005b9e <HAL_SPI_Receive+0x268>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2204      	movs	r2, #4
 80059b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	88fa      	ldrh	r2, [r7, #6]
 80059ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	88fa      	ldrh	r2, [r7, #6]
 80059d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059fc:	d908      	bls.n	8005a10 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a0c:	605a      	str	r2, [r3, #4]
 8005a0e:	e007      	b.n	8005a20 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a1e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a28:	d10f      	bne.n	8005a4a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a54:	2b40      	cmp	r3, #64	@ 0x40
 8005a56:	d007      	beq.n	8005a68 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a70:	d875      	bhi.n	8005b5e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a72:	e037      	b.n	8005ae4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d117      	bne.n	8005ab2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f103 020c 	add.w	r2, r3, #12
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8e:	7812      	ldrb	r2, [r2, #0]
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005ab0:	e018      	b.n	8005ae4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ab2:	f7fc ffd7 	bl	8002a64 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d803      	bhi.n	8005aca <HAL_SPI_Receive+0x194>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac8:	d102      	bne.n	8005ad0 <HAL_SPI_Receive+0x19a>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d109      	bne.n	8005ae4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e05c      	b.n	8005b9e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1c1      	bne.n	8005a74 <HAL_SPI_Receive+0x13e>
 8005af0:	e03b      	b.n	8005b6a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d115      	bne.n	8005b2c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0a:	b292      	uxth	r2, r2
 8005b0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b12:	1c9a      	adds	r2, r3, #2
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005b2a:	e018      	b.n	8005b5e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b2c:	f7fc ff9a 	bl	8002a64 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d803      	bhi.n	8005b44 <HAL_SPI_Receive+0x20e>
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b42:	d102      	bne.n	8005b4a <HAL_SPI_Receive+0x214>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e01f      	b.n	8005b9e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1c3      	bne.n	8005af2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fb56 	bl	8006220 <SPI_EndRxTransaction>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
  }
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b08a      	sub	sp, #40	@ 0x28
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bb8:	f7fc ff54 	bl	8002a64 <HAL_GetTick>
 8005bbc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bc4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005bcc:	887b      	ldrh	r3, [r7, #2]
 8005bce:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005bd0:	887b      	ldrh	r3, [r7, #2]
 8005bd2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bd4:	7ffb      	ldrb	r3, [r7, #31]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d00c      	beq.n	8005bf4 <HAL_SPI_TransmitReceive+0x4e>
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005be0:	d106      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d102      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x4a>
 8005bea:	7ffb      	ldrb	r3, [r7, #31]
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d001      	beq.n	8005bf4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e1f3      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d005      	beq.n	8005c06 <HAL_SPI_TransmitReceive+0x60>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_SPI_TransmitReceive+0x60>
 8005c00:	887b      	ldrh	r3, [r7, #2]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e1e8      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x72>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e1e1      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x436>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d003      	beq.n	8005c34 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2205      	movs	r2, #5
 8005c30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	887a      	ldrh	r2, [r7, #2]
 8005c44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	887a      	ldrh	r2, [r7, #2]
 8005c4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	887a      	ldrh	r2, [r7, #2]
 8005c5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	887a      	ldrh	r2, [r7, #2]
 8005c60:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c76:	d802      	bhi.n	8005c7e <HAL_SPI_TransmitReceive+0xd8>
 8005c78:	8abb      	ldrh	r3, [r7, #20]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d908      	bls.n	8005c90 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c8c:	605a      	str	r2, [r3, #4]
 8005c8e:	e007      	b.n	8005ca0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c9e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005caa:	2b40      	cmp	r3, #64	@ 0x40
 8005cac:	d007      	beq.n	8005cbe <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cc6:	f240 8083 	bls.w	8005dd0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SPI_TransmitReceive+0x132>
 8005cd2:	8afb      	ldrh	r3, [r7, #22]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d16f      	bne.n	8005db8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cdc:	881a      	ldrh	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce8:	1c9a      	adds	r2, r3, #2
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cfc:	e05c      	b.n	8005db8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d11b      	bne.n	8005d44 <HAL_SPI_TransmitReceive+0x19e>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d016      	beq.n	8005d44 <HAL_SPI_TransmitReceive+0x19e>
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d113      	bne.n	8005d44 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d20:	881a      	ldrh	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2c:	1c9a      	adds	r2, r3, #2
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d11c      	bne.n	8005d8c <HAL_SPI_TransmitReceive+0x1e6>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d016      	beq.n	8005d8c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d68:	b292      	uxth	r2, r2
 8005d6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d70:	1c9a      	adds	r2, r3, #2
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d8c:	f7fc fe6a 	bl	8002a64 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d80d      	bhi.n	8005db8 <HAL_SPI_TransmitReceive+0x212>
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	d009      	beq.n	8005db8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e111      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d19d      	bne.n	8005cfe <HAL_SPI_TransmitReceive+0x158>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d197      	bne.n	8005cfe <HAL_SPI_TransmitReceive+0x158>
 8005dce:	e0e5      	b.n	8005f9c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <HAL_SPI_TransmitReceive+0x23a>
 8005dd8:	8afb      	ldrh	r3, [r7, #22]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	f040 80d1 	bne.w	8005f82 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d912      	bls.n	8005e10 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dee:	881a      	ldrh	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfa:	1c9a      	adds	r2, r3, #2
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b02      	subs	r3, #2
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e0e:	e0b8      	b.n	8005f82 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	330c      	adds	r3, #12
 8005e1a:	7812      	ldrb	r2, [r2, #0]
 8005e1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e36:	e0a4      	b.n	8005f82 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d134      	bne.n	8005eb0 <HAL_SPI_TransmitReceive+0x30a>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d02f      	beq.n	8005eb0 <HAL_SPI_TransmitReceive+0x30a>
 8005e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d12c      	bne.n	8005eb0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d912      	bls.n	8005e86 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e64:	881a      	ldrh	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e70:	1c9a      	adds	r2, r3, #2
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b02      	subs	r3, #2
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e84:	e012      	b.n	8005eac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	330c      	adds	r3, #12
 8005e90:	7812      	ldrb	r2, [r2, #0]
 8005e92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d148      	bne.n	8005f50 <HAL_SPI_TransmitReceive+0x3aa>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d042      	beq.n	8005f50 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d923      	bls.n	8005f1e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee0:	b292      	uxth	r2, r2
 8005ee2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee8:	1c9a      	adds	r2, r3, #2
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	3b02      	subs	r3, #2
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d81f      	bhi.n	8005f4c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f1a:	605a      	str	r2, [r3, #4]
 8005f1c:	e016      	b.n	8005f4c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f103 020c 	add.w	r2, r3, #12
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2a:	7812      	ldrb	r2, [r2, #0]
 8005f2c:	b2d2      	uxtb	r2, r2
 8005f2e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f50:	f7fc fd88 	bl	8002a64 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d803      	bhi.n	8005f68 <HAL_SPI_TransmitReceive+0x3c2>
 8005f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f66:	d102      	bne.n	8005f6e <HAL_SPI_TransmitReceive+0x3c8>
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d109      	bne.n	8005f82 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e02c      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f47f af55 	bne.w	8005e38 <HAL_SPI_TransmitReceive+0x292>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f47f af4e 	bne.w	8005e38 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f9c:	6a3a      	ldr	r2, [r7, #32]
 8005f9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f995 	bl	80062d0 <SPI_EndRxTxTransaction>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d008      	beq.n	8005fbe <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e00e      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005fda:	2300      	movs	r3, #0
  }
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3728      	adds	r7, #40	@ 0x28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ff4:	f7fc fd36 	bl	8002a64 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	4413      	add	r3, r2
 8006002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006004:	f7fc fd2e 	bl	8002a64 <HAL_GetTick>
 8006008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800600a:	4b39      	ldr	r3, [pc, #228]	@ (80060f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	015b      	lsls	r3, r3, #5
 8006010:	0d1b      	lsrs	r3, r3, #20
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	fb02 f303 	mul.w	r3, r2, r3
 8006018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800601a:	e054      	b.n	80060c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006022:	d050      	beq.n	80060c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006024:	f7fc fd1e 	bl	8002a64 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	429a      	cmp	r2, r3
 8006032:	d902      	bls.n	800603a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d13d      	bne.n	80060b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006052:	d111      	bne.n	8006078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800605c:	d004      	beq.n	8006068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006066:	d107      	bne.n	8006078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006080:	d10f      	bne.n	80060a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e017      	b.n	80060e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4013      	ands	r3, r2
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	bf0c      	ite	eq
 80060d6:	2301      	moveq	r3, #1
 80060d8:	2300      	movne	r3, #0
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	461a      	mov	r2, r3
 80060de:	79fb      	ldrb	r3, [r7, #7]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d19b      	bne.n	800601c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3720      	adds	r7, #32
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	200000bc 	.word	0x200000bc

080060f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08a      	sub	sp, #40	@ 0x28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006102:	2300      	movs	r3, #0
 8006104:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006106:	f7fc fcad 	bl	8002a64 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610e:	1a9b      	subs	r3, r3, r2
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	4413      	add	r3, r2
 8006114:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006116:	f7fc fca5 	bl	8002a64 <HAL_GetTick>
 800611a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	330c      	adds	r3, #12
 8006122:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006124:	4b3d      	ldr	r3, [pc, #244]	@ (800621c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	00da      	lsls	r2, r3, #3
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	0d1b      	lsrs	r3, r3, #20
 8006134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006136:	fb02 f303 	mul.w	r3, r2, r3
 800613a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800613c:	e060      	b.n	8006200 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006144:	d107      	bne.n	8006156 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d104      	bne.n	8006156 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006154:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615c:	d050      	beq.n	8006200 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800615e:	f7fc fc81 	bl	8002a64 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800616a:	429a      	cmp	r2, r3
 800616c:	d902      	bls.n	8006174 <SPI_WaitFifoStateUntilTimeout+0x80>
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	d13d      	bne.n	80061f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006182:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800618c:	d111      	bne.n	80061b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006196:	d004      	beq.n	80061a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061a0:	d107      	bne.n	80061b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ba:	d10f      	bne.n	80061dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e010      	b.n	8006212 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4013      	ands	r3, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	429a      	cmp	r2, r3
 800620e:	d196      	bne.n	800613e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3728      	adds	r7, #40	@ 0x28
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	200000bc 	.word	0x200000bc

08006220 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af02      	add	r7, sp, #8
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006234:	d111      	bne.n	800625a <SPI_EndRxTransaction+0x3a>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800623e:	d004      	beq.n	800624a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006248:	d107      	bne.n	800625a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006258:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2200      	movs	r2, #0
 8006262:	2180      	movs	r1, #128	@ 0x80
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f7ff febd 	bl	8005fe4 <SPI_WaitFlagStateUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d007      	beq.n	8006280 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006274:	f043 0220 	orr.w	r2, r3, #32
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e023      	b.n	80062c8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006288:	d11d      	bne.n	80062c6 <SPI_EndRxTransaction+0xa6>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006292:	d004      	beq.n	800629e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800629c:	d113      	bne.n	80062c6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f7ff ff22 	bl	80060f4 <SPI_WaitFifoStateUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d007      	beq.n	80062c6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ba:	f043 0220 	orr.w	r2, r3, #32
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e000      	b.n	80062c8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f7ff ff03 	bl	80060f4 <SPI_WaitFifoStateUntilTimeout>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f8:	f043 0220 	orr.w	r2, r3, #32
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e027      	b.n	8006354 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2200      	movs	r2, #0
 800630c:	2180      	movs	r1, #128	@ 0x80
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7ff fe68 	bl	8005fe4 <SPI_WaitFlagStateUntilTimeout>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800631e:	f043 0220 	orr.w	r2, r3, #32
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e014      	b.n	8006354 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2200      	movs	r2, #0
 8006332:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7ff fedc 	bl	80060f4 <SPI_WaitFifoStateUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d007      	beq.n	8006352 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006346:	f043 0220 	orr.w	r2, r3, #32
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e000      	b.n	8006354 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e040      	b.n	80063f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fc f984 	bl	800268c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2224      	movs	r2, #36	@ 0x24
 8006388:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0201 	bic.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fb6a 	bl	8006a7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f8af 	bl	800650c <UART_SetConfig>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e01b      	b.n	80063f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0201 	orr.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fbe9 	bl	8006bc0 <UART_CheckIdleState>
 80063ee:	4603      	mov	r3, r0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	@ 0x28
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	4613      	mov	r3, r2
 8006406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800640c:	2b20      	cmp	r3, #32
 800640e:	d177      	bne.n	8006500 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_UART_Transmit+0x24>
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e070      	b.n	8006502 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2221      	movs	r2, #33	@ 0x21
 800642c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800642e:	f7fc fb19 	bl	8002a64 <HAL_GetTick>
 8006432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	88fa      	ldrh	r2, [r7, #6]
 8006438:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	88fa      	ldrh	r2, [r7, #6]
 8006440:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800644c:	d108      	bne.n	8006460 <HAL_UART_Transmit+0x68>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d104      	bne.n	8006460 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006456:	2300      	movs	r3, #0
 8006458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	e003      	b.n	8006468 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006464:	2300      	movs	r3, #0
 8006466:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006468:	e02f      	b.n	80064ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2200      	movs	r2, #0
 8006472:	2180      	movs	r1, #128	@ 0x80
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 fc4b 	bl	8006d10 <UART_WaitOnFlagUntilTimeout>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d004      	beq.n	800648a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e03b      	b.n	8006502 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10b      	bne.n	80064a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	881a      	ldrh	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800649c:	b292      	uxth	r2, r2
 800649e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	3302      	adds	r3, #2
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	e007      	b.n	80064b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	781a      	ldrb	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	3301      	adds	r3, #1
 80064b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1c9      	bne.n	800646a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2200      	movs	r2, #0
 80064de:	2140      	movs	r1, #64	@ 0x40
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 fc15 	bl	8006d10 <UART_WaitOnFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d004      	beq.n	80064f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2220      	movs	r2, #32
 80064f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e005      	b.n	8006502 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2220      	movs	r2, #32
 80064fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	e000      	b.n	8006502 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006500:	2302      	movs	r3, #2
  }
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800650c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006510:	b08a      	sub	sp, #40	@ 0x28
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	431a      	orrs	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	431a      	orrs	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	4313      	orrs	r3, r2
 8006532:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	4ba4      	ldr	r3, [pc, #656]	@ (80067cc <UART_SetConfig+0x2c0>)
 800653c:	4013      	ands	r3, r2
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	6812      	ldr	r2, [r2, #0]
 8006542:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006544:	430b      	orrs	r3, r1
 8006546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a99      	ldr	r2, [pc, #612]	@ (80067d0 <UART_SetConfig+0x2c4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006574:	4313      	orrs	r3, r2
 8006576:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006588:	430a      	orrs	r2, r1
 800658a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a90      	ldr	r2, [pc, #576]	@ (80067d4 <UART_SetConfig+0x2c8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d126      	bne.n	80065e4 <UART_SetConfig+0xd8>
 8006596:	4b90      	ldr	r3, [pc, #576]	@ (80067d8 <UART_SetConfig+0x2cc>)
 8006598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800659c:	f003 0303 	and.w	r3, r3, #3
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d81b      	bhi.n	80065dc <UART_SetConfig+0xd0>
 80065a4:	a201      	add	r2, pc, #4	@ (adr r2, 80065ac <UART_SetConfig+0xa0>)
 80065a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065aa:	bf00      	nop
 80065ac:	080065bd 	.word	0x080065bd
 80065b0:	080065cd 	.word	0x080065cd
 80065b4:	080065c5 	.word	0x080065c5
 80065b8:	080065d5 	.word	0x080065d5
 80065bc:	2301      	movs	r3, #1
 80065be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065c2:	e116      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80065c4:	2302      	movs	r3, #2
 80065c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ca:	e112      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80065cc:	2304      	movs	r3, #4
 80065ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065d2:	e10e      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80065d4:	2308      	movs	r3, #8
 80065d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065da:	e10a      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80065dc:	2310      	movs	r3, #16
 80065de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e2:	e106      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a7c      	ldr	r2, [pc, #496]	@ (80067dc <UART_SetConfig+0x2d0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d138      	bne.n	8006660 <UART_SetConfig+0x154>
 80065ee:	4b7a      	ldr	r3, [pc, #488]	@ (80067d8 <UART_SetConfig+0x2cc>)
 80065f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f4:	f003 030c 	and.w	r3, r3, #12
 80065f8:	2b0c      	cmp	r3, #12
 80065fa:	d82d      	bhi.n	8006658 <UART_SetConfig+0x14c>
 80065fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006604 <UART_SetConfig+0xf8>)
 80065fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006602:	bf00      	nop
 8006604:	08006639 	.word	0x08006639
 8006608:	08006659 	.word	0x08006659
 800660c:	08006659 	.word	0x08006659
 8006610:	08006659 	.word	0x08006659
 8006614:	08006649 	.word	0x08006649
 8006618:	08006659 	.word	0x08006659
 800661c:	08006659 	.word	0x08006659
 8006620:	08006659 	.word	0x08006659
 8006624:	08006641 	.word	0x08006641
 8006628:	08006659 	.word	0x08006659
 800662c:	08006659 	.word	0x08006659
 8006630:	08006659 	.word	0x08006659
 8006634:	08006651 	.word	0x08006651
 8006638:	2300      	movs	r3, #0
 800663a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800663e:	e0d8      	b.n	80067f2 <UART_SetConfig+0x2e6>
 8006640:	2302      	movs	r3, #2
 8006642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006646:	e0d4      	b.n	80067f2 <UART_SetConfig+0x2e6>
 8006648:	2304      	movs	r3, #4
 800664a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800664e:	e0d0      	b.n	80067f2 <UART_SetConfig+0x2e6>
 8006650:	2308      	movs	r3, #8
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006656:	e0cc      	b.n	80067f2 <UART_SetConfig+0x2e6>
 8006658:	2310      	movs	r3, #16
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665e:	e0c8      	b.n	80067f2 <UART_SetConfig+0x2e6>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a5e      	ldr	r2, [pc, #376]	@ (80067e0 <UART_SetConfig+0x2d4>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d125      	bne.n	80066b6 <UART_SetConfig+0x1aa>
 800666a:	4b5b      	ldr	r3, [pc, #364]	@ (80067d8 <UART_SetConfig+0x2cc>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006670:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006674:	2b30      	cmp	r3, #48	@ 0x30
 8006676:	d016      	beq.n	80066a6 <UART_SetConfig+0x19a>
 8006678:	2b30      	cmp	r3, #48	@ 0x30
 800667a:	d818      	bhi.n	80066ae <UART_SetConfig+0x1a2>
 800667c:	2b20      	cmp	r3, #32
 800667e:	d00a      	beq.n	8006696 <UART_SetConfig+0x18a>
 8006680:	2b20      	cmp	r3, #32
 8006682:	d814      	bhi.n	80066ae <UART_SetConfig+0x1a2>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <UART_SetConfig+0x182>
 8006688:	2b10      	cmp	r3, #16
 800668a:	d008      	beq.n	800669e <UART_SetConfig+0x192>
 800668c:	e00f      	b.n	80066ae <UART_SetConfig+0x1a2>
 800668e:	2300      	movs	r3, #0
 8006690:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006694:	e0ad      	b.n	80067f2 <UART_SetConfig+0x2e6>
 8006696:	2302      	movs	r3, #2
 8006698:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800669c:	e0a9      	b.n	80067f2 <UART_SetConfig+0x2e6>
 800669e:	2304      	movs	r3, #4
 80066a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066a4:	e0a5      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80066a6:	2308      	movs	r3, #8
 80066a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ac:	e0a1      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80066ae:	2310      	movs	r3, #16
 80066b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066b4:	e09d      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a4a      	ldr	r2, [pc, #296]	@ (80067e4 <UART_SetConfig+0x2d8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d125      	bne.n	800670c <UART_SetConfig+0x200>
 80066c0:	4b45      	ldr	r3, [pc, #276]	@ (80067d8 <UART_SetConfig+0x2cc>)
 80066c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80066cc:	d016      	beq.n	80066fc <UART_SetConfig+0x1f0>
 80066ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80066d0:	d818      	bhi.n	8006704 <UART_SetConfig+0x1f8>
 80066d2:	2b80      	cmp	r3, #128	@ 0x80
 80066d4:	d00a      	beq.n	80066ec <UART_SetConfig+0x1e0>
 80066d6:	2b80      	cmp	r3, #128	@ 0x80
 80066d8:	d814      	bhi.n	8006704 <UART_SetConfig+0x1f8>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <UART_SetConfig+0x1d8>
 80066de:	2b40      	cmp	r3, #64	@ 0x40
 80066e0:	d008      	beq.n	80066f4 <UART_SetConfig+0x1e8>
 80066e2:	e00f      	b.n	8006704 <UART_SetConfig+0x1f8>
 80066e4:	2300      	movs	r3, #0
 80066e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ea:	e082      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80066ec:	2302      	movs	r3, #2
 80066ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066f2:	e07e      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80066f4:	2304      	movs	r3, #4
 80066f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066fa:	e07a      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80066fc:	2308      	movs	r3, #8
 80066fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006702:	e076      	b.n	80067f2 <UART_SetConfig+0x2e6>
 8006704:	2310      	movs	r3, #16
 8006706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800670a:	e072      	b.n	80067f2 <UART_SetConfig+0x2e6>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a35      	ldr	r2, [pc, #212]	@ (80067e8 <UART_SetConfig+0x2dc>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d12a      	bne.n	800676c <UART_SetConfig+0x260>
 8006716:	4b30      	ldr	r3, [pc, #192]	@ (80067d8 <UART_SetConfig+0x2cc>)
 8006718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800671c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006720:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006724:	d01a      	beq.n	800675c <UART_SetConfig+0x250>
 8006726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800672a:	d81b      	bhi.n	8006764 <UART_SetConfig+0x258>
 800672c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006730:	d00c      	beq.n	800674c <UART_SetConfig+0x240>
 8006732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006736:	d815      	bhi.n	8006764 <UART_SetConfig+0x258>
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <UART_SetConfig+0x238>
 800673c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006740:	d008      	beq.n	8006754 <UART_SetConfig+0x248>
 8006742:	e00f      	b.n	8006764 <UART_SetConfig+0x258>
 8006744:	2300      	movs	r3, #0
 8006746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800674a:	e052      	b.n	80067f2 <UART_SetConfig+0x2e6>
 800674c:	2302      	movs	r3, #2
 800674e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006752:	e04e      	b.n	80067f2 <UART_SetConfig+0x2e6>
 8006754:	2304      	movs	r3, #4
 8006756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800675a:	e04a      	b.n	80067f2 <UART_SetConfig+0x2e6>
 800675c:	2308      	movs	r3, #8
 800675e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006762:	e046      	b.n	80067f2 <UART_SetConfig+0x2e6>
 8006764:	2310      	movs	r3, #16
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800676a:	e042      	b.n	80067f2 <UART_SetConfig+0x2e6>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a17      	ldr	r2, [pc, #92]	@ (80067d0 <UART_SetConfig+0x2c4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d13a      	bne.n	80067ec <UART_SetConfig+0x2e0>
 8006776:	4b18      	ldr	r3, [pc, #96]	@ (80067d8 <UART_SetConfig+0x2cc>)
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800677c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006780:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006784:	d01a      	beq.n	80067bc <UART_SetConfig+0x2b0>
 8006786:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800678a:	d81b      	bhi.n	80067c4 <UART_SetConfig+0x2b8>
 800678c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006790:	d00c      	beq.n	80067ac <UART_SetConfig+0x2a0>
 8006792:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006796:	d815      	bhi.n	80067c4 <UART_SetConfig+0x2b8>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <UART_SetConfig+0x298>
 800679c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a0:	d008      	beq.n	80067b4 <UART_SetConfig+0x2a8>
 80067a2:	e00f      	b.n	80067c4 <UART_SetConfig+0x2b8>
 80067a4:	2300      	movs	r3, #0
 80067a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067aa:	e022      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80067ac:	2302      	movs	r3, #2
 80067ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067b2:	e01e      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80067b4:	2304      	movs	r3, #4
 80067b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ba:	e01a      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80067bc:	2308      	movs	r3, #8
 80067be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067c2:	e016      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80067c4:	2310      	movs	r3, #16
 80067c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ca:	e012      	b.n	80067f2 <UART_SetConfig+0x2e6>
 80067cc:	efff69f3 	.word	0xefff69f3
 80067d0:	40008000 	.word	0x40008000
 80067d4:	40013800 	.word	0x40013800
 80067d8:	40021000 	.word	0x40021000
 80067dc:	40004400 	.word	0x40004400
 80067e0:	40004800 	.word	0x40004800
 80067e4:	40004c00 	.word	0x40004c00
 80067e8:	40005000 	.word	0x40005000
 80067ec:	2310      	movs	r3, #16
 80067ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a9f      	ldr	r2, [pc, #636]	@ (8006a74 <UART_SetConfig+0x568>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d17a      	bne.n	80068f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006800:	2b08      	cmp	r3, #8
 8006802:	d824      	bhi.n	800684e <UART_SetConfig+0x342>
 8006804:	a201      	add	r2, pc, #4	@ (adr r2, 800680c <UART_SetConfig+0x300>)
 8006806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680a:	bf00      	nop
 800680c:	08006831 	.word	0x08006831
 8006810:	0800684f 	.word	0x0800684f
 8006814:	08006839 	.word	0x08006839
 8006818:	0800684f 	.word	0x0800684f
 800681c:	0800683f 	.word	0x0800683f
 8006820:	0800684f 	.word	0x0800684f
 8006824:	0800684f 	.word	0x0800684f
 8006828:	0800684f 	.word	0x0800684f
 800682c:	08006847 	.word	0x08006847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006830:	f7fd fde2 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 8006834:	61f8      	str	r0, [r7, #28]
        break;
 8006836:	e010      	b.n	800685a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006838:	4b8f      	ldr	r3, [pc, #572]	@ (8006a78 <UART_SetConfig+0x56c>)
 800683a:	61fb      	str	r3, [r7, #28]
        break;
 800683c:	e00d      	b.n	800685a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800683e:	f7fd fd43 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006842:	61f8      	str	r0, [r7, #28]
        break;
 8006844:	e009      	b.n	800685a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800684a:	61fb      	str	r3, [r7, #28]
        break;
 800684c:	e005      	b.n	800685a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006858:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80fb 	beq.w	8006a58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	4613      	mov	r3, r2
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	4413      	add	r3, r2
 800686c:	69fa      	ldr	r2, [r7, #28]
 800686e:	429a      	cmp	r2, r3
 8006870:	d305      	bcc.n	800687e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	429a      	cmp	r2, r3
 800687c:	d903      	bls.n	8006886 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006884:	e0e8      	b.n	8006a58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	2200      	movs	r2, #0
 800688a:	461c      	mov	r4, r3
 800688c:	4615      	mov	r5, r2
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	022b      	lsls	r3, r5, #8
 8006898:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800689c:	0222      	lsls	r2, r4, #8
 800689e:	68f9      	ldr	r1, [r7, #12]
 80068a0:	6849      	ldr	r1, [r1, #4]
 80068a2:	0849      	lsrs	r1, r1, #1
 80068a4:	2000      	movs	r0, #0
 80068a6:	4688      	mov	r8, r1
 80068a8:	4681      	mov	r9, r0
 80068aa:	eb12 0a08 	adds.w	sl, r2, r8
 80068ae:	eb43 0b09 	adc.w	fp, r3, r9
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	603b      	str	r3, [r7, #0]
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c0:	4650      	mov	r0, sl
 80068c2:	4659      	mov	r1, fp
 80068c4:	f7f9 fcd4 	bl	8000270 <__aeabi_uldivmod>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4613      	mov	r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068d6:	d308      	bcc.n	80068ea <UART_SetConfig+0x3de>
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068de:	d204      	bcs.n	80068ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	60da      	str	r2, [r3, #12]
 80068e8:	e0b6      	b.n	8006a58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80068f0:	e0b2      	b.n	8006a58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068fa:	d15e      	bne.n	80069ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80068fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006900:	2b08      	cmp	r3, #8
 8006902:	d828      	bhi.n	8006956 <UART_SetConfig+0x44a>
 8006904:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <UART_SetConfig+0x400>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	08006931 	.word	0x08006931
 8006910:	08006939 	.word	0x08006939
 8006914:	08006941 	.word	0x08006941
 8006918:	08006957 	.word	0x08006957
 800691c:	08006947 	.word	0x08006947
 8006920:	08006957 	.word	0x08006957
 8006924:	08006957 	.word	0x08006957
 8006928:	08006957 	.word	0x08006957
 800692c:	0800694f 	.word	0x0800694f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006930:	f7fd fd62 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 8006934:	61f8      	str	r0, [r7, #28]
        break;
 8006936:	e014      	b.n	8006962 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006938:	f7fd fd74 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 800693c:	61f8      	str	r0, [r7, #28]
        break;
 800693e:	e010      	b.n	8006962 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006940:	4b4d      	ldr	r3, [pc, #308]	@ (8006a78 <UART_SetConfig+0x56c>)
 8006942:	61fb      	str	r3, [r7, #28]
        break;
 8006944:	e00d      	b.n	8006962 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006946:	f7fd fcbf 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 800694a:	61f8      	str	r0, [r7, #28]
        break;
 800694c:	e009      	b.n	8006962 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800694e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006952:	61fb      	str	r3, [r7, #28]
        break;
 8006954:	e005      	b.n	8006962 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d077      	beq.n	8006a58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	005a      	lsls	r2, r3, #1
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	441a      	add	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	fbb2 f3f3 	udiv	r3, r2, r3
 800697c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2b0f      	cmp	r3, #15
 8006982:	d916      	bls.n	80069b2 <UART_SetConfig+0x4a6>
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800698a:	d212      	bcs.n	80069b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	b29b      	uxth	r3, r3
 8006990:	f023 030f 	bic.w	r3, r3, #15
 8006994:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	085b      	lsrs	r3, r3, #1
 800699a:	b29b      	uxth	r3, r3
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	8afb      	ldrh	r3, [r7, #22]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	8afa      	ldrh	r2, [r7, #22]
 80069ae:	60da      	str	r2, [r3, #12]
 80069b0:	e052      	b.n	8006a58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80069b8:	e04e      	b.n	8006a58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d827      	bhi.n	8006a12 <UART_SetConfig+0x506>
 80069c2:	a201      	add	r2, pc, #4	@ (adr r2, 80069c8 <UART_SetConfig+0x4bc>)
 80069c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c8:	080069ed 	.word	0x080069ed
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	08006a13 	.word	0x08006a13
 80069d8:	08006a03 	.word	0x08006a03
 80069dc:	08006a13 	.word	0x08006a13
 80069e0:	08006a13 	.word	0x08006a13
 80069e4:	08006a13 	.word	0x08006a13
 80069e8:	08006a0b 	.word	0x08006a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069ec:	f7fd fd04 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 80069f0:	61f8      	str	r0, [r7, #28]
        break;
 80069f2:	e014      	b.n	8006a1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069f4:	f7fd fd16 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 80069f8:	61f8      	str	r0, [r7, #28]
        break;
 80069fa:	e010      	b.n	8006a1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006a78 <UART_SetConfig+0x56c>)
 80069fe:	61fb      	str	r3, [r7, #28]
        break;
 8006a00:	e00d      	b.n	8006a1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a02:	f7fd fc61 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006a06:	61f8      	str	r0, [r7, #28]
        break;
 8006a08:	e009      	b.n	8006a1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a0e:	61fb      	str	r3, [r7, #28]
        break;
 8006a10:	e005      	b.n	8006a1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a1c:	bf00      	nop
    }

    if (pclk != 0U)
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d019      	beq.n	8006a58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	085a      	lsrs	r2, r3, #1
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	441a      	add	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2b0f      	cmp	r3, #15
 8006a3c:	d909      	bls.n	8006a52 <UART_SetConfig+0x546>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a44:	d205      	bcs.n	8006a52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60da      	str	r2, [r3, #12]
 8006a50:	e002      	b.n	8006a58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006a64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3728      	adds	r7, #40	@ 0x28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a72:	bf00      	nop
 8006a74:	40008000 	.word	0x40008000
 8006a78:	00f42400 	.word	0x00f42400

08006a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a88:	f003 0308 	and.w	r3, r3, #8
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00a      	beq.n	8006aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00a      	beq.n	8006aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aee:	f003 0304 	and.w	r3, r3, #4
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00a      	beq.n	8006b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b10:	f003 0310 	and.w	r3, r3, #16
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00a      	beq.n	8006b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b32:	f003 0320 	and.w	r3, r3, #32
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01a      	beq.n	8006b92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b7a:	d10a      	bne.n	8006b92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	605a      	str	r2, [r3, #4]
  }
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b098      	sub	sp, #96	@ 0x60
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bd0:	f7fb ff48 	bl	8002a64 <HAL_GetTick>
 8006bd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0308 	and.w	r3, r3, #8
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d12e      	bne.n	8006c42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006be4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bec:	2200      	movs	r2, #0
 8006bee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f88c 	bl	8006d10 <UART_WaitOnFlagUntilTimeout>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d021      	beq.n	8006c42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e6      	bne.n	8006bfe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e062      	b.n	8006d08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d149      	bne.n	8006ce4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f856 	bl	8006d10 <UART_WaitOnFlagUntilTimeout>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d03c      	beq.n	8006ce4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	623b      	str	r3, [r7, #32]
   return(result);
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	461a      	mov	r2, r3
 8006c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e6      	bne.n	8006c6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 0301 	bic.w	r3, r3, #1
 8006cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3308      	adds	r3, #8
 8006cba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cbc:	61fa      	str	r2, [r7, #28]
 8006cbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	69b9      	ldr	r1, [r7, #24]
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e5      	bne.n	8006c9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e011      	b.n	8006d08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3758      	adds	r7, #88	@ 0x58
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d20:	e04f      	b.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d28:	d04b      	beq.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d2a:	f7fb fe9b 	bl	8002a64 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d302      	bcc.n	8006d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e04e      	b.n	8006de2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d037      	beq.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b80      	cmp	r3, #128	@ 0x80
 8006d56:	d034      	beq.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b40      	cmp	r3, #64	@ 0x40
 8006d5c:	d031      	beq.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d110      	bne.n	8006d8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2208      	movs	r2, #8
 8006d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 f838 	bl	8006dea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e029      	b.n	8006de2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d9c:	d111      	bne.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 f81e 	bl	8006dea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e00f      	b.n	8006de2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	bf0c      	ite	eq
 8006dd2:	2301      	moveq	r3, #1
 8006dd4:	2300      	movne	r3, #0
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	461a      	mov	r2, r3
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d0a0      	beq.n	8006d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b095      	sub	sp, #84	@ 0x54
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e10:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e6      	bne.n	8006df2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	f023 0301 	bic.w	r3, r3, #1
 8006e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3308      	adds	r3, #8
 8006e42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e5      	bne.n	8006e24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d118      	bne.n	8006e92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f023 0310 	bic.w	r3, r3, #16
 8006e74:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e7e:	61bb      	str	r3, [r7, #24]
 8006e80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	6979      	ldr	r1, [r7, #20]
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e6      	bne.n	8006e60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ea6:	bf00      	nop
 8006ea8:	3754      	adds	r7, #84	@ 0x54
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
	...

08006eb4 <std>:
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	b510      	push	{r4, lr}
 8006eb8:	4604      	mov	r4, r0
 8006eba:	e9c0 3300 	strd	r3, r3, [r0]
 8006ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ec2:	6083      	str	r3, [r0, #8]
 8006ec4:	8181      	strh	r1, [r0, #12]
 8006ec6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ec8:	81c2      	strh	r2, [r0, #14]
 8006eca:	6183      	str	r3, [r0, #24]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	2208      	movs	r2, #8
 8006ed0:	305c      	adds	r0, #92	@ 0x5c
 8006ed2:	f000 f9f9 	bl	80072c8 <memset>
 8006ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f0c <std+0x58>)
 8006ed8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006eda:	4b0d      	ldr	r3, [pc, #52]	@ (8006f10 <std+0x5c>)
 8006edc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ede:	4b0d      	ldr	r3, [pc, #52]	@ (8006f14 <std+0x60>)
 8006ee0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f18 <std+0x64>)
 8006ee4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f1c <std+0x68>)
 8006ee8:	6224      	str	r4, [r4, #32]
 8006eea:	429c      	cmp	r4, r3
 8006eec:	d006      	beq.n	8006efc <std+0x48>
 8006eee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ef2:	4294      	cmp	r4, r2
 8006ef4:	d002      	beq.n	8006efc <std+0x48>
 8006ef6:	33d0      	adds	r3, #208	@ 0xd0
 8006ef8:	429c      	cmp	r4, r3
 8006efa:	d105      	bne.n	8006f08 <std+0x54>
 8006efc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f04:	f000 ba58 	b.w	80073b8 <__retarget_lock_init_recursive>
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	bf00      	nop
 8006f0c:	08007119 	.word	0x08007119
 8006f10:	0800713b 	.word	0x0800713b
 8006f14:	08007173 	.word	0x08007173
 8006f18:	08007197 	.word	0x08007197
 8006f1c:	20002384 	.word	0x20002384

08006f20 <stdio_exit_handler>:
 8006f20:	4a02      	ldr	r2, [pc, #8]	@ (8006f2c <stdio_exit_handler+0xc>)
 8006f22:	4903      	ldr	r1, [pc, #12]	@ (8006f30 <stdio_exit_handler+0x10>)
 8006f24:	4803      	ldr	r0, [pc, #12]	@ (8006f34 <stdio_exit_handler+0x14>)
 8006f26:	f000 b869 	b.w	8006ffc <_fwalk_sglue>
 8006f2a:	bf00      	nop
 8006f2c:	200000c8 	.word	0x200000c8
 8006f30:	08007c71 	.word	0x08007c71
 8006f34:	200000d8 	.word	0x200000d8

08006f38 <cleanup_stdio>:
 8006f38:	6841      	ldr	r1, [r0, #4]
 8006f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f6c <cleanup_stdio+0x34>)
 8006f3c:	4299      	cmp	r1, r3
 8006f3e:	b510      	push	{r4, lr}
 8006f40:	4604      	mov	r4, r0
 8006f42:	d001      	beq.n	8006f48 <cleanup_stdio+0x10>
 8006f44:	f000 fe94 	bl	8007c70 <_fflush_r>
 8006f48:	68a1      	ldr	r1, [r4, #8]
 8006f4a:	4b09      	ldr	r3, [pc, #36]	@ (8006f70 <cleanup_stdio+0x38>)
 8006f4c:	4299      	cmp	r1, r3
 8006f4e:	d002      	beq.n	8006f56 <cleanup_stdio+0x1e>
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 fe8d 	bl	8007c70 <_fflush_r>
 8006f56:	68e1      	ldr	r1, [r4, #12]
 8006f58:	4b06      	ldr	r3, [pc, #24]	@ (8006f74 <cleanup_stdio+0x3c>)
 8006f5a:	4299      	cmp	r1, r3
 8006f5c:	d004      	beq.n	8006f68 <cleanup_stdio+0x30>
 8006f5e:	4620      	mov	r0, r4
 8006f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f64:	f000 be84 	b.w	8007c70 <_fflush_r>
 8006f68:	bd10      	pop	{r4, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20002384 	.word	0x20002384
 8006f70:	200023ec 	.word	0x200023ec
 8006f74:	20002454 	.word	0x20002454

08006f78 <global_stdio_init.part.0>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa8 <global_stdio_init.part.0+0x30>)
 8006f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8006fac <global_stdio_init.part.0+0x34>)
 8006f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8006fb0 <global_stdio_init.part.0+0x38>)
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	4620      	mov	r0, r4
 8006f84:	2200      	movs	r2, #0
 8006f86:	2104      	movs	r1, #4
 8006f88:	f7ff ff94 	bl	8006eb4 <std>
 8006f8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f90:	2201      	movs	r2, #1
 8006f92:	2109      	movs	r1, #9
 8006f94:	f7ff ff8e 	bl	8006eb4 <std>
 8006f98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa2:	2112      	movs	r1, #18
 8006fa4:	f7ff bf86 	b.w	8006eb4 <std>
 8006fa8:	200024bc 	.word	0x200024bc
 8006fac:	20002384 	.word	0x20002384
 8006fb0:	08006f21 	.word	0x08006f21

08006fb4 <__sfp_lock_acquire>:
 8006fb4:	4801      	ldr	r0, [pc, #4]	@ (8006fbc <__sfp_lock_acquire+0x8>)
 8006fb6:	f000 ba00 	b.w	80073ba <__retarget_lock_acquire_recursive>
 8006fba:	bf00      	nop
 8006fbc:	200024c5 	.word	0x200024c5

08006fc0 <__sfp_lock_release>:
 8006fc0:	4801      	ldr	r0, [pc, #4]	@ (8006fc8 <__sfp_lock_release+0x8>)
 8006fc2:	f000 b9fb 	b.w	80073bc <__retarget_lock_release_recursive>
 8006fc6:	bf00      	nop
 8006fc8:	200024c5 	.word	0x200024c5

08006fcc <__sinit>:
 8006fcc:	b510      	push	{r4, lr}
 8006fce:	4604      	mov	r4, r0
 8006fd0:	f7ff fff0 	bl	8006fb4 <__sfp_lock_acquire>
 8006fd4:	6a23      	ldr	r3, [r4, #32]
 8006fd6:	b11b      	cbz	r3, 8006fe0 <__sinit+0x14>
 8006fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fdc:	f7ff bff0 	b.w	8006fc0 <__sfp_lock_release>
 8006fe0:	4b04      	ldr	r3, [pc, #16]	@ (8006ff4 <__sinit+0x28>)
 8006fe2:	6223      	str	r3, [r4, #32]
 8006fe4:	4b04      	ldr	r3, [pc, #16]	@ (8006ff8 <__sinit+0x2c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f5      	bne.n	8006fd8 <__sinit+0xc>
 8006fec:	f7ff ffc4 	bl	8006f78 <global_stdio_init.part.0>
 8006ff0:	e7f2      	b.n	8006fd8 <__sinit+0xc>
 8006ff2:	bf00      	nop
 8006ff4:	08006f39 	.word	0x08006f39
 8006ff8:	200024bc 	.word	0x200024bc

08006ffc <_fwalk_sglue>:
 8006ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007000:	4607      	mov	r7, r0
 8007002:	4688      	mov	r8, r1
 8007004:	4614      	mov	r4, r2
 8007006:	2600      	movs	r6, #0
 8007008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800700c:	f1b9 0901 	subs.w	r9, r9, #1
 8007010:	d505      	bpl.n	800701e <_fwalk_sglue+0x22>
 8007012:	6824      	ldr	r4, [r4, #0]
 8007014:	2c00      	cmp	r4, #0
 8007016:	d1f7      	bne.n	8007008 <_fwalk_sglue+0xc>
 8007018:	4630      	mov	r0, r6
 800701a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800701e:	89ab      	ldrh	r3, [r5, #12]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d907      	bls.n	8007034 <_fwalk_sglue+0x38>
 8007024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007028:	3301      	adds	r3, #1
 800702a:	d003      	beq.n	8007034 <_fwalk_sglue+0x38>
 800702c:	4629      	mov	r1, r5
 800702e:	4638      	mov	r0, r7
 8007030:	47c0      	blx	r8
 8007032:	4306      	orrs	r6, r0
 8007034:	3568      	adds	r5, #104	@ 0x68
 8007036:	e7e9      	b.n	800700c <_fwalk_sglue+0x10>

08007038 <iprintf>:
 8007038:	b40f      	push	{r0, r1, r2, r3}
 800703a:	b507      	push	{r0, r1, r2, lr}
 800703c:	4906      	ldr	r1, [pc, #24]	@ (8007058 <iprintf+0x20>)
 800703e:	ab04      	add	r3, sp, #16
 8007040:	6808      	ldr	r0, [r1, #0]
 8007042:	f853 2b04 	ldr.w	r2, [r3], #4
 8007046:	6881      	ldr	r1, [r0, #8]
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	f000 fae9 	bl	8007620 <_vfiprintf_r>
 800704e:	b003      	add	sp, #12
 8007050:	f85d eb04 	ldr.w	lr, [sp], #4
 8007054:	b004      	add	sp, #16
 8007056:	4770      	bx	lr
 8007058:	200000d4 	.word	0x200000d4

0800705c <_puts_r>:
 800705c:	6a03      	ldr	r3, [r0, #32]
 800705e:	b570      	push	{r4, r5, r6, lr}
 8007060:	6884      	ldr	r4, [r0, #8]
 8007062:	4605      	mov	r5, r0
 8007064:	460e      	mov	r6, r1
 8007066:	b90b      	cbnz	r3, 800706c <_puts_r+0x10>
 8007068:	f7ff ffb0 	bl	8006fcc <__sinit>
 800706c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800706e:	07db      	lsls	r3, r3, #31
 8007070:	d405      	bmi.n	800707e <_puts_r+0x22>
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	0598      	lsls	r0, r3, #22
 8007076:	d402      	bmi.n	800707e <_puts_r+0x22>
 8007078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800707a:	f000 f99e 	bl	80073ba <__retarget_lock_acquire_recursive>
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	0719      	lsls	r1, r3, #28
 8007082:	d502      	bpl.n	800708a <_puts_r+0x2e>
 8007084:	6923      	ldr	r3, [r4, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d135      	bne.n	80070f6 <_puts_r+0x9a>
 800708a:	4621      	mov	r1, r4
 800708c:	4628      	mov	r0, r5
 800708e:	f000 f8c5 	bl	800721c <__swsetup_r>
 8007092:	b380      	cbz	r0, 80070f6 <_puts_r+0x9a>
 8007094:	f04f 35ff 	mov.w	r5, #4294967295
 8007098:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800709a:	07da      	lsls	r2, r3, #31
 800709c:	d405      	bmi.n	80070aa <_puts_r+0x4e>
 800709e:	89a3      	ldrh	r3, [r4, #12]
 80070a0:	059b      	lsls	r3, r3, #22
 80070a2:	d402      	bmi.n	80070aa <_puts_r+0x4e>
 80070a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070a6:	f000 f989 	bl	80073bc <__retarget_lock_release_recursive>
 80070aa:	4628      	mov	r0, r5
 80070ac:	bd70      	pop	{r4, r5, r6, pc}
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	da04      	bge.n	80070bc <_puts_r+0x60>
 80070b2:	69a2      	ldr	r2, [r4, #24]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	dc17      	bgt.n	80070e8 <_puts_r+0x8c>
 80070b8:	290a      	cmp	r1, #10
 80070ba:	d015      	beq.n	80070e8 <_puts_r+0x8c>
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	6022      	str	r2, [r4, #0]
 80070c2:	7019      	strb	r1, [r3, #0]
 80070c4:	68a3      	ldr	r3, [r4, #8]
 80070c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80070ca:	3b01      	subs	r3, #1
 80070cc:	60a3      	str	r3, [r4, #8]
 80070ce:	2900      	cmp	r1, #0
 80070d0:	d1ed      	bne.n	80070ae <_puts_r+0x52>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	da11      	bge.n	80070fa <_puts_r+0x9e>
 80070d6:	4622      	mov	r2, r4
 80070d8:	210a      	movs	r1, #10
 80070da:	4628      	mov	r0, r5
 80070dc:	f000 f85f 	bl	800719e <__swbuf_r>
 80070e0:	3001      	adds	r0, #1
 80070e2:	d0d7      	beq.n	8007094 <_puts_r+0x38>
 80070e4:	250a      	movs	r5, #10
 80070e6:	e7d7      	b.n	8007098 <_puts_r+0x3c>
 80070e8:	4622      	mov	r2, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 f857 	bl	800719e <__swbuf_r>
 80070f0:	3001      	adds	r0, #1
 80070f2:	d1e7      	bne.n	80070c4 <_puts_r+0x68>
 80070f4:	e7ce      	b.n	8007094 <_puts_r+0x38>
 80070f6:	3e01      	subs	r6, #1
 80070f8:	e7e4      	b.n	80070c4 <_puts_r+0x68>
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	6022      	str	r2, [r4, #0]
 8007100:	220a      	movs	r2, #10
 8007102:	701a      	strb	r2, [r3, #0]
 8007104:	e7ee      	b.n	80070e4 <_puts_r+0x88>
	...

08007108 <puts>:
 8007108:	4b02      	ldr	r3, [pc, #8]	@ (8007114 <puts+0xc>)
 800710a:	4601      	mov	r1, r0
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	f7ff bfa5 	b.w	800705c <_puts_r>
 8007112:	bf00      	nop
 8007114:	200000d4 	.word	0x200000d4

08007118 <__sread>:
 8007118:	b510      	push	{r4, lr}
 800711a:	460c      	mov	r4, r1
 800711c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007120:	f000 f8fc 	bl	800731c <_read_r>
 8007124:	2800      	cmp	r0, #0
 8007126:	bfab      	itete	ge
 8007128:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800712a:	89a3      	ldrhlt	r3, [r4, #12]
 800712c:	181b      	addge	r3, r3, r0
 800712e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007132:	bfac      	ite	ge
 8007134:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007136:	81a3      	strhlt	r3, [r4, #12]
 8007138:	bd10      	pop	{r4, pc}

0800713a <__swrite>:
 800713a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800713e:	461f      	mov	r7, r3
 8007140:	898b      	ldrh	r3, [r1, #12]
 8007142:	05db      	lsls	r3, r3, #23
 8007144:	4605      	mov	r5, r0
 8007146:	460c      	mov	r4, r1
 8007148:	4616      	mov	r6, r2
 800714a:	d505      	bpl.n	8007158 <__swrite+0x1e>
 800714c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007150:	2302      	movs	r3, #2
 8007152:	2200      	movs	r2, #0
 8007154:	f000 f8d0 	bl	80072f8 <_lseek_r>
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800715e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007162:	81a3      	strh	r3, [r4, #12]
 8007164:	4632      	mov	r2, r6
 8007166:	463b      	mov	r3, r7
 8007168:	4628      	mov	r0, r5
 800716a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800716e:	f000 b8e7 	b.w	8007340 <_write_r>

08007172 <__sseek>:
 8007172:	b510      	push	{r4, lr}
 8007174:	460c      	mov	r4, r1
 8007176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800717a:	f000 f8bd 	bl	80072f8 <_lseek_r>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	bf15      	itete	ne
 8007184:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007186:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800718a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800718e:	81a3      	strheq	r3, [r4, #12]
 8007190:	bf18      	it	ne
 8007192:	81a3      	strhne	r3, [r4, #12]
 8007194:	bd10      	pop	{r4, pc}

08007196 <__sclose>:
 8007196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719a:	f000 b89d 	b.w	80072d8 <_close_r>

0800719e <__swbuf_r>:
 800719e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a0:	460e      	mov	r6, r1
 80071a2:	4614      	mov	r4, r2
 80071a4:	4605      	mov	r5, r0
 80071a6:	b118      	cbz	r0, 80071b0 <__swbuf_r+0x12>
 80071a8:	6a03      	ldr	r3, [r0, #32]
 80071aa:	b90b      	cbnz	r3, 80071b0 <__swbuf_r+0x12>
 80071ac:	f7ff ff0e 	bl	8006fcc <__sinit>
 80071b0:	69a3      	ldr	r3, [r4, #24]
 80071b2:	60a3      	str	r3, [r4, #8]
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	071a      	lsls	r2, r3, #28
 80071b8:	d501      	bpl.n	80071be <__swbuf_r+0x20>
 80071ba:	6923      	ldr	r3, [r4, #16]
 80071bc:	b943      	cbnz	r3, 80071d0 <__swbuf_r+0x32>
 80071be:	4621      	mov	r1, r4
 80071c0:	4628      	mov	r0, r5
 80071c2:	f000 f82b 	bl	800721c <__swsetup_r>
 80071c6:	b118      	cbz	r0, 80071d0 <__swbuf_r+0x32>
 80071c8:	f04f 37ff 	mov.w	r7, #4294967295
 80071cc:	4638      	mov	r0, r7
 80071ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	6922      	ldr	r2, [r4, #16]
 80071d4:	1a98      	subs	r0, r3, r2
 80071d6:	6963      	ldr	r3, [r4, #20]
 80071d8:	b2f6      	uxtb	r6, r6
 80071da:	4283      	cmp	r3, r0
 80071dc:	4637      	mov	r7, r6
 80071de:	dc05      	bgt.n	80071ec <__swbuf_r+0x4e>
 80071e0:	4621      	mov	r1, r4
 80071e2:	4628      	mov	r0, r5
 80071e4:	f000 fd44 	bl	8007c70 <_fflush_r>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d1ed      	bne.n	80071c8 <__swbuf_r+0x2a>
 80071ec:	68a3      	ldr	r3, [r4, #8]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	60a3      	str	r3, [r4, #8]
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	6022      	str	r2, [r4, #0]
 80071f8:	701e      	strb	r6, [r3, #0]
 80071fa:	6962      	ldr	r2, [r4, #20]
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	429a      	cmp	r2, r3
 8007200:	d004      	beq.n	800720c <__swbuf_r+0x6e>
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	07db      	lsls	r3, r3, #31
 8007206:	d5e1      	bpl.n	80071cc <__swbuf_r+0x2e>
 8007208:	2e0a      	cmp	r6, #10
 800720a:	d1df      	bne.n	80071cc <__swbuf_r+0x2e>
 800720c:	4621      	mov	r1, r4
 800720e:	4628      	mov	r0, r5
 8007210:	f000 fd2e 	bl	8007c70 <_fflush_r>
 8007214:	2800      	cmp	r0, #0
 8007216:	d0d9      	beq.n	80071cc <__swbuf_r+0x2e>
 8007218:	e7d6      	b.n	80071c8 <__swbuf_r+0x2a>
	...

0800721c <__swsetup_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4b29      	ldr	r3, [pc, #164]	@ (80072c4 <__swsetup_r+0xa8>)
 8007220:	4605      	mov	r5, r0
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	460c      	mov	r4, r1
 8007226:	b118      	cbz	r0, 8007230 <__swsetup_r+0x14>
 8007228:	6a03      	ldr	r3, [r0, #32]
 800722a:	b90b      	cbnz	r3, 8007230 <__swsetup_r+0x14>
 800722c:	f7ff fece 	bl	8006fcc <__sinit>
 8007230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007234:	0719      	lsls	r1, r3, #28
 8007236:	d422      	bmi.n	800727e <__swsetup_r+0x62>
 8007238:	06da      	lsls	r2, r3, #27
 800723a:	d407      	bmi.n	800724c <__swsetup_r+0x30>
 800723c:	2209      	movs	r2, #9
 800723e:	602a      	str	r2, [r5, #0]
 8007240:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007244:	81a3      	strh	r3, [r4, #12]
 8007246:	f04f 30ff 	mov.w	r0, #4294967295
 800724a:	e033      	b.n	80072b4 <__swsetup_r+0x98>
 800724c:	0758      	lsls	r0, r3, #29
 800724e:	d512      	bpl.n	8007276 <__swsetup_r+0x5a>
 8007250:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007252:	b141      	cbz	r1, 8007266 <__swsetup_r+0x4a>
 8007254:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007258:	4299      	cmp	r1, r3
 800725a:	d002      	beq.n	8007262 <__swsetup_r+0x46>
 800725c:	4628      	mov	r0, r5
 800725e:	f000 f8bd 	bl	80073dc <_free_r>
 8007262:	2300      	movs	r3, #0
 8007264:	6363      	str	r3, [r4, #52]	@ 0x34
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800726c:	81a3      	strh	r3, [r4, #12]
 800726e:	2300      	movs	r3, #0
 8007270:	6063      	str	r3, [r4, #4]
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	f043 0308 	orr.w	r3, r3, #8
 800727c:	81a3      	strh	r3, [r4, #12]
 800727e:	6923      	ldr	r3, [r4, #16]
 8007280:	b94b      	cbnz	r3, 8007296 <__swsetup_r+0x7a>
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800728c:	d003      	beq.n	8007296 <__swsetup_r+0x7a>
 800728e:	4621      	mov	r1, r4
 8007290:	4628      	mov	r0, r5
 8007292:	f000 fd3b 	bl	8007d0c <__smakebuf_r>
 8007296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800729a:	f013 0201 	ands.w	r2, r3, #1
 800729e:	d00a      	beq.n	80072b6 <__swsetup_r+0x9a>
 80072a0:	2200      	movs	r2, #0
 80072a2:	60a2      	str	r2, [r4, #8]
 80072a4:	6962      	ldr	r2, [r4, #20]
 80072a6:	4252      	negs	r2, r2
 80072a8:	61a2      	str	r2, [r4, #24]
 80072aa:	6922      	ldr	r2, [r4, #16]
 80072ac:	b942      	cbnz	r2, 80072c0 <__swsetup_r+0xa4>
 80072ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80072b2:	d1c5      	bne.n	8007240 <__swsetup_r+0x24>
 80072b4:	bd38      	pop	{r3, r4, r5, pc}
 80072b6:	0799      	lsls	r1, r3, #30
 80072b8:	bf58      	it	pl
 80072ba:	6962      	ldrpl	r2, [r4, #20]
 80072bc:	60a2      	str	r2, [r4, #8]
 80072be:	e7f4      	b.n	80072aa <__swsetup_r+0x8e>
 80072c0:	2000      	movs	r0, #0
 80072c2:	e7f7      	b.n	80072b4 <__swsetup_r+0x98>
 80072c4:	200000d4 	.word	0x200000d4

080072c8 <memset>:
 80072c8:	4402      	add	r2, r0
 80072ca:	4603      	mov	r3, r0
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d100      	bne.n	80072d2 <memset+0xa>
 80072d0:	4770      	bx	lr
 80072d2:	f803 1b01 	strb.w	r1, [r3], #1
 80072d6:	e7f9      	b.n	80072cc <memset+0x4>

080072d8 <_close_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4d06      	ldr	r5, [pc, #24]	@ (80072f4 <_close_r+0x1c>)
 80072dc:	2300      	movs	r3, #0
 80072de:	4604      	mov	r4, r0
 80072e0:	4608      	mov	r0, r1
 80072e2:	602b      	str	r3, [r5, #0]
 80072e4:	f7fb faa7 	bl	8002836 <_close>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d102      	bne.n	80072f2 <_close_r+0x1a>
 80072ec:	682b      	ldr	r3, [r5, #0]
 80072ee:	b103      	cbz	r3, 80072f2 <_close_r+0x1a>
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	bd38      	pop	{r3, r4, r5, pc}
 80072f4:	200024c0 	.word	0x200024c0

080072f8 <_lseek_r>:
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4d07      	ldr	r5, [pc, #28]	@ (8007318 <_lseek_r+0x20>)
 80072fc:	4604      	mov	r4, r0
 80072fe:	4608      	mov	r0, r1
 8007300:	4611      	mov	r1, r2
 8007302:	2200      	movs	r2, #0
 8007304:	602a      	str	r2, [r5, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	f7fb fabc 	bl	8002884 <_lseek>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d102      	bne.n	8007316 <_lseek_r+0x1e>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	b103      	cbz	r3, 8007316 <_lseek_r+0x1e>
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	200024c0 	.word	0x200024c0

0800731c <_read_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4d07      	ldr	r5, [pc, #28]	@ (800733c <_read_r+0x20>)
 8007320:	4604      	mov	r4, r0
 8007322:	4608      	mov	r0, r1
 8007324:	4611      	mov	r1, r2
 8007326:	2200      	movs	r2, #0
 8007328:	602a      	str	r2, [r5, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	f7fb fa66 	bl	80027fc <_read>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d102      	bne.n	800733a <_read_r+0x1e>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	b103      	cbz	r3, 800733a <_read_r+0x1e>
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	200024c0 	.word	0x200024c0

08007340 <_write_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	4d07      	ldr	r5, [pc, #28]	@ (8007360 <_write_r+0x20>)
 8007344:	4604      	mov	r4, r0
 8007346:	4608      	mov	r0, r1
 8007348:	4611      	mov	r1, r2
 800734a:	2200      	movs	r2, #0
 800734c:	602a      	str	r2, [r5, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	f7fb f85a 	bl	8002408 <_write>
 8007354:	1c43      	adds	r3, r0, #1
 8007356:	d102      	bne.n	800735e <_write_r+0x1e>
 8007358:	682b      	ldr	r3, [r5, #0]
 800735a:	b103      	cbz	r3, 800735e <_write_r+0x1e>
 800735c:	6023      	str	r3, [r4, #0]
 800735e:	bd38      	pop	{r3, r4, r5, pc}
 8007360:	200024c0 	.word	0x200024c0

08007364 <__errno>:
 8007364:	4b01      	ldr	r3, [pc, #4]	@ (800736c <__errno+0x8>)
 8007366:	6818      	ldr	r0, [r3, #0]
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	200000d4 	.word	0x200000d4

08007370 <__libc_init_array>:
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	4d0d      	ldr	r5, [pc, #52]	@ (80073a8 <__libc_init_array+0x38>)
 8007374:	4c0d      	ldr	r4, [pc, #52]	@ (80073ac <__libc_init_array+0x3c>)
 8007376:	1b64      	subs	r4, r4, r5
 8007378:	10a4      	asrs	r4, r4, #2
 800737a:	2600      	movs	r6, #0
 800737c:	42a6      	cmp	r6, r4
 800737e:	d109      	bne.n	8007394 <__libc_init_array+0x24>
 8007380:	4d0b      	ldr	r5, [pc, #44]	@ (80073b0 <__libc_init_array+0x40>)
 8007382:	4c0c      	ldr	r4, [pc, #48]	@ (80073b4 <__libc_init_array+0x44>)
 8007384:	f000 fd30 	bl	8007de8 <_init>
 8007388:	1b64      	subs	r4, r4, r5
 800738a:	10a4      	asrs	r4, r4, #2
 800738c:	2600      	movs	r6, #0
 800738e:	42a6      	cmp	r6, r4
 8007390:	d105      	bne.n	800739e <__libc_init_array+0x2e>
 8007392:	bd70      	pop	{r4, r5, r6, pc}
 8007394:	f855 3b04 	ldr.w	r3, [r5], #4
 8007398:	4798      	blx	r3
 800739a:	3601      	adds	r6, #1
 800739c:	e7ee      	b.n	800737c <__libc_init_array+0xc>
 800739e:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a2:	4798      	blx	r3
 80073a4:	3601      	adds	r6, #1
 80073a6:	e7f2      	b.n	800738e <__libc_init_array+0x1e>
 80073a8:	08008064 	.word	0x08008064
 80073ac:	08008064 	.word	0x08008064
 80073b0:	08008064 	.word	0x08008064
 80073b4:	08008068 	.word	0x08008068

080073b8 <__retarget_lock_init_recursive>:
 80073b8:	4770      	bx	lr

080073ba <__retarget_lock_acquire_recursive>:
 80073ba:	4770      	bx	lr

080073bc <__retarget_lock_release_recursive>:
 80073bc:	4770      	bx	lr

080073be <memcpy>:
 80073be:	440a      	add	r2, r1
 80073c0:	4291      	cmp	r1, r2
 80073c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80073c6:	d100      	bne.n	80073ca <memcpy+0xc>
 80073c8:	4770      	bx	lr
 80073ca:	b510      	push	{r4, lr}
 80073cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073d4:	4291      	cmp	r1, r2
 80073d6:	d1f9      	bne.n	80073cc <memcpy+0xe>
 80073d8:	bd10      	pop	{r4, pc}
	...

080073dc <_free_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4605      	mov	r5, r0
 80073e0:	2900      	cmp	r1, #0
 80073e2:	d041      	beq.n	8007468 <_free_r+0x8c>
 80073e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073e8:	1f0c      	subs	r4, r1, #4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bfb8      	it	lt
 80073ee:	18e4      	addlt	r4, r4, r3
 80073f0:	f000 f8e0 	bl	80075b4 <__malloc_lock>
 80073f4:	4a1d      	ldr	r2, [pc, #116]	@ (800746c <_free_r+0x90>)
 80073f6:	6813      	ldr	r3, [r2, #0]
 80073f8:	b933      	cbnz	r3, 8007408 <_free_r+0x2c>
 80073fa:	6063      	str	r3, [r4, #4]
 80073fc:	6014      	str	r4, [r2, #0]
 80073fe:	4628      	mov	r0, r5
 8007400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007404:	f000 b8dc 	b.w	80075c0 <__malloc_unlock>
 8007408:	42a3      	cmp	r3, r4
 800740a:	d908      	bls.n	800741e <_free_r+0x42>
 800740c:	6820      	ldr	r0, [r4, #0]
 800740e:	1821      	adds	r1, r4, r0
 8007410:	428b      	cmp	r3, r1
 8007412:	bf01      	itttt	eq
 8007414:	6819      	ldreq	r1, [r3, #0]
 8007416:	685b      	ldreq	r3, [r3, #4]
 8007418:	1809      	addeq	r1, r1, r0
 800741a:	6021      	streq	r1, [r4, #0]
 800741c:	e7ed      	b.n	80073fa <_free_r+0x1e>
 800741e:	461a      	mov	r2, r3
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	b10b      	cbz	r3, 8007428 <_free_r+0x4c>
 8007424:	42a3      	cmp	r3, r4
 8007426:	d9fa      	bls.n	800741e <_free_r+0x42>
 8007428:	6811      	ldr	r1, [r2, #0]
 800742a:	1850      	adds	r0, r2, r1
 800742c:	42a0      	cmp	r0, r4
 800742e:	d10b      	bne.n	8007448 <_free_r+0x6c>
 8007430:	6820      	ldr	r0, [r4, #0]
 8007432:	4401      	add	r1, r0
 8007434:	1850      	adds	r0, r2, r1
 8007436:	4283      	cmp	r3, r0
 8007438:	6011      	str	r1, [r2, #0]
 800743a:	d1e0      	bne.n	80073fe <_free_r+0x22>
 800743c:	6818      	ldr	r0, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	6053      	str	r3, [r2, #4]
 8007442:	4408      	add	r0, r1
 8007444:	6010      	str	r0, [r2, #0]
 8007446:	e7da      	b.n	80073fe <_free_r+0x22>
 8007448:	d902      	bls.n	8007450 <_free_r+0x74>
 800744a:	230c      	movs	r3, #12
 800744c:	602b      	str	r3, [r5, #0]
 800744e:	e7d6      	b.n	80073fe <_free_r+0x22>
 8007450:	6820      	ldr	r0, [r4, #0]
 8007452:	1821      	adds	r1, r4, r0
 8007454:	428b      	cmp	r3, r1
 8007456:	bf04      	itt	eq
 8007458:	6819      	ldreq	r1, [r3, #0]
 800745a:	685b      	ldreq	r3, [r3, #4]
 800745c:	6063      	str	r3, [r4, #4]
 800745e:	bf04      	itt	eq
 8007460:	1809      	addeq	r1, r1, r0
 8007462:	6021      	streq	r1, [r4, #0]
 8007464:	6054      	str	r4, [r2, #4]
 8007466:	e7ca      	b.n	80073fe <_free_r+0x22>
 8007468:	bd38      	pop	{r3, r4, r5, pc}
 800746a:	bf00      	nop
 800746c:	200024cc 	.word	0x200024cc

08007470 <sbrk_aligned>:
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	4e0f      	ldr	r6, [pc, #60]	@ (80074b0 <sbrk_aligned+0x40>)
 8007474:	460c      	mov	r4, r1
 8007476:	6831      	ldr	r1, [r6, #0]
 8007478:	4605      	mov	r5, r0
 800747a:	b911      	cbnz	r1, 8007482 <sbrk_aligned+0x12>
 800747c:	f000 fca4 	bl	8007dc8 <_sbrk_r>
 8007480:	6030      	str	r0, [r6, #0]
 8007482:	4621      	mov	r1, r4
 8007484:	4628      	mov	r0, r5
 8007486:	f000 fc9f 	bl	8007dc8 <_sbrk_r>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	d103      	bne.n	8007496 <sbrk_aligned+0x26>
 800748e:	f04f 34ff 	mov.w	r4, #4294967295
 8007492:	4620      	mov	r0, r4
 8007494:	bd70      	pop	{r4, r5, r6, pc}
 8007496:	1cc4      	adds	r4, r0, #3
 8007498:	f024 0403 	bic.w	r4, r4, #3
 800749c:	42a0      	cmp	r0, r4
 800749e:	d0f8      	beq.n	8007492 <sbrk_aligned+0x22>
 80074a0:	1a21      	subs	r1, r4, r0
 80074a2:	4628      	mov	r0, r5
 80074a4:	f000 fc90 	bl	8007dc8 <_sbrk_r>
 80074a8:	3001      	adds	r0, #1
 80074aa:	d1f2      	bne.n	8007492 <sbrk_aligned+0x22>
 80074ac:	e7ef      	b.n	800748e <sbrk_aligned+0x1e>
 80074ae:	bf00      	nop
 80074b0:	200024c8 	.word	0x200024c8

080074b4 <_malloc_r>:
 80074b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b8:	1ccd      	adds	r5, r1, #3
 80074ba:	f025 0503 	bic.w	r5, r5, #3
 80074be:	3508      	adds	r5, #8
 80074c0:	2d0c      	cmp	r5, #12
 80074c2:	bf38      	it	cc
 80074c4:	250c      	movcc	r5, #12
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	4606      	mov	r6, r0
 80074ca:	db01      	blt.n	80074d0 <_malloc_r+0x1c>
 80074cc:	42a9      	cmp	r1, r5
 80074ce:	d904      	bls.n	80074da <_malloc_r+0x26>
 80074d0:	230c      	movs	r3, #12
 80074d2:	6033      	str	r3, [r6, #0]
 80074d4:	2000      	movs	r0, #0
 80074d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075b0 <_malloc_r+0xfc>
 80074de:	f000 f869 	bl	80075b4 <__malloc_lock>
 80074e2:	f8d8 3000 	ldr.w	r3, [r8]
 80074e6:	461c      	mov	r4, r3
 80074e8:	bb44      	cbnz	r4, 800753c <_malloc_r+0x88>
 80074ea:	4629      	mov	r1, r5
 80074ec:	4630      	mov	r0, r6
 80074ee:	f7ff ffbf 	bl	8007470 <sbrk_aligned>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	4604      	mov	r4, r0
 80074f6:	d158      	bne.n	80075aa <_malloc_r+0xf6>
 80074f8:	f8d8 4000 	ldr.w	r4, [r8]
 80074fc:	4627      	mov	r7, r4
 80074fe:	2f00      	cmp	r7, #0
 8007500:	d143      	bne.n	800758a <_malloc_r+0xd6>
 8007502:	2c00      	cmp	r4, #0
 8007504:	d04b      	beq.n	800759e <_malloc_r+0xea>
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	4639      	mov	r1, r7
 800750a:	4630      	mov	r0, r6
 800750c:	eb04 0903 	add.w	r9, r4, r3
 8007510:	f000 fc5a 	bl	8007dc8 <_sbrk_r>
 8007514:	4581      	cmp	r9, r0
 8007516:	d142      	bne.n	800759e <_malloc_r+0xea>
 8007518:	6821      	ldr	r1, [r4, #0]
 800751a:	1a6d      	subs	r5, r5, r1
 800751c:	4629      	mov	r1, r5
 800751e:	4630      	mov	r0, r6
 8007520:	f7ff ffa6 	bl	8007470 <sbrk_aligned>
 8007524:	3001      	adds	r0, #1
 8007526:	d03a      	beq.n	800759e <_malloc_r+0xea>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	442b      	add	r3, r5
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	f8d8 3000 	ldr.w	r3, [r8]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	bb62      	cbnz	r2, 8007590 <_malloc_r+0xdc>
 8007536:	f8c8 7000 	str.w	r7, [r8]
 800753a:	e00f      	b.n	800755c <_malloc_r+0xa8>
 800753c:	6822      	ldr	r2, [r4, #0]
 800753e:	1b52      	subs	r2, r2, r5
 8007540:	d420      	bmi.n	8007584 <_malloc_r+0xd0>
 8007542:	2a0b      	cmp	r2, #11
 8007544:	d917      	bls.n	8007576 <_malloc_r+0xc2>
 8007546:	1961      	adds	r1, r4, r5
 8007548:	42a3      	cmp	r3, r4
 800754a:	6025      	str	r5, [r4, #0]
 800754c:	bf18      	it	ne
 800754e:	6059      	strne	r1, [r3, #4]
 8007550:	6863      	ldr	r3, [r4, #4]
 8007552:	bf08      	it	eq
 8007554:	f8c8 1000 	streq.w	r1, [r8]
 8007558:	5162      	str	r2, [r4, r5]
 800755a:	604b      	str	r3, [r1, #4]
 800755c:	4630      	mov	r0, r6
 800755e:	f000 f82f 	bl	80075c0 <__malloc_unlock>
 8007562:	f104 000b 	add.w	r0, r4, #11
 8007566:	1d23      	adds	r3, r4, #4
 8007568:	f020 0007 	bic.w	r0, r0, #7
 800756c:	1ac2      	subs	r2, r0, r3
 800756e:	bf1c      	itt	ne
 8007570:	1a1b      	subne	r3, r3, r0
 8007572:	50a3      	strne	r3, [r4, r2]
 8007574:	e7af      	b.n	80074d6 <_malloc_r+0x22>
 8007576:	6862      	ldr	r2, [r4, #4]
 8007578:	42a3      	cmp	r3, r4
 800757a:	bf0c      	ite	eq
 800757c:	f8c8 2000 	streq.w	r2, [r8]
 8007580:	605a      	strne	r2, [r3, #4]
 8007582:	e7eb      	b.n	800755c <_malloc_r+0xa8>
 8007584:	4623      	mov	r3, r4
 8007586:	6864      	ldr	r4, [r4, #4]
 8007588:	e7ae      	b.n	80074e8 <_malloc_r+0x34>
 800758a:	463c      	mov	r4, r7
 800758c:	687f      	ldr	r7, [r7, #4]
 800758e:	e7b6      	b.n	80074fe <_malloc_r+0x4a>
 8007590:	461a      	mov	r2, r3
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	42a3      	cmp	r3, r4
 8007596:	d1fb      	bne.n	8007590 <_malloc_r+0xdc>
 8007598:	2300      	movs	r3, #0
 800759a:	6053      	str	r3, [r2, #4]
 800759c:	e7de      	b.n	800755c <_malloc_r+0xa8>
 800759e:	230c      	movs	r3, #12
 80075a0:	6033      	str	r3, [r6, #0]
 80075a2:	4630      	mov	r0, r6
 80075a4:	f000 f80c 	bl	80075c0 <__malloc_unlock>
 80075a8:	e794      	b.n	80074d4 <_malloc_r+0x20>
 80075aa:	6005      	str	r5, [r0, #0]
 80075ac:	e7d6      	b.n	800755c <_malloc_r+0xa8>
 80075ae:	bf00      	nop
 80075b0:	200024cc 	.word	0x200024cc

080075b4 <__malloc_lock>:
 80075b4:	4801      	ldr	r0, [pc, #4]	@ (80075bc <__malloc_lock+0x8>)
 80075b6:	f7ff bf00 	b.w	80073ba <__retarget_lock_acquire_recursive>
 80075ba:	bf00      	nop
 80075bc:	200024c4 	.word	0x200024c4

080075c0 <__malloc_unlock>:
 80075c0:	4801      	ldr	r0, [pc, #4]	@ (80075c8 <__malloc_unlock+0x8>)
 80075c2:	f7ff befb 	b.w	80073bc <__retarget_lock_release_recursive>
 80075c6:	bf00      	nop
 80075c8:	200024c4 	.word	0x200024c4

080075cc <__sfputc_r>:
 80075cc:	6893      	ldr	r3, [r2, #8]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	b410      	push	{r4}
 80075d4:	6093      	str	r3, [r2, #8]
 80075d6:	da08      	bge.n	80075ea <__sfputc_r+0x1e>
 80075d8:	6994      	ldr	r4, [r2, #24]
 80075da:	42a3      	cmp	r3, r4
 80075dc:	db01      	blt.n	80075e2 <__sfputc_r+0x16>
 80075de:	290a      	cmp	r1, #10
 80075e0:	d103      	bne.n	80075ea <__sfputc_r+0x1e>
 80075e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075e6:	f7ff bdda 	b.w	800719e <__swbuf_r>
 80075ea:	6813      	ldr	r3, [r2, #0]
 80075ec:	1c58      	adds	r0, r3, #1
 80075ee:	6010      	str	r0, [r2, #0]
 80075f0:	7019      	strb	r1, [r3, #0]
 80075f2:	4608      	mov	r0, r1
 80075f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <__sfputs_r>:
 80075fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fc:	4606      	mov	r6, r0
 80075fe:	460f      	mov	r7, r1
 8007600:	4614      	mov	r4, r2
 8007602:	18d5      	adds	r5, r2, r3
 8007604:	42ac      	cmp	r4, r5
 8007606:	d101      	bne.n	800760c <__sfputs_r+0x12>
 8007608:	2000      	movs	r0, #0
 800760a:	e007      	b.n	800761c <__sfputs_r+0x22>
 800760c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007610:	463a      	mov	r2, r7
 8007612:	4630      	mov	r0, r6
 8007614:	f7ff ffda 	bl	80075cc <__sfputc_r>
 8007618:	1c43      	adds	r3, r0, #1
 800761a:	d1f3      	bne.n	8007604 <__sfputs_r+0xa>
 800761c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007620 <_vfiprintf_r>:
 8007620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007624:	460d      	mov	r5, r1
 8007626:	b09d      	sub	sp, #116	@ 0x74
 8007628:	4614      	mov	r4, r2
 800762a:	4698      	mov	r8, r3
 800762c:	4606      	mov	r6, r0
 800762e:	b118      	cbz	r0, 8007638 <_vfiprintf_r+0x18>
 8007630:	6a03      	ldr	r3, [r0, #32]
 8007632:	b90b      	cbnz	r3, 8007638 <_vfiprintf_r+0x18>
 8007634:	f7ff fcca 	bl	8006fcc <__sinit>
 8007638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800763a:	07d9      	lsls	r1, r3, #31
 800763c:	d405      	bmi.n	800764a <_vfiprintf_r+0x2a>
 800763e:	89ab      	ldrh	r3, [r5, #12]
 8007640:	059a      	lsls	r2, r3, #22
 8007642:	d402      	bmi.n	800764a <_vfiprintf_r+0x2a>
 8007644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007646:	f7ff feb8 	bl	80073ba <__retarget_lock_acquire_recursive>
 800764a:	89ab      	ldrh	r3, [r5, #12]
 800764c:	071b      	lsls	r3, r3, #28
 800764e:	d501      	bpl.n	8007654 <_vfiprintf_r+0x34>
 8007650:	692b      	ldr	r3, [r5, #16]
 8007652:	b99b      	cbnz	r3, 800767c <_vfiprintf_r+0x5c>
 8007654:	4629      	mov	r1, r5
 8007656:	4630      	mov	r0, r6
 8007658:	f7ff fde0 	bl	800721c <__swsetup_r>
 800765c:	b170      	cbz	r0, 800767c <_vfiprintf_r+0x5c>
 800765e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007660:	07dc      	lsls	r4, r3, #31
 8007662:	d504      	bpl.n	800766e <_vfiprintf_r+0x4e>
 8007664:	f04f 30ff 	mov.w	r0, #4294967295
 8007668:	b01d      	add	sp, #116	@ 0x74
 800766a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766e:	89ab      	ldrh	r3, [r5, #12]
 8007670:	0598      	lsls	r0, r3, #22
 8007672:	d4f7      	bmi.n	8007664 <_vfiprintf_r+0x44>
 8007674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007676:	f7ff fea1 	bl	80073bc <__retarget_lock_release_recursive>
 800767a:	e7f3      	b.n	8007664 <_vfiprintf_r+0x44>
 800767c:	2300      	movs	r3, #0
 800767e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007680:	2320      	movs	r3, #32
 8007682:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007686:	f8cd 800c 	str.w	r8, [sp, #12]
 800768a:	2330      	movs	r3, #48	@ 0x30
 800768c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800783c <_vfiprintf_r+0x21c>
 8007690:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007694:	f04f 0901 	mov.w	r9, #1
 8007698:	4623      	mov	r3, r4
 800769a:	469a      	mov	sl, r3
 800769c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076a0:	b10a      	cbz	r2, 80076a6 <_vfiprintf_r+0x86>
 80076a2:	2a25      	cmp	r2, #37	@ 0x25
 80076a4:	d1f9      	bne.n	800769a <_vfiprintf_r+0x7a>
 80076a6:	ebba 0b04 	subs.w	fp, sl, r4
 80076aa:	d00b      	beq.n	80076c4 <_vfiprintf_r+0xa4>
 80076ac:	465b      	mov	r3, fp
 80076ae:	4622      	mov	r2, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	4630      	mov	r0, r6
 80076b4:	f7ff ffa1 	bl	80075fa <__sfputs_r>
 80076b8:	3001      	adds	r0, #1
 80076ba:	f000 80a7 	beq.w	800780c <_vfiprintf_r+0x1ec>
 80076be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076c0:	445a      	add	r2, fp
 80076c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80076c4:	f89a 3000 	ldrb.w	r3, [sl]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 809f 	beq.w	800780c <_vfiprintf_r+0x1ec>
 80076ce:	2300      	movs	r3, #0
 80076d0:	f04f 32ff 	mov.w	r2, #4294967295
 80076d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076d8:	f10a 0a01 	add.w	sl, sl, #1
 80076dc:	9304      	str	r3, [sp, #16]
 80076de:	9307      	str	r3, [sp, #28]
 80076e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80076e6:	4654      	mov	r4, sl
 80076e8:	2205      	movs	r2, #5
 80076ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ee:	4853      	ldr	r0, [pc, #332]	@ (800783c <_vfiprintf_r+0x21c>)
 80076f0:	f7f8 fd6e 	bl	80001d0 <memchr>
 80076f4:	9a04      	ldr	r2, [sp, #16]
 80076f6:	b9d8      	cbnz	r0, 8007730 <_vfiprintf_r+0x110>
 80076f8:	06d1      	lsls	r1, r2, #27
 80076fa:	bf44      	itt	mi
 80076fc:	2320      	movmi	r3, #32
 80076fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007702:	0713      	lsls	r3, r2, #28
 8007704:	bf44      	itt	mi
 8007706:	232b      	movmi	r3, #43	@ 0x2b
 8007708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800770c:	f89a 3000 	ldrb.w	r3, [sl]
 8007710:	2b2a      	cmp	r3, #42	@ 0x2a
 8007712:	d015      	beq.n	8007740 <_vfiprintf_r+0x120>
 8007714:	9a07      	ldr	r2, [sp, #28]
 8007716:	4654      	mov	r4, sl
 8007718:	2000      	movs	r0, #0
 800771a:	f04f 0c0a 	mov.w	ip, #10
 800771e:	4621      	mov	r1, r4
 8007720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007724:	3b30      	subs	r3, #48	@ 0x30
 8007726:	2b09      	cmp	r3, #9
 8007728:	d94b      	bls.n	80077c2 <_vfiprintf_r+0x1a2>
 800772a:	b1b0      	cbz	r0, 800775a <_vfiprintf_r+0x13a>
 800772c:	9207      	str	r2, [sp, #28]
 800772e:	e014      	b.n	800775a <_vfiprintf_r+0x13a>
 8007730:	eba0 0308 	sub.w	r3, r0, r8
 8007734:	fa09 f303 	lsl.w	r3, r9, r3
 8007738:	4313      	orrs	r3, r2
 800773a:	9304      	str	r3, [sp, #16]
 800773c:	46a2      	mov	sl, r4
 800773e:	e7d2      	b.n	80076e6 <_vfiprintf_r+0xc6>
 8007740:	9b03      	ldr	r3, [sp, #12]
 8007742:	1d19      	adds	r1, r3, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	9103      	str	r1, [sp, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	bfbb      	ittet	lt
 800774c:	425b      	neglt	r3, r3
 800774e:	f042 0202 	orrlt.w	r2, r2, #2
 8007752:	9307      	strge	r3, [sp, #28]
 8007754:	9307      	strlt	r3, [sp, #28]
 8007756:	bfb8      	it	lt
 8007758:	9204      	strlt	r2, [sp, #16]
 800775a:	7823      	ldrb	r3, [r4, #0]
 800775c:	2b2e      	cmp	r3, #46	@ 0x2e
 800775e:	d10a      	bne.n	8007776 <_vfiprintf_r+0x156>
 8007760:	7863      	ldrb	r3, [r4, #1]
 8007762:	2b2a      	cmp	r3, #42	@ 0x2a
 8007764:	d132      	bne.n	80077cc <_vfiprintf_r+0x1ac>
 8007766:	9b03      	ldr	r3, [sp, #12]
 8007768:	1d1a      	adds	r2, r3, #4
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	9203      	str	r2, [sp, #12]
 800776e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007772:	3402      	adds	r4, #2
 8007774:	9305      	str	r3, [sp, #20]
 8007776:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800784c <_vfiprintf_r+0x22c>
 800777a:	7821      	ldrb	r1, [r4, #0]
 800777c:	2203      	movs	r2, #3
 800777e:	4650      	mov	r0, sl
 8007780:	f7f8 fd26 	bl	80001d0 <memchr>
 8007784:	b138      	cbz	r0, 8007796 <_vfiprintf_r+0x176>
 8007786:	9b04      	ldr	r3, [sp, #16]
 8007788:	eba0 000a 	sub.w	r0, r0, sl
 800778c:	2240      	movs	r2, #64	@ 0x40
 800778e:	4082      	lsls	r2, r0
 8007790:	4313      	orrs	r3, r2
 8007792:	3401      	adds	r4, #1
 8007794:	9304      	str	r3, [sp, #16]
 8007796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800779a:	4829      	ldr	r0, [pc, #164]	@ (8007840 <_vfiprintf_r+0x220>)
 800779c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077a0:	2206      	movs	r2, #6
 80077a2:	f7f8 fd15 	bl	80001d0 <memchr>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d03f      	beq.n	800782a <_vfiprintf_r+0x20a>
 80077aa:	4b26      	ldr	r3, [pc, #152]	@ (8007844 <_vfiprintf_r+0x224>)
 80077ac:	bb1b      	cbnz	r3, 80077f6 <_vfiprintf_r+0x1d6>
 80077ae:	9b03      	ldr	r3, [sp, #12]
 80077b0:	3307      	adds	r3, #7
 80077b2:	f023 0307 	bic.w	r3, r3, #7
 80077b6:	3308      	adds	r3, #8
 80077b8:	9303      	str	r3, [sp, #12]
 80077ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077bc:	443b      	add	r3, r7
 80077be:	9309      	str	r3, [sp, #36]	@ 0x24
 80077c0:	e76a      	b.n	8007698 <_vfiprintf_r+0x78>
 80077c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077c6:	460c      	mov	r4, r1
 80077c8:	2001      	movs	r0, #1
 80077ca:	e7a8      	b.n	800771e <_vfiprintf_r+0xfe>
 80077cc:	2300      	movs	r3, #0
 80077ce:	3401      	adds	r4, #1
 80077d0:	9305      	str	r3, [sp, #20]
 80077d2:	4619      	mov	r1, r3
 80077d4:	f04f 0c0a 	mov.w	ip, #10
 80077d8:	4620      	mov	r0, r4
 80077da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077de:	3a30      	subs	r2, #48	@ 0x30
 80077e0:	2a09      	cmp	r2, #9
 80077e2:	d903      	bls.n	80077ec <_vfiprintf_r+0x1cc>
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0c6      	beq.n	8007776 <_vfiprintf_r+0x156>
 80077e8:	9105      	str	r1, [sp, #20]
 80077ea:	e7c4      	b.n	8007776 <_vfiprintf_r+0x156>
 80077ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80077f0:	4604      	mov	r4, r0
 80077f2:	2301      	movs	r3, #1
 80077f4:	e7f0      	b.n	80077d8 <_vfiprintf_r+0x1b8>
 80077f6:	ab03      	add	r3, sp, #12
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	462a      	mov	r2, r5
 80077fc:	4b12      	ldr	r3, [pc, #72]	@ (8007848 <_vfiprintf_r+0x228>)
 80077fe:	a904      	add	r1, sp, #16
 8007800:	4630      	mov	r0, r6
 8007802:	f3af 8000 	nop.w
 8007806:	4607      	mov	r7, r0
 8007808:	1c78      	adds	r0, r7, #1
 800780a:	d1d6      	bne.n	80077ba <_vfiprintf_r+0x19a>
 800780c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800780e:	07d9      	lsls	r1, r3, #31
 8007810:	d405      	bmi.n	800781e <_vfiprintf_r+0x1fe>
 8007812:	89ab      	ldrh	r3, [r5, #12]
 8007814:	059a      	lsls	r2, r3, #22
 8007816:	d402      	bmi.n	800781e <_vfiprintf_r+0x1fe>
 8007818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800781a:	f7ff fdcf 	bl	80073bc <__retarget_lock_release_recursive>
 800781e:	89ab      	ldrh	r3, [r5, #12]
 8007820:	065b      	lsls	r3, r3, #25
 8007822:	f53f af1f 	bmi.w	8007664 <_vfiprintf_r+0x44>
 8007826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007828:	e71e      	b.n	8007668 <_vfiprintf_r+0x48>
 800782a:	ab03      	add	r3, sp, #12
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	462a      	mov	r2, r5
 8007830:	4b05      	ldr	r3, [pc, #20]	@ (8007848 <_vfiprintf_r+0x228>)
 8007832:	a904      	add	r1, sp, #16
 8007834:	4630      	mov	r0, r6
 8007836:	f000 f879 	bl	800792c <_printf_i>
 800783a:	e7e4      	b.n	8007806 <_vfiprintf_r+0x1e6>
 800783c:	08008028 	.word	0x08008028
 8007840:	08008032 	.word	0x08008032
 8007844:	00000000 	.word	0x00000000
 8007848:	080075fb 	.word	0x080075fb
 800784c:	0800802e 	.word	0x0800802e

08007850 <_printf_common>:
 8007850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007854:	4616      	mov	r6, r2
 8007856:	4698      	mov	r8, r3
 8007858:	688a      	ldr	r2, [r1, #8]
 800785a:	690b      	ldr	r3, [r1, #16]
 800785c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007860:	4293      	cmp	r3, r2
 8007862:	bfb8      	it	lt
 8007864:	4613      	movlt	r3, r2
 8007866:	6033      	str	r3, [r6, #0]
 8007868:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800786c:	4607      	mov	r7, r0
 800786e:	460c      	mov	r4, r1
 8007870:	b10a      	cbz	r2, 8007876 <_printf_common+0x26>
 8007872:	3301      	adds	r3, #1
 8007874:	6033      	str	r3, [r6, #0]
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	0699      	lsls	r1, r3, #26
 800787a:	bf42      	ittt	mi
 800787c:	6833      	ldrmi	r3, [r6, #0]
 800787e:	3302      	addmi	r3, #2
 8007880:	6033      	strmi	r3, [r6, #0]
 8007882:	6825      	ldr	r5, [r4, #0]
 8007884:	f015 0506 	ands.w	r5, r5, #6
 8007888:	d106      	bne.n	8007898 <_printf_common+0x48>
 800788a:	f104 0a19 	add.w	sl, r4, #25
 800788e:	68e3      	ldr	r3, [r4, #12]
 8007890:	6832      	ldr	r2, [r6, #0]
 8007892:	1a9b      	subs	r3, r3, r2
 8007894:	42ab      	cmp	r3, r5
 8007896:	dc26      	bgt.n	80078e6 <_printf_common+0x96>
 8007898:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800789c:	6822      	ldr	r2, [r4, #0]
 800789e:	3b00      	subs	r3, #0
 80078a0:	bf18      	it	ne
 80078a2:	2301      	movne	r3, #1
 80078a4:	0692      	lsls	r2, r2, #26
 80078a6:	d42b      	bmi.n	8007900 <_printf_common+0xb0>
 80078a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078ac:	4641      	mov	r1, r8
 80078ae:	4638      	mov	r0, r7
 80078b0:	47c8      	blx	r9
 80078b2:	3001      	adds	r0, #1
 80078b4:	d01e      	beq.n	80078f4 <_printf_common+0xa4>
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	6922      	ldr	r2, [r4, #16]
 80078ba:	f003 0306 	and.w	r3, r3, #6
 80078be:	2b04      	cmp	r3, #4
 80078c0:	bf02      	ittt	eq
 80078c2:	68e5      	ldreq	r5, [r4, #12]
 80078c4:	6833      	ldreq	r3, [r6, #0]
 80078c6:	1aed      	subeq	r5, r5, r3
 80078c8:	68a3      	ldr	r3, [r4, #8]
 80078ca:	bf0c      	ite	eq
 80078cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078d0:	2500      	movne	r5, #0
 80078d2:	4293      	cmp	r3, r2
 80078d4:	bfc4      	itt	gt
 80078d6:	1a9b      	subgt	r3, r3, r2
 80078d8:	18ed      	addgt	r5, r5, r3
 80078da:	2600      	movs	r6, #0
 80078dc:	341a      	adds	r4, #26
 80078de:	42b5      	cmp	r5, r6
 80078e0:	d11a      	bne.n	8007918 <_printf_common+0xc8>
 80078e2:	2000      	movs	r0, #0
 80078e4:	e008      	b.n	80078f8 <_printf_common+0xa8>
 80078e6:	2301      	movs	r3, #1
 80078e8:	4652      	mov	r2, sl
 80078ea:	4641      	mov	r1, r8
 80078ec:	4638      	mov	r0, r7
 80078ee:	47c8      	blx	r9
 80078f0:	3001      	adds	r0, #1
 80078f2:	d103      	bne.n	80078fc <_printf_common+0xac>
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295
 80078f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fc:	3501      	adds	r5, #1
 80078fe:	e7c6      	b.n	800788e <_printf_common+0x3e>
 8007900:	18e1      	adds	r1, r4, r3
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	2030      	movs	r0, #48	@ 0x30
 8007906:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800790a:	4422      	add	r2, r4
 800790c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007910:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007914:	3302      	adds	r3, #2
 8007916:	e7c7      	b.n	80078a8 <_printf_common+0x58>
 8007918:	2301      	movs	r3, #1
 800791a:	4622      	mov	r2, r4
 800791c:	4641      	mov	r1, r8
 800791e:	4638      	mov	r0, r7
 8007920:	47c8      	blx	r9
 8007922:	3001      	adds	r0, #1
 8007924:	d0e6      	beq.n	80078f4 <_printf_common+0xa4>
 8007926:	3601      	adds	r6, #1
 8007928:	e7d9      	b.n	80078de <_printf_common+0x8e>
	...

0800792c <_printf_i>:
 800792c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007930:	7e0f      	ldrb	r7, [r1, #24]
 8007932:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007934:	2f78      	cmp	r7, #120	@ 0x78
 8007936:	4691      	mov	r9, r2
 8007938:	4680      	mov	r8, r0
 800793a:	460c      	mov	r4, r1
 800793c:	469a      	mov	sl, r3
 800793e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007942:	d807      	bhi.n	8007954 <_printf_i+0x28>
 8007944:	2f62      	cmp	r7, #98	@ 0x62
 8007946:	d80a      	bhi.n	800795e <_printf_i+0x32>
 8007948:	2f00      	cmp	r7, #0
 800794a:	f000 80d1 	beq.w	8007af0 <_printf_i+0x1c4>
 800794e:	2f58      	cmp	r7, #88	@ 0x58
 8007950:	f000 80b8 	beq.w	8007ac4 <_printf_i+0x198>
 8007954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007958:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800795c:	e03a      	b.n	80079d4 <_printf_i+0xa8>
 800795e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007962:	2b15      	cmp	r3, #21
 8007964:	d8f6      	bhi.n	8007954 <_printf_i+0x28>
 8007966:	a101      	add	r1, pc, #4	@ (adr r1, 800796c <_printf_i+0x40>)
 8007968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800796c:	080079c5 	.word	0x080079c5
 8007970:	080079d9 	.word	0x080079d9
 8007974:	08007955 	.word	0x08007955
 8007978:	08007955 	.word	0x08007955
 800797c:	08007955 	.word	0x08007955
 8007980:	08007955 	.word	0x08007955
 8007984:	080079d9 	.word	0x080079d9
 8007988:	08007955 	.word	0x08007955
 800798c:	08007955 	.word	0x08007955
 8007990:	08007955 	.word	0x08007955
 8007994:	08007955 	.word	0x08007955
 8007998:	08007ad7 	.word	0x08007ad7
 800799c:	08007a03 	.word	0x08007a03
 80079a0:	08007a91 	.word	0x08007a91
 80079a4:	08007955 	.word	0x08007955
 80079a8:	08007955 	.word	0x08007955
 80079ac:	08007af9 	.word	0x08007af9
 80079b0:	08007955 	.word	0x08007955
 80079b4:	08007a03 	.word	0x08007a03
 80079b8:	08007955 	.word	0x08007955
 80079bc:	08007955 	.word	0x08007955
 80079c0:	08007a99 	.word	0x08007a99
 80079c4:	6833      	ldr	r3, [r6, #0]
 80079c6:	1d1a      	adds	r2, r3, #4
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6032      	str	r2, [r6, #0]
 80079cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079d4:	2301      	movs	r3, #1
 80079d6:	e09c      	b.n	8007b12 <_printf_i+0x1e6>
 80079d8:	6833      	ldr	r3, [r6, #0]
 80079da:	6820      	ldr	r0, [r4, #0]
 80079dc:	1d19      	adds	r1, r3, #4
 80079de:	6031      	str	r1, [r6, #0]
 80079e0:	0606      	lsls	r6, r0, #24
 80079e2:	d501      	bpl.n	80079e8 <_printf_i+0xbc>
 80079e4:	681d      	ldr	r5, [r3, #0]
 80079e6:	e003      	b.n	80079f0 <_printf_i+0xc4>
 80079e8:	0645      	lsls	r5, r0, #25
 80079ea:	d5fb      	bpl.n	80079e4 <_printf_i+0xb8>
 80079ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079f0:	2d00      	cmp	r5, #0
 80079f2:	da03      	bge.n	80079fc <_printf_i+0xd0>
 80079f4:	232d      	movs	r3, #45	@ 0x2d
 80079f6:	426d      	negs	r5, r5
 80079f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079fc:	4858      	ldr	r0, [pc, #352]	@ (8007b60 <_printf_i+0x234>)
 80079fe:	230a      	movs	r3, #10
 8007a00:	e011      	b.n	8007a26 <_printf_i+0xfa>
 8007a02:	6821      	ldr	r1, [r4, #0]
 8007a04:	6833      	ldr	r3, [r6, #0]
 8007a06:	0608      	lsls	r0, r1, #24
 8007a08:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a0c:	d402      	bmi.n	8007a14 <_printf_i+0xe8>
 8007a0e:	0649      	lsls	r1, r1, #25
 8007a10:	bf48      	it	mi
 8007a12:	b2ad      	uxthmi	r5, r5
 8007a14:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a16:	4852      	ldr	r0, [pc, #328]	@ (8007b60 <_printf_i+0x234>)
 8007a18:	6033      	str	r3, [r6, #0]
 8007a1a:	bf14      	ite	ne
 8007a1c:	230a      	movne	r3, #10
 8007a1e:	2308      	moveq	r3, #8
 8007a20:	2100      	movs	r1, #0
 8007a22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a26:	6866      	ldr	r6, [r4, #4]
 8007a28:	60a6      	str	r6, [r4, #8]
 8007a2a:	2e00      	cmp	r6, #0
 8007a2c:	db05      	blt.n	8007a3a <_printf_i+0x10e>
 8007a2e:	6821      	ldr	r1, [r4, #0]
 8007a30:	432e      	orrs	r6, r5
 8007a32:	f021 0104 	bic.w	r1, r1, #4
 8007a36:	6021      	str	r1, [r4, #0]
 8007a38:	d04b      	beq.n	8007ad2 <_printf_i+0x1a6>
 8007a3a:	4616      	mov	r6, r2
 8007a3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a40:	fb03 5711 	mls	r7, r3, r1, r5
 8007a44:	5dc7      	ldrb	r7, [r0, r7]
 8007a46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a4a:	462f      	mov	r7, r5
 8007a4c:	42bb      	cmp	r3, r7
 8007a4e:	460d      	mov	r5, r1
 8007a50:	d9f4      	bls.n	8007a3c <_printf_i+0x110>
 8007a52:	2b08      	cmp	r3, #8
 8007a54:	d10b      	bne.n	8007a6e <_printf_i+0x142>
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	07df      	lsls	r7, r3, #31
 8007a5a:	d508      	bpl.n	8007a6e <_printf_i+0x142>
 8007a5c:	6923      	ldr	r3, [r4, #16]
 8007a5e:	6861      	ldr	r1, [r4, #4]
 8007a60:	4299      	cmp	r1, r3
 8007a62:	bfde      	ittt	le
 8007a64:	2330      	movle	r3, #48	@ 0x30
 8007a66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a6e:	1b92      	subs	r2, r2, r6
 8007a70:	6122      	str	r2, [r4, #16]
 8007a72:	f8cd a000 	str.w	sl, [sp]
 8007a76:	464b      	mov	r3, r9
 8007a78:	aa03      	add	r2, sp, #12
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	4640      	mov	r0, r8
 8007a7e:	f7ff fee7 	bl	8007850 <_printf_common>
 8007a82:	3001      	adds	r0, #1
 8007a84:	d14a      	bne.n	8007b1c <_printf_i+0x1f0>
 8007a86:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8a:	b004      	add	sp, #16
 8007a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	f043 0320 	orr.w	r3, r3, #32
 8007a96:	6023      	str	r3, [r4, #0]
 8007a98:	4832      	ldr	r0, [pc, #200]	@ (8007b64 <_printf_i+0x238>)
 8007a9a:	2778      	movs	r7, #120	@ 0x78
 8007a9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	6831      	ldr	r1, [r6, #0]
 8007aa4:	061f      	lsls	r7, r3, #24
 8007aa6:	f851 5b04 	ldr.w	r5, [r1], #4
 8007aaa:	d402      	bmi.n	8007ab2 <_printf_i+0x186>
 8007aac:	065f      	lsls	r7, r3, #25
 8007aae:	bf48      	it	mi
 8007ab0:	b2ad      	uxthmi	r5, r5
 8007ab2:	6031      	str	r1, [r6, #0]
 8007ab4:	07d9      	lsls	r1, r3, #31
 8007ab6:	bf44      	itt	mi
 8007ab8:	f043 0320 	orrmi.w	r3, r3, #32
 8007abc:	6023      	strmi	r3, [r4, #0]
 8007abe:	b11d      	cbz	r5, 8007ac8 <_printf_i+0x19c>
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	e7ad      	b.n	8007a20 <_printf_i+0xf4>
 8007ac4:	4826      	ldr	r0, [pc, #152]	@ (8007b60 <_printf_i+0x234>)
 8007ac6:	e7e9      	b.n	8007a9c <_printf_i+0x170>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	f023 0320 	bic.w	r3, r3, #32
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	e7f6      	b.n	8007ac0 <_printf_i+0x194>
 8007ad2:	4616      	mov	r6, r2
 8007ad4:	e7bd      	b.n	8007a52 <_printf_i+0x126>
 8007ad6:	6833      	ldr	r3, [r6, #0]
 8007ad8:	6825      	ldr	r5, [r4, #0]
 8007ada:	6961      	ldr	r1, [r4, #20]
 8007adc:	1d18      	adds	r0, r3, #4
 8007ade:	6030      	str	r0, [r6, #0]
 8007ae0:	062e      	lsls	r6, r5, #24
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	d501      	bpl.n	8007aea <_printf_i+0x1be>
 8007ae6:	6019      	str	r1, [r3, #0]
 8007ae8:	e002      	b.n	8007af0 <_printf_i+0x1c4>
 8007aea:	0668      	lsls	r0, r5, #25
 8007aec:	d5fb      	bpl.n	8007ae6 <_printf_i+0x1ba>
 8007aee:	8019      	strh	r1, [r3, #0]
 8007af0:	2300      	movs	r3, #0
 8007af2:	6123      	str	r3, [r4, #16]
 8007af4:	4616      	mov	r6, r2
 8007af6:	e7bc      	b.n	8007a72 <_printf_i+0x146>
 8007af8:	6833      	ldr	r3, [r6, #0]
 8007afa:	1d1a      	adds	r2, r3, #4
 8007afc:	6032      	str	r2, [r6, #0]
 8007afe:	681e      	ldr	r6, [r3, #0]
 8007b00:	6862      	ldr	r2, [r4, #4]
 8007b02:	2100      	movs	r1, #0
 8007b04:	4630      	mov	r0, r6
 8007b06:	f7f8 fb63 	bl	80001d0 <memchr>
 8007b0a:	b108      	cbz	r0, 8007b10 <_printf_i+0x1e4>
 8007b0c:	1b80      	subs	r0, r0, r6
 8007b0e:	6060      	str	r0, [r4, #4]
 8007b10:	6863      	ldr	r3, [r4, #4]
 8007b12:	6123      	str	r3, [r4, #16]
 8007b14:	2300      	movs	r3, #0
 8007b16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b1a:	e7aa      	b.n	8007a72 <_printf_i+0x146>
 8007b1c:	6923      	ldr	r3, [r4, #16]
 8007b1e:	4632      	mov	r2, r6
 8007b20:	4649      	mov	r1, r9
 8007b22:	4640      	mov	r0, r8
 8007b24:	47d0      	blx	sl
 8007b26:	3001      	adds	r0, #1
 8007b28:	d0ad      	beq.n	8007a86 <_printf_i+0x15a>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	079b      	lsls	r3, r3, #30
 8007b2e:	d413      	bmi.n	8007b58 <_printf_i+0x22c>
 8007b30:	68e0      	ldr	r0, [r4, #12]
 8007b32:	9b03      	ldr	r3, [sp, #12]
 8007b34:	4298      	cmp	r0, r3
 8007b36:	bfb8      	it	lt
 8007b38:	4618      	movlt	r0, r3
 8007b3a:	e7a6      	b.n	8007a8a <_printf_i+0x15e>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	4632      	mov	r2, r6
 8007b40:	4649      	mov	r1, r9
 8007b42:	4640      	mov	r0, r8
 8007b44:	47d0      	blx	sl
 8007b46:	3001      	adds	r0, #1
 8007b48:	d09d      	beq.n	8007a86 <_printf_i+0x15a>
 8007b4a:	3501      	adds	r5, #1
 8007b4c:	68e3      	ldr	r3, [r4, #12]
 8007b4e:	9903      	ldr	r1, [sp, #12]
 8007b50:	1a5b      	subs	r3, r3, r1
 8007b52:	42ab      	cmp	r3, r5
 8007b54:	dcf2      	bgt.n	8007b3c <_printf_i+0x210>
 8007b56:	e7eb      	b.n	8007b30 <_printf_i+0x204>
 8007b58:	2500      	movs	r5, #0
 8007b5a:	f104 0619 	add.w	r6, r4, #25
 8007b5e:	e7f5      	b.n	8007b4c <_printf_i+0x220>
 8007b60:	08008039 	.word	0x08008039
 8007b64:	0800804a 	.word	0x0800804a

08007b68 <__sflush_r>:
 8007b68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b70:	0716      	lsls	r6, r2, #28
 8007b72:	4605      	mov	r5, r0
 8007b74:	460c      	mov	r4, r1
 8007b76:	d454      	bmi.n	8007c22 <__sflush_r+0xba>
 8007b78:	684b      	ldr	r3, [r1, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	dc02      	bgt.n	8007b84 <__sflush_r+0x1c>
 8007b7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	dd48      	ble.n	8007c16 <__sflush_r+0xae>
 8007b84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b86:	2e00      	cmp	r6, #0
 8007b88:	d045      	beq.n	8007c16 <__sflush_r+0xae>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b90:	682f      	ldr	r7, [r5, #0]
 8007b92:	6a21      	ldr	r1, [r4, #32]
 8007b94:	602b      	str	r3, [r5, #0]
 8007b96:	d030      	beq.n	8007bfa <__sflush_r+0x92>
 8007b98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	0759      	lsls	r1, r3, #29
 8007b9e:	d505      	bpl.n	8007bac <__sflush_r+0x44>
 8007ba0:	6863      	ldr	r3, [r4, #4]
 8007ba2:	1ad2      	subs	r2, r2, r3
 8007ba4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ba6:	b10b      	cbz	r3, 8007bac <__sflush_r+0x44>
 8007ba8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007baa:	1ad2      	subs	r2, r2, r3
 8007bac:	2300      	movs	r3, #0
 8007bae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bb0:	6a21      	ldr	r1, [r4, #32]
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	47b0      	blx	r6
 8007bb6:	1c43      	adds	r3, r0, #1
 8007bb8:	89a3      	ldrh	r3, [r4, #12]
 8007bba:	d106      	bne.n	8007bca <__sflush_r+0x62>
 8007bbc:	6829      	ldr	r1, [r5, #0]
 8007bbe:	291d      	cmp	r1, #29
 8007bc0:	d82b      	bhi.n	8007c1a <__sflush_r+0xb2>
 8007bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8007c6c <__sflush_r+0x104>)
 8007bc4:	40ca      	lsrs	r2, r1
 8007bc6:	07d6      	lsls	r6, r2, #31
 8007bc8:	d527      	bpl.n	8007c1a <__sflush_r+0xb2>
 8007bca:	2200      	movs	r2, #0
 8007bcc:	6062      	str	r2, [r4, #4]
 8007bce:	04d9      	lsls	r1, r3, #19
 8007bd0:	6922      	ldr	r2, [r4, #16]
 8007bd2:	6022      	str	r2, [r4, #0]
 8007bd4:	d504      	bpl.n	8007be0 <__sflush_r+0x78>
 8007bd6:	1c42      	adds	r2, r0, #1
 8007bd8:	d101      	bne.n	8007bde <__sflush_r+0x76>
 8007bda:	682b      	ldr	r3, [r5, #0]
 8007bdc:	b903      	cbnz	r3, 8007be0 <__sflush_r+0x78>
 8007bde:	6560      	str	r0, [r4, #84]	@ 0x54
 8007be0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007be2:	602f      	str	r7, [r5, #0]
 8007be4:	b1b9      	cbz	r1, 8007c16 <__sflush_r+0xae>
 8007be6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bea:	4299      	cmp	r1, r3
 8007bec:	d002      	beq.n	8007bf4 <__sflush_r+0x8c>
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f7ff fbf4 	bl	80073dc <_free_r>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bf8:	e00d      	b.n	8007c16 <__sflush_r+0xae>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b0      	blx	r6
 8007c00:	4602      	mov	r2, r0
 8007c02:	1c50      	adds	r0, r2, #1
 8007c04:	d1c9      	bne.n	8007b9a <__sflush_r+0x32>
 8007c06:	682b      	ldr	r3, [r5, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d0c6      	beq.n	8007b9a <__sflush_r+0x32>
 8007c0c:	2b1d      	cmp	r3, #29
 8007c0e:	d001      	beq.n	8007c14 <__sflush_r+0xac>
 8007c10:	2b16      	cmp	r3, #22
 8007c12:	d11e      	bne.n	8007c52 <__sflush_r+0xea>
 8007c14:	602f      	str	r7, [r5, #0]
 8007c16:	2000      	movs	r0, #0
 8007c18:	e022      	b.n	8007c60 <__sflush_r+0xf8>
 8007c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c1e:	b21b      	sxth	r3, r3
 8007c20:	e01b      	b.n	8007c5a <__sflush_r+0xf2>
 8007c22:	690f      	ldr	r7, [r1, #16]
 8007c24:	2f00      	cmp	r7, #0
 8007c26:	d0f6      	beq.n	8007c16 <__sflush_r+0xae>
 8007c28:	0793      	lsls	r3, r2, #30
 8007c2a:	680e      	ldr	r6, [r1, #0]
 8007c2c:	bf08      	it	eq
 8007c2e:	694b      	ldreq	r3, [r1, #20]
 8007c30:	600f      	str	r7, [r1, #0]
 8007c32:	bf18      	it	ne
 8007c34:	2300      	movne	r3, #0
 8007c36:	eba6 0807 	sub.w	r8, r6, r7
 8007c3a:	608b      	str	r3, [r1, #8]
 8007c3c:	f1b8 0f00 	cmp.w	r8, #0
 8007c40:	dde9      	ble.n	8007c16 <__sflush_r+0xae>
 8007c42:	6a21      	ldr	r1, [r4, #32]
 8007c44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c46:	4643      	mov	r3, r8
 8007c48:	463a      	mov	r2, r7
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	47b0      	blx	r6
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	dc08      	bgt.n	8007c64 <__sflush_r+0xfc>
 8007c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c5a:	81a3      	strh	r3, [r4, #12]
 8007c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c64:	4407      	add	r7, r0
 8007c66:	eba8 0800 	sub.w	r8, r8, r0
 8007c6a:	e7e7      	b.n	8007c3c <__sflush_r+0xd4>
 8007c6c:	20400001 	.word	0x20400001

08007c70 <_fflush_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	690b      	ldr	r3, [r1, #16]
 8007c74:	4605      	mov	r5, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	b913      	cbnz	r3, 8007c80 <_fflush_r+0x10>
 8007c7a:	2500      	movs	r5, #0
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	b118      	cbz	r0, 8007c8a <_fflush_r+0x1a>
 8007c82:	6a03      	ldr	r3, [r0, #32]
 8007c84:	b90b      	cbnz	r3, 8007c8a <_fflush_r+0x1a>
 8007c86:	f7ff f9a1 	bl	8006fcc <__sinit>
 8007c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0f3      	beq.n	8007c7a <_fflush_r+0xa>
 8007c92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c94:	07d0      	lsls	r0, r2, #31
 8007c96:	d404      	bmi.n	8007ca2 <_fflush_r+0x32>
 8007c98:	0599      	lsls	r1, r3, #22
 8007c9a:	d402      	bmi.n	8007ca2 <_fflush_r+0x32>
 8007c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c9e:	f7ff fb8c 	bl	80073ba <__retarget_lock_acquire_recursive>
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	f7ff ff5f 	bl	8007b68 <__sflush_r>
 8007caa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cac:	07da      	lsls	r2, r3, #31
 8007cae:	4605      	mov	r5, r0
 8007cb0:	d4e4      	bmi.n	8007c7c <_fflush_r+0xc>
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	059b      	lsls	r3, r3, #22
 8007cb6:	d4e1      	bmi.n	8007c7c <_fflush_r+0xc>
 8007cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cba:	f7ff fb7f 	bl	80073bc <__retarget_lock_release_recursive>
 8007cbe:	e7dd      	b.n	8007c7c <_fflush_r+0xc>

08007cc0 <__swhatbuf_r>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc8:	2900      	cmp	r1, #0
 8007cca:	b096      	sub	sp, #88	@ 0x58
 8007ccc:	4615      	mov	r5, r2
 8007cce:	461e      	mov	r6, r3
 8007cd0:	da0d      	bge.n	8007cee <__swhatbuf_r+0x2e>
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007cd8:	f04f 0100 	mov.w	r1, #0
 8007cdc:	bf14      	ite	ne
 8007cde:	2340      	movne	r3, #64	@ 0x40
 8007ce0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	6031      	str	r1, [r6, #0]
 8007ce8:	602b      	str	r3, [r5, #0]
 8007cea:	b016      	add	sp, #88	@ 0x58
 8007cec:	bd70      	pop	{r4, r5, r6, pc}
 8007cee:	466a      	mov	r2, sp
 8007cf0:	f000 f848 	bl	8007d84 <_fstat_r>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	dbec      	blt.n	8007cd2 <__swhatbuf_r+0x12>
 8007cf8:	9901      	ldr	r1, [sp, #4]
 8007cfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007cfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d02:	4259      	negs	r1, r3
 8007d04:	4159      	adcs	r1, r3
 8007d06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d0a:	e7eb      	b.n	8007ce4 <__swhatbuf_r+0x24>

08007d0c <__smakebuf_r>:
 8007d0c:	898b      	ldrh	r3, [r1, #12]
 8007d0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d10:	079d      	lsls	r5, r3, #30
 8007d12:	4606      	mov	r6, r0
 8007d14:	460c      	mov	r4, r1
 8007d16:	d507      	bpl.n	8007d28 <__smakebuf_r+0x1c>
 8007d18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	6123      	str	r3, [r4, #16]
 8007d20:	2301      	movs	r3, #1
 8007d22:	6163      	str	r3, [r4, #20]
 8007d24:	b003      	add	sp, #12
 8007d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d28:	ab01      	add	r3, sp, #4
 8007d2a:	466a      	mov	r2, sp
 8007d2c:	f7ff ffc8 	bl	8007cc0 <__swhatbuf_r>
 8007d30:	9f00      	ldr	r7, [sp, #0]
 8007d32:	4605      	mov	r5, r0
 8007d34:	4639      	mov	r1, r7
 8007d36:	4630      	mov	r0, r6
 8007d38:	f7ff fbbc 	bl	80074b4 <_malloc_r>
 8007d3c:	b948      	cbnz	r0, 8007d52 <__smakebuf_r+0x46>
 8007d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d42:	059a      	lsls	r2, r3, #22
 8007d44:	d4ee      	bmi.n	8007d24 <__smakebuf_r+0x18>
 8007d46:	f023 0303 	bic.w	r3, r3, #3
 8007d4a:	f043 0302 	orr.w	r3, r3, #2
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	e7e2      	b.n	8007d18 <__smakebuf_r+0xc>
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	6020      	str	r0, [r4, #0]
 8007d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d5a:	81a3      	strh	r3, [r4, #12]
 8007d5c:	9b01      	ldr	r3, [sp, #4]
 8007d5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d62:	b15b      	cbz	r3, 8007d7c <__smakebuf_r+0x70>
 8007d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d68:	4630      	mov	r0, r6
 8007d6a:	f000 f81d 	bl	8007da8 <_isatty_r>
 8007d6e:	b128      	cbz	r0, 8007d7c <__smakebuf_r+0x70>
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	f023 0303 	bic.w	r3, r3, #3
 8007d76:	f043 0301 	orr.w	r3, r3, #1
 8007d7a:	81a3      	strh	r3, [r4, #12]
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	431d      	orrs	r5, r3
 8007d80:	81a5      	strh	r5, [r4, #12]
 8007d82:	e7cf      	b.n	8007d24 <__smakebuf_r+0x18>

08007d84 <_fstat_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4d07      	ldr	r5, [pc, #28]	@ (8007da4 <_fstat_r+0x20>)
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	4611      	mov	r1, r2
 8007d90:	602b      	str	r3, [r5, #0]
 8007d92:	f7fa fd5c 	bl	800284e <_fstat>
 8007d96:	1c43      	adds	r3, r0, #1
 8007d98:	d102      	bne.n	8007da0 <_fstat_r+0x1c>
 8007d9a:	682b      	ldr	r3, [r5, #0]
 8007d9c:	b103      	cbz	r3, 8007da0 <_fstat_r+0x1c>
 8007d9e:	6023      	str	r3, [r4, #0]
 8007da0:	bd38      	pop	{r3, r4, r5, pc}
 8007da2:	bf00      	nop
 8007da4:	200024c0 	.word	0x200024c0

08007da8 <_isatty_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d06      	ldr	r5, [pc, #24]	@ (8007dc4 <_isatty_r+0x1c>)
 8007dac:	2300      	movs	r3, #0
 8007dae:	4604      	mov	r4, r0
 8007db0:	4608      	mov	r0, r1
 8007db2:	602b      	str	r3, [r5, #0]
 8007db4:	f7fa fd5b 	bl	800286e <_isatty>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_isatty_r+0x1a>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_isatty_r+0x1a>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	200024c0 	.word	0x200024c0

08007dc8 <_sbrk_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d06      	ldr	r5, [pc, #24]	@ (8007de4 <_sbrk_r+0x1c>)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	602b      	str	r3, [r5, #0]
 8007dd4:	f7fa fd64 	bl	80028a0 <_sbrk>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_sbrk_r+0x1a>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_sbrk_r+0x1a>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	200024c0 	.word	0x200024c0

08007de8 <_init>:
 8007de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dea:	bf00      	nop
 8007dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dee:	bc08      	pop	{r3}
 8007df0:	469e      	mov	lr, r3
 8007df2:	4770      	bx	lr

08007df4 <_fini>:
 8007df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df6:	bf00      	nop
 8007df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dfa:	bc08      	pop	{r3}
 8007dfc:	469e      	mov	lr, r3
 8007dfe:	4770      	bx	lr
